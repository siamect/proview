/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_post_h
#define rt_post_h

#include <map>
#include "rt_mh.h"
#include "rt_mh_outunit.h"
#include "co_user.h"
#include "pwr_baseclasses.h"

typedef enum _pwr_ePostType
{
  pwr_ePostType_Mail,
  pwr_ePostType_SMS
} pwr_ePostType;

/*! \file rt_post.h
    \brief Contains the rt_post class. */
/*! \addtogroup rt */
/*@{*/

class rt_post {
  public:
  rt_post();
  void init(qcom_sQid* qid);
  void open();
  void close();
  void scan();
  double scantime()
  {
    return scan_time;
  }
  void format_cmd(char* cmd, char* format, char* address, char* text);
  void replace_symbol(char* outstr, char* instr);
  void email_register(mh_sEventId* id);
  void sms_register(mh_sEventId* id);
  int email_check(mh_sEventId* id);
  int sms_check(mh_sEventId* id);
  int check_dispatch();
  void format_sms_text(mh_sMessage* MsgP, char* text, unsigned int size);
  void format_email_text(mh_sMessage* MsgP, char* text, unsigned int size);

  static pwr_tStatus mh_ack_bc(mh_sAck* MsgP);
  static pwr_tStatus mh_return_bc(mh_sReturn* MsgP);
  static pwr_tStatus mh_alarm_bc(mh_sMessage* MsgP);
  static pwr_tStatus mh_block_bc(mh_sBlock* MsgP);
  static pwr_tStatus mh_cancel_bc(mh_sReturn* MsgP);
  static pwr_tStatus mh_info_bc(mh_sMessage* MsgP);
  static pwr_tStatus mh_clear_alarmlist_bc(pwr_tNodeIndex nix);
  static pwr_tStatus mh_clear_blocklist_bc(pwr_tNodeIndex nix);
  static std::map<pid_t, pwr_ePostType> dispatchProcesses;

  double scan_time;
  pwr_sClass_PostConfig* conf;
  GeUser* udb;
  char nodename[80];
  char systemgroup[80];
  mh_sEventId sent_sms[200];
  mh_sEventId sent_email[200];
  unsigned int sent_sms_startidx;
  unsigned int sent_sms_endidx;
  unsigned int sent_email_startidx;
  unsigned int sent_email_endidx;
};

/*@}*/
#endif
