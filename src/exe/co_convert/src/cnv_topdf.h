/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cnv_topdf_h
#define cnv_topdf_h

/* cnv_topdf.h -- Postscript output */

#include <fstream>

#include "cnv_tops.h"

#undef ps_cPageHeight
#define ps_cPageHeight 842
#undef ps_cPageWidth
#define ps_cPageWidth 595

typedef enum {
  pdf_eObjType_Catalog,
  pdf_eObjType_Page,
  pdf_eObjType_Pages,
  pdf_eObjType_Outline,
  pdf_eObjType_OutlineO,
  pdf_eObjType_Content,
  pdf_eObjType_Process,
  pdf_eObjType_Font,
  pdf_eObjType_Resource,
  pdf_eObjType_Image
} pdf_eObjType;

class CnvToPdf;

class CnvPdfObj {
  public:
  CnvPdfObj(CnvToPdf* otopdf, pdf_eObjType otype, int onumber)
      : topdf(otopdf), type(otype), number(onumber), length(0), offset(0),
        start(0), parent(0), first(0), last(0), next(0), prev(0), dest(0),
        count(0), resource(-1), xobject_cnt(0)
  {
    strcpy(fontname, "");
    strcpy(text, "");
  }

  void print_begin();
  void print_end();
  int print_image();

  CnvToPdf* topdf;
  pdf_eObjType type;
  int number;
  int length;
  int offset;
  int start;
  char fontname[80];
  int parent;
  int first;
  int last;
  int next;
  int prev;
  int dest;
  int count;
  char text[200];
  int resource;
  int xobject_cnt;
  int xobject[40];
};

class CnvToPdf : public CnvToPs {
  public:
  CnvToPdf() : CnvToPs(), prev_ci(0), xref_offset(0), im_cnt(0), use_outlines(1) {}
  ~CnvToPdf();

  void close();
  void print_text(
      const char* text, CnvStyle& style, int mode = ps_mPrintMode_Pos);
  void draw_rect(double lw, double x, double y, double w, double h);
  void draw_arc(double lw, double x, double y, double w, double h, int angle1,
      int angle2);
  void draw_line(double lw, double x1, double y1, double x2, double y2,
      int dashed, int gray);
  void draw_text(double x, double y, char* text, int bold, double size);
  void draw_arrow(double x1, double y1, double x2, double y2, double x3,
      double y3, int gray);
  void print_pagebreak(int print_num);
  void print_content();
  void print_horizontal_line();
  int print_image(const char* filename);
  int print_image_inline(const char* filename);
  void set_cf(int val)
  {
  }
  void set_ci(int val)
  {
    prev_ci = ci;
    ci = val;
  }
  void open();
  void set_useoutlines(int u)
  {
    use_outlines = u;
  }
  char* fontname(CnvStyle& style);

  std::vector<CnvPdfObj> v_pages;
  std::vector<CnvPdfObj> v_outline;
  std::vector<CnvPdfObj> v_content;
  std::vector<CnvPdfObj> v_font;
  std::vector<CnvPdfObj> v_resource;
  std::vector<CnvPdfObj> v_image;
  int prev_ci;
  int start_offset;
  int xref_offset;
  int im_cnt;
  int use_outlines;
};

#endif
