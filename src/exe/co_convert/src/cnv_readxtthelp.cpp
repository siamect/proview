/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* cnv_readxtthelp.cpp --
   Convert xtt help file to html. */

/*_Include files_________________________________________________________*/

#include <string.h>
#include <stdlib.h>

extern "C" {
#include "co_cdh.h"
#include "co_dcli.h"
}

#include "pwr_names.h"
#include "cnv_xtthelpto.h"

CnvReadXtthelp::CnvReadXtthelp(
    char* x_name, char* x_directory, CnvXtthelpTo* to)
    : xtthelpto(to)
{
  char* s;

  strcpy(filename, x_name);
  if ((s = strrchr(x_name, '/')))
    strcpy(name, s + 1);
  else
    strcpy(name, x_name);
  if ((s = strrchr(name, '.')))
    *s = 0;
  strcpy(directory, x_directory);
}

void* help_insert_cb(void* ctx, navh_eItemType item_type, const char* text1,
    const char* text2, const char* text3, const char* link,
    const char* link_bookmark, const char* file_name, navh_eHelpFile file_type,
    int help_index, const char* bookmark, int coding)
{
  CnvReadXtthelp* xh = (CnvReadXtthelp*)ctx;

  return xh->xtthelpto->insert(item_type, text1, text2, text3, link,
      link_bookmark, file_name, file_type, help_index, bookmark, coding);
}

int CnvReadXtthelp::read_xtthelp()
{
  int sts;
  void* bookmark_node;

  if (xtthelpto->confpass()) {
    xtthelpto->set_confpass(true);
    NavHelp* navhelp = new NavHelp(
        (void*)this, pwr_cNameBaseWttHelp, pwr_cNameProjectXttHelp);
    navhelp->insert_cb = help_insert_cb;
    navhelp->set_propagate(0); // Don't print include files

    sts = navhelp->help(
        NULL, "", navh_eHelpFile_Other, filename, &bookmark_node);
    if (EVEN(sts))
      return sts;
    delete navhelp;
    xtthelpto->set_confpass(false);
  }
  NavHelp* navhelp
      = new NavHelp((void*)this, pwr_cNameBaseWttHelp, pwr_cNameProjectXttHelp);
  navhelp->insert_cb = help_insert_cb;
  navhelp->set_propagate(0); // Don't print include files
  sts = navhelp->help(NULL, "", navh_eHelpFile_Other, filename, &bookmark_node);
  if (EVEN(sts))
    return sts;
  delete navhelp;

  return 1;
}
