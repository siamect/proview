/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

extern "C" {
#include "co_cdh.h"
#include "co_time.h"
#include "co_dcli.h"
}
#include "co_lng.h"
#include "co_string.h"

#include "cnv_wbltohtml.h"
#include "cnv_wbltoh.h"
#include "cnv_readsrc.h"

int CnvWblToHtml::init(char* first)
{
  pwr_tFileName fname;
  pwr_tFileName gname;
  char allclasses_name[80];
  char timestr[80];

  time_AtoAscii(0, time_eFormat_DateAndTime, timestr, sizeof(timestr));
  strcpy(html_first, ctx->rw->volume_name);
  strcat(html_first, "_");
  strcat(html_first, first);
  str_ToLower(html_first, html_first);

  strcpy(allclasses_name, ctx->rw->volume_name);
  strcat(allclasses_name, "_allclasses.html");
  str_ToLower(allclasses_name, allclasses_name);

  // Create index file
  {
    strcpy(fname, ctx->dir);
    strcat(fname, ctx->rw->volume_name);
    strcat(fname, "_index.html");

    std::ofstream fp(fname);

    // Get group menu name
    if (ctx->setup->group_cnt) {
      strcpy(gname, CnvCtx::low(ctx->rw->volume_name));
      strcat(gname, "_menu_group.html");
    }

    fp << "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 "
          "Transitional//EN\"\"http://www.w3.org/TR/REC-html40/loose.dtd>\n"
       << "<!-- Generated by co_convert " << timestr << "  -->\n"
       << "<HTML>\n"
       << "<HEAD>\n"
       << "<META http-equiv=\"Content-Type\" content=\"text/html; "
          "charset=ISO-8859-1\">\n"
       << "<TITLE>\n"
       << "Class Menu\n"
       << "</TITLE>\n"
       << "<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">\n"
       << "</HEAD>\n"
       << "<FRAMESET cols=\"20%,80%\">\n";
    if (ctx->setup->group_cnt)
      fp << "<FRAMESET rows=\"20%,80%\">\n"
         << "<FRAME src=\"" << gname << "\" name=\"groupFrame\">\n"
         << "<FRAME src=\"" << allclasses_name << "\" name=\"menuFrame\">\n"
         << "</FRAMESET>\n";
    else
      fp << "<FRAME src=\"" << allclasses_name << "\" name=\"menuFrame\">\n";

    fp << "<FRAME src=\"" << html_first << ".html\" name=\"classFrame\">\n"
       << "</FRAMESET>\n"
       << "<NOFRAMES>\n"
       << "<H2>\n"
       << "Frame Alert</H2>\n"
       <<

        "<P>\n"
       << "This document is designed to be viewed using the frames feature. If "
          "you see this message, you are using a non-frame-capable web "
          "client.\n"
       << "<BR>\n"
       << "Link to <A HREF=\"" << html_first
       << ".html\">Non-frame version.</A></NOFRAMES>\n"
       << "</HTML>\n";
  }

  // Create js index file
  strcpy(fname, ctx->dir);
  strcat(fname, ctx->rw->volume_name);
  strcat(fname, "_allclasses.jsf");

  fp_js_all.open(fname);
  js_all_first = true;
  fp_js_all << "function " << ctx->rw->volume_name << "_AllClasses( parent)\n"
            << "{\n"
            << "parent.addChildren([\n";

  // Create group menu file
  if (ctx->setup->group_cnt) {
    strcpy(fname, ctx->dir);
    strcat(fname, gname);

    std::ofstream fp(fname);

    fp << "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 "
          "Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">\n"
       << "<!-- Generated by co_convert " << timestr << "  -->\n"
       << "<HTML>\n"
       << "<HEAD>\n"
       << "<META http-equiv=\"Content-Type\" content=\"text/html; "
          "charset=ISO-8859-1\">\n"
       << "<TITLE>\n"
       << "Groups\n"
       << "</TITLE>\n"
       << "<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">\n"
       << "</HEAD>\n"
       << "<BODY BGCOLOR=\"white\">\n"
       << "<FONT size=\"+1\" CLASS=\"FrameHeadingFont\">\n"
       << "<B>Groups</B></FONT>\n"
       << "<BR>\n"
       << "\n"
       << "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n"
       << "<TR>\n"
       << "<TD NOWRAP><FONT CLASS=\"FrameItemFont\">  \n";

    // Put index filename in fname
    strcpy(fname, ctx->rw->volume_name);
    strcat(fname, "_index.html");

    fp << "<A HREF=\"" << fname << "\" TARGET=\"_parent\">AllClasses</A>\n"
       << "<BR>\n";

    for (int i = 0; i < ctx->setup->group_cnt; i++) {
      // Put group index filename in fname
      strcpy(fname, ctx->rw->volume_name);
      strcat(fname, "_group_");
      strcat(fname, ctx->setup->groups[i]);
      strcat(fname, "_index.html");

      fp << "<A HREF=\"" << fname << "\" TARGET=\"_parent\">"
         << ctx->setup->groups[i] << "</A>\n"
         << "<BR>\n";
    }

    fp << "</FONT></TD>\n"
       << "</TR>\n"
       << "</TABLE>\n"
       << "\n"
       << "</BODY>\n"
       << "</HTML>\n";
  }

  // Open allclasses file
  strcpy(fname, ctx->dir);
  strcat(fname, allclasses_name);
  fp_html_index.open(fname);

  ctx->set_dependfile(fname);

  fp_html_index
      << "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 "
         "Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">\n"
      << "<!-- Generated by co_convert " << timestr << "  -->\n"
      << "<HTML>\n"
      << "<HEAD>\n"
      << "<META http-equiv=\"Content-Type\" content=\"text/html; "
         "charset=ISO-8859-1\">\n"
      << "<TITLE>\n"
      << "All Classes\n"
      << "</TITLE>\n"
      << "<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">\n"
      << "</HEAD>\n"
      << "<BODY BGCOLOR=\"white\">\n"
      << "<FONT size=\"+1\" CLASS=\"FrameHeadingFont\">\n"
      << "<B>All Classes</B></FONT>\n"
      << "<BR>\n"
      << "\n"
      << "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n"
      << "<TR>\n"
      << "<TD NOWRAP><FONT CLASS=\"FrameItemFont\">  \n";

  // Open one index file for each configured group
  for (int i = 0; i < ctx->setup->group_cnt; i++) {
    // Create index page for each group
    strcpy(fname, ctx->dir);
    strcat(fname, ctx->rw->volume_name);
    strcat(fname, "_group_");
    strcat(fname, ctx->setup->groups[i]);
    strcat(fname, "_index.html");
    {
      std::ofstream fp(fname);

      // Put menu filename in fname
      strcpy(fname, ctx->rw->volume_name);
      strcat(fname, "_group_");
      strcat(fname, ctx->setup->groups[i]);
      strcat(fname, ".html");

      fp << "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 "
            "Transitional//EN\"\"http://www.w3.org/TR/REC-html40/loose.dtd>\n"
         << "<!-- Generated by co_convert " << timestr << "  -->\n"
         << "<HTML>\n"
         << "<HEAD>\n"
         << "<META http-equiv=\"Content-Type\" content=\"text/html; "
            "charset=ISO-8859-1\">\n"
         << "<TITLE>\n"
         << "Group Menu\n"
         << "</TITLE>\n"
         << "<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">\n"
         << "</HEAD>\n"
         << "<FRAMESET cols=\"20%,80%\">\n"
         << "<FRAMESET rows=\"20%,80%\">\n"
         << "<FRAME src=\"" << gname << "\" name=\"groupFrame\">\n"
         << "<FRAME src=\"" << fname << "\" name=\"menuFrame\">\n"
         << "</FRAMESET>\n";
      if (streq(ctx->setup->groups_startpage[i], ""))
        fp << "<FRAME name=\"classFrame\">\n";
      else
        fp << "<FRAME src=\"" << ctx->setup->groups_startpage[i]
           << "\" name=\"classFrame\">\n";

      fp << "</FRAMESET>\n"
         << "<NOFRAMES>\n"
         << "<H2>\n"
         << "Frame Alert</H2>\n"
         <<

          "<P>\n"
         << "This document is designed to be viewed using the frames feature. "
            "If you see this message, you are using a non-frame-capable web "
            "client.\n"
         << "<BR>\n"
         << "Link to <A HREF=\"" << html_first
         << ".html\">Non-frame version.</A></NOFRAMES>\n"
         << "</HTML>\n";
    }

    // Create menu page
    strcpy(fname, ctx->dir);
    strcat(fname, ctx->rw->volume_name);
    strcat(fname, "_group_");
    strcat(fname, ctx->setup->groups[i]);
    strcat(fname, ".html");
    fp_html_group[i].open(fname);

    strcpy(fname, ctx->dir);
    strcat(fname, ctx->rw->volume_name);
    strcat(fname, "_group_");
    strcat(fname, ctx->setup->groups[i]);
    strcat(fname, ".jsf");
    fp_js_group[i].open(fname);

    fp_html_group[i]
        << "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 "
           "Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">\n"
        << "<!-- Generated by co_convert " << timestr << "  -->\n"
        << "<HTML>\n"
        << "<HEAD>\n"
        << "<META http-equiv=\"Content-Type\" content=\"text/html; "
           "charset=ISO-8859-1\">\n"
        << "<TITLE>\n"
        << ctx->setup->groups[i] << '\n'
        << "</TITLE>\n"
        << "<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">\n"
        << "</HEAD>\n"
        << "<BODY BGCOLOR=\"white\">\n"
        << "<FONT size=\"+1\" CLASS=\"FrameHeadingFont\">\n"
        << "<B>" << ctx->setup->groups[i] << "</B></FONT>\n"
        << "<BR>\n"
        << "\n"
        << "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n"
        << "<TR>\n"
        << "<TD NOWRAP><FONT CLASS=\"FrameItemFont\">  \n";

    js_group_first[i] = true;
    fp_js_group[i] << "function " << ctx->rw->volume_name << "_"
                   << ctx->setup->groups[i] << "(parent)\n"
                   << "{\n"
                   << "parent.addChildren([\n";
  }

  // Create js map for volume
  {
    strcpy(fname, ctx->dir);
    strcat(fname, ctx->rw->volume_name);
    strcat(fname, "_groups.jsf");
    std::ofstream fp(fname);

    fp << "function " << ctx->rw->volume_name << "(parent)\n"
       << "{\n"
       << "  aux = insFld(parent, gFld(\"AllClasses\",\""
       << ctx->rw->volume_name << "_index.html\"))\n"
       << "  " << ctx->rw->volume_name << "_AllClasses(aux)\n";

    for (int i = 0; i < ctx->setup->group_cnt; i++) {
      strcpy(fname, ctx->rw->volume_name);
      strcat(fname, "_group_");
      strcat(fname, ctx->setup->groups[i]);
      strcat(fname, "_index.html");

      fp << "  aux = insFld(parent, gFld(\"" << ctx->setup->groups[i] << "\",\""
         << fname << "\"))\n"
         << "  " << ctx->rw->volume_name << "_" << ctx->setup->groups[i]
         << "(aux)\n";
    }
    fp << "}\n";
  }

  return 1;
}

int CnvWblToHtml::close()
{
  fp_html_index << "</FONT></TD>\n"
                << "</TR>\n"
                << "</TABLE>\n"
                << "\n"
                << "</BODY>\n"
                << "</HTML>\n";
  fp_html_index.close();

  print_all_menu();

  fp_js_all << "])\n"
            << "}\n";
  fp_js_all.close();

  for (int i = 0; i < ctx->setup->group_cnt; i++) {
    fp_html_group[i] << "</FONT></TD>\n"
                     << "</TR>\n"
                     << "</TABLE>\n"
                     << "\n"
                     << "</BODY>\n"
                     << "</HTML>\n";
    fp_html_group[i].close();

    fp_js_group[i] << "])\n"
                   << "}\n";
    fp_js_group[i].close();
  }

  const char* cmd1 = "if [ -e %s/../../orm_menu.js ]; then cat "
                     "%s/*.jsf %s/../../orm_menu.js > %s/menu.js; fi";
  char cmd[sizeof(cmd1) + (sizeof(ctx->dir) - 2) * 4];
  snprintf(cmd, sizeof(cmd), cmd1, ctx->dir, ctx->dir, ctx->dir, ctx->dir);
  system(cmd);

  ctx->print_depend();

  return 1;
}

int CnvWblToHtml::class_exec()
{
  pwr_tFileName fname;
  int i;
  pwr_tFileName html_file_name;
  pwr_tFileName ctree_file;
  char full_class_name[80];
  char ref_name[200];
  pwr_tFileName struct_file;
  pwr_tFileName hpp_file;
  char low_volume_name[80];
  char low_class_name[80];
  char txt[200];
  char timestr[80];
  int lng_sts = 1;

  cdp_created = false;

  if (Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng(ctx->rw->class_name, 0);

  time_AtoAscii(0, time_eFormat_DateAndTime, timestr, sizeof(timestr));

  str_ToLower(low_volume_name, ctx->rw->volume_name);
  str_ToLower(low_class_name, ctx->rw->class_name);

  CnvWblToH::get_filename(ctx->rw, fname, 0);
  CnvReadSrc::filename_to_html(struct_file, fname);

  ctx->hpp = 1;
  CnvWblToH::get_filename(ctx->rw, fname, 1);
  CnvReadSrc::filename_to_html(hpp_file, fname);
  ctx->hpp = 0;

  strcpy(full_class_name, ctx->rw->volume_name);
  strcat(full_class_name, ":");
  strcat(full_class_name, ctx->rw->class_name);

  strcpy(html_file_name, low_volume_name);
  strcat(html_file_name, "_");
  strcat(html_file_name, low_class_name);

  strcpy(ctree_file, low_volume_name);
  strcat(ctree_file, "_");
  strcat(ctree_file, low_class_name);
  strcat(ctree_file, "_ctree.html");

  // Add into index file
  fp_html_index << "<A HREF=\"" << html_file_name
                << ".html\" TARGET=\"classFrame\">" << ctx->rw->class_name
                << "</A>\n"
                << "<BR>\n";

  cnv_mentry mentry;
  strcpy(mentry.name, ctx->rw->class_name);
  strcpy(mentry.file, html_file_name);
  strcat(mentry.file, ".html");
  all_classes.push_back(mentry);

  // Add into group file
  for (int i = 0; i < ctx->rw->doc_group_cnt; i++) {
    for (int j = 0; j < ctx->setup->group_cnt; j++) {
      if (str_NoCaseStrcmp(ctx->rw->doc_groups[i], ctx->setup->groups[j])
          == 0) {
        fp_html_group[j] << "<A HREF=\"" << html_file_name
                         << ".html\" TARGET=\"classFrame\">"
                         << ctx->rw->class_name << "</A>\n"
                         << "<BR>\n";

        if (!js_group_first[j])
          fp_js_group[j] << ",";
        else
          js_group_first[j] = false;
        fp_js_group[j] << "[\"" << ctx->rw->class_name << "\",\""
                       << html_file_name << ".html\"]\n";
      }
    }
  }

  // Create class html file

  strcpy(fname, ctx->dir);
  strcat(fname, html_file_name);
  strcat(fname, ".html");
  fp_html_clf.open(fname);

  fp_tmp.open(cread_cTmpFile1);

  fp_tmp << "<HR><BR>\n"
         << "<A NAME=\"detail\"><H1>Attributes detail</H1></A>\n";

  fp_html_clf
      << "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 "
         "Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">\n"
      << "<!-- Generated by co_convert " << timestr << "  -->\n"
      << "<HTML>\n"
      << "<HEAD>\n"
      << "<META http-equiv=\"Content-Type\" content=\"text/html; "
         "charset=ISO-8859-1\">\n"
      << "<TITLE>\n"
      << "  Class  " << full_class_name << '\n'
      << "</TITLE>\n"
      << "<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">\n"
      << "</HEAD>\n"
      << "<BODY BGCOLOR=\"white\">\n"
      << "\n"
      << "<!-- ========== START OF NAVBAR ========== -->\n"
      << "<A NAME=\"navbar_top\"><!-- --></A>\n"
      << "<TABLE BORDER=\"0\" WIDTH=\"100%\" CELLPADDING=\"1\" "
         "CELLSPACING=\"0\">\n"
      << "<TR>\n"
      << "<TD COLSPAN=2 BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">\n"
      << "<A NAME=\"navbar_top_firstrow\"><FONT  "
         "CLASS=\"NavBarFont1Rev\"><B>Volume "
      << ctx->rw->volume_name << "</B></FONT></A>\n"
      << "</TD>\n"
      << "</TR>\n"
      << '\n'
      << "<TR>\n"
      << "<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\n"
      << "  Attributes: &nbsp;<A HREF=\"#RtBody\">Runtime</A>\n"
      << "&nbsp;|&nbsp;<A HREF=\"#DevBody\">Development</A>\n"
      << "&nbsp;|&nbsp;<A HREF=\"#SysBody\">System</A>\n"
      << "&nbsp;|&nbsp;<A HREF=\"#template\">Template</A>\n"
      << "&nbsp;|&nbsp;<A HREF=\"#detail\">Detail</A>\n"
      << "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C Binding: \n"
      << "&nbsp;<A HREF=\"" << struct_file << "#" << ctx->rw->class_name
      << "\">Struct</A>\n"
      << "&nbsp;|&nbsp<A HREF=\"" << hpp_file << "#" << ctx->rw->class_name
      << "\">Class</A>\n";

  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_code, "")) {
    if (strstr(ctx->rw->doc_code, ".pdf") != 0) {
      strcpy(ref_name, ctx->rw->doc_code);
      fp_html_clf << "&nbsp;|&nbsp;<A HREF=\"" << ref_name << "\">Code</A>\n";
    } else {
      CnvReadSrc::filename_to_html(ref_name, ctx->rw->doc_code);
      fp_html_clf << "&nbsp;|&nbsp;<A HREF=\"" << ref_name << "#"
                  << low_class_name << "\">Code</A>\n";
    }
  }
  fp_html_clf << "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp<A HREF=\"" << ctree_file
              << "\">ClassTree</A>\n";

  fp_html_clf
      << "</FONT></TD>\n"
      << "<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\n"
      << "  <A HREF=\"" << low_volume_name
      << "_index.html\" TARGET=\"_top\"><B>INDEX</B></A>  &nbsp;\n"
      << "&nbsp;<A HREF=\"" << html_file_name
      << ".html\" TARGET=\"_top\"><B>NO INDEX</B></A></FONT></TD>\n"
      << "</TR>\n"
      << "</TABLE>\n"
      << "<!-- =========== END OF NAVBAR =========== -->\n"
      << '\n'
      << "<HR>\n"
      << "<!-- ======== START OF CLASS DATA ======== -->\n"
      << "<H2>\n"
      << "Class " << ctx->rw->class_name << "</H2>\n"
      << "<HR>\n"
      << "<DL>\n";
  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_author, "")) {
    fp_html_clf << "<DT><B>" << Lng::translate("Author")
                << "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
                << ctx->rw->doc_author << "<DT>\n";
  }
  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_creator, "")) {
    fp_html_clf << "<DT><B>" << Lng::translate("Creator")
                << "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" << ctx->rw->doc_creator
                << "<DT>\n";
  }

  if (ctx->rw->doc_fresh && (!streq(ctx->rw->doc_version, "")
                                || !streq(ctx->rw->class_version, ""))) {
    fp_html_clf << "<DT><B>" << Lng::translate("Version")
                << "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
    if (!streq(ctx->rw->doc_version, ""))
      fp_html_clf << ctx->rw->doc_version << "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
    if (!streq(ctx->rw->class_version, ""))
      fp_html_clf << ctx->rw->class_version;
    fp_html_clf << "<DT>\n";
  }
  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_code, "")) {
    if (strstr(ctx->rw->doc_code, ".pdf") != 0) {
      fp_html_clf
          << "<DT><B>" << Lng::translate("Code")
          << "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A HREF=\""
          << ref_name << "\"><FONT size=\"-1\">PlcTemplate</FONT></A><DT>\n";
    } else {
      fp_html_clf
          << "<DT><B>" << Lng::translate("Code")
          << "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A HREF=\""
          << ref_name << "#" << low_class_name << "\"><FONT size=\"-1\">"
          << ctx->rw->doc_code << "</FONT></A><DT>\n";
    }
  }

  fp_html_clf << "<BR><DT><B>" << Lng::translate("Description")
              << "</B><DT><BR>\n"
              << "</DL><DIV ID=\"description\"><PRE>\n";

  if (ctx->rw->doc_fresh) {
    for (i = 0; i < ctx->rw->doc_cnt; i++) {
      str_trim(txt, ctx->rw->doc_text[i]);
      if (str_StartsWith(CnvCtx::low(txt), "@image")) {
        char imagefile[80];

        str_trim(imagefile, txt + 6);
        fp_html_clf << "</PRE><IMG SRC=\"" << imagefile << "\"><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@b")) {
        fp_html_clf << "</PRE><B><FONT SIZE=\"3\">" << txt + 2
                    << "</FONT></B><BR><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@h1")) {
        fp_html_clf << "</PRE><H3>" << txt + 3 << "</H3><BR><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@h2")) {
        fp_html_clf << "</PRE><H4>" << txt + 3 << "</H4><BR><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@i")) {
        fp_html_clf << txt + 2 << '\n';
      } else
        fp_html_clf << ctx->rw->doc_text[i] << '\n';
    }
  }
  fp_html_clf << "</PRE>\n";

  for (i = 0; i < ctx->rw->doc_xlink_cnt; i++) {
    fp_html_clf << "  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\""
                << ctx->rw->doc_xlink_ref[i]
                << "\" TARGET=\"_self\"><FONT size=\"-1\"> "
                << ctx->rw->doc_xlink_text[i] << "</FONT></A><BR>\n";
  }
  for (i = 0; i < ctx->rw->doc_clink_cnt; i++) {
    fp_html_clf << "  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\""
                << ctx->rw->doc_clink_ref[i]
                << "\" TARGET=\"_self\"><FONT size=\"-1\"> "
                << ctx->rw->doc_clink_text[i] << "</FONT></A><BR>\n";
  }
  for (i = 0; i < ctx->rw->doc_link_cnt; i++) {
    fp_html_clf << "  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\""
                << ctx->rw->doc_link_ref[i]
                << "\" TARGET=\"_self\"><FONT size=\"-1\"> "
                << ctx->rw->doc_link_text[i] << "</FONT></A><BR>\n";
  }
  fp_html_clf << "</DIV>\n";
  return 1;
}

int CnvWblToHtml::body_exec()
{
  char struct_name[80];
  pwr_tFileName fname;
  pwr_tFileName struct_file;

  CnvWblToH::get_filename(ctx->rw, fname, 0);
  CnvReadSrc::filename_to_html(struct_file, fname);

  if (streq(CnvCtx::low(ctx->rw->body_name), "devbody"))
    strcpy(struct_name, "");
  else {
    strcpy(struct_name, "pwr_sClass_");
    if (streq(ctx->rw->body_structname, ""))
      strcat(struct_name, ctx->rw->class_name);
    else
      strcat(struct_name, ctx->rw->body_structname);
  }

  fp_html_clf << "<!-- =========== BODY =========== -->\n"
              << '\n'
              << "<HR><BR>\n"
              << "<A NAME=\"" << ctx->rw->body_name << "\"><!-- --></A>\n"
              << "<TABLE BORDER=\"1\" CELLPADDING=\"3\" CELLSPACING=\"0\" "
                 "WIDTH=\"100%\">\n"
              << "<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\n"
              << "<TD COLSPAN=4><FONT SIZE=\"+2\">\n"
              << "<B>" << ctx->rw->body_name << " attributes</B></FONT>"
              << "<FONT SIZE=\"+1\"<B>&nbsp;&nbsp;&nbsp;&nbsp; <A HREF=\""
              << struct_file << "#" << ctx->rw->class_name << "\">"
              << struct_name << "</A></B></FONT></TD>\n"
              << "</TR>\n";

  return 1;
}

int CnvWblToHtml::body_close()
{
  fp_html_clf << "</TABLE>\n";

  return 1;
}

int CnvWblToHtml::graphplcnode()
{
  int i;

  fp_html_clf << "<!-- =========== GRAPHPLCNODE =========== -->\n"
              << '\n'
              << "<HR><BR>\n"
              << "<A NAME=\"GraphPlcNode\"><!-- --></A>\n"
              << "<TABLE BORDER=\"1\" CELLPADDING=\"3\" CELLSPACING=\"0\" "
                 "WIDTH=\"100%\">\n"
              << "<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\n"
              << "<TD COLSPAN=2><FONT SIZE=\"+2\">\n"
              << "<B>" << ctx->rw->graphplcnode_name << "</B></FONT></TD>\n"
              << "</TR>\n";

  for (i = 0; i < ctx->rw->doc_cnt; i += 2) {
    fp_html_clf << "<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\n"
                << "<TD><CODE><B>" << ctx->rw->doc_text[i]
                << "</B></CODE></TD>\n"
                << "<TD><CODE>" << ctx->rw->doc_text[i + 1] << "</CODE></TD>\n";
  }
  fp_html_clf << "</TABLE>\n";

  return 1;
}

int CnvWblToHtml::graphplccon()
{
  int i;

  fp_html_clf << "<!-- =========== GRAPHPLCCON =========== -->\n"
              << '\n'
              << "<HR><BR>\n"
              << "<TABLE BORDER=\"1\" CELLPADDING=\"3\" CELLSPACING=\"0\" "
                 "WIDTH=\"100%\">\n"
              << "<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\n"
              << "<TD COLSPAN=2><FONT SIZE=\"+2\">\n"
              << "<B>" << ctx->rw->graphplccon_name << "</B></FONT></TD>\n"
              << "</TR>\n";

  for (i = 0; i < ctx->rw->doc_cnt; i += 2) {
    fp_html_clf << "<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\n"
                << "<TD><CODE><B>" << ctx->rw->doc_text[i]
                << "</B></CODE></TD>\n"
                << "<TD><CODE>" << ctx->rw->doc_text[i + 1] << "</CODE></TD>\n";
  }
  fp_html_clf << "</TABLE>\n";

  return 1;
}

int CnvWblToHtml::template_exec()
{
  int i;

  if (!fp_html_clf.is_open())
    return 1;

  fp_html_clf << "<!-- =========== TEMPLATE =========== -->\n"
              << '\n'
              << "<HR><BR>\n"
              << "<A NAME=\"template\"><!-- --></A>\n"
              << "<TABLE BORDER=\"1\" CELLPADDING=\"3\" CELLSPACING=\"0\" "
                 "WIDTH=\"100%\">\n"
              << "<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\n"
              << "<TD COLSPAN=2><FONT SIZE=\"+2\">\n"
              << "<B>Template Object</B></FONT></TD>\n"
              << "</TR>\n";

  for (i = 0; i < ctx->rw->doc_cnt; i += 2) {
    fp_html_clf << "<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\n"
                << "<TD><CODE><B>" << ctx->rw->doc_text[i]
                << "</B></CODE></TD>\n"
                << "<TD><CODE>" << ctx->rw->doc_text[i + 1] << "</CODE></TD>\n";
  }
  fp_html_clf << "</TABLE>\n";

  return 1;
}

int CnvWblToHtml::class_close()
{
  fp_tmp.close();

  // Copy temporary file
  ctx->rw->copy_tmp_file(cread_cTmpFile1, fp_html_clf);

  fp_html_clf << "<!-- ========= END OF CLASS DATA ========= -->\n"
              << "</BODY>\n"
              << "</HTML>\n";

  fp_html_clf.close();

  if (!cdp_created) {
    create_cdp_file(ctx->rw->volume_name, ctx->rw->class_name, "-");
    cdp_created = true;
  }
  return 1;
}

// Create class dependency file
void CnvWblToHtml::create_cdp_file(
    const char* volume_name, const char* class_name, const char* attr_typeref)
{
  pwr_tFileName fname;

  sprintf(fname, "$pwre_broot/$pwre_target/bld/wbl/%s.cdp",
      CnvCtx::low(class_name));
  dcli_translate_filename(fname, fname);

  std::ofstream fp(fname);
  fp << volume_name << " " << class_name << " " << attr_typeref << '\n';
}

int CnvWblToHtml::attribute_exec()
{
  int i;
  char txt[200];
  char typeref_href[90];
  char attrtype_href[80];
  int lng_sts = 1;

  if (streq(CnvCtx::low(ctx->rw->attr_name), "super")) {
    create_cdp_file(
        ctx->rw->volume_name, ctx->rw->class_name, ctx->rw->attr_typeref);
    cdp_created = true;
  }

  if (streq(ctx->rw->attr_typeref, "CastId")
      || streq(ctx->rw->attr_typeref, "DisableAttr"))
    return 1;

  if (Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng(ctx->rw->class_name, ctx->rw->attr_name);

  if (str_StartsWith(ctx->rw->attr_typeref, "pwr_eClass_")) {
    strcpy(typeref_href, &ctx->rw->attr_typeref[11]);
    strcpy(ctx->rw->attr_typeref, typeref_href);
  } else if (str_StartsWith(ctx->rw->attr_typeref, "pwr_eType_")) {
    strcpy(typeref_href, &ctx->rw->attr_typeref[10]);
    strcpy(ctx->rw->attr_typeref, typeref_href);
  } else if (str_StartsWith(ctx->rw->attr_typeref, "pwr_eTypeDef_")) {
    strcpy(typeref_href, &ctx->rw->attr_typeref[13]);
    strcpy(ctx->rw->attr_typeref, typeref_href);
  }
  if (!streq(ctx->rw->attr_typeref_volume, "")) {
    char low_volname[80];
    strcpy(low_volname, CnvCtx::low(ctx->rw->attr_typeref_volume));
    sprintf(typeref_href, "%s_%s.html", low_volname,
        CnvCtx::low(ctx->rw->attr_typeref));
  } else
    sprintf(typeref_href, "pwrs_%s.html", CnvCtx::low(ctx->rw->attr_typeref));

  sprintf(attrtype_href, "pwrs_%s.html", CnvCtx::low(ctx->rw->attr_type));

  // Summary

  fp_html_clf
      << "<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\n"
      << "<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\n"
      << "<A HREF=\"" << typeref_href << "\">";

  if (ctx->rw->attr_array && ctx->rw->attr_pointer)
    fp_html_clf << "<CODE>Array of pointers to " << ctx->rw->attr_typeref
                << "</CODE></FONT></A></TD>\n";
  else if (ctx->rw->attr_array)
    fp_html_clf << "<CODE>Array of " << ctx->rw->attr_typeref
                << "</CODE></FONT></A></TD>\n";
  else if (ctx->rw->attr_pointer)
    fp_html_clf << "<CODE>Pointer to " << ctx->rw->attr_typeref
                << "</CODE></FONT></A></TD>\n";
  else
    fp_html_clf << "<CODE>" << ctx->rw->attr_typeref
                << "</CODE></FONT></A></TD>\n";

  fp_html_clf << "</A><TD><A HREF=\"#" << ctx->rw->attr_name << "\"><CODE><B>"
              << ctx->rw->attr_name << "</B></CODE></A></TD>\n";
  if (!streq(ctx->rw->attr_graphname, ""))
    fp_html_clf << "<TD WIDTH=\"1%\">" << ctx->rw->attr_graphname << "</TD>\n";
  else
    fp_html_clf << "<TD WIDTH=\"1%\">&nbsp;</TD>\n";
  fp_html_clf << "<TD>";
  if (ctx->rw->doc_fresh) {
    if (streq(ctx->rw->doc_summary, "")) {
      for (i = 0; i < ctx->rw->doc_cnt; i++) {
        str_trim(txt, ctx->rw->doc_text[i]);
        if (str_StartsWith(CnvCtx::low(txt), "@image")) {
          continue;
        } else if (str_StartsWith(CnvCtx::low(txt), "@b")) {
          fp_html_clf << "</PRE><B><FONT SIZE=\"3\">" << txt + 2
                      << "</FONT></B><PRE><BR>\n";
        } else if (str_StartsWith(CnvCtx::low(txt), "@h1")) {
          fp_html_clf << "<H3>" << txt + 3 << "</H3><BR>\n";
        } else if (str_StartsWith(CnvCtx::low(txt), "@h2")) {
          fp_html_clf << "<H4>" << txt + 3 << "</H4><BR>\n";
        } else {
          fp_html_clf << ctx->rw->doc_text[i];
          if (i < ctx->rw->doc_cnt - 1)
            fp_html_clf << "<BR>\n";
        }
      }
    } else
      fp_html_clf << ctx->rw->doc_summary << '\n';
  } else
    fp_html_clf << "<BR>\n";

  fp_html_clf << "</TD>\n";

  // Detail

  fp_tmp << "<HR>\n"
         << "<A NAME=\"" << ctx->rw->attr_name << "\"> <H3>"
         << "<FONT SIZE=\"-1\">" << ctx->rw->attr_type << "</FONT> "
         << ctx->rw->attr_name << "</H3></A>\n"
         << "<DL><DT>\n";

  if (ctx->rw->attr_array && ctx->rw->attr_pointer)
    fp_tmp << "<CODE><B>" << Lng::translate("Type")
           << "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Array of pointers to <A "
              "HREF=\""
           << typeref_href << "\">" << ctx->rw->attr_typeref
           << "</A></CODE><DT>\n";
  else if (ctx->rw->attr_array)
    fp_tmp << "<CODE><B>" << Lng::translate("Type")
           << "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Array of <A HREF=\""
           << typeref_href << "\">" << ctx->rw->attr_typeref
           << "</A></CODE><DT>\n";
  else if (ctx->rw->attr_pointer)
    fp_tmp << "<CODE><B>" << Lng::translate("Type")
           << "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pointer to <A HREF=\""
           << typeref_href << "\">" << ctx->rw->attr_typeref
           << "</A></CODE><DT>\n";
  else
    fp_tmp << "<CODE><B>" << Lng::translate("Type")
           << "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\""
           << typeref_href << "\">" << ctx->rw->attr_typeref
           << "</A></CODE><DT>\n";

  fp_tmp << "<DT><CODE><B><A HREF=\"" << attrtype_href
         << "#Flags\">Flags</A></B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
         << ctx->rw->attr_flags << "</CODE><DT>\n";

  if (ctx->rw->attr_array)
    fp_tmp << "<DT><CODE><B>Elements</B>&nbsp;&nbsp;" << ctx->rw->attr_elements
           << "</CODE><DT>\n";

  if (!streq(ctx->rw->attr_graphname, ""))
    fp_tmp << "<DT><CODE><B>GraphName</B>&nbsp;" << ctx->rw->attr_graphname
           << "</CODE><DT>\n";

  fp_tmp << "<DT><CODE><B>" << Lng::translate("Body")
         << "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" << ctx->rw->body_name
         << "</CODE><DT>\n";
  fp_tmp << "<DT><CODE><B>" << Lng::translate("Class")
         << "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\"" << attrtype_href
         << "\">$" << ctx->rw->attr_type << "</A></CODE><DT>\n";

  fp_tmp << "<BR>\n"
         << "<CODE><B>" << Lng::translate("Description")
         << "</B></CODE><DT></DL>\n"
         << "<DIV ID=\"description\"><PRE>\n";

  if (ctx->rw->doc_fresh) {
    for (i = 0; i < ctx->rw->doc_cnt; i++) {
      str_trim(txt, ctx->rw->doc_text[i]);
      if (str_StartsWith(CnvCtx::low(txt), "@image")) {
        char imagefile[80];

        str_trim(imagefile, txt + 6);
        fp_tmp << "</PRE><IMG SRC=\"" << imagefile << "\"><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@b")) {
        fp_tmp << "</PRE><B><FONT SIZE=\"3\">" << txt + 2
               << "</FONT></B><BR><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@h1")) {
        fp_tmp << "</PRE><H3>" << txt + 3 << "</H3><BR><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@h2")) {
        fp_tmp << "</PRE><H4>" << txt + 3 << "</H4><BR><PRE>\n";
      } else
        fp_tmp << ctx->rw->doc_text[i] << '\n';
    }
  }
  fp_tmp << "</PRE></DIV>\n";

  return 1;
}

int CnvWblToHtml::bit_exec()
{
  int i;
  char txt[200];
  int lng_sts = 1;

  if (Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng(ctx->rw->typedef_name, ctx->rw->bit_name);

  // Summary
  char bitchar = _tolower(ctx->rw->typedef_typeref[0]);

  fp_html_clf << "<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\n"
              << "<TD>\n"
              << "<CODE><FONT SIZE=\"-1\">pwr_" << bitchar
              << ctx->rw->typedef_name << "_" << ctx->rw->bit_pgmname
              << "</FONT></CODE></TD>\n"
              << "<TD ALIGN =\"right\" VALIGN=\"top\" WIDTH=\"1%\"><A HREF=\"#"
              << ctx->rw->bit_name << "\"><CODE><B>" << ctx->rw->bit_text
              << "</B></CODE></A></TD>\n"
              << "<TD>";
  if (ctx->rw->doc_fresh) {
    if (streq(ctx->rw->doc_summary, "")) {
      for (i = 0; i < ctx->rw->doc_cnt; i++) {
        str_trim(txt, ctx->rw->doc_text[i]);
        if (str_StartsWith(CnvCtx::low(txt), "@image")) {
          continue;
        } else if (str_StartsWith(CnvCtx::low(txt), "@b")) {
          fp_html_clf << "</PRE><B><FONT SIZE=\"3\">" << txt + 2
                      << "</FONT></B><PRE><BR>\n";
        } else if (str_StartsWith(CnvCtx::low(txt), "@h1")) {
          fp_html_clf << "<H3>" << txt + 3 << "</H3><BR>\n";
        } else if (str_StartsWith(CnvCtx::low(txt), "@h2")) {
          fp_html_clf << "<H4>" << txt + 3 << "</H4><BR>\n";
        } else {
          fp_html_clf << ctx->rw->doc_text[i];
          if (i < ctx->rw->doc_cnt - 1)
            fp_html_clf << "<BR>\n";
        }
      }
    } else
      fp_html_clf << ctx->rw->doc_summary << '\n';
  } else
    fp_html_clf << "<BR>\n";

  fp_html_clf << "</TD>\n";

  // Detail

  fp_tmp << "<HR>\n"
         << "<A NAME=\"" << ctx->rw->bit_name << "\"> <H3>"
         << "<FONT SIZE=\"-1\">pwr_" << bitchar << ctx->rw->typedef_name << "_"
         << ctx->rw->bit_pgmname << "</FONT>&nbsp;&nbsp;" << ctx->rw->bit_text
         << "</H3></A>\n"
         << "<DL><DT>\n"
         << "<CODE><B>Value</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
         << ctx->rw->bit_value << "</CODE><DT>\n";

  fp_tmp << "<BR>\n"
         << "<CODE><B>Description</B></CODE><DT></DL>\n"
         << "<DIV ID=\"description\"><PRE>\n";

  if (ctx->rw->doc_fresh) {
    for (i = 0; i < ctx->rw->doc_cnt; i++) {
      str_trim(txt, ctx->rw->doc_text[i]);
      if (str_StartsWith(CnvCtx::low(txt), "@image")) {
        char imagefile[80];

        str_trim(imagefile, txt + 6);
        fp_tmp << "</PRE><IMG SRC=\"" << imagefile << "\"><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@b")) {
        fp_tmp << "</PRE><B><FONT SIZE=\"3\">" << txt + 2
               << "</FONT></B><BR><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@h1")) {
        fp_tmp << "</PRE><H3>" << txt + 3 << "</H3><BR><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@h2")) {
        fp_tmp << "</PRE><H4>" << txt + 3 << "</H4><BR><PRE>\n";
      } else
        fp_tmp << ctx->rw->doc_text[i] << '\n';
    }
  }
  fp_tmp << "</PRE></DIV>\n";

  return 1;
}

int CnvWblToHtml::typedef_exec()
{
  pwr_tFileName fname;
  int i;
  pwr_tFileName html_file_name;
  char full_class_name[80];
  char ref_name[200];
  pwr_tFileName struct_file;
  char low_volume_name[80];
  char low_class_name[80];
  char txt[200];
  char code_aref[350];
  int lng_sts = 1;

  if (Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng(ctx->rw->typedef_name, 0);

  strcpy(ctx->rw->class_name, ctx->rw->typedef_name);

  str_ToLower(low_volume_name, ctx->rw->volume_name);
  str_ToLower(low_class_name, ctx->rw->class_name);

  CnvWblToH::get_filename(ctx->rw, fname, 0);
  CnvReadSrc::filename_to_html(struct_file, fname);

  strcpy(full_class_name, ctx->rw->volume_name);
  strcat(full_class_name, ":");
  strcat(full_class_name, ctx->rw->class_name);

  strcpy(html_file_name, low_volume_name);
  strcat(html_file_name, "_");
  strcat(html_file_name, low_class_name);

  // Add into index file
  fp_html_index << "<A HREF=\"" << html_file_name
                << ".html\" TARGET=\"classFrame\">" << ctx->rw->class_name
                << "</A>\n"
                << "<BR>\n";

  // Add into AllClasses js file
  cnv_mentry mentry;
  strcpy(mentry.name, ctx->rw->class_name);
  strcpy(mentry.file, html_file_name);
  strcat(mentry.file, ".html");
  all_types.push_back(mentry);

  // Add into group file
  for (int i = 0; i < ctx->rw->doc_group_cnt; i++) {
    for (int j = 0; j < ctx->setup->group_cnt; j++) {
      if (str_NoCaseStrcmp(ctx->rw->doc_groups[i], ctx->setup->groups[j])
          == 0) {
        fp_html_group[j] << "<A HREF=\"" << html_file_name
                         << ".html\" TARGET=\"classFrame\">"
                         << ctx->rw->class_name << "</A>\n"
                         << "<BR>\n";

        if (!js_group_first[j])
          fp_js_group[j] << ",";
        else
          js_group_first[j] = false;

        fp_js_group[j] << "[\"" << ctx->rw->class_name << "\",\""
                       << html_file_name << ".html\"]\n";
      }
    }
  }

  // Create class html file

  strcpy(fname, ctx->dir);
  strcat(fname, html_file_name);
  strcat(fname, ".html");
  fp_html_clf.open(fname);

  fp_tmp.open(cread_cTmpFile1);

  fp_html_clf
      << "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 "
         "Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">\n"
      << "<!-- Generated by pwr_cnv-->\n"
      << "<HTML>\n"
      << "<HEAD>\n"
      << "<META http-equiv=\"Content-Type\" content=\"text/html; "
         "charset=ISO-8859-1\">\n"
      << "<TITLE>\n"
      << ": Type  " << full_class_name << '\n'
      << "</TITLE>\n"
      << "<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">\n"
      << "</HEAD>\n"
      << "<BODY BGCOLOR=\"white\">\n"
      << "\n"
      << "<!-- ========== START OF NAVBAR ========== -->\n"
      << "<A NAME=\"navbar_top\"><!-- --></A>\n"
      << "<TABLE BORDER=\"0\" WIDTH=\"100%\" CELLPADDING=\"1\" "
         "CELLSPACING=\"0\">\n"
      << "<TR>\n"
      << "<TD COLSPAN=2 BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">\n"
      << "<A NAME=\"navbar_top_firstrow\"><FONT  "
         "CLASS=\"NavBarFont1Rev\"><B>Volume "
      << ctx->rw->volume_name << "</B></FONT></A>\n"
      << "</TD>\n"
      << "</TR>\n"
      << '\n'
      << "<TR>\n"
      << "<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\n";

  if ((streq(ctx->rw->typedef_typeref, "Mask")
          || streq(ctx->rw->typedef_typeref, "Enum"))
      && !streq(low_volume_name, "pwrs")) {
    sprintf(code_aref, "%s#%s", struct_file, ctx->rw->typedef_name);
    fp_html_clf << " C Binding: &nbsp;<A HREF=\"" << code_aref
                << "\">Typedef</A>\n";
  } else if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_code, "")) {
    CnvReadSrc::filename_to_html(ref_name, ctx->rw->doc_code);
    sprintf(code_aref, "%s#%s", ref_name, low_class_name);
    fp_html_clf << " C Binding: &nbsp;<A HREF=\"" << code_aref
                << "\">Typedef</A>\n";
  }
  for (i = 0; i < 50; i++)
    fp_html_clf << "&nbsp;";
  fp_html_clf
      << "</FONT></TD>\n"
      << "<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\n"
      << "  <A HREF=\"" << low_volume_name
      << "_index.html\" TARGET=\"_top\"><B>INDEX</B></A>  &nbsp;\n"
      << "&nbsp;<A HREF=\"" << html_file_name
      << ".html\" TARGET=\"_top\"><B>NO INDEX</B></A></FONT></TD>\n"
      << "</TR>\n"
      << "</TABLE>\n"
      << "<!-- =========== END OF NAVBAR =========== -->\n"
      << '\n'
      << "<HR>\n"
      << "<!-- ======== START OF CLASS DATA ======== -->\n"
      << "<H2>\n"
      << "Type " << ctx->rw->class_name << "</H2>\n"
      << "<HR>\n"
      << "<DL>\n";
  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_author, "")) {
    fp_html_clf << "<DT><B>Author</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
                << ctx->rw->doc_author << "<DT>\n";
  }

  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_version, "")) {
    fp_html_clf << "<DT><B>Version</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
                << ctx->rw->doc_version << "<DT>\n";
  }
  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_code, "")) {
    fp_html_clf
        << "<DT><B>Code</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
        << ctx->rw->doc_code << "<DT>\n";
  }

  fp_html_clf << "<BR><DT><B>Description</B><DT><BR>\n"
              << "</DL><DIV ID=\"description\"><PRE>\n";

  if (ctx->rw->doc_fresh) {
    for (i = 0; i < ctx->rw->doc_cnt; i++) {
      str_trim(txt, ctx->rw->doc_text[i]);
      if (str_StartsWith(CnvCtx::low(txt), "@image")) {
        char imagefile[80];

        str_trim(imagefile, txt + 6);
        fp_html_clf << "</PRE><IMG SRC=\"" << imagefile << "\"><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@b")) {
        fp_html_clf << "</PRE><B><FONT SIZE=\"3\">" << txt + 2
                    << "</FONT></B><BR><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@h1")) {
        fp_html_clf << "</PRE><H3>" << txt + 3 << "</H3><BR><PRE>\n";
      } else if (str_StartsWith(CnvCtx::low(txt), "@h2")) {
        fp_html_clf << "</PRE><H4>" << txt + 3 << "</H4><BR><PRE>\n";
      } else
        fp_html_clf << ctx->rw->doc_text[i] << '\n';
    }
  }
  fp_html_clf << "</PRE></DIV>\n";

  for (i = 0; i < ctx->rw->doc_link_cnt; i++) {
    fp_html_clf << "  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\""
                << ctx->rw->doc_link_ref[i]
                << "\" TARGET=\"_self\"><FONT size=\"-1\"> "
                << ctx->rw->doc_link_text[i] << "</FONT></A><BR>\n";
  }
  for (i = 0; i < ctx->rw->doc_clink_cnt; i++) {
    fp_html_clf << "  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\""
                << ctx->rw->doc_clink_ref[i]
                << "\" TARGET=\"_self\"><FONT size=\"-1\"> "
                << ctx->rw->doc_clink_text[i] << "</FONT></A><BR>\n";
  }
  fp_html_clf << "</FONT>\n";

  if (streq(ctx->rw->typedef_typeref, "Mask")
      || streq(ctx->rw->typedef_typeref, "Enum")) {
    char bitchar = _tolower(ctx->rw->typedef_typeref[0]);

    fp_html_clf << "<HR><BR>\n"
                << "<A NAME=\"" << ctx->rw->typedef_name << "\"><!-- --></A>\n"
                << "<TABLE BORDER=\"1\" CELLPADDING=\"3\" CELLSPACING=\"0\" "
                   "WIDTH=\"100%\">\n"
                << "<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\n"
                << "<TD COLSPAN=3><FONT SIZE=\"+2\">\n"
                << "<B>" << ctx->rw->typedef_name << " elements</B></FONT>"
                << "<FONT SIZE=\"+1\"<B>&nbsp;&nbsp;&nbsp;&nbsp; <A HREF=\""
                << code_aref << "\">pwr_" << bitchar << ctx->rw->typedef_name
                << "</A></B></FONT></TD>\n"
                << "</TR>\n";
  }
  return 1;
}

int CnvWblToHtml::typedef_close()
{
  if (streq(ctx->rw->typedef_typeref, "Mask")
      || streq(ctx->rw->typedef_typeref, "Enum")) {
    fp_html_clf << "</TABLE>\n";
  }

  fp_tmp.close();

  // Copy temporary file
  ctx->rw->copy_tmp_file(cread_cTmpFile1, fp_html_clf);

  fp_html_clf << "<!-- ========= END OF CLASS DATA ========= -->\n"
              << "</BODY>\n"
              << "</HTML>\n";

  fp_html_clf.close();

  return 1;
}

void CnvWblToHtml::print_all_menu()
{
  // Sort
  if (all_types.size()) {
    for (unsigned int i = all_types.size() - 1; i > 0; i--) {
      for (unsigned int j = 0; j < i; j++) {
        if (!(all_types[j] < all_types[j + 1])) {
          cnv_mentry mi = all_types[j + 1];
          all_types[j + 1] = all_types[j];
          all_types[j] = mi;
        }
      }
    }
  }
  if (all_classes.size()) {
    for (unsigned int i = all_classes.size() - 1; i > 0; i--) {
      for (unsigned int j = 0; j < i; j++) {
        if (!(all_classes[j] < all_classes[j + 1])) {
          cnv_mentry mi = all_classes[j + 1];
          all_classes[j + 1] = all_classes[j];
          all_classes[j] = mi;
        }
      }
    }
  }

  for (unsigned int i = 0; i < all_types.size(); i++) {
    // Add into AllClasses js file
    if (!js_all_first)
      fp_js_all << ",";
    else
      js_all_first = false;

    fp_js_all << "[\"" << all_types[i].name << "\",\"" << all_types[i].file
              << "\"]\n";
  }

  for (unsigned int i = 0; i < all_classes.size(); i++) {
    // Add into AllClasses js file
    if (!js_all_first)
      fp_js_all << ",";
    else
      js_all_first = false;

    fp_js_all << "[\"" << all_classes[i].name << "\",\"" << all_classes[i].file
              << "\"]\n";
  }
}
