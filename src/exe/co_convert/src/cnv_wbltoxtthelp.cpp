/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <stdio.h>

extern "C" {
#include "co_cdh.h"
}
#include "co_lng.h"
#include "co_string.h"

#include "cnv_wbltoxtthelp.h"
#include "cnv_ctx.h"

static int get_class_link(char* typeref, char* volume, char* file)
{
  char tr[80];
  char v[80];

  str_ToLower(v, volume);

  if (streq(v, "pwrs") || streq(v, "pwrb")
      || streq(v, "basecomponent") || streq(v, "miscellaneous")
      || streq(v, "nmps") || streq(v, "opc")
      || streq(v, "otherio") || streq(v, "othermanufacturer")
      || streq(v, "profibus") || streq(v, "remote")
      || streq(v, "siemens") || streq(v, "abb"))
    sprintf(file, "$pwr_lang/%s_xtthelp.dat", v);
  else
    sprintf(file, "$pwrp_exe/%s_xtthelp.dat", v);

  str_ToLower(tr, typeref);
  if (streq(tr, "pwrs:class-$plcnode"))
    return 0;
  if (strstr(tr, "enum") != 0)
    return 0;
  if (strstr(tr, "mask") != 0)
    return 0;
  if (str_StartsWith(tr, "string"))
    return 0;
  if (str_StartsWith(tr, "text"))
    return 0;
  if (streq(tr, "boolean") || streq(tr, "float32")
      || streq(tr, "float64") || streq(tr, "char")
      || streq(tr, "int8") || streq(tr, "int16")
      || streq(tr, "int32") || streq(tr, "uint8")
      || streq(tr, "uint16") || streq(tr, "uint32")
      || streq(tr, "objid") || streq(tr, "buffer")
      || streq(tr, "string") || streq(tr, "enum")
      || streq(tr, "struct") || streq(tr, "mask")
      || streq(tr, "array") || streq(tr, "time")
      || streq(tr, "text") || streq(tr, "attrref")
      || streq(tr, "uint64") || streq(tr, "int64")
      || streq(tr, "classid") || streq(tr, "typeid")
      || streq(tr, "volumeid") || streq(tr, "objectix")
      || streq(tr, "refid") || streq(tr, "deltatime")
      || streq(tr, "status") || streq(tr, "netstatus")
      || streq(tr, "castid") || streq(tr, "prostring")
      || streq(tr, "disableattr") || streq(tr, "dataref")
      || streq(tr, "void"))
    return 0;

  return 1;
}

int CnvWblToXtthelp::init(char* first)
{
  pwr_tFileName fname;

  strcpy(fname, ctx->dir);
  strcat(fname, ctx->rw->volume_name);
  strcat(fname, "_xtthelp.dat");
  str_ToLower(fname, fname);

  fp_xtthelp_index.open(fname);

  ctx->set_dependfile(fname);

  fp_tmp.open(cread_cTmpFile2);

  xtthelp_index_open = 1;
  xtthelp_in_topic = 0;

  fp_xtthelp_index << "<TOPIC> " << ctx->rw->volume_name << '\n'
                   << "ClassVolume " << ctx->rw->volume_name << "\n\n";

  return 1;
}

int CnvWblToXtthelp::close()
{
  fp_xtthelp_index << "</TOPIC>\n\n";

  fp_tmp.close();

  ctx->rw->copy_tmp_file(cread_cTmpFile2, fp_xtthelp_index);

  fp_xtthelp_index.close();

  ctx->print_depend();

  return 1;
}

int CnvWblToXtthelp::class_exec()
{
  int i;
  char full_class_name[80];
  char link_ref[80];
  char* s;
  char txt[256];
  char prefix[80];
  int lng_sts = 1;

  if (Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng(ctx->rw->class_name, 0);

  strcpy(full_class_name, ctx->rw->volume_name);
  strcat(full_class_name, ":");
  strcat(full_class_name, ctx->rw->class_name);

  // Add into index file
  fp_xtthelp_index << "<B>" << ctx->rw->class_name << "<T><T> "
                   << ctx->rw->doc_summary << " <LINK> " << ctx->rw->class_name
                   << '\n';

  // Add to class file
  if (xtthelp_in_topic)
    fp_tmp << "</TOPIC>\n";

  xtthelp_in_topic = 1;
  fp_tmp << "<TOPIC> " << ctx->rw->class_name << '\n'
         << Lng::translate("Class") << " " << full_class_name << '\n'
         << "<H1>" << ctx->rw->class_name << "\n\n";

  if (!lng_sts)
    fp_tmp << "(" << Lng::translate("English text not available") << ")\n\n";

  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_author, "")) {
    fp_tmp << "<B>" << Lng::translate("Author") << "<T>" << ctx->rw->doc_author
           << '\n';
  }

  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_creator, "")) {
    fp_tmp << "<B>" << Lng::translate("Creator") << "<T>"
           << ctx->rw->doc_creator << '\n';
  }

  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_version, "")) {
    fp_tmp << "<B>" << Lng::translate("Version") << "<T>"
           << ctx->rw->doc_version << '\n';
  }

  fp_tmp << "<H1>" << Lng::translate("Description") << '\n';

  if (ctx->rw->doc_fresh) {
    for (i = 0; i < ctx->rw->doc_cnt; i++) {
      str_trim(txt, ctx->rw->doc_text[i]);
      if (str_StartsWith(CnvCtx::low(txt), "@image")) {
        char imagefile[80];

        str_trim(imagefile, txt + 6);
        fp_tmp << "<IMAGE> " << imagefile << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@b")) {
        fp_tmp << "<B> " << txt + 2 << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@h1")) {
        fp_tmp << "<H1> " << txt + 3 << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@h2")) {
        fp_tmp << "<H2> " << txt + 3 << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@i")) {
        fp_tmp << "<i>" << txt + 2 << '\n';
      } else
        fp_tmp << ctx->rw->doc_text[i] << '\n';
    }
  }
  for (i = 0; i < ctx->rw->doc_xlink_cnt; i++) {
    if (str_StartsWith(ctx->rw->doc_xlink_ref[i], "../../en_us/man_exlib_"))
      strncpy(link_ref,
          &ctx->rw->doc_xlink_ref[i][0] + strlen("../../en_us/man_exlib_"),
          sizeof(link_ref));
    else
      strncpy(link_ref, ctx->rw->doc_xlink_ref[i], sizeof(link_ref));

    if ((s = strrchr(link_ref, '.')))
      *s = 0;
    strcat(link_ref, ", ,$pwr_exe/en_us/man_exlib.dat");
    fp_tmp << "      " << ctx->rw->doc_xlink_text[i] << " <LINK>" << link_ref
           << '\n';
  }
  for (i = 0; i < ctx->rw->doc_clink_cnt; i++) {
    strcpy(prefix, CnvCtx::low(ctx->rw->volume_name));
    strcat(prefix, "_");
    if (str_StartsWith(ctx->rw->doc_clink_ref[i], prefix)) {
      strcpy(link_ref, &ctx->rw->doc_clink_ref[i][strlen(prefix)]);
      if ((s = strrchr(link_ref, '.')))
        *s = 0;
    } else {
      if ((s = strchr(ctx->rw->doc_clink_ref[i], '_'))) {
        int len = s - ctx->rw->doc_clink_ref[i];
        memset(link_ref, 0, sizeof(link_ref));
        strcpy(link_ref, &ctx->rw->doc_clink_ref[i][len + 1]);
        if ((s = strrchr(link_ref, '.')))
          *s = 0;
        strcat(link_ref, ", ,$pwr_lang/");
        strncat(link_ref, ctx->rw->doc_clink_ref[i], len);
        strcat(link_ref, "_xtthelp.dat");
      } else {
        strcpy(link_ref, ctx->rw->doc_clink_ref[i]);
        if ((s = strrchr(link_ref, '.')))
          *s = 0;
      }
    }
    fp_tmp << "      " << ctx->rw->doc_clink_text[i] << " <LINK>" << link_ref
           << '\n';
  }
  return 1;
}

int CnvWblToXtthelp::body_exec()
{
  fp_tmp << "<HR>\n"
         << "<H1>" << ctx->rw->body_name << '\n';

  return 1;
}

int CnvWblToXtthelp::class_close()
{
  xtthelp_in_topic = 0;
  fp_tmp << "</TOPIC>\n\n";

  return 1;
}

int CnvWblToXtthelp::bit_exec()
{
  int i;
  char txt[200];
  char prefix[80];
  char link_ref[80];
  char* s;
  int lng_sts = 1;

  if (Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng(ctx->rw->typedef_name, ctx->rw->bit_name);

  if (first_bit) {
    if (strstr(ctx->rw->typedef_name, "Enum"))
      fp_tmp << "<H1>" << Lng::translate("Enumerations") << '\n';
    else
      fp_tmp << "<H1>" << Lng::translate("Bits") << '\n';
    first_bit = 0;
  }

  fp_tmp << "<B>" << ctx->rw->bit_name << '\n';

  // char bitchar = _tolower(ctx->rw->typedef_typeref[0]);
  // fp_tmp << "  pwr_" << bitchar << ctx->rw->typedef_name << "_" <<
  // ctx->rw->bit_pgmname << '\n';

  if (ctx->rw->doc_fresh) {
    for (i = 0; i < ctx->rw->doc_cnt; i++) {
      str_trim(txt, ctx->rw->doc_text[i]);
      if (str_StartsWith(CnvCtx::low(txt), "@image")) {
        char imagefile[80];

        str_trim(imagefile, txt + 6);
        fp_tmp << "<IMAGE> " << imagefile << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@b")) {
        fp_tmp << "<B> " << txt + 2 << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@h1")) {
        fp_tmp << "<H1> " << txt + 3 << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@h2")) {
        fp_tmp << "<H2> " << txt + 3 << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@i")) {
        fp_tmp << "<i>" << txt + 2 << '\n';
      } else
        fp_tmp << ctx->rw->doc_text[i] << '\n';
    }
  }
  for (i = 0; i < ctx->rw->doc_clink_cnt; i++) {
    strcpy(prefix, CnvCtx::low(ctx->rw->volume_name));
    strcat(prefix, "_");
    if (str_StartsWith(ctx->rw->doc_clink_ref[i], prefix)) {
      strcpy(link_ref, &ctx->rw->doc_clink_ref[i][strlen(prefix)]);
      if ((s = strrchr(link_ref, '.')))
        *s = 0;
    } else {
      if ((s = strchr(ctx->rw->doc_clink_ref[i], '_'))) {
        int len = s - ctx->rw->doc_clink_ref[i];
        memset(link_ref, 0, sizeof(link_ref));
        strcpy(link_ref, &ctx->rw->doc_clink_ref[i][len + 1]);
        if ((s = strrchr(link_ref, '.')))
          *s = 0;
        strcat(link_ref, ", ,$pwr_lang/");
        strncat(link_ref, ctx->rw->doc_clink_ref[i], len);
        strcat(link_ref, "_xtthelp.dat");
      } else {
        strcpy(link_ref, ctx->rw->doc_clink_ref[i]);
        if ((s = strrchr(link_ref, '.')))
          *s = 0;
      }
    }
    fp_tmp << "      " << ctx->rw->doc_clink_text[i] << " <LINK>" << link_ref
           << '\n';
  }
  fp_tmp << '\n';

  return 1;
}

int CnvWblToXtthelp::attribute_exec()
{
  int i;
  char* s;
  int lng_sts = 1;
  pwr_tFileName link_file;

  if (streq(ctx->rw->attr_typeref, "CastId")
      || streq(ctx->rw->attr_typeref, "DisableAttr"))
    return 1;

  if (Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng(ctx->rw->class_name, ctx->rw->attr_name);

  if (streq(ctx->rw->attr_graphname, ""))
    fp_tmp << '\n'
           << "<H2>" << ctx->rw->attr_name << "<BOOKMARK>" << ctx->rw->attr_name
           << '\n';
  else
    fp_tmp << '\n'
           << "<H2>" << ctx->rw->attr_name << "       "
           << ctx->rw->attr_graphname << "<BOOKMARK>" << ctx->rw->attr_name
           << '\n';
  if (ctx->rw->attr_array && ctx->rw->attr_pointer)
    fp_tmp << "<B>Array[" << ctx->rw->attr_elements << "] of pointers to "
           << ctx->rw->attr_typeref << "   ";
  else if (ctx->rw->attr_array)
    fp_tmp << "<B>Array[" << ctx->rw->attr_elements << "] of "
           << ctx->rw->attr_typeref << "   ";
  else if (ctx->rw->attr_pointer)
    fp_tmp << "<B>Pointer to " << ctx->rw->attr_typeref << "   ";
  else
    fp_tmp << "<B>" << ctx->rw->attr_typeref << "   ";

  fp_tmp << "$" << ctx->rw->attr_type << "   ";

  if (!streq(ctx->rw->attr_flags, ""))
    fp_tmp << "Flags[" << ctx->rw->attr_flags << "]";

  if (get_class_link(
          ctx->rw->attr_typeref, ctx->rw->attr_typeref_volume, link_file))
    fp_tmp << " <LINK>" << ctx->rw->attr_typeref << ",," << link_file;
  fp_tmp << '\n';

  if (ctx->rw->doc_fresh) {
    for (i = 0; i < ctx->rw->doc_cnt; i++) {
      if ((s = strstr(CnvCtx::low(ctx->rw->doc_text[i]), "@image")) != 0) {
        char imagefile[80];

        str_trim(imagefile, s + 6);
        fp_tmp << "<IMAGE> " << imagefile << '\n';
      } else
        fp_tmp << ctx->rw->doc_text[i] << '\n';
    }
  }
  return 1;
}

int CnvWblToXtthelp::typedef_exec()
{
  int i;
  char full_class_name[80];
  char link_ref[80];
  char* s;
  char txt[256];
  char prefix[80];
  int lng_sts = 1;

  if (Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng(ctx->rw->class_name, 0);

  strcpy(ctx->rw->class_name, ctx->rw->typedef_name);

  strcpy(full_class_name, ctx->rw->volume_name);
  strcat(full_class_name, ":");
  strcat(full_class_name, ctx->rw->class_name);

  // Add into index file
  fp_xtthelp_index << "<B>" << ctx->rw->class_name << "<T><T> "
                   << ctx->rw->doc_summary << " <LINK> " << ctx->rw->class_name
                   << '\n';

  // Add to class file
  if (xtthelp_in_topic)
    fp_tmp << "</TOPIC>\n";

  xtthelp_in_topic = 1;
  fp_tmp << "<TOPIC> " << ctx->rw->class_name << '\n'
         << "Type"
         << " " << full_class_name << '\n'
         << "<H1>" << ctx->rw->class_name << "\n\n";

  if (!lng_sts)
    fp_tmp << "(" << Lng::translate("English text not available") << ")\n\n";

  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_author, "")) {
    fp_tmp << "<B>" << Lng::translate("Author") << "<T>" << ctx->rw->doc_author
           << '\n';
  }

  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_creator, "")) {
    fp_tmp << "<B>" << Lng::translate("Creator") << "<T>"
           << ctx->rw->doc_creator << '\n';
  }

  if (ctx->rw->doc_fresh && !streq(ctx->rw->doc_version, "")) {
    fp_tmp << "<B>" << Lng::translate("Version") << "<T>"
           << ctx->rw->doc_version << '\n';
  }

  fp_tmp << "<H1>" << Lng::translate("Description") << '\n';

  if (ctx->rw->doc_fresh) {
    for (i = 0; i < ctx->rw->doc_cnt; i++) {
      str_trim(txt, ctx->rw->doc_text[i]);
      if (str_StartsWith(CnvCtx::low(txt), "@image")) {
        char imagefile[80];

        str_trim(imagefile, txt + 6);
        fp_tmp << "<IMAGE> " << imagefile << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@b")) {
        fp_tmp << "<B> " << txt + 2 << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@h1")) {
        fp_tmp << "<H1> " << txt + 3 << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@h2")) {
        fp_tmp << "<H2> " << txt + 3 << '\n';
      } else if (str_StartsWith(CnvCtx::low(txt), "@i")) {
        fp_tmp << "<i>" << txt + 2 << '\n';
      } else
        fp_tmp << ctx->rw->doc_text[i] << '\n';
    }
  }
  for (i = 0; i < ctx->rw->doc_clink_cnt; i++) {
    strcpy(prefix, CnvCtx::low(ctx->rw->volume_name));
    strcat(prefix, "_");
    if (str_StartsWith(ctx->rw->doc_clink_ref[i], prefix)) {
      strcpy(link_ref, &ctx->rw->doc_clink_ref[i][strlen(prefix)]);
      if ((s = strrchr(link_ref, '.')))
        *s = 0;
    } else {
      if ((s = strchr(ctx->rw->doc_clink_ref[i], '_'))) {
        int len = s - ctx->rw->doc_clink_ref[i];
        memset(link_ref, 0, sizeof(link_ref));
        strcpy(link_ref, &ctx->rw->doc_clink_ref[i][len + 1]);
        if ((s = strrchr(link_ref, '.')))
          *s = 0;
        strcat(link_ref, ", ,$pwr_lang/");
        strncat(link_ref, ctx->rw->doc_clink_ref[i], len);
        strcat(link_ref, "_xtthelp.dat");
      } else {
        strcpy(link_ref, ctx->rw->doc_clink_ref[i]);
        if ((s = strrchr(link_ref, '.')))
          *s = 0;
      }
    }
    fp_tmp << "      " << ctx->rw->doc_clink_text[i] << " <LINK>" << link_ref
           << '\n';
  }
  first_bit = 1;
  return 1;
}

int CnvWblToXtthelp::typedef_close()
{
  xtthelp_in_topic = 0;
  first_bit = 0;
  fp_tmp << "</TOPIC>\n\n";

  return 1;
}
