/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <stdlib.h>

#include <fstream>

extern "C" {
#include "co_dcli.h"
#include "co_cdh.h"
}

#include "cnv_ctx.h"
#include "co_string.h"

CnvCtx::CnvCtx() : generate_html(0), generate_xtthelp(0), generate_src(0), generate_struct(0), generate_ps(0), generate_pdf(0), generate_cdp(0), common_structfile_only(0), hpp(0), verbose(0), first_class(1), setup(0), wblto(0), rw(0), rx(0)
{
  strcpy(dir, "");
  strcpy(setup_filename, "");
  strcpy(depend_filename, "");
}

char* CnvCtx::low(const char* in)
{
  static char str[400];

  str_ToLower(str, in);
  return str;
}

int CnvCtx::read_line(char* line, int maxsize, FILE* file)
{
  char* s;

  if (fgets(line, maxsize, file) == NULL)
    return 0;
  line[maxsize - 1] = 0;
  s = strchr(line, 10);
  if (s != 0)
    *s = 0;
  s = strchr(line, 13);
  if (s != 0)
    *s = 0;

  return 1;
}

void CnvCtx::add_depend(char* fname)
{
  if (streq(depend_filename, ""))
    return;

  std::string fnamestr(fname);
  depend.push_back(fnamestr);
}

void CnvCtx::set_dependfile(char* dname)
{
  strncpy(dependfile, dname, sizeof(dependfile));
}

void CnvCtx::print_depend()
{
  if (streq(depend_filename, ""))
    return;

  dcli_translate_filename(dependfile, dependfile);
  dcli_translate_filename(depend_filename, depend_filename);

  std::ofstream fp(depend_filename);

  fp << dependfile << " : \\\n";
  for (unsigned int i = 0; i < depend.size(); i++)
    fp << depend[i] << " \\\n";

  fp << '\n';
  fp.close();
}
