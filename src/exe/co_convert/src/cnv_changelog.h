/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cnv_changelog_h
#define cnv_changelog_h

/* cnv_changelog.h -- Read changelog files */

#include "cnv_ctx.h"

class LogEntry {
  public:
  LogEntry()
  {
    strcpy(signature, "");
    strcpy(module, "");
    strcpy(component, "");
    strcpy(text, "");
  }
  LogEntry(const LogEntry& x) : time(x.time)
  {
    strcpy(signature, x.signature);
    strcpy(module, x.module);
    strcpy(component, x.component);
    strcpy(text, x.text);
  }
  const LogEntry& operator=(const LogEntry& x)
  {
    time = x.time;
    strcpy(signature, x.signature);
    strcpy(module, x.module);
    strcpy(component, x.component);
    strcpy(text, x.text);
    return *this;
  }
  pwr_tTime time;
  char signature[10];
  char module[40];
  char component[40];
  char text[400];
};

class CnvChangeLog {
  public:
  std::vector<LogEntry> entries;
  CnvCtx* ctx;
  int from;
  pwr_tTime from_time;

  CnvChangeLog(CnvCtx* cnv_ctx, char* from_str);

  int read(const char* module);
  void print();
  void print_docbook();
  void print_html();
  void sort_time();
  void sort_module();
  void sort_component();
  void sort_signature();
  static void from_git();
};

#endif
