/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* cnv_xtthelptops.cpp --
   Convert xtt help file to postscript. */

/*_Include files_________________________________________________________*/

#include <stdlib.h>

extern "C" {
#include "co_cdh.h"
#include "co_dcli.h"
}
#include "co_nav_help.h"
#include "co_lng.h"
#include "co_string.h"

#include "cnv_ctx.h"
#include "cnv_xtthelptops.h"
#include "cnv_image.h"

#define ps_cCellSize 110

void CnvXtthelpToPs::subject_to_fname(
    char* fname, const char* subject, int path)
{
  if (path) {
    strcpy(fname, ctx->dir);
    strcat(fname, ctx->rx->name);
  } else
    strcpy(fname, ctx->rx->name);
  if (ctx->generate_pdf) {
    strcat(fname, ".pdf");
  } else {
    strcat(fname, ".ps");
  }
}

CnvXtthelpToPs::~CnvXtthelpToPs()
{
  if (!first_topic) {
    if (status & ps_mStatus_xtthelp) {
      status &= ~ps_mStatus_xtthelp;
    }
  }
  tops->close();
  delete tops;
}

void* CnvXtthelpToPs::insert(navh_eItemType item_type, const char* text1,
    const char* text2, const char* text3, const char* alink,
    const char* link_bookmark, const char* file_name, navh_eHelpFile file_type,
    int help_index, const char* bookmark, int coding)
{
  char link[80];
  if (alink)
    strcpy(link, alink);

  if (option & ps_mOption_printDisable && item_type != navh_eItemType_Option)
    return NULL;

  if ((text2 && !streq(text2, "")) || (text3 && !streq(text3, ""))) {
    if (!(status & ps_mStatus_table))
      status |= ps_mStatus_table;
  } else {
    if (status & ps_mStatus_table) {
      // Close table (keep if empty line)
      if (!(text1 && streq(text1, "")
              && (item_type == navh_eItemType_Help
                     || item_type == navh_eItemType_HelpCode
                     || item_type == navh_eItemType_HelpBold)))
        status &= ~ps_mStatus_table;
    }
  }
  switch (item_type) {
  case navh_eItemType_DocTitlePage:
  case navh_eItemType_DocInfoPage:
  case navh_eItemType_Topic: {
    strcpy(current_subject, text1);

    if (item_type == navh_eItemType_DocTitlePage) {
      tops->set_cf(ps_eFile_Info);
      tops->set_ci(ps_eId_TitlePage);
    } else if (item_type == navh_eItemType_DocInfoPage) {
      tops->set_cf(ps_eFile_Info);
      tops->set_ci(ps_eId_InfoPage);
      tops->print_pagebreak(0);
    } else {
      if (tops->ci == ps_eId_Chapter) {
        if (!first_chaptertopic)
          tops->set_ci(ps_eId_TopicL1);
        else {
          first_chaptertopic = 0;
          if (ctx->generate_pdf) tops->y = ps_cPageHeight - ps_cTopMargin;
        }
      } else {
        if (!ctx->generate_pdf) tops->set_ci(ps_eId_TopicL1);
      }

      if (!ctx->generate_pdf && tops->cf == ps_eFile_Info)
        tops->y = ps_cPageHeight - ps_cTopMargin;
      tops->set_cf(ps_eFile_Body);
    }

    if (first_topic) {
      pwr_tFileName fname;

      subject_to_fname(fname, text1, 1);
      if (ctx->generate_pdf) {
        tops->set_filename(ps_eFile_Body, fname);
      } else {
        tops->set_filename(ps_eFile_Info, fname);
        tops->set_filename(ps_eFile_Body, ps_cTmpFile);
      }
      tops->open();

      status |= ps_mStatus_xtthelp;
      first_topic = 0;
    }
    status |= ps_mStatus_topic;
    return NULL;
  }
  case navh_eItemType_EndTopic: {
    if (status & ps_mStatus_table)
      status &= ~ps_mStatus_table;
    if (status & ps_mStatus_paragraph)
      status &= ~ps_mStatus_paragraph;
    if (status & ps_mStatus_topic)
      status &= ~ps_mStatus_topic;
    if (user_style) {
      user_style = 0;
      tops->set_ci(base_ci);
    }
    return NULL;
  }
  case navh_eItemType_Style: {
    if (str_NoCaseStrcmp(text1, "function") == 0) {
      base_ci = tops->ci;
      tops->set_ci(ps_eId_Function);
      user_style = 1;
    } else if (str_NoCaseStrcmp(text1, "report") == 0) {
      base_ci = tops->ci;
      tops->set_ci(ps_eId_Report);
    }
    return NULL;
  }
  case navh_eItemType_EndChapter: {
    if (status & ps_mStatus_table)
      status &= ~ps_mStatus_table;
    if (status & ps_mStatus_paragraph)
      status &= ~ps_mStatus_paragraph;
    if (status & ps_mStatus_topic)
      status &= ~ps_mStatus_topic;

    tops->set_ci(ps_eId_TopicL1);
    user_style = 0;
    return NULL;
  }
  case navh_eItemType_Chapter: {
    if (status & ps_mStatus_table)
      status &= ~ps_mStatus_table;
    if (status & ps_mStatus_paragraph)
      status &= ~ps_mStatus_paragraph;
    if (status & ps_mStatus_topic)
      status &= ~ps_mStatus_topic;

    tops->set_ci(ps_eId_Chapter);
    first_chaptertopic = 1;
    user_style = 0;

    tops->reset_headernumbers(1);
    return NULL;
  }
  case navh_eItemType_HeaderLevel: {
    if (user_style) {
      user_style = 0;
      tops->set_ci(base_ci);
    }
    tops->incr_headerlevel();
    return NULL;
  }
  case navh_eItemType_EndHeaderLevel: {
    if (user_style) {
      user_style = 0;
      tops->set_ci(base_ci);
    }
    tops->decr_headerlevel();
    return NULL;
  }
  case navh_eItemType_PageBreak: {
    tops->print_pagebreak(1);
    return NULL;
  }
  case navh_eItemType_Help:
  case navh_eItemType_HelpCode:
  case navh_eItemType_HelpBold: {
    int printmode;
    CnvStyle* hstyle = NULL;

    // Unable to calculate lenght because link i not known in confpass
    if (ctx->generate_pdf) strcpy(link, "");

    if (item_type == navh_eItemType_Help)
      hstyle = &tops->style[tops->ci].text;
    else if (item_type == navh_eItemType_HelpBold)
      hstyle = &tops->style[tops->ci].boldtext;
    else if (item_type == navh_eItemType_HelpCode)
      hstyle = &tops->style[tops->ci].code;

    if (!streq(link, ""))
      printmode = ps_mPrintMode_Start;
    else
      printmode = ps_mPrintMode_Pos;
    if (!(status & ps_mStatus_table)) {
      tops->x = ps_cLeftMargin;
      tops->print_text(text1, *hstyle, printmode);
    } else {
      tops->x = ps_cLeftMargin;
      tops->print_text(text1, *hstyle);
      if (text2 && !streq(text2, "")) {
        tops->x = ps_cLeftMargin + ps_cCellSize;
        tops->print_text(
            text2, *hstyle, ps_mPrintMode_KeepY | ps_mPrintMode_FixX);
      }
      if (text3 && !streq(text3, "")) {
        tops->x = ps_cLeftMargin + 2 * ps_cCellSize;
        tops->print_text(
            text3, *hstyle, ps_mPrintMode_KeepY | ps_mPrintMode_FixX);
      }
    }
    if (!streq(link, "") && !conf_pass) {
      pwr_tFileName fname;
      char str[300];
      int page;

      if (str_StartsWith(link, "$web:")) {
        if (str_StartsWith(&link[5], "$pwrp_web/"))
          strcpy(fname, &link[15]);
        else
          strcpy(fname, &link[5]);
        sprintf(str, " (%s %s)", Lng::translate("See"), fname);
        if (!(status & ps_mStatus_table))
          tops->print_text(str, tops->style[tops->ci].link,
              ps_mPrintMode_End | ps_mPrintMode_FixX);
        else {
          tops->x = ps_cLeftMargin + 3 * ps_cCellSize;
          if (ps_cLeftMargin + 2 * ps_cCellSize
                  + strlen(text3) * hstyle->font_size * 0.65
              > tops->x)
            tops->x = ps_cLeftMargin + 2 * ps_cCellSize
                + strlen(text3) * hstyle->font_size * 0.65;
          tops->print_text(str, tops->style[tops->ci].link,
              ps_mPrintMode_End | ps_mPrintMode_FixX);
        }
      } else if ((strstr(link, ".htm") != 0) || (strstr(link, ".pdf") != 0)) {
        strcpy(fname, link);
        sprintf(str, " (%s %s)", Lng::translate("See"), fname);
        if (!(status & ps_mStatus_table))
          tops->print_text(str, tops->style[tops->ci].link,
              ps_mPrintMode_End | ps_mPrintMode_FixX);
        else {
          tops->x = ps_cLeftMargin + 3 * ps_cCellSize;
          if (ps_cLeftMargin + 2 * ps_cCellSize
                  + strlen(text3) * hstyle->font_size * 0.65
              > tops->x)
            tops->x = ps_cLeftMargin + 2 * ps_cCellSize
                + strlen(text3) * hstyle->font_size * 0.65;
          tops->print_text(str, tops->style[tops->ci].link,
              ps_mPrintMode_End | ps_mPrintMode_FixX);
        }
      } else {
        char text[80];
        int sts = tops->content.find_link(link, text, &page);
        if (ODD(sts)) {
          sprintf(str, " (%s %s ", Lng::translate("See"), text);
          sprintf(&str[strlen(str)], "%s %d)", Lng::translate("page"), page);
          if (!(status & ps_mStatus_table))
            tops->print_text(str, tops->style[tops->ci].link,
                ps_mPrintMode_End | ps_mPrintMode_FixX);
          else {
          }
        } else if (ctx->generate_pdf && !(status & ps_mStatus_table))
          tops->print_text("", tops->style[tops->ci].link,
              ps_mPrintMode_End | ps_mPrintMode_FixX);
      }
    } else if (bookmark) {
      // fp[cf] << tags[ps_eTag_link].start << " name=\"" << bookmark << "\">";
    }

    return NULL;
  }
  case navh_eItemType_HelpHeader: {
    int hlevel;

    if (!user_style)
      hlevel = tops->ci - (int)ps_eId_Chapter;
    else
      hlevel = base_ci - (int)ps_eId_Chapter;
    tops->print_h1(text1, hlevel, current_subject);
    return NULL;
  }
  case navh_eItemType_Header: {
    tops->print_h3(text1);
    return NULL;
  }
  case navh_eItemType_HeaderLarge: {
    tops->print_h2(text1);
    return NULL;
  }
  case navh_eItemType_HorizontalLine: {
    tops->print_horizontal_line();
    return NULL;
  }
  case navh_eItemType_Image: {
    int sts = tops->print_image(text1);
    if (EVEN(sts))
      printf("Image: %s not found\n", text1);
    return NULL;
  }
  case navh_eItemType_Option: {
    if (streq(text1, "printdisable"))
      option |= ps_mOption_printDisable;
    else if (streq(text1, "printenable"))
      option &= ~ps_mOption_printDisable;
    return NULL;
  }
  default:
    return 0;
  }
}
