/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* cnv_xtthelptotext.cpp --
   Convert xtt help file to TEXT. */

/*_Include files_________________________________________________________*/

#include <stdlib.h>

extern "C" {
#include "co_cdh.h"
#include "co_dcli.h"
}
#include "co_lng.h"
#include "co_string.h"

#include "cnv_ctx.h"
#include "cnv_xtthelptotext.h"
#include "cnv_image.h"

#define CNV_TAB 25

void CnvXtthelpToText::subject_to_fname(
    char* fname, const char* subject, int path)
{
  if (path) {
    strcpy(fname, ctx->dir);
    strcat(fname, ctx->rx->name);
  } else
    strcpy(fname, ctx->rx->name);
  strcat(fname, ".txt");
}

CnvXtthelpToText::~CnvXtthelpToText()
{
  if (fp.is_open()) {
    fp.close();
  }
}

void* CnvXtthelpToText::insert(navh_eItemType item_type, const char* text1,
    const char* text2, const char* text3, const char* alink,
    const char* link_bookmark, const char* file_name, navh_eHelpFile file_type,
    int help_index, const char* bookmark, int coding)
{
  if (print_disable)
    return NULL;

  if (item_type != navh_eItemType_Topic && !in_topic)
    return NULL;

  switch (item_type) {
  case navh_eItemType_DocTitlePage:
  case navh_eItemType_DocInfoPage:
  case navh_eItemType_Style:
  case navh_eItemType_EndChapter:
  case navh_eItemType_Chapter:
  case navh_eItemType_HeaderLevel:
  case navh_eItemType_EndHeaderLevel:
  case navh_eItemType_Image:
    return NULL;
  case navh_eItemType_Topic: {
    if (first_topic) {
      pwr_tFileName fname;

      subject_to_fname(fname, text1, 1);
      fp.open(fname);

      first_topic = 0;
    }

    in_topic = 1;
    return NULL;
  }
  case navh_eItemType_EndTopic:
    in_topic = 0;
    break;
  case navh_eItemType_PageBreak: {
    fp << "\f";
    return NULL;
  }
  case navh_eItemType_Help:
  case navh_eItemType_HelpCode:
  case navh_eItemType_HelpBold:
  case navh_eItemType_Header:
  case navh_eItemType_HeaderLarge:
  case navh_eItemType_HelpHeader: {
    fp << text1;

    if (text2) {
      fp << " ";
      for (int i = 0; i < (int)(CNV_TAB - strlen(text1) - 1); i++)
        fp << " ";
      fp << text2;

      if (text3) {
        fp << " ";
        for (int i = 0; i < (int)(CNV_TAB - strlen(text2) - 1); i++)
          fp << " ";
        fp << text3;
      }
    }
    fp << '\n';

    break;
  }
  case navh_eItemType_HorizontalLine: {
    for (int i = 0; i < 80; i++)
      fp << "-";
    fp << '\n';

    return NULL;
  }
  case navh_eItemType_Option: {
    if (streq(text1, "printdisable"))
      print_disable = 1;
    else if (streq(text1, "printenable"))
      print_disable = 0;
    return NULL;
  }
  default:
    return 0;
  }

  return 0;
}
