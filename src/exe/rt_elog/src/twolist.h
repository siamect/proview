/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* Specifikation av tvåvägslista -- twolist.h */

#ifndef TWOLISTH
#define TWOLISTH

#ifndef rt_elog_h
#include "rt_elog.h"
#endif

typedef sKey datatyp; /* Exempelvis */

typedef struct twolink {
  enum { head, lank } kind;
  struct twolink *befo, *next;
  datatyp data;
} headtyp, linktyp;

void newhead(headtyp** hpp);
/* Skapar en ny tom lista */

void newlink(linktyp** lpp);
/* Skapar en ny tom länk */

void putlink(datatyp d, linktyp* lp);
/* Sätter in data i en länk */

datatyp getlink(linktyp* lp);
/* Returnerar data från länk */

void inlast(linktyp* lp, headtyp* hp);
/* Sätter in länken sist i listan */

void infirst(linktyp* lp, headtyp* hp);
/* Sätter in länken först i listan */

void inpred(linktyp* lp, linktyp* ep);
/* Sätter in första länken före den andra */

void insucc(linktyp* lp, linktyp* ep);
/* Sätter in första länken efter den andra */

void insort(linktyp* lp, headtyp* hp, int (*is_less)(datatyp d1, datatyp d2));
/* Sätter in länken sorterad enligt is_less */

linktyp* firstlink(headtyp* hp);
/* Returnerar pekare till första länken i listan */

linktyp* lastlink(headtyp* hp);
/* Returnerar pekare till sista länken i listan */

linktyp* predlink(linktyp* lp);
/* Returnerar pekare till länken före */

linktyp* succlink(linktyp* lp);
/* Returnerar pekare till länken efter */

int is_link(linktyp* lp);
/* Returnerar 1 om länk annars 0 */

int empty(headtyp* hp);
/* Returnerar 1 om listan tom annars 0 */

int nrlinks(headtyp* hp);
/* Returnerar antalet länkar i listan */

void outlist(linktyp* lp);
/* Tar bort länken från listan */

void elimlink(linktyp** lpp);
/* Tar bort, avallokerar och NULL-ställer länken */

void clearhead(headtyp* hp);
/* Tar bort alla länkar fr†n listan */

void elimhead(headtyp** hpp);
/* Eliminerar och NULL-ställer listan */

#endif
