/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_sysmon_h
#define rt_sysmon_h

#include <vector>

extern "C" {
#include "pwr_baseclasses.h"
#include "rt_qcom.h"
}

/*! \file rt_sysmon.h
    \brief Contains the rt_sysmon class. */
/*! \addtogroup rt */
/*@{*/

class sysmon_object {
public:
  sysmon_object(pwr_sAttrRef* arp);
  virtual ~sysmon_object();
  void open(double base_scantime);
  void close();
  void scan();
  pwr_tStatus status();

protected:
  pwr_sAttrRef aref;
  pwr_tAddress p;
  pwr_tRefId p_dlid;
  pwr_tCid cid;
  int scan_div;
  int scan_cnt;
  virtual void exec()
  {
  }
};

class disksup_object : public sysmon_object {
public:
  disksup_object(pwr_sAttrRef* arp) : sysmon_object(arp)
  {
  }

  void exec();
};

//! Monitoring of system supervisory objects.
/*! ...
*/

class rt_sysmon {
public:
  rt_sysmon() : sysmon_cnt(0), scan_time(10)
  {
  }

  void init(qcom_sQid* qid);
  void open();
  void close();
  void scan();
  double scantime()
  {
    return scan_time;
  }
  static int connect_alarm();
  static int alarm_send(
      pwr_tOid oid, char* alarm_text, char* alarm_name, int alarm_prio);

private:
  std::vector<sysmon_object*> objects;
  pwr_sClass_SysMonConfig* conf;
  pwr_tRefId conf_dlid;
  int sysmon_cnt;
  double scan_time;
};

/*@}*/
#endif
