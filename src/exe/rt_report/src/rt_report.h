/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_report_h
#define rt_report_h

#include <vector>

#include "rt_qcom.h"
#include "co_user.h"
#include "pwr_baseclasses.h"

/*! \file rt_report.h
    \brief Contains the rt_report class. */
/*! \addtogroup rt */
/*@{*/

typedef struct {
  pwr_sClass_Report* p;
  pwr_tDlid dlid;
} report_sObject;

class rt_report {
  public:
  rt_report();
  void init(qcom_sQid* qid);
  void open();
  void close();
  void scan();
  double scantime()
  {
    return scan_time;
  }
  void create_report(pwr_sClass_Report* o);
  void replace_symbol(char* outstr, char* instr);
  int replace_value(char* out, unsigned int size, char* in);
  void format_cmd(char* cmd, int cmd_size, const char* format,
      const char* address, const char* text, const char* subject,
      const char* reportfile, const char* date);
  void periodic_scan();
  int periodic_check(pwr_sClass_Report* o);
  int parse(char* line);

  double scan_time;
  pwr_sClass_ReportConfig* conf;
  std::vector<report_sObject> repv;
  GeUser* udb;
  char nodename[80];
  char systemgroup[80];
  char display[80];
  int first_scan;
  int old_sec;
  int old_min;
  int old_hour;
  int old_mday;
  int old_wday;
  int old_yday;
  int now_sec;
  int now_min;
  int now_hour;
  int now_mday;
  int now_wday;
  int now_yday;
};

/*@}*/
#endif
