/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_sim_h
#define rt_sim_h

#include "pwr.h"
#include "pwr_baseclasses.h"

/*! \file rt_sim.h
    \brief Contains the rt_sim class. */
/*! \addtogroup rt */
/*@{*/

typedef enum { sim_eNMpsClear_All, sim_eNMpsClear_NoBackup } sim_eNMpsClear;

class rt_sim {
  public:
  rt_sim()
      : scan_time(0.5), ioconf(0), thread_cnt(0), select_thread_cnt(0),
        state_stored(false), halt_order_active(false), load_order_active(false),
        disable_old(0)
  {
    memset(plcpgm_stored_scanoff, 0, sizeof(plcpgm_stored_scanoff));
  }
  void init(qcom_sQid* qid);
  void open();
  void close();
  void scan();
  double scantime()
  {
    return scan_time;
  }
  pwr_tStatus print_object(FILE* fp, pwr_tOid oid);
  pwr_tStatus store();
  pwr_tStatus load();
  void clear_timers();
  void restore_timers();
  void restore_timers(int thread_idx, pwr_tOid oid);
  void clear_nmps(sim_eNMpsClear mode);
  void store_nmps();
  void load_nmps();
  void delete_children(pwr_tOid oid);
  void store_state();

  double scan_time;
  pwr_sClass_SimulateConfig* conf;
  pwr_sClass_IOHandler* ioconf;
  unsigned int thread_cnt;
  pwr_sClass_PlcThread* threadp[30];
  pwr_tDlid thread_dlid[30];
  unsigned int select_thread_cnt;
  unsigned int plcpgm_cnt;
  unsigned int plcpgm_thread_idx[200];
  pwr_sClass_windowplc* windowplcp[200];
  pwr_tDlid windowplc_dlid[200];
  int plcpgm_stored_scanoff[200];
  bool state_stored;
  bool halt_order_active;
  bool step_order_active;
  bool continue_order_active;
  bool load_order_active;
  pwr_tBoolean disable_old;
};

/*@}*/
#endif
