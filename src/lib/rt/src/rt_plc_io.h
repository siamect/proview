/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_plc_io_h
#define rt_plc_io_h

void pipos_exec(plc_sThread* tp, pwr_sClass_pipos* object);
void count_exec(plc_sThread* tp, pwr_sClass_count* object);
void bcddo_exec(plc_sThread* tp, pwr_sClass_bcddo* object);
void dibcd_exec(plc_sThread* tp, pwr_sClass_dibcd* object);
void gray_exec(plc_sThread* tp, pwr_sClass_gray* object);
void GetDpPtr_init(pwr_sClass_GetDpPtr* o);
void GetDpPtr_exec(plc_sThread* tp, pwr_sClass_GetDpPtr* o);
void GetApPtr_init(pwr_sClass_GetApPtr* o);
void GetApPtr_exec(plc_sThread* tp, pwr_sClass_GetApPtr* o);
void GetIpPtr_init(pwr_sClass_GetIpPtr* o);
void GetIpPtr_exec(plc_sThread* tp, pwr_sClass_GetIpPtr* o);
void StoDpPtr_init(pwr_sClass_StoDpPtr* o);
void StoDpPtr_exec(plc_sThread* tp, pwr_sClass_StoDpPtr* o);
void StoApPtr_init(pwr_sClass_StoApPtr* o);
void StoApPtr_exec(plc_sThread* tp, pwr_sClass_StoApPtr* o);
void StoIpPtr_init(pwr_sClass_StoIpPtr* o);
void StoIpPtr_exec(plc_sThread* tp, pwr_sClass_StoIpPtr* o);
void EnumToStr_init(pwr_sClass_EnumToStr* o);
void EnumToStr_exec(plc_sThread* tp, pwr_sClass_EnumToStr* o);
void StrToEnum_init(pwr_sClass_StrToEnum* o);
void StrToEnum_exec(plc_sThread* tp, pwr_sClass_StrToEnum* o);

#endif
