/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_mh_def_h
#define rt_mh_def_h

#include "pwr_baseclasses.h"
#include "co_tree.h"
#include "pwr_lst.h"

#include "rt_gdh.h"
#include "rt_gdh_msg.h"
#include "rt_mh_appl.h"
#include "rt_mh_outunit.h"

#define mh_cScanRate 10 /* Tenths of seconds between scans of sup objects */
#define mh_cMaxApplAlarm 50 /* Default value*/
#define mh_cMaxEvents 100 /* Default value*/
#define mh_cDetectTimer 1.0
#define mh_cMessageTimer 1.0

typedef struct mhs_ApplConnect mh_sApplConnect;
typedef struct mhs_ApplReturn mh_sApplReturn;
typedef union mhu_ApplReply mh_uApplReply;
typedef struct mhs_ProcLink mh_sProcLink;

/*------------------------------------------------------------------------------
* Enumerations
*/

typedef enum {
  mh_eAgent__ = 0,
  mh_eAgent_None = 1,
  mh_eAgent_MH = 2,
  mh_eAgent_IO = 3,
  mh_eAgent_Plc = 4,
  mh_eAgent_
} mh_eAgent;

typedef enum {
  mh_eApplState__ = 0,
  mh_eApplState_Aborted = 1,
  mh_eApplState_Connected = 2,
  mh_eApplState_Disconnected = 3,
  mh_eApplState_New = 4,
  mh_eApplState_Restarted = 5,
  mh_eApplState_
} mh_eApplState;

/*------------------------------------------------------------------------------
* Structs
*/

struct mhs_ApplConnect {
  pwr_tObjid ApplObject;
  qcom_sQid Qid;
  mh_mApplFlags Flags;
  pwr_tString80 AbortEventName;
  mh_eEvent AbortEventType;
  mh_eEventPrio AbortEventPrio;
  mh_mEventFlags AbortEventFlags;
  pwr_tString80 AbortEventText;
};

struct mhs_ApplContext {
  mh_sHead Head;
  qcom_sQid Handler;
  mh_eApplState State;
};

union mhu_ApplReply {
  pwr_tUInt32 Sts;
  struct {
    pwr_tUInt32 Sts;
    pwr_tUInt32 NoOfActMessages;
  } Connect;
  struct {
    pwr_tUInt32 Sts;
    pwr_tUInt32 Idx;
  } Message;
  struct {
    pwr_tUInt32 Sts;
    mh_sApplMessage Message;
  } Info;
};

struct mhs_ApplReturn {
  pwr_tUInt32 TargetIdx;
  mh_eEvent ReturnType;
  pwr_tString80 ReturnText;
};

#endif
