/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_sub_h
#define rt_sub_h

/* rt_sub.h -- <short description>

   Subscription data

   The subscription database is split in the following parts:
        SUBCLI	Subscription client data
        SUBSRV	Subscription server data
        SUBBUF	Subscription buffer data, gruoups SUBSRVs
        SUBMSG	Subscription update data, the actual message
        SUBDATA	The actual update data for one SUBCLI, inside SUBMSG  */

#include "rt_gdb.h"

#define sub_cHashSize 799
#define sub_cMsgSize 9900 /* Target (nominal) size of buffers */

typedef struct {
  pwr_tSubid sid; /* Must be at same offset in sub_sClient & sub_sServer */
  pool_sQlink subc_htl; /* Subscription client hash table link.  */
  pool_sQlink subc_ll; /* Link in list of all clients of one node.  */

  /* The following are only used for remote SUBCLIs */

  pool_sQlink subt_ll; /* Linkage for timeout watching */
  pool_tRef submsg; /* SUBMSG reference */
  pool_tRef subdata; /* SUBDATA segment for last update */

  pool_tRef userdata; /* User requested buffer, or pool_cNullRef */
  pwr_tUInt32 usersize; /* Size of user buffer */

  pool_tRef cclass; /* != pool_cNullRef if different class versions */
  pwr_sAttrRef raref; /* If different class versions */

  /* Status information */

  pwr_tStatus sts; /* Last update status */
  pwr_tVolumeId vid; /* Volume that owns the object.  */
  pwr_tNodeId nid; /* Node identity of data. pwr_cNNodeId = unknown*/
  pwr_tBoolean old; /* Old, timed out */
  pwr_tBoolean tmoactive; /* SUBCLI is in tmo list */

  /* Statistics */

  pwr_tTime lastupdate; /* Time for last update */
  pwr_tUInt32 count; /* Update count */

  /* The following are set up when the subscription is established: */

  pid_t subscriber; /* Who requested subscription */
  pwr_tUInt32 dt; /* Update time in 10ths of seconds */
  pwr_tUInt32 tmo; /* Requested timeout time */

  pwr_tBoolean sub_by_name; /* name or attrref selector */
  pwr_sAttrRef aref; /* Subscription by attribute ref or name */
  char name[1]; /* Subscription by name (dyn len) */

} sub_sClient;

typedef struct {
  pwr_tSubid sid; /* Must be at same offset in sub_sClient & sub_sServer */
  pool_sQlink subs_htl; /* Subscription server hash table link.  */
  pool_sQlink subs_ll; /* List of all SUBSRVs */
  pool_sQlink nodsubs_ll; /* List of all SUBSRVs for one node.  */
  pool_sQlink bufsubs_ll; /* List of SUBBUF members */
  pool_tRef br; /* Assigned SUBBUF (pool reference).*/

  pwr_tStatus sts; /* Status of last operation */
  pwr_tUInt32 count; /* Update count */

  pwr_tNodeId nid; /* node where SUBCLI resides */

  pwr_tUInt32 dt; /* Requested update time */

  pwr_tBoolean sub_by_name; /* name or attrref selector */
  pwr_sAttrRef aref; /* Subscription by attribute ref or name */
  pool_tRef data; /* Pool reference of actual data.  */
} sub_sServer;

typedef struct {
  pool_sQlink subb_ll; /* List of all SUBBUFs */
  pool_sQlink nodsubb_ll; /* List of all SUBBUFs for one node.  */
  pool_sQlink bufsubs_lh; /* Root for attached SUBSRVs */
  pwr_tUInt32 bufsubs_lc; /* # of subsrvs in this subbuf */
  gdb_sTmonQlink tmonq; /* List of items to be registered by tmon.  */

  pwr_tNodeId nid; /* Node to receive update */
  pwr_tUInt32 buf_id; /* Unique id for this buffer */
  pwr_tUInt32 totsize; /* Total (accum) data size of buffer */
  pwr_tInt32 dt; /* Update time in milli seconds.  */

  pwr_tTime lastupdate; /* Time for last update */
  pwr_tStatus sts; /* Last operation status */
  pwr_tBoolean queued; /* Buffer is queued, ie timer active */
} sub_sBuffer;

/* Subscription data transfer.  */

typedef struct {
  pool_sQlink subm_ll; /* Linkage when on client side */
  net_sSubMessage msg;
} sub_sMessage;

void sub_InitLocal();

void sub_UnlinkObject(gdb_sObject* op);

#endif
