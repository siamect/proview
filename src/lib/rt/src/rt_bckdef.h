/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "pwr.h"
#include "rt_net.h"

/* Trace flag: Define BCK_TRACE for trace printouts */

/* #+define BCK_TRACE 1 */

/* Default cycle times */

#define BCK_DEFAULT_SLOW 600
#define BCK_DEFAULT_FAST 100

/**************************/
/* File format definition */
/**************************/

/* The backup file consists of 2 areas,
   o a header which contains file info and pointers. This area is
     fixed length and defined as BCK_FILEHEAD_STRUCT. It is always
     the first thing in the file.
   o the data section. This section contains the backup data. The
     section is varying in size. Information here is pointed out by the
     header area. The routines bck_falloc and bck_ffree are used
     to allocate and free areas in this section.  */

#define BCK_FILE_VERSION 7

typedef struct {
  pwr_tInt32 version; /* File layout version */
  pwr_tInt32 fill;
  pwr_tTime creationtime; /* Time when file was created */
  pwr_tTime updatetime[2]; /* Time when header was last updated */
  pwr_tInt32 curdata[2]; /* backup data 0 for fast cycle, and */
  /* 1 for slow. Contains file address */
  pwr_tInt32 cursize[2]; /* size in bytes of curdata areas */

  /* Node identification */

  pwr_tNodeId nodidx; /* node index that produced the file */

} BCK_FILEHEAD_STRUCT;

/* File header for Version 6 and previous */
typedef struct {
  pwr_tInt32 version; /* File layout version */
  net_sTime creationtime; /* Time when file was created */
  net_sTime updatetime[2]; /* Time when header was last updated */
  pwr_tInt32 curdata[2]; /* backup data 0 for fast cycle, and */
  /* 1 for slow. Contains file address */
  pwr_tInt32 cursize[2]; /* size in bytes of curdata areas */

  /* Node identification */

  pwr_tNodeId nodidx; /* node index that produced the file */

} BCK_FILEHEAD_STRUCT_V6;

/* Each data section starts with a cycle header.  */

typedef struct {
  net_sTime objtime; /* Time up to which new objects are included */
  pwr_tUInt32 length; /* Length of section including this header */
  pwr_tUInt16 cycle; /* 0=fast, 1=slow */
  pwr_tUInt16 segments; /* # of segments in section */
} BCK_CYCLEHEAD_STRUCT;

typedef struct {
  net_sTime objtime; /* Time up to which new objects are included */
  pwr_tUInt32 length; /* Length of section including this header */
  pwr_tUInt16 cycle; /* 0=fast, 1=slow */
  pwr_tUInt32 segments; /* # of segments in section */
} BCK_CYCLEHEAD_STRUCT_V6;

typedef struct {
  pwr_tTime objtime; /* Time up to which new objects are included */
  pwr_tUInt32 length; /* Length of section including this header */
  pwr_tUInt16 cycle; /* 0=fast, 1=slow */
  pwr_tUInt32 segments; /* # of segments in section */
} bck_t_cycleheader;

/* Each data section area is divided in a number of segments,
   each containing information pointed out by a single backup
   object. The segment starts with a header which contains the
   identification of the object and parameter the data is backed
   up from. It also contains the size of the following data part.
   This header is fixed size and defined as BCK_DATAHEAD_STRUCT  */

typedef struct {
  pwr_sAttrRef attrref; /* Objid for the object */
  pwr_tClassId cid; /* Class of object */
  pwr_tBoolean valid; /* Validity flag */
  pwr_tBoolean dynamic; /* Dynamic object */
  pwr_tString80 dataname; /* Name of object[.attribute] */
} BCK_DATAHEAD_STRUCT;

typedef struct {
  pwr_sAttrRef attrref; /* Objid for the object */
  pwr_tClassId cid; /* Class of object */
  pwr_tBoolean valid; /* Validity flag */
  pwr_tBoolean dynamic; /* Dynamic object */
  pwr_tInt16 namesize; /* Name of attribute [.attribute] */
} bck_t_dataheader;

typedef struct {
  pwr_tObjid objid; /* Objid for the object */
  pwr_tClassId cid; /* Class of object */
  pwr_tBoolean valid; /* Validity flag */
  pwr_tBoolean dynamic; /* Dynamic object */
  pwr_tInt16 namesize; /* Size of name of attribute [.attribute] */
  pwr_tUInt32 size; /* Size of data */
} bck_t_writeheader;

#define SIG_BCK_FORCE (SIGRTMIN + 1) /* forced activation sig  */
#define SIG_BCK_WRITE_DONE (SIGRTMIN + 2) /* backup done            */
