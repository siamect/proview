/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "rt_gdh_msg.h"

/*		 PREPROCESSOR RUTINER					    */

/*_*
  STODO
  store digital output
  @aref stodo StoDo
*/
#define stodo_exec(obj, in) obj->ActualValue = in;

/*_*
  STODV
  store digital value
  @aref stodv StoDv
*/
#define stodv_exec(obj, in) obj->ActualValue = in;

/*_*
  STODP
  Store into digital parameter
  @aref stodp StoDp
*/
#define stodp_exec(ut, in) ut = in;

/*_*
  STOAO
  store into analog output
  @aref stoao StoAo
*/
#define stoao_exec(obj, in) obj->ActualValue = in;

/*_*
  STOAV
  store into analog value
  @aref stoav StoAv
*/
#define stoav_exec(obj, in) obj->ActualValue = in;

/*_*
  STOAP
  Store into analog parameter
  @aref stoap StoAp
*/
#define stoap_exec(ut, in) ut = in;

/*_*
  CSTOAO
  store conditionally into analog output
  @aref cstoao CStoAo
*/
#define cstoao_exec(obj, in, cond)                                             \
  if (cond)                                                                    \
    obj->ActualValue = in;

/*_*
  CSTOAV
  store conditionally into analog value
  @aref cstoav CStoAv
*/
#define cstoav_exec(obj, in, cond)                                             \
  if (cond)                                                                    \
    obj->ActualValue = in;

/*_*
  CSTOAP
  Store conditionally into analog parameter
  @aref cstoap CStoAp
*/
#define cstoap_exec(ut, in, cond)                                              \
  if (cond)                                                                    \
    ut = in;

/*_*
  SETDO
  Set digital output if true
  @aref setdo SetDo
*/
#define setdo_exec(obj, in)                                                    \
  if (in)                                                                      \
    obj->ActualValue = true;

/*_*
  SETDV
  Set digital value if true
  @aref setdv SetDv
*/
#define setdv_exec(obj, in)                                                    \
  if (in)                                                                      \
    obj->ActualValue = true;

/*_*
  SETDP
  Set digital parameter if true
  @aref setdp SetDp
*/
#define setdp_exec(ut, in)                                                     \
  if (in)                                                                      \
    ut = true;

/*_*
  RESDO
  Reset digital output if true
  @aref resdo ResDo
*/
#define resdo_exec(obj, in)                                                    \
  if (in)                                                                      \
    obj->ActualValue = false;

/*_*
  RESDV
  Reset digital value if true
  @aref resdv ResDv
*/
#define resdv_exec(obj, in)                                                    \
  if (in)                                                                      \
    obj->ActualValue = false;

/*_*
  RESDP
  Reset digital parameter if true
  @aref resdp ResDp
*/
#define resdp_exec(ut, in)                                                     \
  if (in)                                                                      \
    ut = false;

/*_*
  StoIp
  Store integer parameter
  @aref stoip StoIp
*/
#define StoIp_exec(ut, in) ut = in;

/*_*
  CStoIp
  Store conditionally integer parameter
  @aref cstoip CStoIp
*/
#define CStoIp_exec(ut, in, cond)                                              \
  if (cond)                                                                    \
    ut = in;

/*_*
  StoAtoIp
  Store analog value into integer parameter
  @aref stoatoip StoAtoIp
*/
#define StoAtoIp_exec(ut, in) ut = in > 0 ? in + 0.5 : in - 0.5;

/*_*
  CStoAtoIp
  Store conditionally analog value into integer parameter
  @aref cstoatoip CStoAtoIp
*/
#define CStoAtoIp_exec(ut, in, cond)                                           \
  if (cond)                                                                    \
    ut = in > 0 ? in + 0.5 : in - 0.5;

/*_*
  GetIpToA
  Get Integer parameter as an analog value
  @aref getiptoa GetIpToA
*/
#define GetIpToA_exec(object, in) object->ActVal = in;

/*_*
  GetIp
  Get Integer parameter
  @aref getip GetIp
*/
#define GetIp_exec(object, in) object->ActVal = in;

/*_*
  STODI
  store digital input (Simulate)
  @aref stodi StoDi
*/
#define stodi_exec(obj, in) obj->ActualValue = in;

/*_*
  SETDI
  Set digital input if true (Simulate)
  @aref setdi SetDi
*/
#define setdi_exec(obj, in)                                                    \
  if (in)                                                                      \
    obj->ActualValue = true;

/*_*
  RESDI
  Reset digital input if true (Simulate)
  @aref resdi ResDi
*/
#define resdi_exec(obj, in)                                                    \
  if (in)                                                                      \
    obj->ActualValue = false;

/*_*
  TOGGLEDI
  Toggle digital input (Simulate)
  @aref toggledi ToggleDi
*/
#define toggledi_exec(obj, in)                                                 \
  if (in)                                                                      \
    obj->ActualValue = !obj->ActualValue;

/*_*
  STOAI
  store analog input (Simulate)
  @aref stoai StoAi
*/
#define stoai_exec(obj, in) obj->ActualValue = in;

/*_*
  CSTOAI
  store conditionally into analog input (Simulate)
  @aref cstoai CStoAi
*/
#define cstoai_exec(obj, in, cond)                                             \
  if (cond)                                                                    \
    obj->ActualValue = in;

/*_*
  STOPI
  store into co (Simulate)
  @aref stopi StoPi
*/
#define stopi_exec(rawvalue, absvalue, in)                                     \
  rawvalue->RawValue = in;                                                     \
  absvalue->RawValue = in;

/*_*
  StoIo
  Store integer output
  @aref stoio StoIo
*/
#define stoio_exec(obj, in) obj->ActualValue = in;

/*_*
  CStoIo
  store conditionally into integer output
  @aref cstoio CStoIo
*/
#define cstoio_exec(obj, in, cond)                                             \
  if (cond)                                                                    \
    obj->ActualValue = in;

/*_*
  StoIv
  Store integer value
  @aref stoiv StoIv
*/
#define stoiv_exec(obj, in) obj->ActualValue = in;

/*_*
  CStoIv
  store conditionally into integer value
  @aref cstoiv CStoIv
*/
#define cstoiv_exec(obj, in, cond)                                             \
  if (cond)                                                                    \
    obj->ActualValue = in;

/*_*
  StoIi
  store integer input (Simulate)
  @aref stoii StoIi
*/
#define stoii_exec(obj, in) obj->ActualValue = in;

/*_*
  CStoIi
  store conditionally into integer input (Simulate)
  @aref cstoii CStoIi
*/
#define cstoii_exec(obj, in, cond)                                             \
  if (cond)                                                                    \
    obj->ActualValue = in;

/*_*
  StoBiInt32
  store buffer input (Simulate)
  @aref stobiint32 StoBiInt32
*/
#define StoBiInt32_exec(obj, in) obj->ActualValue = in;

/*_*
  CStoBiInt32
  store conditionally into buffer input (Simulate)
  @aref cstobiint32 CStoBiInt32
*/
#define CStoBiInt32_exec(obj, in, cond)                                        \
  if (cond)                                                                    \
    obj->ActualValue = in;

/*_*
  StoBoInt32
  store buffer output
  @aref stoboint32 StoBoInt32
*/
#define StoBoInt32_exec(obj, in) obj->ActualValue = in;

/*_*
  CStoBoInt32
  store conditionally into buffer output
  @aref cstoboint32 CStoBoInt32
*/
#define CStoBoInt32_exec(obj, in, cond)                                        \
  if (cond)                                                                    \
    obj->ActualValue = in;

/*_*
  StoBiFloat32
  store buffer input (Simulate)
  @aref stobifloat32 StoBiFloat32
*/
#define StoBiFloat32_exec(obj, in) obj->ActualValue = in;

/*_*
  CStoBiFloat32
  store conditionally into buffer input (Simulate)
  @aref cstobifloat32 CStoBiFloat32
*/
#define CStoBiFloat32_exec(obj, in, cond)                                      \
  if (cond)                                                                    \
    obj->ActualValue = in;

/*_*
  StoBoFloat32
  store buffer output
  @aref stobofloat32 StoBoFloat32
*/
#define StoBoFloat32_exec(obj, in) obj->ActualValue = in;

/*_*
  CStoBoFloat32
  store conditionally into buffer output
  @aref cstobofloat32 CStoBoFloat32
*/
#define CStoBoFloat32_exec(obj, in, cond)                                      \
  if (cond)                                                                    \
    obj->ActualValue = in;

/*_*
  StoBiString80
  store buffer input (Simulate)
  @aref stobistring80 StoBiString80
*/
#define StoBiString80_exec(obj, in) strncpy(obj->ActualValue, in, 80);

/*_*
  CStoBiString80
  store conditionally buffer input (Simulate)
  @aref cstobistring80 CStoBiString80
*/
#define CStoBiString80_exec(obj, in, cond)                                     \
  if (cond)                                                                    \
    strncpy(obj->ActualValue, in, 80);

/*_*
  StoBoString80
  store buffer output
  @aref stobostring80 StoBoString80
*/
#define StoBoString80_exec(obj, in) strncpy(obj->ActualValue, in, 80);

/*_*
  CStoBoString80
  store conditionally buffer input
  @aref cstobostring80 CStoBoString80
*/
#define CStoBoString80_exec(obj, in, cond)                                     \
  if (cond)                                                                    \
    strncpy(obj->ActualValue, in, 80);

/*_*
  DtoI
  @aref dtoi DtoI
*/
#define DtoI_exec(obj, in) obj->ActVal = in ? 1 : 0;

/*_*
  AtoI
  @aref atoi AtoI
*/
#define AtoI_exec(obj, in) obj->ActVal = in > 0 ? in + 0.5 : in - 0.5;

/*_*
  ItoA
  @aref itoa ItoA
*/
#define ItoA_exec(obj, in) obj->ActVal = in;

/*_*
  StoDattr
  @aref stodattr StoDattr
*/
#define StoDattr_exec(attr, in) attr = in;

/*_*
  SetDattr
  @aref setdattr SetDattr
*/
#define SetDattr_exec(attr, in)                                                \
  if (in)                                                                      \
    attr = true;

/*_*
  ResDattr
  @aref resdattr ResDattr
*/
#define ResDattr_exec(attr, in)                                                \
  if (in)                                                                      \
    attr = false;

/*_*
  StoIattr
  @aref stoiattr StoIattr
*/
#define StoIattr_exec(attr, in) attr = in;

/*_*
  CStoIattr
  @aref cstoiattr CStoIattr
*/
#define CStoIattr_exec(attr, in, cond)                                         \
  if (cond)                                                                    \
    attr = in;

/*_*
  StoAattr
  @aref stoaattr StoAattr
*/
#define StoAattr_exec(attr, in) attr = in;

/*_*
  CStoAattr
  @aref cstoaattr CStoAattr
*/
#define CStoAattr_exec(attr, in, cond)                                         \
  if (cond)                                                                    \
    attr = in;

/*_*
  StoSattr
  @aref stosattr StoSattr
*/
#define StoSattr_exec(attr, in, size)                                          \
  strncpy(attr, in, size);                                                     \
  attr[size - 1] = 0;

/*_*
  CStoSattr
  @aref cstosattr CStoSattr
*/
#define CStoSattr_exec(attr, in, cond, size)                                   \
  if (cond) {                                                                  \
    strncpy(attr, in, size);                                                   \
    attr[size - 1] = 0;                                                        \
  }

/*_*
  CStoExtBoolean
  @aref cstoextboolean CStoExtBoolean
*/
#define CStoExtBoolean_exec(obj, name, in, cond)                               \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus                                                            \
        = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tBoolean));           \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtFloat32
  @aref cstoextfloat32 CStoExtFloat32
*/
#define CStoExtFloat32_exec(obj, name, in, cond)                               \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus                                                            \
        = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tFloat32));           \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtFloat64
  @aref cstoextfloat64 CStoExtFloat64
*/
#define CStoExtFloat64_exec(obj, name, in, cond)                               \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus                                                            \
        = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tFloat64));           \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtInt8
  @aref cstoextint8 CStoExtInt8
*/
#define CStoExtInt8_exec(obj, name, in, cond)                                  \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tInt8));  \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtInt16
  @aref cstoextint16 CStoExtInt16
*/
#define CStoExtInt16_exec(obj, name, in, cond)                                 \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tInt16)); \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtInt32
  @aref cstoextint32 CStoExtInt32
*/
#define CStoExtInt32_exec(obj, name, in, cond)                                 \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tInt32)); \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtInt64
  @aref cstoextint64 CStoExtInt64
*/
#define CStoExtInt64_exec(obj, name, in, cond)                                 \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tInt64)); \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtInt8
  @aref cstoextuint8 CStoExtUInt8
*/
#define CStoExtUInt8_exec(obj, name, in, cond)                                 \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tUInt8)); \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtUInt16
  @aref cstoextuint16 CStoExtUInt16
*/
#define CStoExtUInt16_exec(obj, name, in, cond)                                \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus                                                            \
        = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tUInt16));            \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtUInt32
  @aref cstoextuint32 CStoExtUInt32
*/
#define CStoExtUInt32_exec(obj, name, in, cond)                                \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus                                                            \
        = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tUInt32));            \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtUInt64
  @aref cstoextuint64 CStoExtUInt64
*/
#define CStoExtUInt64_exec(obj, name, in, cond)                                \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus                                                            \
        = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tUInt64));            \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtString
  @aref cstoextstring CStoExtString
*/
#define CStoExtString_exec(obj, name, in, cond)                                \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus                                                            \
        = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tString80));          \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  CStoExtTime
  @aref cstoexttime CStoExtTime
*/
#define CStoExtTime_exec(obj, name, in, cond)                                  \
  if (cond && !obj->OldCond) {                                                 \
    obj->LastStatus = gdh_SetObjectInfo(name, (void*)&in, sizeof(pwr_tTime));  \
  }                                                                            \
  obj->OldCond = cond;

/*_*
  GetExtFloat32
  @aref getextfloat32 GetExtFloat32
*/
#define GetExtFloat32_init(obj, name)                                          \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tFloat32)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtFloat32_exec(obj, name)					       \
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtFloat32_init(obj, name);

/*_*
  GetExtFloat64
  @aref getextfloat64 GetExtFloat64
*/
#define GetExtFloat64_init(obj, name)                                          \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tFloat64)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtFloat64_exec(obj, name)					\
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtFloat64_init(obj, name);

/*_*
  GetExtInt64
  @aref getextint64 GetExtInt64
*/
#define GetExtInt64_init(obj, name)                                            \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tInt64)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtInt64_exec(obj, name)						\
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtInt64_init(obj, name);

/*_*
  GetExtUInt64
  @aref getextuint64 GetExtUInt64
*/
#define GetExtUInt64_init(obj, name)                                           \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tUInt64)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtUInt64_exec(obj, name)						\
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtUInt64_init(obj, name);

/*_*
  GetExtInt32
  @aref getextint32 GetExtInt32
*/
#define GetExtInt32_init(obj, name)                                            \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tInt32)) == GDH__NODYNLOCOBJ)	\
      obj->ExtP = 0;							       \
  }

#define GetExtInt32_exec(obj, name)						\
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtInt32_init(obj, name);

/*_*
  GetExtUInt32
  @aref getextuint32 GetExtUInt32
*/
#define GetExtUInt32_init(obj, name)                                           \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tUInt32)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtUInt32_exec(obj, name)						\
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtUInt32_init(obj, name);

/*_*
  GetExtInt16
  @aref getextint16 GetExtInt16
*/
#define GetExtInt16_init(obj, name)                                            \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tInt16)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtInt16_exec(obj, name)						\
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtInt16_init(obj, name);

/*_*
  GetExtUInt16
  @aref getextuint16 GetExtUInt16
*/
#define GetExtUInt16_init(obj, name)                                           \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tUInt16)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtUInt16_exec(obj, name)						\
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtUInt16_init(obj, name);

/*_*
  GetExtInt8
  @aref getextint8 GetExtInt8
*/
#define GetExtInt8_init(obj, name)                                             \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tInt8)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtInt8_exec(obj, name)						\
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtInt8_init(obj, name);

/*_*
  GetExtUInt8
  @aref getextuint8 GetExtUInt8
*/
#define GetExtUInt8_init(obj, name)                                            \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tUInt8)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtUInt8_exec(obj, name)						\
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtUInt8_init(obj, name);

/*_*
  GetExtBoolean
  @aref getextboolean GetExtBoolean
*/
#define GetExtBoolean_init(obj, name)                                          \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tBoolean)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtBoolean_exec(obj, name)					\
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtBoolean_init(obj, name);

/*_*
  GetExtString
  @aref getextstring GetExtString
*/
#define GetExtString_init(obj, name)                                           \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tString80)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtString_exec(obj, name)						\
  if (obj->ExtP)                                                               \
    strncpy(obj->ActVal, (const char *)obj->ExtP, sizeof(pwr_tString80)); \
  else if (tp->ext_retry_connect)					       \
    GetExtString_init(obj, name);

/*_*
  GetExtTime
  @aref getexttime GetExtTime
*/
#define GetExtTime_init(obj, name)                                             \
  {                                                                            \
    if (gdh_RefObjectInfo(name, (void**)&obj->ExtP, 0, sizeof(pwr_tTime)) == GDH__NODYNLOCOBJ) \
      obj->ExtP = 0;							       \
  }

#define GetExtTime_exec(obj, name)						\
  if (obj->ExtP)                                                               \
    obj->ActVal = *obj->ExtP;						       \
  else if (tp->ext_retry_connect)					       \
    GetExtTime_init(obj, name);

/*_*
  Float64toA
  @aref float64toa Float64toA
*/
#define Float64toA_exec(obj, in) obj->ActVal = in;

/*_*
  AtoFloat64
  @aref atofloat64 AtoFloat64
*/
#define AtoFloat64_exec(obj, in) obj->ActVal = in;

/*_*
  ItoUInt32
  @aref itouint32 ItoUInt32
*/
#define ItoUInt32_exec(obj, in) obj->ActVal = in;

/*_*
  UInt32toI
  @aref uint32toi UInt32toI
*/
#define UInt32toI_exec(obj, in) obj->ActVal = in;

/*_*
  Int64toI
  @aref int64toi Int64toI
*/
#define Int64toI_exec(obj, in) obj->ActVal = in;

/*_*
  ItoInt64t
  @aref itoint64 ItoInt64
*/
#define ItoInt64_exec(obj, in) obj->ActVal = in;

/*_*
  UInt64toI
  @aref uint64toi UInt64toI
*/
#define UInt64toI_exec(obj, in) obj->ActVal = in;

/*_*
  ItoUInt64
  @aref itouint64toi ItoUInt64
*/
#define ItoUInt64_exec(obj, in) obj->ActVal = in;

/*_*
  StoDataRefv
  Store data reference value
  @aref stodatarefv StoDataRefv
*/
#define StoDataRefv_exec(obj, in)                                              \
  memcpy(&obj->ActualValue, &(in), sizeof(pwr_tDataRef));

/*_*
  CStoDataRefv
  Conditional storage of a data reference value
  @aref cstodatarefv CStoDataRefv
*/
#define CStoDataRefv_exec(obj, in, cond)                                       \
  if (cond)                                                                    \
    memcpy(&obj->ActualValue, &(in), sizeof(pwr_tDataRef));

/*_*
  GetRefD
  Get digital value by reference
  @aref getrefd GetRefD
*/
#define GetRefD_exec(obj, value) obj->Status = value;

/*_*
  GetRefI
  Get integer value by reference
  @aref getrefi GetRefI
*/
#define GetRefI_exec(obj, value) obj->ActVal = value;

/*_*
  GetRefA
  Get analog value by reference
  @aref getrefa GetRefA
*/
#define GetRefA_exec(obj, value) obj->ActVal = value;

/*_*
  StoRefD
  Store digital value by reference
  @aref storefd StoRefD
*/
#define StoRefD_exec(out, in) out = in;

/*_*
  SetRefD
  Set digital value by reference
  @aref setrefd SetRefD
*/
#define SetRefD_exec(out, cond)                                                \
  if (cond)                                                                    \
    out = true;

/*_*
  ResRefD
  Reset digital value by reference
  @aref resrefd ResRefD
*/
#define ResRefD_exec(out, cond)                                                \
  if (cond)                                                                    \
    out = false;

/*_*
  StoRefI
  Store integer value by reference
  @aref storefi StoRefI
*/
#define StoRefI_exec(out, in) out = in;

/*_*
  CStoRefI
  Conditionally store integer value by reference
  @aref dstorefi DStoRefI
*/
#define CStoRefI_exec(out, in, cond)                                           \
  if (cond)                                                                    \
    out = in;

/*_*
  StoRefA
  Store analog value by reference
  @aref storefa StoRefA
*/
#define StoRefA_exec(out, in) out = in;

/*_*
  CStoRefA
  Conditionally store analog value by reference
  @aref cstorefa CStoRefA
*/
#define CStoRefA_exec(out, in, cond)                                           \
  if (cond)                                                                    \
    out = in;
