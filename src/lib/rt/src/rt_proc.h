/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_proc_h
#define rt_proc_h

#include <sys/types.h>

#include "co_errno.h"
#include "rt_errh.h"

typedef union {
  pwr_tBitMask m;
  pwr_32Bits(pwr_Bits(debug, 1), pwr_Bits(k_mode, 1), /* Kernel mode.  */
      pwr_Bits(system, 1), pwr_Bits(base, 1), pwr_Bits(user, 1),
      pwr_Bits(load, 1), pwr_Bits(fill_0, 2), ,

      pwr_Bits(fill_1, 8), , , , , , , , pwr_Bits(fill_2, 8), , , , , , , ,
      pwr_Bits(fill_3, 8), , , , , , , ) b;

#define proc_mProcess__ 0
#define proc_mProcess_debug pwr_Bit(0)
#define proc_mProcess_k_mode pwr_Bit(1)
#define proc_mProcess_system pwr_Bit(2)
#define proc_mProcess_base pwr_Bit(3)
#define proc_mProcess_user pwr_Bit(4)
#define proc_mProcess_load pwr_Bit(5)

#define proc_mProcess_all                                                      \
  (proc_mProcess_system | proc_mProcess_base | proc_mProcess_user)

#define proc_mProcess_ (~proc_mProcess__)
} proc_mProcess;

typedef struct {
  proc_mProcess flags;
  int p_prio; /* Process priority.  */
  int t_prio; /* Thread priority.  */
  size_t k_size; /* Kernel stack size.  */
  size_t u_size; /* User stack size.  */
  char* file;
  char* name;
  char* arg;
  pid_t pid;
} proc_sProcess;

pwr_tStatus proc_Load(proc_sProcess*);
pwr_tStatus proc_Start(proc_sProcess*);
pwr_tStatus proc_UnloadProgram(proc_sProcess*);

pwr_tStatus proc_RegisterObject(pwr_tOid);
pwr_tStatus proc_TimeStamp();
pwr_tStatus proc_SchedWait();

#endif
