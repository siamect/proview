/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_pvd_file_h
#define rt_pvd_file_h

#include "co_procom.h"

class rt_pvd_file : public co_provider {
  public:
  rt_pvd_file(pvd_eEnv env = pvd_eEnv_Wb)
      : co_provider(env), root(0), next_oix(1)
  {
  }
  virtual void object(co_procom* pcom);
  virtual void objectOid(co_procom* pcom, pwr_tOix oix);
  virtual void objectName(co_procom* pcom, char* name, pwr_tOix poix);
  virtual void objectBody(co_procom* pcom, pwr_tOix oix);
  virtual void createObject(co_procom* pcom, pwr_tOix destoix, int desttype,
      pwr_tCid cid, char* name);
  virtual void moveObject(
      co_procom* pcom, pwr_tOix oix, pwr_tOix destoix, int desttype);
  virtual void copyObject(co_procom* pcom, pwr_tOix oix, pwr_tOix destoix,
      int desttype, char* name);
  virtual void deleteObject(co_procom* pcom, pwr_tOix oix);
  virtual void deleteFamily(co_procom* pcom, pwr_tOix oix);
  virtual void renameObject(co_procom* pcom, pwr_tOix oix, char* name);
  virtual void writeAttribute(co_procom* pcom, pwr_tOix oix,
      unsigned int offset, unsigned int size, char* buffer);
  virtual void readAttribute(
      co_procom* pcom, pwr_tOix oix, unsigned int offset, unsigned int size);
  virtual void subAssociateBuffer(co_procom* pcom, void** buff, int oix,
      int offset, int size, pwr_tSubid sid);
  virtual void commit(co_procom* pcom);
  virtual void abort(co_procom* pcom);

  virtual char* longname(pwr_tOix oix);
  virtual void delete_tree(pwr_tOix oix);

  virtual void save(pwr_tStatus* sts)
  {
  }

  virtual void load(pwr_tStatus* rsts)
  {
  }

  virtual bool find(pwr_tOix fthoix, const char* name, pwr_tOix* oix);

  std::vector<procom_obj> m_list;
  pwr_tOix root;
  pwr_tOix next_oix;
};

#endif
