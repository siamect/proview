/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_io_supervise_h
#define rt_io_supervise_h

/* rt_io_supervise.h -- Runtime environment - I/O supervise */

#include "pwr.h"

typedef struct s_ASupLstLink sASupLstLink;
typedef struct s_DSupLstLink sDSupLstLink;

typedef struct io_sSupCtx_ {
  sASupLstLink* TimerLstP;
  sASupLstLink* ASupAnaLstP;
  sDSupLstLink* DSupDigLstP;
  pwr_tFloat32 TimerTime;
} * io_tSupCtx;

#include "rt_plc_timer.h"

struct s_ASupLstLink {
  sASupLstLink* NextP;
  sASupLstLink* NextTimerP;
  pwr_sClass_ASup* SupP;
  pwr_tFloat32* ValueP;
  plc_sTimer* TimerP;
};

struct s_DSupLstLink {
  sDSupLstLink* NextP;
  sDSupLstLink* NextTimerP;
  pwr_sClass_DSup* SupP;
  pwr_tBoolean* ValueP;
  plc_sTimer* TimerP;
};

pwr_tStatus io_ConnectToSupLst(io_tSupCtx Ctx, pwr_tClassId Class,
    pwr_tObjid ObjId, pwr_tAddress ObjP /* Pointer to the object */
    );

/* Initialize sup lists */

pwr_tStatus io_InitSupLst(io_tSupCtx* Ctx, pwr_tFloat32 CycleTime);

/* Scan bus connected analog in- and outputs ASup list.  */

pwr_tStatus io_ScanSupLst(io_tSupCtx Ctx);

/* Scan bus connected analog in- and outputs ASup timer list.  */

pwr_tStatus io_ScanSupTimerLst(io_tSupCtx Ctx);

/* Clear digital and analog lists */

pwr_tStatus io_ClearSupLst(io_tSupCtx Ctx);

#endif
