/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_sevcli_h
#define rt_sevcli_h

/* rt_sevcli.h -- Storage client */

/** \addtogroup SEVCLI */
/** @{*/

#include "rt_qcom.h"
#include "rt_mh_net.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Sevcli context
 */
typedef struct {
  qcom_sQid qid; /**< QCOM queue id */
  pwr_tNid server; /**< Server node id */
  unsigned int msg_id; /**< Counter for message id */
} sevcli_sCtx, *sevcli_tCtx;

/**
 * Sevcli attribute data
 */
typedef struct {
  pwr_tAName aname; /**< Attribute name */
  pwr_eType type; /**< Attribute type */
  unsigned int size; /**< Attribute size */
  unsigned int elem; /**< Number of elements */
  pwr_tString16 unit; /**< Attribute unit */
} sevcli_sHistAttr;

/**
 * Sevcli item data
 */
typedef struct {
  pwr_tOid oid; /**< Object identity */
  pwr_tAName oname; /**< Object name */
  pwr_tDeltaTime storagetime; /**< Storage time from SevHist object */
  pwr_tTime creatime; /**< Creation time */
  pwr_tTime modtime; /**< Modification time */
  pwr_tString80 description; /**< Description from SevHist object */
  pwr_tFloat32 scantime; /**< Scantime from SevHist object */
  pwr_tFloat32 deadband; /**< Deadband from SevHist object */
  pwr_tMask options; /**< Options from SevHist object */
  unsigned int attrnum; /**< Number of attributes */
  sevcli_sHistAttr attr[1]; /**< Array of attribute data */
} sevcli_sHistItem;

typedef struct {
  pwr_tOid oid; /**< Object identity */
  pwr_tAName oname; /**< Object name */
  pwr_tDeltaTime storagetime; /**< Storage time from SevHist object */
  pwr_tTime creatime; /**< Creation time */
  pwr_tString80 description; /**< Description */
  pwr_tMask options; /**< Options from SevHist object */
} sevcli_sEventsItem;

typedef struct {
  pwr_tTime Time;
  pwr_tUInt32 EventType;
  pwr_tUInt32 EventPrio;
  pwr_tOid SupObjectOid;
  pwr_tUInt32 SupObjectOffset;
  pwr_tUInt32 SupObjectSize;
  pwr_tString80 EventText;
  pwr_tOName EventName;
  mh_sEventId EventId;
  pwr_tUInt32 EventStatus;
} sevcli_sEvents;

int sevcli_init(pwr_tStatus* sts, sevcli_tCtx* ctx);
int sevcli_close(pwr_tStatus* sts, sevcli_tCtx ctx);
void sevcli_set_servernid(sevcli_tCtx ctx, pwr_tNid nid);
int sevcli_set_servernode(pwr_tStatus* sts, sevcli_tCtx ctx, char* nodename);
int sevcli_get_itemlist(pwr_tStatus* sts, sevcli_tCtx ctx,
    sevcli_sHistItem** list, unsigned int* cnt);
int sevcli_get_itemdata(pwr_tStatus* sts, sevcli_tCtx ctx, pwr_tOid oid,
    char* aname, pwr_tTime starttime, pwr_tTime endtime, int numpoints,
    pwr_tTime** tbuf, void** vbuf, int* rows, pwr_eType* vtype,
    unsigned int* vsize);
int sevcli_delete_item(
    pwr_tStatus* sts, sevcli_tCtx ctx, pwr_tOid oid, char* aname);
int sevcli_get_objectitemdata(pwr_tStatus* sts, sevcli_tCtx ctx, pwr_tOid oid,
    char* aname, pwr_tTime starttime, pwr_tTime endtime, int numpoints,
    pwr_tTime** tbuf, void** vbuf, int* rows, sevcli_sHistAttr** histattr,
    int* numattributes);
int sevcli_get_eventsitemlist(pwr_tStatus* sts, sevcli_tCtx ctx,
			      sevcli_sEventsItem** list, unsigned int* cnt);
int sevcli_get_events(pwr_tStatus* sts, sevcli_tCtx ctx, pwr_tOid oid,
		      pwr_tTime starttime, pwr_tTime endtime, pwr_tUInt32 eventtypemask,
		      pwr_tUInt32 eventpriomask, pwr_tString80 eventtext, pwr_tOName eventname,
		      unsigned int maxevents, sevcli_sEvents **list, unsigned int* cnt);
void sevcli_store_ctx(sevcli_tCtx ctx);
sevcli_tCtx sevcli_get_stored_ctx(void);
/** @}*/

#ifdef __cplusplus
}
#endif

#endif
