/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_procom_h
#define rt_procom_h

#include "co_procom.h"

class rt_procom : public co_procom {
  public:
  errh_eAnix m_anix;
  char m_name[32];
  pwr_tSid m_sid;
  pwr_tVid m_vid;
  char m_volumename[32];
  int m_global;
  qcom_sGet* m_getmsg;

  rt_procom(co_provider* p, errh_eAnix anix, const char* name, pwr_tSid sid,
      pwr_tVid vid, const char* volumename, int global);
  void init();
  void mainLoop();
  virtual ~rt_procom()
  {
  }
  virtual void provideObjects(pwr_tStatus, std::vector<procom_obj>&);
  virtual void provideObject(pwr_tStatus sts, pwr_tOix oix, pwr_tOix fthoix,
      pwr_tOix bwsoix, pwr_tOix fwsoix, pwr_tOix fchoix, pwr_tOix lchoix,
      pwr_tCid cid, const char* name, const char* longname)
  {
  }
  virtual void provideBody(pwr_tStatus sts, pwr_tOix oix, int size, void* body)
  {
  }
  virtual void provideAttr(pwr_tStatus sts, pwr_tOix oix, int size, void* buff);
  virtual void provideStatus(pwr_tStatus sts);
  virtual void flushNodes();
};

#endif
