/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_ndc_h
#define rt_ndc_h
/* rt_ndc.h -- Network data conversion. */

#include "rt_conv.h"
#include "rt_mvol.h"

typedef enum {
  ndc_eOp__ = 0,
  ndc_eOp_encode = 1,
  ndc_eOp_decode = 2,
  ndc_eOp_
} ndc_eOp;

/** Used when converting remote data to native and different classes */
typedef struct {
  conv_eIdx cidx; /**< Index in the conversion routine table */
  pwr_tUInt32 raidx; /**< Native attribute index */
  /*  pwr_tBoolean  private; */
} ndc_sRemoteToNative;

pwr_tBoolean ndc_ConvertData(pwr_tStatus* sts, const gdb_sNode* np,
    gdb_sClass* cp, const pwr_sAttrRef* arp, void* tp, /* Address of target.  */
    const void* sp, /* Address of source.  */
    pwr_tUInt32* size, /* Size of source.  */
    ndc_eOp op, pwr_tUInt32 offset, pwr_tUInt32 offs);

/*
 * Converts native data that has a different class version.
 *
 */
pwr_tBoolean ndc_ConvertNativeToRemoteData(
    pwr_tStatus* sts, const gdb_sCclass* ccp, /**< Cached class */
    pwr_tUInt32 ridx, /**< Attribute index in ccp */
    const mvol_sAttribute* nap, /**< Native attribute */
    const pwr_sAttrRef* rarp, /**< Remote attribute reference */
    const pwr_sAttrRef* narp, /**< Native attribute reference */
    void* tp, /**< Address of target.  */
    const void* sp, /**< Address of source.  */
    pwr_tUInt32* size, /**< Size of target buffer.  */
    pwr_tUInt32 offset, /**< Offset in class */
    pwr_tUInt32 toffs, /**< Offset i ntarget buffer */
    pwr_tUInt32 soffs, /**< Offset i source buffer */
    pwr_tNodeId nid /**< Node id */
    );

/*
 * Encodes/decodes data which uses a cached class.
 */
pwr_tBoolean ndc_ConvertRemoteData(
    pwr_tStatus* sts, const gdb_sNode* np, const gdb_sCclass* ccp,
    const pwr_sAttrRef* arp, void* tp, /* Address of target.  */
    const void* sp, /* Address of source.  */
    pwr_tUInt32* size, /* Size of source.  */
    ndc_eOp op, pwr_tUInt32 offset, /**< Offset to attribute in class.  */
    pwr_tUInt32 offs /**< Offset in buffer.  */
    );

/*
 * Converts remote data that has a different class version.
 * The data has already been converted to native data format
 */
pwr_tBoolean ndc_ConvertRemoteToNativeData(
    pwr_tStatus* sts, const gdb_sCclass* ccp, /**< Cached class */
    pwr_tUInt32 ridx, /**< Attribute index in ccp */
    const mvol_sAttribute* nap, /**< Native attribute */
    const pwr_sAttrRef* rarp, /**< Remote attribute reference */
    const pwr_sAttrRef* narp, /**< Native attribute reference */
    void* tp, /**< Address of target.  */
    const void* sp, /**< Address of source.  */
    pwr_tUInt32* size, /**< Size of target buffer.  */
    pwr_tUInt32 offset, /**< Offset in class */
    pwr_tUInt32 toffs, /**< Offset i ntarget buffer */
    pwr_tUInt32 soffs, /**< Offset i source buffer */
    pwr_tNodeId nid /**< Node id */
    );

/*
 * Converts remote data that has a different class version.
 * The data has already been converted to native data format
 */
pwr_tBoolean ndc_ConvertRemoteToNativeTable(
    pwr_tStatus* sts, const gdb_sCclass* ccp, /**< Cached class */
    const ndc_sRemoteToNative* tbl,
    const pwr_sAttrRef* rarp, /**< Remote attribute reference */
    const pwr_sAttrRef* narp, /**< Native attribute reference */
    void* tp, /**< Address of target.  */
    const void* sp, /**< Address of source.  */
    pwr_tUInt32* size, /**< Size of target buffer.  */
    pwr_tUInt32 offset, /**< Offset to attribute in class.  */
    pwr_tUInt32 toffs, /**< Offset in target buffer.  */
    pwr_tUInt32 soffs, /**< Offset in source buffer.  */
    pwr_tBoolean* first, /**< First scan.  */
    pwr_tNodeId nid /**< Node id  */
    );

/*
 * Converts a native attribute reference to a remote attribute.
 *
 * @return The argument rarp or NULL if an error
 */
pwr_sAttrRef* ndc_NarefToRaref(pwr_tStatus* sts, /**< Status */
    mvol_sAttribute* ap, /**< Native mvol attribute */
    pwr_sAttrRef* narp, /**< Native attribute reference */
    gdb_sCclass* ccp, /**< Cached class */
    pwr_tUInt32*
        ridx, /**< Attribute index in ccp or UINT_LONG if whole object */
    pwr_sAttrRef* rarp, /**< Remote attribute reference */
    pwr_tBoolean* equal, /**< Set if the attribute references are equal, not
                            checked if whole object */
    cdh_sParseName* pn, /**< Not NULL if called from Get-/SetObjectInfo */
    gdb_sCclass* ccpLocked,
    gdb_sVolume* vp, gdb_sNode* np);

ndc_sRemoteToNative* ndc_UpdateRemoteToNativeTable(pwr_tStatus* sts,
    ndc_sRemoteToNative* tbl, pwr_tUInt32 tcnt, /**< # table entries */
    const gdb_sClass* cp, const gdb_sCclass* ccp, pwr_tNodeId nid);

#endif
