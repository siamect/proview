/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_plc_timer_h
#define rt_plc_timer_h

#include <pthread.h>

#include "rt_gdh.h"

typedef struct {
  pwr_tBoolean TimerFlag pwr_dAlignLW;
  pwr_tBoolean* TimerNext pwr_dAlignLW;
  pwr_tUInt32 TimerCount pwr_dAlignLW;
  pwr_tBoolean* TimerDO pwr_dAlignLW;
  pwr_tFloat32 TimerTime pwr_dAlignLW;
  pwr_tBoolean TimerDODum pwr_dAlignW;
  pwr_tObjid TimerObjDId pwr_dAlignW;
  pwr_tInt32 TimerAcc pwr_dAlignW;
  pwr_tFloat32 TimerMin pwr_dAlignW;
  pwr_tFloat32 TimerMax pwr_dAlignW;
} plc_sTimer;

#define PTRREL(r, p) gdh_StoreRtdbPointer((unsigned long*)r, (void*)p)

#define RELPTR(r)                                                              \
  ((unsigned long)r == 0) ? NULL : gdh_TranslateRtdbPointer((unsigned long)r)

/*	Insert timer into timer-queue	*/
extern pthread_mutex_t timer_mutex;
#define PLC_LOCK_MUTEX(m) pthread_mutex_lock(&m)
#define PLC_UNLOCK_MUTEX(m) pthread_mutex_unlock(&m)

/* Local timer handing in object without timer list */
#define timer2_in(tp, o)                                                       \
  o->TimerCount = o->TimerTime / tp->f_scan_time;                              \
  if (o->TimerCount > 0)                                                       \
    o->TimerFlag = 1;

#define timer2_scan(tp, o)                                                     \
  if (o->TimerFlag) {                                                          \
    if (o->TimerCount <= 0) {                                                  \
      o->TimerCount = 0;                                                       \
      o->TimerFlag = 0;                                                        \
    } else                                                                     \
      o->TimerCount -= (1 + tp->skip_count);                                   \
  }

#define timer_in(tp, o)                                                        \
  {                                                                            \
    o->TimerCount = o->TimerTime / tp->f_scan_time;                            \
    if (!o->TimerFlag && (o->TimerCount > 0)) {                                \
      o->TimerFlag = TRUE;                                                     \
      /*PLC_LOCK_MUTEX(tp->timer_mutex);*/                                     \
      (o->TimerNext) = tp->PlcThread->TimerStart;                              \
      PTRREL(&tp->PlcThread->TimerStart, &o->TimerFlag);                       \
      /*PLC_UNLOCK_MUTEX(tp->timer_mutex);*/                                   \
    }                                                                          \
  }

#include "rt_plc.h"

void plc_inittimer(plc_sThread* tp);
void plc_timerhandler(plc_sThread* tp);

#endif
