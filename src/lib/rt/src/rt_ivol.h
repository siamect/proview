/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_ivol_h
#define rt_ivol_h

/* rt_ivol.h -- Initiate Volumes */

#include "co_tree.h"
#include "rt_vol.h"
#include "rt_lst.h"

typedef struct {
  tree_sNode tree;
  lst_sEntry ll;
  pwr_tBoolean isVolRef;
  pwr_tObjName name;
  pwr_tVolumeId vid;
  pwr_tTime time;
  char filename[256];
  dbs_sVolume volume;
  dbs_sVolRef volRef;
  gdb_sVolume* vp;
  lst_sEntry cre_lh;
  lst_sEntry upd_lh;
  lst_sEntry upd_io_lh;
  tree_sTable* oid_t;
} ivol_sVolume;

typedef struct {
  pwr_tNodeId nid;
  pwr_tObjid nod_oid;
  pwr_tVolumeId vid;
  pwr_tUInt32 cardinality;
  pwr_tUInt32 bodySize;
  pwr_tUInt32 cvolMaxCount;
  pwr_tUInt32 cvolMinCount;
  pwr_tProjVersion plcVersion;
  pwr_tTime rtVersion;
} ivol_sNode;

typedef struct {
  tree_sNode tree;
  gdb_sObject* op;
  dbs_sObject oh;
  pwr_tObjectIx oix;
  vol_mLink unlink;
  vol_mLink link;
  gdb_mChange flags;
  lst_sEntry obj_ll;
  gdb_sClass* cp;
  void* upd_body;
  pwr_tUInt32 size;
  void* body;
} ivol_sObject;

typedef struct {
  gdb_sObject* op;
  pwr_tUInt32 size;
  void* body;
} ivol_sBody;

typedef struct {
  pwr_tUInt32 offs;
  pwr_tUInt32 size;
  lst_sEntry seg_ll;
} ivol_sSegment;

/* Function prototypes.  */

void ivol_BuildNode(pwr_tStatus*, ivol_sNode*, const co_mFormat*);
pwr_tBoolean ivol_BuildVolume(pwr_tStatus*, gdb_sVolume*);
void ivol_CopyBody(pwr_tStatus*, void*, void*, gdb_sClass*);
pwr_tBoolean ivol_DecodeBody(pwr_tStatus*, void*, gdb_sClass*);
pwr_tBoolean ivol_DeleteVolume(pwr_tStatus*, gdb_sVolume*);
ivol_sBody* ivol_GetBody(pwr_tStatus*, pwr_tObjid, ivol_sBody*);
pwr_tBoolean ivol_InitiateVolumeUpdate(pwr_tStatus*, ivol_sVolume*);
gdb_sObject* ivol_LoadObject(
    pwr_tStatus*, ivol_sVolume*, dbs_sObject*, pwr_tBitMask);
gdb_sScObject* ivol_LoadScObject(
    pwr_tStatus*, ivol_sVolume*, dbs_sScObject*, pwr_tBitMask);
gdb_sVolume* ivol_LoadVolume(pwr_tStatus*, dbs_sVolume*, const co_mFormat*);
pwr_tBoolean ivol_RebuildVolume(pwr_tStatus*, ivol_sVolume*, const co_mFormat*);

#endif
