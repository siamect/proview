/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_qini_h
#define rt_qini_h

/* rt_qini.h -- Initiate the Qcom database. */

#include <netinet/in.h>
#include <arpa/inet.h>

#include "rt_qdb.h"

#include "pwr.h"
#include "co_tree.h"

typedef union {
  pwr_tBitMask m;
  pwr_32Bits(pwr_Bits(name, 1), pwr_Bits(naddr, 1), pwr_Bits(port, 1),
      pwr_Bits(flags, 1), pwr_Bits(fill_0, 4), , , ,

      pwr_Bits(fill_1, 8), , , , , , , , pwr_Bits(idx, 8), , , , , , , ,
      pwr_Bits(type, 8), , , , , , , ) b;

#define qini_mNode__ 0
#define qini_mNode_name pwr_Bit(0)
#define qini_mNode_naddr pwr_Bit(1)
#define qini_mNode_last pwr_Bit(2)
#define qini_mNode_sequence                                                    \
  (qini_mSeg_first | qini_mSeg_middle | qini_mSeg_last)

#define qini_mNode_ (~qini_mNode__)

} qini_mNode;

typedef struct {
  tree_sNode tree;
  pwr_tNodeId nid;
  qini_mNode flags;
  char name[80];
  struct in_addr naddr;
  int port;
  qcom_eNodeConnection connection;
  unsigned int min_resend_time;
  unsigned int max_resend_time;
  pwr_tBoolean connect;
  pwr_tUInt32 export_buf_quota;
  pwr_tFloat32 ack_delay;
  pwr_tUInt32 seg_size;
  unsigned int is_secondary;
  char secondary_name[80];
  struct in_addr secondary_naddr;
} qini_sNode;

int qini_ParseFile(FILE*, tree_sTable*, int*, int*, int*);
pwr_tBoolean qini_BuildDb(
    pwr_tStatus*, tree_sTable*, qini_sNode*, void*, qcom_tBus);

#endif
