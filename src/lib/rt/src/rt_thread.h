/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_thread_h
#define rt_thread_h

#include "pwr.h"
#include "pwr_baseclasses.h"

#include <pthread.h>

#if defined __cplusplus
extern "C" {
#endif

typedef pthread_t thread_s;

typedef struct {
  pthread_cond_t c;
  pwr_tBoolean f;
} thread_sCond;

typedef pthread_mutex_t thread_sMutex;

typedef enum {
  thread_ePrio__,
  thread_ePrio_high,
  thread_ePrio_low,
  thread_ePrio_
} thread_ePrio;

pwr_tStatus thread_CondInit(thread_sCond*);
pwr_tStatus thread_CondSignal(thread_sCond*);
pwr_tStatus thread_CondTimedWait(
    thread_sCond*, thread_sMutex*, pwr_tDeltaTime*);
pwr_tStatus thread_CondWait(thread_sCond*, thread_sMutex*);
pwr_tStatus thread_MutexInit(thread_sMutex*);
pwr_tStatus thread_MutexLock(thread_sMutex*);
pwr_tStatus thread_MutexUnlock(thread_sMutex*);
pwr_tStatus thread_Cancel(thread_s*);
pwr_tStatus thread_Create(thread_s*, char*, void* (*routine)(), void*);
pwr_tStatus thread_Wait(pwr_tDeltaTime*);
pwr_tStatus thread_SetPrio(thread_s*, int);
pwr_tStatus thread_SetDeadline(pwr_sClass_PlcThread* o);
pwr_tStatus thread_Join(thread_s*, pwr_tStatus*);
pwr_tStatus thread_Signal(thread_s*, int);
pwr_tBoolean thread_SigTimedWait(thread_s*, int, pwr_tDeltaTime*);

#if defined __cplusplus
}
#endif
#endif
