/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_redu_h
#define rt_redu_h

/* rt_redu.h -- Redundancy */

#if defined __cplusplus
extern "C" {
#endif

#include "pwr_baseclasses.h"
#include "rt_qcom.h"

#define redu_cPort 56001
#define redu_cQixExport ((1 << 31) | 4)
#define redu_cQixPrio1 ((1 << 31) | 5)
#define redu_cQixPrio2 ((1 << 31) | 6)
#define redu_cQixPrio3 ((1 << 31) | 7)
#define redu_cQixPrio4 ((1 << 31) | 8)
#define redu_cQixPrio5 ((1 << 31) | 9)
#define redu_cQixPrio6 ((1 << 31) | 10)
#define redu_cQixPrio7 ((1 << 31) | 11)
#define redu_cQixPrio8 ((1 << 31) | 12)
#define redu_cQixPrio9 ((1 << 31) | 13)
#define redu_cQixPrio10 ((1 << 31) | 14)

typedef enum {
  redu_eMsgType_Table,
  redu_eMsgType_Cyclic,
  redu_eMsgType_TableRequest,
  redu_eMsgType_TableVersionRequest,
  redu_eMsgType_TableVersion
} redu_eMsgType;

typedef enum {
  redu_ePrio_0 = 0,
  redu_ePrio_1 = 1,
  redu_ePrio_2 = 2,
  redu_ePrio_3 = 3,
  redu_ePrio_4 = 4,
  redu_ePrio_5 = 5,
  redu_ePrio_6 = 6,
  redu_ePrio_7 = 7,
  redu_ePrio_8 = 8,
  redu_ePrio_9 = 9,
  redu_ePrio_10 = 10,
  redu_ePrio__ = 11,
} redu_ePrio;

typedef struct sTable {
  pwr_tAttrRef aref;
  int offset;
  int size;
  void* p;
  struct sTable* next;
} redu_sTable;

typedef struct {
  pwr_sClass_RedcomPacket* packetp;
  pwr_sNode* nodep;
  qcom_sQid send_qid;
  qcom_sQid rcv_qid;
  int prio;
  int msgid_table;
  int msgid_cyclic;
  int current_offset;
  int attr_cnt;
  redu_sTable* t;
  redu_sTable* t_last;
  float msg_time;
  int table_sent;
  int table_created;
  pwr_tTime table_version;
} redu_sCtx, *redu_tCtx;

typedef struct {
  pwr_tUInt32 type;
} redu_sHeader;

typedef struct {
  redu_sHeader h;
  pwr_tUInt32 size;
  pwr_tTime version;
} redu_sMsgHeader;

typedef struct {
  redu_sHeader h;
  pwr_tUInt32 size;
  pwr_tUInt32 attributes;
  pwr_tTime version;
} redu_sTableMsgHeader;

typedef struct {
  pwr_tAttrRef aref;
  pwr_tUInt32 size;
} redu_sTableMsgElement;

typedef struct {
  redu_sHeader h;
  pwr_tTime version;
} redu_sMsgTableVersion;

pwr_tStatus redu_create_table(redu_tCtx ctx);
void redu_free(redu_tCtx ctx);
void redu_free_table(redu_tCtx ctx);
pwr_tStatus redu_create_message(redu_tCtx ctx, void** msg);
pwr_tStatus redu_unpack_message(redu_tCtx ctx, void* msg);
pwr_tStatus redu_receive_table(redu_tCtx ctx, void* table_msg);
pwr_tStatus redu_send_table(redu_tCtx ctx, void** table_msg);
pwr_tStatus redu_send_table_request(redu_tCtx ctx);
pwr_tStatus redu_send_table_version(redu_tCtx ctx);
pwr_tStatus redu_send_table_version_request(redu_tCtx ctx);
pwr_tStatus redu_init(
    redu_tCtx* ctx, pwr_sNode* nodep, pwr_sClass_RedcomPacket* packetp);
pwr_tStatus redu_send(redu_tCtx ctx, void* msg, int size, unsigned int msg_id);
pwr_tStatus redu_receive(
    redu_tCtx ctx, unsigned int timeout, int* size, void** msg);
void redu_print(redu_tCtx ctx);
pwr_tStatus redu_get_initial_state(char* nodename, int busid, int* state);
pwr_tStatus redu_set_state(pwr_eRedundancyState state);

pwr_tStatus redu_appl_init(redu_tCtx* ctx, pwr_sClass_RedcomPacket* packetp);
pwr_tStatus redu_appl_send(
    redu_tCtx ctx, void* msg, int size, pwr_tTime version, unsigned int msg_id);
pwr_tStatus redu_appl_receive(
    redu_tCtx ctx, unsigned int timeout, void** msg, int* size);

#if defined __cplusplus
}
#endif
#endif
