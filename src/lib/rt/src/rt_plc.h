/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_plc_h
#define rt_plc_h

#include <pthread.h>

#include "pwr_systemclasses.h"

#include "rt_que.h"
#include "rt_redu.h"
#include "rt_semaphore.h"

static const unsigned int pwr_cInputOffset
    = pwr_AlignLW(sizeof(void*)) + pwr_AlignLW(sizeof(pwr_tBoolean));
static const unsigned int pwr_cInputOffsetAt
    = pwr_AlignLW(sizeof(void*)) + pwr_AlignLW(sizeof(pwr_tTime));
static const unsigned int pwr_cInputOffsetDt
    = pwr_AlignLW(sizeof(void*)) + pwr_AlignLW(sizeof(pwr_tDeltaTime));
static const unsigned int pwr_cInputOffsetDataRef
    = pwr_AlignLW(sizeof(void*)) + pwr_AlignLW(sizeof(pwr_tDataRef));
static const unsigned int pwr_cInputOffsetStr
    = pwr_AlignLW(sizeof(void*)) + pwr_AlignLW(sizeof(pwr_tString80));

typedef struct plc_sProcess plc_sProcess;
typedef struct plc_sThread plc_sThread;
typedef struct plc_sDlink plc_sDlink;

struct plc_sDlink {
  void* p;
  pwr_tObjid oid;
  pwr_tSubid sid;
  pwr_tUInt32 size;
};

#define IO_AREA(type)                                                          \
  struct {                                                                     \
    type* p;                                                                   \
    pwr_tObjid oid;                                                            \
    pwr_tSubid sid;                                                            \
    pwr_tUInt32 size;                                                          \
  }

typedef struct {
  IO_AREA(pwr_sClass_AiArea) ai_a;
  IO_AREA(pwr_sClass_AoArea) ao_a;
  IO_AREA(pwr_sClass_AvArea) av_a;
  IO_AREA(pwr_sClass_CaArea) ca_a;
  IO_AREA(pwr_sClass_CoArea) co_a;
  IO_AREA(pwr_sClass_DiArea) di_a;
  IO_AREA(pwr_sClass_DoArea) do_a;
  IO_AREA(pwr_sClass_DvArea) dv_a;
  IO_AREA(pwr_sClass_IiArea) ii_a;
  IO_AREA(pwr_sClass_IoArea) io_a;
  IO_AREA(pwr_sClass_IvArea) iv_a;
  IO_AREA(pwr_sClass_ATvArea) atv_a;
  IO_AREA(pwr_sClass_DTvArea) dtv_a;
  IO_AREA(pwr_sClass_SvArea) sv_a;
  IO_AREA(pwr_sClass_BiArea) bi_a;
  IO_AREA(pwr_sClass_BoArea) bo_a;
  IO_AREA(pwr_sClass_InitArea) av_i;
  IO_AREA(pwr_sClass_InitArea) dv_i;
  IO_AREA(pwr_sClass_InitArea) iv_i;
  IO_AREA(pwr_sClass_InitArea) ai_i;
  IO_AREA(pwr_sClass_InitArea) di_i;
  IO_AREA(pwr_sClass_InitArea) ii_i;
  IO_AREA(pwr_sClass_InitArea) ao_i;
  IO_AREA(pwr_sClass_InitArea) do_i;
  IO_AREA(pwr_sClass_InitArea) io_i;
  IO_AREA(pwr_sClass_InitArea) atv_i;
  IO_AREA(pwr_sClass_InitArea) dtv_i;
  IO_AREA(pwr_sClass_InitArea) sv_i;
  IO_AREA(pwr_sClass_InitArea) bi_i;
  IO_AREA(pwr_sClass_InitArea) bi_isize;
  IO_AREA(pwr_sClass_InitArea) bo_i;
  IO_AREA(pwr_sClass_InitArea) bo_isize;
} plc_sArea;

#include "rt_io_base.h"

struct plc_sThread {
  thread_s tid;
  pwr_tOName name;
#if defined OS_LINUX
  sem_t ScanSem;
  pwr_tUInt32 ScanMultiple;
  pwr_tUInt32 IntervalCount;
#endif

  pwr_tBoolean exit;
  pwr_tBoolean log;
  pwr_tBoolean sliped;

  int i_scan_time;
  float f_scan_time;
  pwr_tDeltaTime scan_time;
  float ActualScanTime;
  pwr_tTime sync_time;
  pwr_tTime one_before_scan;
  pwr_tTime before_scan;
  pwr_tTime after_scan;
  pwr_tDeltaTime delta_scan;
  pwr_tTime one_before_scan_abs;
  pwr_tTime before_scan_abs;
  pwr_tTime after_scan_abs;

  pwr_sClass_PlcThread* PlcThread;
  lst_sEntry* csup_lh;
  pwr_sAttrRef aref;
  pwr_tDlid dlid;
  thread_sMutex mutex;
  thread_sCond cond;

  pwr_tUInt32 loops;

  que_sQue q_in;
  que_sQue q_out;
  lst_sEntry event;

  plc_sProcess* pp;

  int prio;
  void (*init)(int, plc_sThread*);
  void (*exec)(int, plc_sThread*);

  plc_sArea copy;
  io_tCtx plc_io_ctx;
  pwr_tBoolean first_scan;
  int skip_count;
  pwr_tBoolean emergency_break_old;
  pwr_tBoolean sim_initdone_old;
  pwr_tBoolean sim_disable_old;
  unsigned int sim_idx;
  unsigned int sim_halted;
  unsigned int sim_singlestep;
  pwr_tRedundancyStateEnum redu_state_old;
  int redu_table_version_req_sent;
  redu_tCtx redu;
  int tim_copy_lock;
  int str_copy_lock;
  unsigned int ext_retry_connect;
  unsigned int ext_retry_connect_cnt;
};

struct plc_sProcess {
  int thread_count;
  plc_sThread* thread;
  pwr_sNode* Node;
  pwr_sClass_IOHandler* IOHandler;
  pwr_sClass_PlcProcess* PlcProcess;
  pwr_sClass_SimulateConfig* SimConfig;
  pwr_tFullName nodeName;
  qcom_sQid eventQ;
  pwr_tOid oid;
  int index;
  unsigned int sigmask;
  thread_sMutex io_copy_mutex;
  plc_sArea base;
  int is_core;
  pwr_tTime* system_time;
};

#if defined OS_LINUX
typedef struct {
  pwr_tUInt32 AreaIndex;
  pwr_tUInt32 Prio;
  pwr_tUInt32 (*InitFunc)(
      int DirectLink, unsigned long AreaIndex, unsigned long Prio, double Time);
  pwr_tUInt32 (*ExecFunc)();
} THREAD_ARG;
#endif

#endif
