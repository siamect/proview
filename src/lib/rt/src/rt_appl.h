/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_appl_h
#define rt_appl_h

#include "rt_errh.h"

/*! \file rt_appl.h
    \brief Contains the rt_appl class. */
/*! \addtogroup rt */
/*! @{*/

//! Baseclass for applications.
/*! rt_appl is a baseclass for applications, where the subclasses should
  implement the virtual functions open(), close() and scan().
*/
class rt_appl {
public:
  //! Constructor.
  rt_appl(const char* name, ///< Process name.
      errh_eAnix anix, ///< Application index.
      double scantime = 1.0, ///< Scantime for call of the scan() function.
      qcom_sQid qid = qcom_cNQid ///< Qcom queue identity.
      );
  void init();

  void register_appl(const char* name);
  void mainloop();
  double scantime();
  void set_scantime(double time);
  pwr_tOid& apploid();

  //! Initialize the application.
  /*! The open() function is called after initialization, and may contain setup
    of
    direct links to objects and attributes in the realtime database.

    The open() function is also called after a soft restart.
  */
  virtual void open();

  //! Closes the application.
  /*! the close() is called when a restart or stop event is received. It should
    unlink to all direct links.
  */
  virtual void close();

  //! Cyclic function.
  /*! The scan() function is called cyclic with the scantime specified in the
    constructor.
    In this function all the control and supervision work of the application is
    placed.
  */
  virtual void scan();

  virtual ~rt_appl();

private:
  errh_eAnix m_anix;
  double m_scantime;
  double m_maxdelay;
  qcom_sQid m_qid;
  char m_name[80];
  pwr_tOid m_apploid;
};

#endif

/*! @}*/
