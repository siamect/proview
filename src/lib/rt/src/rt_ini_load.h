/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_ini_load_h
#define rt_ini_load_h

#include "pwr_baseclasses.h"
#include "rt_ivol.h"
#include "rt_qini.h"
#include "rt_proc.h"

typedef union {
  pwr_tBitMask m;
  pwr_32Bits(pwr_Bits(ignoreWarning, 1), pwr_Bits(ignoreError, 1),
      pwr_Bits(ignoreFatal, 1), pwr_Bits(verbose, 1), pwr_Bits(restart, 1),
      pwr_Bits(stop, 1), pwr_Bits(daemonize, 1), pwr_Bits(fill_0, 1), ,

      pwr_Bits(interactive, 1), pwr_Bits(busid, 1), pwr_Bits(hostname, 1),
      pwr_Bits(nodename, 1), pwr_Bits(fill_1, 4), , , ,

      pwr_Bits(applfile, 1), pwr_Bits(aliasfile, 1), pwr_Bits(bootfile, 1),
      pwr_Bits(plcfile, 1), pwr_Bits(nodefile, 1), pwr_Bits(rootvolume, 1),
      pwr_Bits(fill_2, 2), , pwr_Bits(fill_3, 8), , , , , , ) b;

#define ini_mContext__ 0
#define ini_mContext_ignoreWarning pwr_Bit(0)
#define ini_mContext_ignoreError pwr_Bit(1)
#define ini_mContext_ignoreFatal pwr_Bit(2)
#define ini_mContext_verbose pwr_Bit(3)
#define ini_mContext_restart pwr_Bit(4)
#define ini_mContext_stop pwr_Bit(5)
#define ini_mContext_daemonize pwr_Bit(6)

#define ini_mContext_interactive pwr_Bit(8)
#define ini_mContext_busid pwr_Bit(9)
#define ini_mContext_hostname pwr_Bit(10)
#define ini_mContext_nodename pwr_Bit(11)

#define ini_mContext_applfile pwr_Bit(16)
#define ini_mContext_aliasfile pwr_Bit(17)
#define ini_mContext_bootfile pwr_Bit(18)
#define ini_mContext_plcfile pwr_Bit(19)
#define ini_mContext_nodefile pwr_Bit(20)
#define ini_mContext_rootvolume pwr_Bit(21)

#define ini_mContext_ (~ini_mContext__)
} ini_mContext;

typedef union {
  pwr_tBitMask m;
  pwr_32Bits(pwr_Bits(neth, 1), pwr_Bits(qmon, 1), pwr_Bits(plc, 1),
      pwr_Bits(fill_0, 5), , , , ,

      pwr_Bits(run, 1), pwr_Bits(running, 1), pwr_Bits(reap, 1),
      pwr_Bits(fill_1, 5), , , , ,

      pwr_Bits(fill_2, 8), , , , , , , ,

      pwr_Bits(inited, 1), pwr_Bits(fill_3, 8), , , , , , ) b;

#define ini_mProc__ 0
#define ini_mProc_neth pwr_Bit(0)
#define ini_mProc_qmon pwr_Bit(1)
#define ini_mProc_plc pwr_Bit(2)

#define ini_mProc_run pwr_Bit(8)
#define ini_mProc_running pwr_Bit(9)
#define ini_mProc_reap pwr_Bit(10)

#define ini_mProc_inited pwr_Bit(24)

#define ini_mProc_ (~ini_mProc__)
} ini_mProc;

typedef struct {
  char name[256];
  int* errcount;
  void (*logOpenFail)(errh_sLog*, const char*, ...);
} ini_sFile;

typedef struct {
  tree_sNode t;
  lst_sEntry proc_ll;
  char id[40];
  ini_mProc flags;
  proc_sProcess proc;
  void* objectp;
} ini_sProc;

typedef struct {
  ini_mContext flags;
  char alias[80];
  char nodename[80];
  char origname[80];
  char nodespec[80];
  char hostname[80];
  char hostspec[80];
  char bootdisk[80];
  char proj[80];
  char group[80];
  char console[80];
  ini_sFile aliasfile;
  ini_sFile applfile;
  ini_sFile bootfile;
  ini_sFile nodefile;
  ini_sFile* plcfile;
  int plcfile_cnt;
  unsigned int plc_sigmask;
  int busid;
  char dir[256];
  char bdir[256]; /* Base dir (pwr_load) */
  int warnings;
  int errors;
  int fatals;
  ivol_sNode node;
  qini_sNode* me;
  tree_sTable* nid_t;
  tree_sTable* vid_t;
  lst_sEntry vol_lh;
  co_mFormat format;
  dbs_sEnv dbs;
  dbs_sSect sect;
  gdb_sInit gdbInit;
  tree_sTable* proc_t;
  lst_sEntry proc_lh;
  ini_sProc* plc;
  qcom_sQid myQ;
  qcom_sQid yourQ;
  qcom_sQid eventQ;
  errh_sLog log;
  pwr_sNode* np;
  pwr_sClass_PlcProcess* PlcProcess;
} ini_sContext;

pwr_tBoolean ini_BuildNode(pwr_tStatus*, ini_sContext*);
pwr_tBoolean ini_CheckNode(pwr_tStatus*, ini_sContext*);
pwr_tBoolean ini_CheckVolumeFile(pwr_tStatus*, ini_sContext*, ivol_sVolume*);
ini_sContext* ini_CheckContext(pwr_tStatus*, ini_sContext*);
ini_sContext* ini_CreateContext(pwr_tStatus*);
pwr_tBoolean ini_CreateDb(pwr_tStatus*, ini_sContext*);
pwr_tBoolean ini_DecodeBodies(pwr_tStatus*, ini_sContext*, pwr_tBoolean);
pwr_tBoolean ini_FreeBodies(pwr_tStatus*, ini_sContext*, pwr_tBoolean);
pwr_tBoolean ini_IterVolumes(pwr_tStatus*, ini_sContext*,
    pwr_tBoolean (*func)(pwr_tStatus*, ini_sContext*, ivol_sVolume*));
char* ini_LoadDirectory(pwr_tStatus*, ini_sContext*);
pwr_tBoolean ini_LoadNode(pwr_tStatus*, ini_sContext*);
pwr_tBoolean ini_LoadVolume(pwr_tStatus*, ini_sContext*, ivol_sVolume*);
FILE* ini_OpenFile(pwr_tStatus*, ini_sContext*, ini_sFile*);
ini_sProc* ini_ProcInsert(pwr_tStatus*, ini_sContext*, char*, char*, int, int,
    char*, int, int, pwr_tCid, char*, void*);
void ini_ProcIter(pwr_tStatus*, ini_sContext*, int, int,
    void (*func)(pwr_tStatus*, ini_sContext*, ini_sProc*));
void ini_ProcLoad(pwr_tStatus*, ini_sContext*, ini_sProc*);
void ini_ProcStart(pwr_tStatus*, ini_sContext*, ini_sProc*);
void ini_ProcPrio(pwr_tStatus*, ini_sContext*, ini_sProc*);
void ini_ProcWait(pwr_tStatus*, ini_sContext*);
pwr_tBoolean ini_RebuildNode(pwr_tStatus*, ini_sContext*);
void ini_ReadBootFile(pwr_tStatus*, ini_sContext*);
pwr_tBoolean ini_ReadNodeFile(pwr_tStatus*, ini_sContext*);
pwr_tBoolean ini_ReloadNode(pwr_tStatus*, ini_sContext*);
pwr_tBoolean ini_ReloadVolume(pwr_tStatus*, ini_sContext*, ivol_sVolume*);
pwr_tBoolean ini_UpdateBodies(pwr_tStatus*, ini_sContext*, pwr_tBoolean);
pwr_tBoolean ini_UpdateDatabase(pwr_tStatus*, ini_sContext*);
void ini_UpdateSystemInfo(ini_sContext*, int);
void ini_SetSystemStatus(ini_sContext*, pwr_tStatus);

#endif
