/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_cbuf_h
#define rt_cbuf_h

#include "rt_qcom.h"

#if defined __cplusplus
extern "C" {
#endif

/**
 * Circular buffer argument structure
 */
typedef struct {
  pwr_sAttrRef circ_aref; /**< Attribute reference to circular buffer object */
  unsigned int resolution; /**< Resolution of return data */
  unsigned int samples; /**< number of data values */
  void* bufp; /**< Data buffer that receives the requested information */
  unsigned int bufsize; /**< The size in bytes of the data buffer */
  unsigned int size; /**< Number of returned values */
  unsigned int
      first_idx; /**< First index, this has to be saved to the next call */
  unsigned int
      last_idx; /**< Last index, this has to be saved to the next call */
  unsigned int offset; /**< Index offset to use in the next call */
} cbuf_sCircBuffInfo;

pwr_tStatus cbuf_GetCircBuffInfo(cbuf_sCircBuffInfo* info, int infosize);
pwr_tStatus cbuf_UpdateCircBuffInfo(cbuf_sCircBuffInfo* info, int infosize);

void cbuf_GetCircBufferMsg(qcom_sGet* get);
void cbuf_UpdateCircBufferMsg(qcom_sGet* get);

void cbuf_InitBuffer(void* o, pwr_tUInt32 size, pwr_tUInt32 element_size);
void cbuf_AddSample(void* o, void* value);
void cbuf_AddTimeSample(void* o, pwr_tTime* t);

#if defined __cplusplus
}
#endif
#endif
