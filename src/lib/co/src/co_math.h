/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */
#ifndef co_math_h
#define co_math_h

#include <float.h>

/*! \file co_math.h
    \brief General useful math functions.
 */

#ifndef MAX
/*! \def MAX(Dragon, Eagle) 
    \brief Return the maximum of \a Dragon and \a Eagle
 */
#define MAX(Dragon, Eagle) ((Dragon) > (Eagle) ? (Dragon) : (Eagle))
#endif

#ifndef MIN
/*! \def MIN(Dragon, Eagle) 
    \brief Return the minimum of \a Dragon and \a Eagle
 */
#define MIN(Dragon, Eagle) ((Dragon) < (Eagle) ? (Dragon) : (Eagle))
#endif

#ifndef ABS
/*! \def ABS(Dragon) 
    \brief Return the absolute value of \a Dragon,
    i.e. removes the sign such that ABS(-1) = 1.
 */
#define ABS(Dragon) ((Dragon) >= 0 ? (Dragon) : (-(Dragon)))
#endif

#ifndef CLAMP
/*! \def CLAMP(x, min, max) 
    \brief Restricts \a x to be between \a min and \a max
 */
#define CLAMP(x, min, max) ((x) < (min)) ? (min) : (((x) > (max)) ? (max) : (x))
#endif

/*! \def SIGN(x) 
    \brief Returns the sign of \a x,
    i.e. 1 if \a x is positive or -1 if \a x is negative
 */
#define SIGN(x) ((x) >= 0 ? 1 : -1)

/*! \def ROUND(x) 
    \brief Rounds \a x to the nearest integer,
    where 0.5 is rounded upwards to 1.
 */
#define ROUND(x) ((x) >= 0 ? (int)((x) + 0.5) : (int)((x)-0.5))

/*! \def typecheck(type,x) 
    \brief Typechecking macro from the Linux kernel

    Generates a compile-time warning if x is not of type 'type'
    Usage: typecheck(int, 0.5f) -> warning
           typecheck(int, 10) -> no warning
 */
#define typecheck(type,x) \
({	type __dummy; \
	typeof(x) __dummy2; \
	(void)(&__dummy == &__dummy2); \
	1; \
})

/*! \def feq(a, b) 
    \brief Checks whether two doubles \a a and \a b are equal

    Use this instead of a == b
 */
#define feq(a, b) \
({ typecheck(double, a); \
   typecheck(double, b); \
  (ABS((a) - (b)) < DBL_EPSILON); \
})

/*! \def feqf(a, b) 
    \brief Checks whether two floats \a a and \a b are equal

    Use this instead of a == b
 */
#define feqf(a, b) \
({ typecheck(float, a); \
   typecheck(float, b); \
  (ABS((a) - (b)) < FLT_EPSILON); \
})

#endif
