/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_xnav_help.cpp
   This module contains routines for displaying help in xtt. */

/*_Include files_________________________________________________________*/

#include <stdlib.h>

extern "C" {
#include "co_cdh.h"
#include "co_dcli.h"
}

#include "co_lng.h"
#include "co_nav_help.h"
#include "co_dcli_msg.h"
#include "co_nav_msg.h"
#include "co_string.h"

/*** Local funktions ***************************************************/
static FILE* navhelp_open_file(
    NavHelp* navhelp, navh_eHelpFile file_type, const char* file_name);
static pwr_tStatus get_lang_file(char* file, char* found_file);

NavHelp::NavHelp(
    void* h_parent_ctx, const char* h_base_file, const char* h_project_file)
    : parent_ctx(h_parent_ctx), noprop(0)
{
  strncpy(project_file, h_project_file, sizeof(project_file));
  strncpy(base_file, h_base_file, sizeof(base_file));
}

int NavHelp::help(const char* help_key, const char* help_bookmark,
    navh_eHelpFile file_type, const char* file_name, void** book_mark,
    bool strict)
{
  FILE* file;
  char line[200];
  char text1[200];
  char text2[200];
  char text3[200];
  char key[80];
  char key_part[4][40];
  char include_file[80];
  char subject[80];
  char subject_part[4][40];
  int key_nr = 0;
  int subject_nr;
  int hit = 0;
  int sts;
  int i;
  char link[200];
  char link_bookmark[80];
  char link_filename[80];
  char* link_filename_p = NULL;
  int link_nr;
  char link_part[4][200];
  char bookmark[80];
  char search_bookmark[80];
  char* s;
  int header1;
  int header2;
  int bold;
  int code;
  int horizontal_line;
  int style = 0;
  char style_str[80];
  int image;
  char imagefile[80];
  int register_bookmark = 0;
  int bookmark_found = 0;
  void* bookmark_node = 0;
  int index_link;
  void* node;
  int print_all;
  char* bookmark_p;
  lng_eCoding coding = lng_eCoding_ISO8859_1;

  print_all = (help_key == NULL);
  if (help_key) {
    str_ToLower(key, help_key);
    str_ToLower(search_bookmark, help_bookmark);
  }

  // Open file
  file = navhelp_open_file(this, file_type, file_name);
  if (!file)
    return NAV__NOFILE;

  if (!print_all)
    key_nr = dcli_parse(key, " 	", "", (char*)key_part,
        sizeof(key_part) / sizeof(key_part[0]), sizeof(key_part[0]), 0);

  sts = dcli_read_line(line, sizeof(line), file);
  while (ODD(sts)) {
    if (str_NoCaseStrncmp(line, "<coding>", 8) == 0) {
      char codingstr[40];

      str_trim(codingstr, &line[8]);
      if (str_NoCaseStrcmp(codingstr, "ISO8859-1") == 0) {
        coding = lng_eCoding_ISO8859_1;
      } else if (str_NoCaseStrcmp(codingstr, "UTF-8") == 0) {
        coding = lng_eCoding_UTF_8;
      }
    } else if (str_NoCaseStrncmp(line, "<include>", 9) == 0) {
      str_trim(include_file, &line[9]);

      if (!noprop || strstr(include_file, "$pwr_lang") == 0) {
        sts = help(help_key, help_bookmark, navh_eHelpFile_Other, include_file,
            book_mark, strict);
        if (ODD(sts) && !print_all) {
          fclose(file);
          return sts;
        }
      }

      hit = 0;
    } else if (str_NoCaseStrncmp(line, "<chapter>", 9) == 0) {
      (insert_cb)(parent_ctx, navh_eItemType_Chapter, "", NULL, NULL, NULL,
          NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
    } else if (str_NoCaseStrncmp(line, "</chapter>", 10) == 0) {
      (insert_cb)(parent_ctx, navh_eItemType_EndChapter, "", NULL, NULL, NULL,
          NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
    } else if (str_NoCaseStrncmp(line, "<headerlevel>", 13) == 0) {
      (insert_cb)(parent_ctx, navh_eItemType_HeaderLevel, "", NULL, NULL, NULL,
          NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
    } else if (str_NoCaseStrncmp(line, "</headerlevel>", 14) == 0) {
      (insert_cb)(parent_ctx, navh_eItemType_EndHeaderLevel, "", NULL, NULL,
          NULL, NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
    } else if (str_NoCaseStrncmp(line, "<pagebreak>", 11) == 0) {
      (insert_cb)(parent_ctx, navh_eItemType_PageBreak, "", NULL, NULL, NULL,
          NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
    } else if (str_NoCaseStrncmp(line, "<option>", 8) == 0) {
      char option[80];

      str_trim(option, &line[8]);
      str_ToLower(option, option);
      (insert_cb)(parent_ctx, navh_eItemType_Option, option, NULL, NULL, NULL,
          NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
    } else if (str_NoCaseStrncmp(line, "<topic>", 7) == 0) {
      if ((s = strstr(line, "<style>")) || (s = strstr(line, "<STYLE>"))) {
        style = 1;
        str_trim(style_str, s + 7);
        *s = 0;
      }

      str_trim(subject, &line[7]);
      str_ToLower(subject, subject);
      subject_nr = dcli_parse(subject, " 	", "", (char*)subject_part,
          sizeof(subject_part) / sizeof(subject_part[0]),
          sizeof(subject_part[0]), 0);
      hit = 0;
      if (!print_all) {
        if (key_nr == subject_nr) {
          for (i = 0; i < key_nr; i++) {
            if ((!strict && str_StartsWith(subject_part[i], key_part[i]))
                || (strict && streq(subject_part[i], key_part[i]))) {
              if (i == key_nr - 1)
                hit = 1;
            } else
              break;
          }
        }
      } else {
        if (str_NoCaseStrcmp(subject_part[0], "__documenttitlepage") == 0)
          (insert_cb)(parent_ctx, navh_eItemType_DocTitlePage, subject, NULL,
              NULL, NULL, NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
        else if (str_NoCaseStrcmp(subject_part[0], "__documentinfopage") == 0)
          (insert_cb)(parent_ctx, navh_eItemType_DocInfoPage, subject, NULL,
              NULL, NULL, NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
        else
          (insert_cb)(parent_ctx, navh_eItemType_Topic, subject, NULL, NULL,
              NULL, NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
        if (style)
          node = (insert_cb)(parent_ctx, navh_eItemType_Style, style_str, NULL,
              NULL, NULL, NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
        hit = 1;
      }
    }
    if (hit) {
      sts = dcli_read_line(line, sizeof(line), file);
      (insert_cb)(parent_ctx, navh_eItemType_HelpHeader, line, NULL, NULL, NULL,
          NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
      sts = dcli_read_line(line, sizeof(line), file);
      while (ODD(sts)) {
        bookmark_p = 0;

        if (str_StartsWith(line, "</topic>") || str_StartsWith(line, "</TOPIC>")) {
          if (print_all)
            (insert_cb)(parent_ctx, navh_eItemType_EndTopic, subject, NULL,
                NULL, NULL, NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
          break;
        }

        // Ignore all other tags
        if ((s = strstr(line, "<ib>")) || (s = strstr(line, "<IB>"))) {
          strcpy(text1, s + 4);
          (insert_cb)(parent_ctx, navh_eItemType_HelpBold, text1, "", "", "",
              "", NULL, file_type, 0, NULL, coding);
          sts = dcli_read_line(line, sizeof(line), file);
          continue;
        }
        if ((s = strstr(line, "<i>")) || (s = strstr(line, "<I>"))) {
          strcpy(text1, s + 3);
          (insert_cb)(parent_ctx, navh_eItemType_Help, text1, "", "", "", "",
              NULL, file_type, 0, bookmark_p, coding);
          sts = dcli_read_line(line, sizeof(line), file);
          continue;
        }
        if (str_NoCaseStrncmp(line, "<option>", 8) == 0) {
          char option[80];

          str_trim(option, &line[8]);
          str_ToLower(option, option);
          (insert_cb)(parent_ctx, navh_eItemType_Option, option, NULL, NULL,
              NULL, NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
          sts = dcli_read_line(line, sizeof(line), file);
          continue;
        }

        if ((s = strstr(line, "<link>")) || (s = strstr(line, "<LINK>"))) {
          str_trim(link, s + 6);
          *s = 0;

          link_nr = dcli_parse(link, ",", "", (char*)link_part,
              sizeof(link_part) / sizeof(link_part[0]), sizeof(link_part[0]),
              0);
          if (link_nr == 1) {
            str_trim(link, link_part[0]);
            strcpy(link_bookmark, "");
            link_filename_p = (char*)file_name;
          } else if (link_nr == 2) {
            str_trim(link, link_part[0]);
            str_trim(link_bookmark, link_part[1]);
            link_filename_p = (char*)file_name;
          } else if (link_nr > 2) {
            str_trim(link, link_part[0]);
            str_trim(link_bookmark, link_part[1]);
            str_trim(link_filename, link_part[2]);
            link_filename_p = link_filename;
          }
        } else if ((s = strstr(line, "<weblink>"))
            || (s = strstr(line, "<WEBLINK>"))) {
          str_trim(link, s + 9);
          *s = 0;

          link_nr = dcli_parse(link, ",", "", (char*)link_part,
              sizeof(link_part) / sizeof(link_part[0]), sizeof(link_part[0]),
              0);
          if (link_nr == 1) {
            strcpy(link, "$web:");
            str_trim(&link[5], link_part[0]);
            strcpy(link_bookmark, "");
            link_filename_p = (char*)file_name;
          } else if (link_nr == 2) {
            strcpy(link, "$web:");
            str_trim(&link[5], link_part[0]);
            str_trim(link_bookmark, link_part[1]);
            link_filename_p = (char*)file_name;
          } else if (link_nr > 2) {
            strcpy(link, "$web:");
            str_trim(&link[5], link_part[0]);
            str_trim(link_bookmark, link_part[1]);
            str_trim(link_filename, link_part[2]);
            link_filename_p = link_filename;
          }
        } else if ((s = strstr(line, "<classlink>"))
            || (s = strstr(line, "<CLASSLINK>"))) {
          str_trim(link, s + 11);
          *s = 0;

          link_nr = dcli_parse(link, ",", "", (char*)link_part,
              sizeof(link_part) / sizeof(link_part[0]), sizeof(link_part[0]),
              0);
          if (link_nr == 1) {
            strcpy(link, "$class:");
            str_trim(&link[7], link_part[0]);
            strcpy(link_bookmark, "");
            link_filename_p = (char*)file_name;
          } else if (link_nr == 2) {
            strcpy(link, "$class:");
            str_trim(&link[7], link_part[0]);
            str_trim(link_bookmark, link_part[1]);
            link_filename_p = (char*)file_name;
          } else if (link_nr > 2) {
            strcpy(link, "$class:");
            str_trim(&link[7], link_part[0]);
            str_trim(link_bookmark, link_part[1]);
            str_trim(link_filename, link_part[2]);
            link_filename_p = link_filename;
          }
        } else {
          strcpy(link, "");
          strcpy(link_bookmark, "");
          link_filename_p = link_filename;
        }

        if ((s = strstr(line, "<bookmark>"))
            || (s = strstr(line, "<BOOKMARK>"))) {
          str_trim(bookmark, s + 10);
          *s = 0;
          str_ToLower(bookmark, bookmark);
          if (!bookmark_found && !print_all
              && streq(search_bookmark, bookmark)) {
            bookmark_found = 1;
            register_bookmark = 1;
          }
          if (print_all)
            bookmark_p = bookmark;
        }

        if ((s = strstr(line, "<index>")) || (s = strstr(line, "<INDEX>"))) {
          index_link = 1;
          *s = 0;
        } else
          index_link = 0;

        image = 0;
        header1 = 0;
        header2 = 0;
        bold = 0;
        code = 0;
        horizontal_line = 0;
        style = 0;
        if ((s = strstr(line, "<h1>")) || (s = strstr(line, "<H1>"))) {
          header1 = 1;
          strcpy(text1, s + 4);
        } else if ((s = strstr(line, "<h2>")) || (s = strstr(line, "<H2>"))) {
          header2 = 1;
          strcpy(text1, s + 4);
        } else if ((s = strstr(line, "<b>")) || (s = strstr(line, "<B>"))) {
          bold = 1;
          strcpy(text1, s + 3);
        } else if ((s = strstr(line, "<c>")) || (s = strstr(line, "<C>"))) {
          code = 1;
          strcpy(text1, s + 3);
        } else if ((s = strstr(line, "<hr>")) || (s = strstr(line, "<HR>"))) {
          horizontal_line = 1;
        } else if ((s = strstr(line, "<image>"))
            || (s = strstr(line, "<IMAGE>"))) {
          str_trim(imagefile, s + 7);
          image = 1;
        }

        else {
          strcpy(text1, line);
        }

        if ((s = strstr(text1, "<t>")) || (s = strstr(text1, "<T>"))) {
          strcpy(text2, s + 3);
          *s = 0;
          if ((s = strstr(text2, "<t>")) || (s = strstr(text2, "<T>"))) {
            strcpy(text3, s + 3);
            *s = 0;
          } else
            strcpy(text3, "");
        } else {
          strcpy(text2, "");
          strcpy(text3, "");
        }
        if (header1) {
          node = (insert_cb)(parent_ctx, navh_eItemType_HeaderLarge, text1,
              NULL, NULL, NULL, NULL, NULL, navh_eHelpFile_, 0, bookmark_p,
              coding);
          if (register_bookmark) {
            bookmark_node = node;
            register_bookmark = 0;
          }
        } else if (header2) {
          node = (insert_cb)(parent_ctx, navh_eItemType_Header, text1, NULL,
              NULL, NULL, NULL, NULL, navh_eHelpFile_, 0, bookmark_p, coding);
          if (register_bookmark) {
            bookmark_node = node;
            register_bookmark = 0;
          }
        } else if (bold) {
          node = (insert_cb)(parent_ctx, navh_eItemType_HelpBold, text1, text2,
              text3, link, link_bookmark, link_filename_p, file_type,
              index_link, bookmark_p, coding);
          if (register_bookmark) {
            bookmark_node = node;
            register_bookmark = 0;
          }
        } else if (code) {
          node = (insert_cb)(parent_ctx, navh_eItemType_HelpCode, text1, text2,
              text3, link, link_bookmark, link_filename_p, file_type,
              index_link, bookmark_p, coding);
          if (register_bookmark) {
            bookmark_node = node;
            register_bookmark = 0;
          }
        } else if (horizontal_line) {
          node = (insert_cb)(parent_ctx, navh_eItemType_HorizontalLine, NULL,
              NULL, NULL, NULL, NULL, NULL, navh_eHelpFile_, 0, NULL, coding);
        } else if (image) {
          node = (insert_cb)(parent_ctx, navh_eItemType_Image, imagefile, NULL,
              NULL, link, link_bookmark, link_filename_p, file_type, index_link,
              bookmark_p, coding);
          if (register_bookmark) {
            bookmark_node = node;
            register_bookmark = 0;
          }
        } else {
          node = (insert_cb)(parent_ctx, navh_eItemType_Help, text1, text2,
              text3, link, link_bookmark, link_filename_p, file_type,
              index_link, bookmark_p, coding);
          if (register_bookmark) {
            bookmark_node = node;
            register_bookmark = 0;
          }
        }
        sts = dcli_read_line(line, sizeof(line), file);
      }

      if (bookmark_found)
        *book_mark = bookmark_node;
      else
        *book_mark = 0;
      if (!print_all)
        break;
      else
        hit = 0;
    }
    sts = dcli_read_line(line, sizeof(line), file);
  }
  fclose(file);

  if (!print_all && !hit)
    return NAV__TOPICNOTFOUND;
  return NAV__SUCCESS;
}

int NavHelp::get_next_key(const char* help_key, navh_eHelpFile file_type,
    const char* file_name, bool strict, char* next_key)
{
  FILE* file;
  char line[200];
  char key[80];
  char key_part[4][40];
  char include_file[80];
  char subject[80];
  char subject_part[4][40];
  int key_nr;
  int subject_nr;
  int hit = 0;
  int next_hit = 0;
  int sts;
  int i;
  char* s;

  if (help_key) {
    str_ToLower(key, help_key);
  }

  // Open file
  file = navhelp_open_file(this, file_type, file_name);
  if (!file)
    return NAV__NOFILE;

  key_nr = dcli_parse(key, " 	", "", (char*)key_part,
      sizeof(key_part) / sizeof(key_part[0]), sizeof(key_part[0]), 0);

  sts = dcli_read_line(line, sizeof(line), file);
  while (ODD(sts)) {
    if (str_NoCaseStrncmp(line, "<include>", 9) == 0) {
      str_trim(include_file, &line[9]);
      // Replace symbol for language
      if (str_StartsWith(include_file, "$pwr_lang/")) {
        sts = get_lang_file(include_file, include_file);
        if (EVEN(sts))
          continue;
      }

      if (!noprop) {
        sts = get_next_key(
            help_key, navh_eHelpFile_Other, include_file, strict, next_key);
        if (ODD(sts)) {
          fclose(file);
          return sts;
        }
      }
      hit = 0;
    }
    if (str_NoCaseStrncmp(line, "<topic>", 7) == 0) {
      if ((s = strstr(line, "<style>")) || (s = strstr(line, "<STYLE>"))) {
        *s = 0;
      }

      str_trim(subject, &line[7]);
      if (hit) {
        strcpy(next_key, subject);
        next_hit = 1;
        break;
      }
      str_ToLower(subject, subject);
      subject_nr = dcli_parse(subject, " 	", "", (char*)subject_part,
          sizeof(subject_part) / sizeof(subject_part[0]),
          sizeof(subject_part[0]), 0);
      if (key_nr == subject_nr) {
        for (i = 0; i < key_nr; i++) {
          if ((!strict && str_StartsWith(subject_part[i], key_part[i]))
              || (strict && streq(subject_part[i], key_part[i]))) {
            if (i == key_nr - 1)
              hit = 1;
          } else
            break;
        }
      }
    }
    sts = dcli_read_line(line, sizeof(line), file);
  }
  fclose(file);

  if (!next_hit)
    return NAV__TOPICNOTFOUND;
  return NAV__SUCCESS;
}

int NavHelp::get_previous_key(const char* help_key, navh_eHelpFile file_type,
    const char* file_name, bool strict, char* prev_key)
{
  FILE* file;
  char line[200];
  char key[80];
  char key_part[4][40];
  char include_file[80];
  char subject[80];
  char subject_part[4][40];
  int key_nr;
  int subject_nr;
  int hit = 0;
  int sts;
  int i;
  char* s;
  char prev[80] = "";

  if (help_key) {
    str_ToLower(key, help_key);
  }

  // Open file
  file = navhelp_open_file(this, file_type, file_name);
  if (!file)
    return NAV__NOFILE;

  key_nr = dcli_parse(key, " 	", "", (char*)key_part,
      sizeof(key_part) / sizeof(key_part[0]), sizeof(key_part[0]), 0);

  sts = dcli_read_line(line, sizeof(line), file);
  while (ODD(sts)) {
    if (str_NoCaseStrncmp(line, "<include>", 9) == 0) {
      str_trim(include_file, &line[9]);
      // Replace symbol for language
      if (str_StartsWith(include_file, "$pwr_lang/")) {
        sts = get_lang_file(include_file, include_file);
        if (EVEN(sts))
          continue;
      }

      if (!noprop) {
        sts = get_previous_key(
            help_key, navh_eHelpFile_Other, include_file, strict, prev_key);
        if (ODD(sts)) {
          fclose(file);
          return sts;
        }
      }
      hit = 0;
    }
    if (str_NoCaseStrncmp(line, "<topic>", 7) == 0) {
      if ((s = strstr(line, "<style>")) || (s = strstr(line, "<STYLE>"))) {
        *s = 0;
      }

      str_trim(subject, &line[7]);
      str_ToLower(subject, subject);
      subject_nr = dcli_parse(subject, " 	", "", (char*)subject_part,
          sizeof(subject_part) / sizeof(subject_part[0]),
          sizeof(subject_part[0]), 0);
      if (key_nr == subject_nr) {
        for (i = 0; i < key_nr; i++) {
          if ((!strict && str_StartsWith(subject_part[i], key_part[i]))
              || (strict && streq(subject_part[i], key_part[i]))) {
            if (i == key_nr - 1) {
              hit = 1;
              strcpy(prev_key, prev);
            }
          } else
            break;
        }
      }
      if (hit)
        break;

      strcpy(prev, subject);
    }
    sts = dcli_read_line(line, sizeof(line), file);
  }
  fclose(file);

  if (!hit || streq(prev, ""))
    return NAV__TOPICNOTFOUND;
  return NAV__SUCCESS;
}

int NavHelp::help_index(navh_eHelpFile file_type, const char* file_name)
{
  FILE* file;
  char line[200];
  char include_file[80];
  char subject[80];
  int sts;
  char* s;
  lng_eCoding coding = lng_eCoding_ISO8859_1;

  // Open file
  file = navhelp_open_file(this, file_type, file_name);
  if (!file)
    return NAV__NOFILE;

  sts = dcli_read_line(line, sizeof(line), file);
  while (ODD(sts)) {
    if (str_NoCaseStrncmp(line, "<coding>", 8) == 0) {
      char codingstr[40];

      str_trim(codingstr, &line[8]);
      if (str_NoCaseStrcmp(codingstr, "ISO8859-1") == 0) {
        coding = lng_eCoding_ISO8859_1;
      } else if (str_NoCaseStrcmp(codingstr, "UTF-8") == 0) {
        coding = lng_eCoding_UTF_8;
      }
    } else if (str_NoCaseStrncmp(line, "<include>", 9) == 0) {
      str_trim(include_file, &line[9]);
      sts = help_index(navh_eHelpFile_Other, include_file);
    } else if (str_NoCaseStrncmp(line, "<topic>", 7) == 0) {
      if ((s = strstr(line, "<style>")) || (s = strstr(line, "<STYLE>")))
        *s = 0;
      str_trim(subject, &line[7]);

      (insert_cb)(parent_ctx, navh_eItemType_HelpBold, subject, "", "", subject,
          "", file_name, file_type, 0, NULL, coding);
    }
    sts = dcli_read_line(line, sizeof(line), file);
  }
  fclose(file);
  return NAV__SUCCESS;
}

static FILE* navhelp_open_file(
    NavHelp* navhelp, navh_eHelpFile file_type, const char* file_name)
{
  pwr_tFileName filestr;
  FILE* file;
  pwr_tStatus sts;

  if (file_type == navh_eHelpFile_Base)
    dcli_get_defaultfilename(navhelp->base_file, filestr, NULL);
  else if (file_type == navh_eHelpFile_Project)
    dcli_get_defaultfilename(navhelp->project_file, filestr, NULL);
  else if (file_name)
    dcli_get_defaultfilename(file_name, filestr, NULL);
  else
    dcli_get_defaultfilename(navhelp->base_file, filestr, NULL);

  // Replace symbol for language
  if (str_StartsWith(filestr, "$pwr_lang/")) {
    char lng_filestr[512];

    sprintf(
        lng_filestr, "$pwr_exe/%s/%s", Lng::get_language_str(), &filestr[10]);

    dcli_translate_filename(lng_filestr, lng_filestr);

    file = fopen(lng_filestr, "r");
    if (file == 0) {
      // Default to English version
      sprintf(lng_filestr, "$pwr_exe/en_us/%s", &filestr[10]);

      dcli_translate_filename(lng_filestr, lng_filestr);

      file = fopen(lng_filestr, "r");
      if (file == 0) {
        sts = get_lang_file(filestr, lng_filestr);
        if (EVEN(sts))
          return 0;

        file = fopen(lng_filestr, "r");
        if (file == 0)
          return 0;
      }
    }
  } else {
    dcli_translate_filename(filestr, filestr);

    file = fopen(filestr, "r");
    if (file == 0)
      return 0;
  }
  return file;
}

static pwr_tStatus get_lang_file(char* file, char* found_file)
{
  pwr_tFileName lng_include_file, tmp_file;
  pwr_tTime t;
  pwr_tStatus sts;

  if (!str_StartsWith(file, "$pwr_lang/"))
    return NAV__NOFILE;

  // Try pwr_exe/xx_xx/
  sprintf(
      lng_include_file, "$pwr_exe/%s/%s", Lng::get_language_str(), &file[10]);
  dcli_translate_filename(tmp_file, lng_include_file);
  sts = dcli_file_time(tmp_file, &t);
  if (EVEN(sts)) {
    // Try pwrp_exe/xx_xx/ instead
    sprintf(lng_include_file, "$pwrp_exe/%s/%s", Lng::get_language_str(),
        &file[10]);
    dcli_translate_filename(tmp_file, lng_include_file);
    sts = dcli_file_time(tmp_file, &t);
    if (EVEN(sts)) {
      // Try pwrp_exe/ instead
      sprintf(lng_include_file, "$pwrp_exe/%s", &file[10]);
      dcli_translate_filename(tmp_file, lng_include_file);
      sts = dcli_file_time(tmp_file, &t);
      if (EVEN(sts))
        return NAV__NOFILE;
    }
  }
  strcpy(found_file, tmp_file);
  return NAV__SUCCESS;
}
