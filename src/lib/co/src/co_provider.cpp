/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "co_provider.h"

co_provider::co_provider(pvd_eEnv env) : m_env(env)
{
}

co_provider::~co_provider()
{
}

void co_provider::object(co_procom* pcom)
{
}

void co_provider::objectOid(co_procom* pcom, pwr_tOix oix)
{
}

void co_provider::objectName(co_procom* pcom, char* name, pwr_tOix poix)
{
}

void co_provider::objectBody(co_procom* pcom, pwr_tOix oix)
{
}

void co_provider::createObject(
    co_procom* pcom, pwr_tOix destoix, int desttype, pwr_tCid cid, char* name)
{
}

void co_provider::moveObject(
    co_procom* pcom, pwr_tOix oix, pwr_tOix destoix, int desttype)
{
}

void co_provider::copyObject(
    co_procom* pcom, pwr_tOix oix, pwr_tOix destoix, int desttype, char* name)
{
}

void co_provider::deleteObject(co_procom* pcom, pwr_tOix oix)
{
}

void co_provider::deleteFamily(co_procom* pcom, pwr_tOix oix)
{
}

void co_provider::renameObject(co_procom* pcom, pwr_tOix oix, char* name)
{
}

void co_provider::writeAttribute(co_procom* pcom, pwr_tOix oix,
    unsigned int offset, unsigned int size, char* buffer)
{
}

void co_provider::readAttribute(
    co_procom* pcom, pwr_tOix oix, unsigned int offset, unsigned int size)
{
}

void co_provider::commit(co_procom* pcom)
{
}

void co_provider::abort(co_procom* pcom)
{
}

void co_provider::subAssociateBuffer(
    co_procom* pcom, void** buff, int oix, int offset, int size, pwr_tSubid sid)
{
}

void co_provider::subDisassociateBuffer(co_procom* pcom, pwr_tSubid sid)
{
}

void co_provider::cyclic(co_procom* pcom)
{
}
