/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "co_log.h"

#include <stdarg.h>
#include <string.h>
#include <time.h>

static int LEVEL = 0;
static FILE* FP = NULL;
static int QUIET = 0;

void log_setLevel(int level)
{
  LEVEL = level;
}

void log_setFile(FILE* fp)
{
  FP = fp;
}

void log_setQuiet(int quiet)
{
  QUIET = quiet;
}

static const char *level_names[] = {
  "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL"
};

static const char *level_colors[] = {
  "\x1b[94m", "\x1b[36m", "\x1b[32m", "\x1b[33m", "\x1b[31m", "\x1b[35m"
};

void print_time(FILE* stream, int fulldate)
{
  char Date[11], Time[11];
  time_t t = time(NULL);
  struct tm* lt = localtime(&t);
  if (fulldate) {
    strftime(Date, 11, "%Y-%m-%d", lt);
    fprintf(stream, "%s ", Date);
  }
  strftime(Time, 11, "%H:%M:%S", lt);
  fprintf(stream, "%s", Time);
}

void log_print(int level, const char* file, int line, const char* fmt, ...)
{
  if (level < LEVEL) {
    return;
  }

  if (!QUIET) {
    // 1. print timestamp
    print_time(stderr);
    // 2. print filename only, without path
    const char* file2 = strrchr(file, '/');
    file2 = file2 ? (file2 + 1) : file;
    fprintf(stderr, " %s%-5s\x1b[0m %s:%d: ",
            level_colors[level], level_names[level], file2, line);
    // 3. print the actual debug message
    va_list args;
    va_start(args, fmt);
    vfprintf(stderr, fmt, args);
    va_end(args);
  }

  if (FP) {
    // 1. print timestamp
    print_time(FP);
    // 2. print filename only, without path
    const char* file2 = strrchr(file, '/');
    file2 = file2 ? (file2 + 1) : file;
    fprintf(FP, " %-5s %s:%d: ", level_names[level], file2, line);
    // 3. print the actual debug message
    va_list args;
    va_start(args, fmt);
    vfprintf(FP, fmt, args);
    va_end(args);
  }
}
