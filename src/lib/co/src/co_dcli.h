/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef co_dcli_h
#define co_dcli_h

#include <stdio.h>

#include "pwr.h"

#ifdef __cplusplus
extern "C" {
#endif

/* co_dcli.c
   Command line interpreter. */

#define DCLI_CMD_SIZE 400
#define DCLI_QUAL_SIZE 400
#define DCLI_SYM_KEY_SIZE 200
#define DCLI_SYM_VALUE_SIZE 200

typedef struct {
  char command[20];
  int (*func)(void*, void*);
  char qualifier[60][40];
} dcli_tCmdTable;

int dcli_parse(const char* string, const char* parse_char,
    const char* inc_parse_char, char* outstr, int max_rows, int max_cols,
    int keep_quota);
int dcli_cli(dcli_tCmdTable* command_table, const char* string, void* userdata1,
    void* userdata2);
int dcli_get_qualifier(const char* qualifier, char* value, size_t size);
int dcli_store_symbols(char* filename);
int dcli_replace_symbol(char* command, char* newcommand, int newsize);
int dcli_get_symbol(char* key, char* value);
int dcli_get_symbol_by_index(int index, char* key, char* value);
int dcli_get_symbol_cmd(char* key, char* value);
int dcli_define_symbol(char* key, char* arg1, char* arg2, char* arg3);
int dcli_toupper(char* str_upper, char* str);
char* dcli_pwr_dir(const char* dir);
int dcli_wildcard(char* wildname, char* name);
int dcli_read_line(char* line, int maxsize, FILE* file);
unsigned int dcli_random();

/* Functions in module co_dcli_file */

void dcli_set_default_directory(char* dir);
int dcli_get_defaultfilename(
    const char* inname, char* outname, const char* ext);
int dcli_replace_env(const char* str, char* newstr);
char* dcli_fgetname(FILE* fp, char* name, char* def_name);
int dcli_translate_filename(char* out, const char* in);
pwr_tStatus dcli_file_time(char* filename, pwr_tTime* time);
pwr_tStatus dcli_file_ctime(char* filename, pwr_tTime* time);
void dcli_save_file_versions(char* fname);

/* Functions in module co_dcli_dir */

#define DCLI_DIR_SEARCH_NEXT 0
#define DCLI_DIR_SEARCH_INIT 1
#define DCLI_DIR_SEARCH_END 2

int dcli_search_file(const char* file_name, char* found_file, int new_search);

int dcli_search_directory(
    const char* file_name, char* found_file, int new_search);

int dcli_get_files(
    char* dir, char* pattern, pwr_tString40* filelist[], int* filecnt);

int dcli_parse_filename(const char* filename, char* dev, char* dir, char* file,
    char* type, int* version);

int dcli_create_directory(char* path);
int dcli_delete_directory(char* path, int force);

/* Functions i module co_dcli_struct */

typedef struct s_element {
  int type;
  int size;
  int elements;
  int alignment;
  int undefined;
  char typestr[40];
  char struct_begin;
  char name[256];
  unsigned int mask;
  char filename[120];
  int line_nr;
  struct s_element* next;
  struct s_element* prev;
} dcli_sStructElement;

int dcli_readstruct_find(
    char* filename, char* struct_name, dcli_sStructElement** e_list);

void dcli_readstruct_free(dcli_sStructElement* e_list);

int dcli_readstruct_get_message(char** message);

void dcli_execute_flavour_if_exists(char* argv[], const char* flavour);

void dcli_execute_flavour(char* argv[]);

#ifdef __cplusplus
}
#endif

#endif
