/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <stdarg.h>
#include "co_nav_crr.h"
#include "co_tst_log.h"

extern "C" {
#include "co_api.h"
#include "co_dcli.h"
}

#include "co_lng.h"

//
//  c api to co_lng
//

void lng_get_uid(char* in, char* out)
{
  Lng::get_uid(in, out);
}

char* lng_translate(const char* str)
{
  return Lng::translate(str);
}

void lng_set(char* str)
{
  Lng::set(str);
}

char* lng_get_language_str()
{
  return Lng::get_language_str();
}

//
//  c api to co_crr
//

int crr_signal(void* parent_ctx, char* signalname,
    void (*insert_cb)(void*, void*, navc_eItemType, char*, char*, int),
    int (*name_to_objid_cb)(void*, char*, pwr_tObjid*),
    int (*get_volume_cb)(void*, pwr_tVid*, pwr_tVid))
{
  int sts;
  NavCrr* navcrr = new NavCrr(parent_ctx, 0);
  navcrr->insert_cb = insert_cb;
  navcrr->name_to_objid_cb = name_to_objid_cb;
  navcrr->get_volume_cb = get_volume_cb;
  sts = navcrr->crr_signal(0, signalname);

  delete navcrr;
  return sts;
}

int crr_object(void* parent_ctx, char* objectname,
    void (*insert_cb)(void*, void*, navc_eItemType, char*, char*, int),
    int (*name_to_objid_cb)(void*, char*, pwr_tObjid*),
    int (*get_volume_cb)(void*, pwr_tVid*, pwr_tVid))
{
  int sts;
  NavCrr* navcrr = new NavCrr(parent_ctx, 0);
  navcrr->insert_cb = insert_cb;
  navcrr->name_to_objid_cb = name_to_objid_cb;
  navcrr->get_volume_cb = get_volume_cb;

  sts = navcrr->crr_object(0, objectname);

  delete navcrr;
  return sts;
}

void *tst_log_open(pwr_tStatus *sts, char *category, char *file)
{
  tst_log *log = new tst_log(sts, category, file);
  return (void *)log;
}

void tst_log_close(void *log)
{
  delete (tst_log *)log;
}

void tst_log_log(void *log, const char severity, const char *text1, 
		 const char *text2)
{
  ((tst_log *)log)->log(severity, text1, text2);
}

void tst_log_slog(void *log, const char severity, const char *text1, 
		  const char *text2, pwr_tStatus status)
{
  ((tst_log *)log)->log(severity, text1, text2, status);
}

void tst_log_vlog(void *log, const char severity, const char *format, ...)
{
  va_list ap;
  char msg[200];

  va_start(ap, format);
  vsnprintf(msg, sizeof(msg), format, ap);
  va_end(ap);
  ((tst_log *)log)->log(severity, msg);
}
