/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef co_dcli_input_h
#define co_dcli_input_h

#ifdef __cplusplus
extern "C" {
#endif

/* co_dcli_input.h
   Command line input. */

#define DCLI_OPT_NORECALL 1
#define DCLI_OPT_NOEDIT 2
#define DCLI_OPT_NOECHO 4
#define DCLI_OPT_NOPFTAN 8
#define DCLI_OPT_TIMEOUT 16
#define DCLI_OPT_NOSCROLL 32

#define DCLI_RECALL_MAX 30

typedef struct {
  int first_command;
  int last_command;
  char command[DCLI_RECALL_MAX][400];
} dcli_sRecall;

typedef int dcli_sChannel;

int dcli_input_init(dcli_sChannel* chn, dcli_sRecall** recall_buf);
int dcli_input_end(dcli_sChannel* chn, dcli_sRecall* recall_buf);
int dcli_get_input_command(dcli_sChannel* chn, const char* prompt, char* cmd,
    int maxlen, dcli_sRecall* recall_buf);
int dcli_get_input_string(dcli_sChannel* chn, char* out_string,
    unsigned long* out_terminator, int out_maxlen, dcli_sRecall* recall,
    unsigned long option, int timeout, int (*timeout_func)(), void* timeout_arg,
    const char* prompt);

int dcli_qio_assign(char* s, dcli_sChannel* chn);
int dcli_qio_set_attr(dcli_sChannel* chn, int tmo);
int dcli_qio_reset(dcli_sChannel* chn);
int dcli_qio_readw(dcli_sChannel* chn, char* buf, int len);
int dcli_qio_read(dcli_sChannel* chn, int tmo, char* buf, int len);
int dcli_qio_writew(dcli_sChannel* chn, char* buf, int len);
int dcli_qio_write(dcli_sChannel* chn, int tmo, char* buf, int len);

#ifdef __cplusplus
}
#endif

#endif
