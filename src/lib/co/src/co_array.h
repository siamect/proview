/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef co_array_h
#define co_array_h

#ifdef __cplusplus
extern "C" {
#endif

#ifndef __STDDEF_LOADED
#include <stddef.h>
#endif

/*! \file co_array.h
    \brief Dynamic-size array, like std::vector from C++ or ArrayList from Java.
*/
typedef struct {
  void* data;
  int elemsize;
  int capacity;
  int alloc_incr;
  int size;
} array_sCtx, *array_tCtx;

/*! \fn array_tCtx array_New(int elemsize, int alloc_incr)
    \brief Allocates a new dynamic array containing elements of size \a elemsize

    \param elemsize	The sizeof() an element.
    \param alloc_incr	How much the dynamic array should grow when it is full.
    \return 	Returns a new dynamic array.
*/
array_tCtx array_New(int elemsize, int alloc_incr);

/*! \fn void array_Delete(array_tCtx arr)
    \brief Frees the memory held by \a arr
*/
void array_Delete(array_tCtx arr);

/*! \fn int array_Push(array_tCtx arr, void* elem)
    \brief Appends \a elem to the end of the array.
*/
int array_Push(array_tCtx arr, void* elem);

/*! \fn int array_Push(array_tCtx arr, void* elem)
    \brief Concatenates \a number of elements from the fixed-size array
    \a elems to the end of the dynamic array \a arr.
*/
int array_Concat(array_tCtx arr, void* elems, int number);

/*! \fn void* array_Copy(array_tCtx arr)
    \brief Creates and returns a copy of \a arr.
    Warning! The returned array must be free() explicitly.
*/
void* array_Copy(array_tCtx arr);

#ifdef __cplusplus
}
#endif

#endif
