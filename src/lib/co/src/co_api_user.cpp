/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "co_api_user.h"
#include "co_dcli.h"
#include "co_user.h"

//
// c-api to co_user
//

int user_CheckUser(const char* systemgroup, const char* user,
    const char* password, unsigned int* priv)
{
  GeUser* gu;
  int sts;
  char filename[120];

  gu = new GeUser();
  sts = dcli_get_defaultfilename(user_cFilename, filename, "");
  sts = gu->load(filename);
  if (ODD(sts))
    sts = gu->get_user(systemgroup, user, password, priv);
  delete gu;
  return sts;
}

int user_CheckSystemGroup(const char* systemgroup)
{
  GeUser* gu;
  int sts;
  pwr_tMask attributes;
  char filename[120];
  pwr_tOix id;
  pwr_tString80 desc;

  gu = new GeUser();
  sts = dcli_get_defaultfilename(user_cFilename, filename, "");
  sts = gu->load(filename);
  if (ODD(sts))
    sts = gu->get_system_data(systemgroup, &attributes, &id, desc);
  delete gu;
  return sts;
}

int user_GetUserPriv(
    const char* systemgroup, const char* user, unsigned int* priv)
{
  GeUser* gu;
  int sts;
  char filename[120];

  gu = new GeUser();
  sts = dcli_get_defaultfilename(user_cFilename, filename, "");
  sts = gu->load(filename);
  if (ODD(sts))
    sts = gu->get_user_priv(systemgroup, user, priv);
  delete gu;
  return sts;
}

void user_PrivToString(unsigned int priv, char* str, int size)
{
  GeUser::priv_to_string(priv, str, size);
}

void user_RtPrivToString(unsigned int priv, char* str, int size)
{
  GeUser::rt_priv_to_string(priv, str, size);
}

void user_DevPrivToString(unsigned int priv, char* str, int size)
{
  GeUser::dev_priv_to_string(priv, str, size);
}

char* user_PwCrypt(char* password)
{
  return UserList::pwcrypt(password);
}
