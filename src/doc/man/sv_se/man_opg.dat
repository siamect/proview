
<topic> __DocumentTitlePage

<image> pwr_logga_doc.png





<h1> Handbok för Operatörer












<hr>
2018-03-29
Version 5.8.0	
<hr>
</topic>

<topic> __DocumentInfoPage


Copyright (C) 2005-2021 SSAB EMEA AB

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
Texts.



</topic>

<option> printdisable
<topic> index
Operatörshandbok

<image> pwr_logga.gif

<h1>Operatörshandbok

Introduktion <link> opg_introduction
Allmänt om ProviewR <link> opg_proview
Operatörsplatsen <link> opg_opplace
Larm och händelser <link> opg_events
Kurvor <link> opg_curves
Hjälp <link> opg_help
Navigatör <link> opg_navigator
Dashboard <link> opg_dashboard
Plc trace <link> opg_trace
Setup-skript <link> opg_setupfile
Användare och privilegier <link> opg_security
Funktionstangenter <link> opg_functionkeys
Status monitorn <link> opg_statusmonitor
Xtt kommandon <link> help command
Script <link> script
Index	<index>
</topic>
<option> printenable

<chapter>
<topic> opg_introduction
Inledning

ProviewR Handbok för Operatörer är främst avsedd för personer som kommer i kontakt med gående
proviewsystem i sitt dagliga arbete. Det kan vara

- operatörer som övervakar och sköter en process.
- underhållspersonal som felsöker anläggningen.
- processutvecklare som hämtar information om processen.
- systemansvariga som underhåller och felsöker systemet.

Funktioner för alla dessa grupper finns tillgängliga i den ordinare operatörsmiljön, och vem
som tillhör in viss grupp bestäms av de privilegier som en viss användare är tilldelad. 

</topic>
</chapter>

<chapter>
<topic> opg_proview
Allmänt om ProviewR

<h1>Vad är ProviewR
ProviewR är ett modernt, kraftfullt och generellt processtyrsystem. Det innehåller alla de
funktioner som normalt behövs för för att styra och övervaka en process: sekvensstyrning, 
reglering, datainsamling, kommunikation, larmhantering, HMI/SCADA, historisk datalagring mm.

ProviewR är ett distribuerat system, dvs det består av ett antal datorer (noder) förbundna
i ett nätverk. Noderna kan vara av typen processtation, operatörsstation eller 
lagringsstation.

<option> printdisable
<b>Stationer <link>opg_stations
<b>Objekt <link>opg_object
<option> printenable
</topic>

<headerlevel>
<topic> opg_stations
Stationer

<h2>Processtation
En processtation samlar in mätdata från olika givare i processen, det kan vara analoga 
mätdata som temperaturen, flöden, nivåer eller digital mätdata från t ex fotoceller eller 
tryckvakter. I processtationen exekveras ett styrprogram, som utifrån mätdata beräknar
styrdata för processen och skickas ut till motorer och ställdon som in sin tur påverkar 
processen.

Processtationer innehåller ofta en speciell hårdvara för att läsa in måtvärden och ställa ut
styrdata, men detta kan även ske över nätverket mha protokoll som Modbus/TCP eller Profinet.

<h2>Operatörstation
Operatörsstationens uppgift är att svara för gränssnittet mellan operatör och process. 
Operatören övervakar processen genom processbilder, som visar läget i processen genom
att data presenteras i form av staplar, kurvor, indikatorer mm. Operatören kan påverka
processen t ex genom att mata in data, eller trycka på knappar i processbilden. 


<h2>Lagringsstation
Vissa mätdata måste lagras för att man ska kunna se förändringar och trender, eller för att
man ska kunna gå tillbaka och analysera läget i processen vid en viss tidpunkt. Lagringtiden
kan varier från någon timme till flera år. Lagringen sker på lagringsstationer, som har
tillräckligt med diskutrymme för att kunna lagra data under lång tid, och som även har
backupfunktioner så att data inte förloras vid t ex ett diskhaveri.

Man brukar även tala om nivå 2 system, dvs system av överordnad karaktär som innehåller
t ex materialplaneringsfunktioner, tunga beräkningar och liknande. Dessa ingår i kategorin
processtationer.

<h2>Utvecklingsstation
På nätverket kan även finnas utvecklingstationer, på vilka process- operatörs- och 
lagringstationerna konfigureras och programmeras. På utvecklingsstationerna finns det verktyg
för att rita processbilder, programmera sekvenser, logikscheman och reglerkretsar, mm. Efter 
en ändring i konfigureringen för en station, laddas det nya konfigureringen ner till
stationen via nätverket.

<image>opg_fig1.png
<b>Fig Komponenter i ett ProviewR system
</topic>

<topic>opg_object
Objekt

<h1>Objektträd
Ett centralt begrepp i ProviewR är objekt. Givare, ventiler, motorer, regulatorer etc, 
representeras av objekt i en databas. Objekten är ordnade i en trädsstruktur där olika
hierarkinivåer i trädet motsvarar delar i anläggningen och processen. Om vi betraktar en ugn
kan den översta nivån representera ugnen. Ugnen består av 4 värningszoner som var och en 
representas av objekt på nästa nivå i trädet. Varje zon består av två värmeelement och två 
temperaturgivare som finns ytterligare en nivå ner. Här finns även några objekt som inte 
har någon fysisk motsvarighet i anläggningen, en temperatur regulator och ett styrprogram 
för zonen.

<image>opg_fig2.png
<b>Fig Ugn med 4 zoner

<image>opg_fig3.png
<b>Fig Objekt träd för ugnen

Notera att många objekt har ett ganska kryptiskt namn som följer en beteckningsstandard, men
till varje objekt finns en utförligare beskrivning som ofta visas tillsammans med objektet.

Låt oss titta lite närmare på ett objekt, t ex ett av temperaturgivarobjekten. Objektet
visas i en översiktsbild med objektets grafiska symbol, en trekant med bokstaven T.

<image>opg_fig4.png
<b>Fig Grafisk symbol för temperaturgivare

<h2>Objektsbild
Om man klickar på symbolen öppnas objektets objektsbild. Från objektsbilden kan man se 
objekts egenskaper. Det mest interessanta för en temperaturgivare är naturligtvis den 
uppmätta temperaturen, som visas både i siffror och i form av en stapel (termometer), Se 
'Fig Objektsbild för temperaturgivare' nedan. Temperaturgivar-objektet innehåller även fyra 
larmgränser, höghög, hög, låg och låglåg. Nivån på larmgränserna kan sättas från 
objektsbilden, och man kan även lägga in hysteres på dem. Med hjälp av checkboxar kan man 
också avaktivera larmgränser.

<image>opg_fig5.png
<b>Fig Objektsbild för temperaturgivare

<h2>Metoder
I överkanten på objektsbilden finns ett antal tryckknappar som aktiverar objektets metoder.
Mha av metoderna kan man hämta upp all information som finns om objektet i styrsystemet.
Metoderna kan även aktiveras från objektbildens meny, eller genom att högerklicka på den
grafiska symbolen i översiktbilden, då en popupmeny med metoderna visas. Faktum är att var 
man än stöter på objektet, i larmlistor, i bilder, i plc koden etc, kan man genom att 
högerklicka på objektet öppna popupmenyn med objektets metoder. Här följer en lista på olika
metoder, men vilka som är aktuella för ett specifikt objekt beror på vilken typ av objekt det
är, och hur det är konfigurerat.

<b>Metod <t>Beskrivning
Objekt Bild <t>Öppna Objektsbilden.
Trend <t>Visa en trendkurva.
Historik <t>Hämta historiska data från en lagringsstation och visa i en kurva.
Historisk lista <t>Visa historisk lista med larm och händelser för objektet.
Blockera händelser <t>Blockera larm och händlelser.
Hjälp <t>Visa en hjälptext för objektet.
Notera <t>Skriv in en anteckning för objektet. Anteckningen visas i objektsbilden.
Öppna objekt <t>Visa objektets datainnehåll.
RtNavigatör <t>Visa objektet i objektsträdet.
Korsreferenser <t>Visa var objektet förekommer i plc-kod och bilder.
Hjälp klass <t>Visa hjälp för den här objekttypen.
Datablad <t>Visa databladet för den komponent i anläggningen som objektet motsvarar.
Kopplingsschema <t>Visa elektriskt kopplingschema för objektet.

</topic>
</headerlevel>
</chapter>

<chapter>
<topic>opg_opplace
Operatörsplatsen

<option> printdisable
<b>Starta operatörsmiljön <link>opg_startop
<b>Operatörsfönstret <link>opg_opwindow
<option> printenable
</topic>

<headerlevel>
<topic> opg_startop
Starta operatörsmiljön

Vanligtvis är inloggingen av arbetsstationen konfigurerad så att operatörsmiljön startar
automatiskt. Vid starten anges ett opertöraplatsobjekt där operatörsplatsens egenskaper 
finns konfigurerade.

Ibland vill man starta på annat sätt, t ex från ett terminalfönster.

Operatörsmiljön startas med programmet rt_xtt, och man anger ett OpPlace objekt som 
argument. Kommandot för att starta med OpPlace objektet Nodes-OpgNode-b55 är

<c>> rt_xtt Nodes-OpgNode-b55

Det finns även ett antal optioner som man kan skicka med som argument

-l <t>Språk. Ett av följande språk anges:
   <t>en_us engelska (default).
   <t>sv_se svenska.
   <t>de_de tyska.
   <t>fr_fr franska.

-q <t>Fönstret med licenstexten visas ej vid uppstart.
-c <t>Knapp för att stänga operatörsmiljön visas i operatörsfönstret.
-u <t>Startar med ett opplace objekt med samma namn som den linuxanvändare 
   <t>man är inloggad som.
-s <t>Visar en lista på tillgängliga operatörsplatsobjekt.

</topic>

<topic>opg_opwindow
Operatörsfönstret

<image>opg_fig6.png
<b>Fig Operatörsfönster

Operatörsfönstret lägger sig längst upp på bildskärmen och saknar titelrad och knappar för
att ikonisera och ta bort fönstret. Det är uppdelat i tre delar, till vänster visas aktuella
larm och meddelanden, i mitten finns en meny och knappar för olika basfunktioner, och till 
vänster knappar som är konfigurerade för just den här operatörsplatsen.

<h2>Statusfält
Den översta raden är ett statusfält. Här visas vem som är inloggad och på vilken nod. För
den aktuella noden, och för alla noder som det finns nod-övervakning på, visas en indikator
för nodens systemstatus. Grön innebär att allt fungerar som det ska, gult indikerar varning, 
rött fel och blinkande rött fatalt fel. Om man klickar på en nod öppnas status-bilden för
noden.

<h2>Larm och meddelanden
I vänstra delen av operatörsfönstret visas larm och meddelanden. 

Larmen är uppdelade i fyra prioritetsnivåer A, B, C och D, där A har högst prioritet och D 
lägst. A-larm är röd-makerade, B-larm gul, C-larm blå och D-larm violett. Dessutom finns
kategorin Info meddelande som markeras med grönt.

I det övre fältet visas de senaste okvitterade A-larmen. Beroende på operatörsfönstrets
storlek i höjdled, visas 2 till 5 larm. Här finns även en knapp markerad med en bock för 
att kvittera A-larm.

I den undre fältet visas de senaste okvitterade B, C och D-larmen, samt info meddelanden.
Dessa larm visas i prioritetsordning snarare än tidsordning, dvs om det finns okvitterade
B-larm visas det senaste av dessa. Endast om det inte finns några okvitterade B-larm visas
eventuella C-larm etc. Även här finns en kvittensknapp, som man kvitterar B, C, D-larmen och
info meddelandena med.

Ett larm är rådande om larmvillkoret fortfarande är uppfyllt. Detta markeras med en 
varningstriangel före larmtexten.

<h2>Meny och knappar för att öppna basfunktioner
I mittendelen av operatörfönstret finns en meny, och knappar för att öppna basfunktioner.

<b>Meny
Här följer en beskrivning på de olika menyalternativen i Functions menyn.

Functions/Alarm/AlarmList <t><t>Öppnar larmlistan med rådande eller okvitterade larm. <link>opg_alarmlist
Functions/Alarm/EventList <t><t>Öppnar händelselistan, en lista på de senaste larmen och händelserna. <link>opg_eventlist
Functions/Alarm/EventLog <t><t>Öppnar händelseloggen, där man kan visa lagrade händelser. <link>opg_eventlog
Functions/Alarm/BlockList <t><t>Öppnar listan över blockerade larm. <link>opg_blocklist
Functions/Curves/Trends <t><t>Visar en lista på alla trendkurvor. <link>opg_trends
Functions/Curves/Fast <t><t>Visar en lista på alla snabbkurvor. <link>opg_fastcurves
Functions/Curves/Process History <t><t>Visar en lista på process historik kurvor. <link>opg_history
Functions/Process Graphics <t><t>Visar en lista på alla processbilder som är definierade med
                          <t><t>ett XttGraph objekt.
Functions/Navigator <t><t>Öppnar navigatorn. <link>opg_navigator
Functions/View/Zoom in<t><t>Ökar textstorleken i larmtexterna.
Functions/View/Zoom out<t><t>Minskar textstorleken i larmtexterna.
Functions/User/Switch User <t><t>Öppnar inloggningsfönster för inloggning som annan användare.
Functions/User/Show User <t><t>Visar den användare som är inloggad.
Functions/User/Return <t><t>Återgår till den ursprungliga användaren.
Functions/Help/Project <t><t>Visar hjälptexter för projektet.
Functions/Help/Overview <t><t>Visar en översikt över hjälptexter.
Functions/Help/Operator Window <t><t>Visar hjälp för operatörsfönstret.
Functions/Help/About ProviewR <t><t>Visar info om ProviewR, t ex version av installat paket.
Functions/Close <t><t>Stänger ner operatörsplatsen.

<b>Trycknappar
Under menyn finns en verkygspanel med ett antal tryckknappar som fungerar som genvägar till
menyalternativ: 
- zooma in och ut.
- visa hjälptexten för projektet.
- avslutas.
- visa larmlista.
- visa händelselista.
- visa händelselog.
- visa lista över blockerade larm.
- öppna navigatorn.

<h2>Funktionsknappar
Till höger finns ett antal knappar som kan användas för att öppna bilder eller exekvera
olika order eller kommandon. Hur knapparna används beror på operatörsplatsens konfigurering.

</topic>
</chapter>

<chapter>
<topic>opg_events
Larm och händelser

<option> printdisable
Allmänt om larm och händelser <link>opg_events_general
Larmlista <t><t>Visar aktuella larm<link>opg_alarmlist
Händelselista <t><t>Visar senaste tidens larm och händelser <link> opg_eventlist
Händelselogg <t><t>Sökning av larm och händelser i händelsedatabasen. <link> opg_eventlog
Blockeringslista <t><t>Visar blockerade objekt och hierarkier. <link> opg_blocklist
Blockera larm <link> opg_blockingwindow
<option> printenable
</topic>

<headerlevel>
<topic>opg_events_general
Allmänt om larm och händelser

<h1>Larm
Larm skickas ut till operatören när någonting inträffar som operatören måste uppmärksamma.
Det kan t ex vara en temperatur som går över en gräns, eller att man har matat in ett
felaktigt värde i en bild. I ProviewR finns speciella övervakningsobjekt som övervakar
signaler och genererar larm.

Larm visas i larmlistan.<link>opg_alarmlist

<h2>Prioritet
Larmen är grupperade i fyra prioritetsnivåer, A, B, C och D, där A har högst prioritet och
D lägst. Hur man använder prioriteterna beror på hur system är konfigurerat. Det är vanligt
att larmprioriteterna används på följande sätt.

A-larm markeras med rött. De har högst prioritet och markerar att ett allvarlig fel i 
anäggningen har inträffat som omgående bör åtgärdas. Ofta innebär det att driften av 
anläggningen stoppas och inte kan startas så länge larmen är rådande.

B-larm markeras med gult. De har lite lägre prioritet och innebär ett fel som snarast bör
åtgärdas, men att driften kan fortsätta ytterligar en tid.

C-larm markeras med blått och D-larm med lila. De markerar mindre fel som inte ar akuta.
I många system är det tillräckligt med två larmnivåer, och man använder då enbart A och
B-larm.

<h2>Larmtext
Larm innehåller en text, som visas i larm och händelselistor. Denna text är enradig och
maximalt 80 tecken lång. Det finns även utrymme för en längre text, en mertext, som t ex 
kan innehålla ytterligare förklaring till larmets orsaker eller hur det bör åtgärdas. 
Mertexten visas i larm och händelselista om man placerar markören på larmtexten.

<h2>Kvittering
Ett larm måste kvitteras av operatören. Så länge larmet är okvitterat, ligger det kvar i
larmlistan och ger upphov till en ljudsignal. Om ett larm visas på flera operatörsplatser
räcker det med att larmet kvitteras från en av operatörsplatserna.

<h2>Blockering
Om ett larm inte relevant under en period, kan man blockera detta. Man kan t ex blockera
larmen från en anläggningsdel som är tagen ur drift. Blockeringen kan ske för ett enskilt
larmobjekt, eller för en hierarki. Blockering är en metod för ett objekt, och utförs från 
ett blockeringsfönster som kan öppnas från popupmenyn för objektet. För att en användare
ska kunna blockera måste han ha privilegiet RtEvents.

Blockerade objekt visas i en blockeringslista. <link>opg_blocklist

<h2>Meddelanden
Info-meddelanden är en grupp som har samma funktion som larm. De har lägre prioritet
än larm och markeras med grönt.

<h1>Händelser
En händelse genereras på samma sätt som larm, med hjälp av övervakningsobjekt. Även larm
genererar händelser. Aktivering av ett larm räknas som en händelse, och även när larm 
tillståndet försvinner och när larmet kvitteras.

Händelserna lagras i en händelselista, som innehåller de senaste händelserna. De lagras
också i en händelselogg, där man kan gå tillbaka och titta på händelser en tid tillbaka, 
och även se statistik på händelser. För händelseloggen finns en sökfunktion, där man kan 
söka på händelser med olika sökbegrepp, t ex tid, händelsetyp eller händelsetext.

<h2>Urvalslista
Operatörsplatsen har en urvalslista innehåller en lista på anläggningsdelar i objektsträdet. 
Enbart larm som tillhör dessa anläggningsdelar kommer att visas i larm och händelslistan,
övriga larm och händelser filtreras bort.

</topic>

<topic>opg_alarmlist
Larmlista

<image>opg_fig7.png
<b>Fig Larmlista

Larmlistan öppnas genom genom att aktivera knappen "Larmlista" i operatörfönstret. Man kan
också öppna larmlistan från menyn i navigatorn, Alarm/Alarm List, och med xtt kommandot
'show alarmlist'.

I larmlistan visas rådande och okvitterade larm. Okvitterade larm markeras med en klocka 
och rådande med en varningstriangel. Endast larm från de anläggningsdelar som är angivna
i urvalslistan visas.

Mertexten för att larm visas om man placerar markören på larmtexten.

Larm kan kvitteras genom att aktivera Functions/Acknowledge (Ctrl+K) i menyn.

Om man högerklickar på en larmtext, visas metoderna för larmobjektet. Det gör att man enkelt
kan visa objektsbilden eller se var i plckoden larmet genereras.

<image>opg_fig10.png
<b>Fig Larmtext
</topic>

<topic>opg_eventlist
Händelselista

<image>opg_fig8.png
<b>Fig Händelselista

Händelselistan öppnas från knappen "Händelselista" i operatörsfönstret. Man kan även starta
den från menyn i navigatorn eller med xtt kommandot 'show eventlist'.

Händelser från de anläggningsdelar som finns angivna i urvalslistan visas i händelselistan.
Antalet händelser konfigureras i User objektet, och när den maximala antalet händelser är
uppnått, kastas gamla händelser när nya anländer.

För varje händelse visas
- Färgindikering för larm prioritet.
- Händelse typ.
- Händelse tid.
- Händelse text.
- Händelse objekt (objekt/signal namn).

Mertexten för en händelse visas när markören placeras på händelsetexten.
Om man högerklickar på en händelsetext, visas metoderna för händelseobjektet. Det gör att 
man enkelt kan visa objektsbilden eller se var i koden händelsen genereras.

</topic>

<topic>opg_eventlog
Händelselogg

Händelselistan är av begränsad längd och visar endast de senaste händelserna. Alla händelser
lagras emellertid in en databas. Med den historiska händelselistan, eller händelseloggen, är
det möjligt att titta på händelser för en tid tillbaka.

Eftersom antalet lagrade händelser ofta uppgår till fler tusen, söker man efter de händelser
man är intresserad av med olika sökvillkor. De händelser som passar in på sökvillkoren visas
i en lista.

<h1>Sökvillkor
Dialogen för händelseloggen visas i figuren Händelselogg nedan.

<h2>Tid
På översta raden kan man ange ett tidsintervall för sökningen. Ställ in önskat intervall
med optionmenyn till höger. Väljer man 'Time' anger man starttid och stoptid i 
inmatningsfälten.

<h2>Händelsetyp
Här kan man markera händlestyper. Om ingen type är markerad, tas alla typer med i sökningen.
- Active <t>Händelsen att ett larm aktiveras.
- Message <t>Ett info meddelande.
- Return <t>Ett larm återgår från att ha varit rådande.
- Ack <t>Ett larm kvitteras.

<h2>Prioritet
Här kan man markera att man vill söka på larm med en viss prioritet. Om ingen prioritet
anges utförs sökningen på alla prioriteter.

<h2>Händelsenamn
Namn på det objekt som händelsen är kopplad till. I namnet kan ingå wildcard (*), t ex
F1-Z1* söker på alla event under hierakin F1-Z1. Om inte något objektsnamn anges, söks på 
alla objekt.

<h2>Händelsetext
Sökning på händelsetexten (vanligtvis DetectText). Wildcard kan ingå (*). Om igen taxt
anges söks på alla texter.

När sökvillkoren är inmatade, trycker man på 'Search' knappen, varvid sökningen genomförs,
och resultatet presenteras i listan i undre delen av fönstret.

<image>opg_fig9.png
<b>Fig Händelselogg

I listan över händelser presenteras händelsen med 

- Prioritet <t>Prioriteten markeras med färg och bokstav.
- Händelsetyp <t>Active markeras med utropstecken, Return med ett överkorsat utropstecken,
              <t>och Ack med en bock.
- Händletext
- Händelsenamn

Om man högerklickar på en rad visas metoderna för händelsenamnsobjektet.
</topic>

<topic>opg_blocklist
Blockeringslista

<image>opg_fig12.png
<b>Fig Blockeringslista

Listan över blockerade larm öppnas från menyn i navigatören, Alarm/Blocked Alarms, eller
med xtt kommandot 'show blocklist'.

För varje blockerat objekt visas:
- Färgindikering som markerar den prioritetsnivå som har blockerats.
- Objektsnamn.
- Användare som har utfört blockeringen.

En blockering tas bort genom att blockeringen markeras och Functions/Remove Blocking i menyn
aktiveras.

Blockering av larm sker genom 'Block Events' metoden för ett objekt. <link>opg_blockingwindow


</topic>

<topic>opg_blockingwindow
Blockera larm

<image>opg_fig11.png
<b>Fig Dialog för larmblockering

Larmbockering aktiveras genom 'Block Events' metoden, dvs från popup-menyn för ett objekt, 
eller med xtt kommandot 'eventlist block'.

Fönstret används för att blockera larm för ett objekt. Alla larm med den specificerade 
prioriteten, och med lägre prioritet, blockeras för objektet och underliggande objekt.

Prioriteten specificeras med radio-knappar. Man kan även ta bort en blockering med
knappen 'No Blocking'.

Endast användare med privilegiet 'RtEvent' eller 'System' är auktoriserade att blockera 
larm.
</topic>

</headerlevel>
</chapter>

<chapter>
<topic> opg_curves
Kurvor

<option> printdisable
Trendkurvor <link> opg_trends
Snabbkurvor <link> opg_fastcurves
Process historik <link> opg_history
<option> printenable
</topic>

<headerlevel>
<topic> opg_trends
Trendkurvor

Trendkurvor öppnas med 'Trend' metoden i t ex popumenyn för ett objekt. De kan även
öppnas med Xtt kommandot 'open trend'. Trendkurvor konfigureras med DsTrend objekt, och
om flera kurvor ska visas i samma kurvfönster, med PlotGroup objekt.

En trendkurva är en signal, t ex av typen temperatur, tryck eller flöde, vars värde lagras
med ett visst tidsintervall. En trendkurva har plats för 478 värden, och hur lång tid 
tillbaka värdena kan lagras beror på hur ofta lagringen sker. Med ett nytt värde per sekund
kan ca 8 minuter lagras, med nytt värde varje minut blir det ca 8 timmar. Värdena lagras
i RAM-minnet och vid en omstart försvinner alla lagrade data.

Trendkurvorna visas i ett kurvfönster. Ett kurvfönster kan visa upp till 20 olika kurvor.

<image> opg_fig31.png
<b>Fig Trendkurvor

I kurvfönstrets övre del visas en tabell över de kurvor som visas. Första kolumnen är en
färgmarkering för att identifiera den korresponderande kurvan. 

Beskrivning av kolumner i tabellen

View <t>En checkbox med vilken man kan välja om en kurva ska visas eller inte.
Cursor <t>Visar värdet för kurvan vid den tidpunk där cursorn är placerad.
Mark1 <t>Visar värdet för kurvan vid den tidpunkt där den första markören är placerad.
Mark2 <t>Visar värdet för kurvan vid den tidpunkt där den andra markören är placerad.
Unit <t>Visar enhet för kurvan.
Scale <t>Från 'Scale' kan man ställa in skal-området i y-led (Scale för raden Time axis
      <t>ställer om i x-led).
Attribute <t>Anger det attribut som trendkurvan visar.
Description <t>Beskrivning av attributet.

<h2>Navigering
Verktygspanelen innehåller knappar för att zooma in och ut, och för att flytta visningen
åt vänster eller höger. 

Man kan även navigera med navigationsrutan i fönstrets undre del. Den del av kurvan som 
visas markera med en svart fyrkant. Genom att dra med MB1 kan man flytta den i x-led, och
genom att dra med mittenknappen, kan man zooma in eller ut.

Navigering med tangenbordet sker med pil tangenterna. Pil upp och ner ändrar zoomningsgraden
och pil vänster och höger flyttar visningen åt höger resp vänster.

<h2>Markörer
Det finns två makörer i fönstret som kan positioneras till specifika tider. Kurv-värdet
för positionen visas i tabellen. Markörerna kan flyttas med cursorn, eller genom att
klicka med MB1 (första markören) eller Ctrl+MB1 (andra markören) i kurv-fönstret.

<h2>Snapshot
För vissa trend-kurvor är det möjligt att ta en ögonblicksbild av trenden för att 
undersökan den nogrannare eller spara den till fil. Ögonblicksbilden aktiveras med
kamera-knappen in verktygspanelen, då ett nytt fönster med ögonblicksbilden visas.
<option> printdisable
See Trend ögonblicksbild <link> opg_trend_snapshot
<option> printenable

<h2>Addera kurvor
Flera kurvor kan adderas till trendfönstret genom att välja ut ett DsTrendCurve objekt
i runtime-navigatören och aktivera '+'-knappen i verktygspanelen.

<h2>Rutnät
När flera kurvor visas kan rutnätet anpassas till skalan för en specifik kurva genom
att klicka på den färgade skalan för kurvan.

<h2>Exportera till text-fil
En trend kan exporteras till text-fil från Arkiv/Exportera i menyn. I export dialogen kan
ett specifikt attribut väljas för exportering, eller alla attribut. För att undvika att
skriva över tidigare exporterade filer kan filnamnet innehålla strängen '$date' som
kommer att ersättas med aktuell tid i det verkliga filnamnet.
</topic>

<topic> opg_trend_snapshot
Trend ögonblicksbild

Trend ögonblicksbilden är ett snapshot av trendkurvan tagen vid en specifik tillfälle.

<image> opg_fig42.png
<b>Fig Trend snapshot

Ett tidsintervall kan väljas i verktygspanelen för tider. När ett intervall har
valts trycks på knappen 'Uppdatera kurva' för att rita om kurvan.

<h2>Spara kurva
En snapshot-kurva kan lagra genom att aktivera Arkiv/Spara i menyn.

<h2>Öppna sparad kurva
En sparad snapshot kurva öppnas från Arkiv/Öppna i menyn. För att öppna i ett nytt
fönster aktiveras Arkiv/Ny för att öppna ett tomt snapshot fönster, och sedan
Arkiv/Öppna i detta fönster.
</topic>

<topic> opg_fastcurves
Snabbkurvor

Snabbkurvor öppnas med 'Fast' metoden i t ex popumenyn för ett objekt. De kan även
öppnas med Xtt kommandot 'open fast'. Snabbkurvor konfigureras med DsFastCurve objekt, och
om flera kurvor ska visas i samma kurvfönster, med PlotGroup objekt.

Snabbkurvor används  för att visa snabba förlopp under en kortare tidsperiod. På en 
triggsignal startas lagringen av signalens värde och lagringen pågår under en tid. När
förloppet är avlutat visas kurvan upp i kurvfönstret, och ligger kvar där tills 
triggsignalen sätts och aktiverar en ny inspelning av förloppet.

Snabbkurvorna visas i ett kurvfönster. Ett kurvfönster kan visa upp till 20 olika kurvor.

<image> opg_fig37.png
<b>Fig Snabbkurva

</topic>

<topic> opg_history
Process historik

Process historik öppnas med 'History' metoden i t ex popumenyn för ett objekt. De kan även
öppnas med Xtt kommandot 'open history'. Historiken konfigureras med SevHist objekt.

Process historik innebär att värdet på en signal, t ex av typen temperatur, tryck eller 
flöde, vars värde lagras i en databas med en viss frekvens och under en viss tid.
Historiken kan sträcka sig över flera år och antal mätvärden för en signal kan uppgå till
flera miljoner.

<image> opg_fig34.png
<b>Fig Process historik

I kurvfönstrets övre del visas en tabell över de kurvor som visas. Första kolumnen är en
färgmarkering för att identifiera den korresponderande kurvan.

Beskrivning av kolumner i tabellen

View <t>En checkbox med vilken man kan välja om en kurva ska visas eller inte.
Cursor <t>Visar värdet för kurvan vid den tidpunk där cursorn är placerad.
Mark <t>Visar värdet för kurvan vid den tidpunkt där markören är placerad.
Unit <t>Visar enhet för kurvan.
Scale <t>Från 'Scale' kan man ställa in skal-området i y-led (Scale för raden Time axis
      <t>ställer om i x-led).
Attribute <t>Anger det attribut som historik-kurvan visar.

<h2>Navigering
Verktygspanelen innehåller knappar för att zooma in och ut, och för att flytta visningen
åt vänster eller höger. 

Man kan även navigera med navigationsrutan i fönstrets undre del. Den del av kurvan som 
visas markera med en svart fyrkant. Genom att dra med MB1 kan man flytta den i x-led, och
genom att dra med mittenknappen, kan man zooma in eller ut.

Navigering med tangenbordet sker med pil tangenterna. Pil upp och ner ändra zoomningsgraden
och pil vänster och höger flyttar visningen åt höger resp vänster.

<h2>Upplösning
Eftersom antalet mätvärden för ett attribut kan uppgå till flera miljoner, hämtar man bara
upp ett urval av värden. När man först öppnar kurvan, visas hela tidsintervallet med några
hundra punkter. För att få högre upplösning använder man knapparna med pil upp och pil ner
i verkygspanelen. Pil upp zoomar in och ökar upplösningen i det tidsintervall som visas, dvs
man läser in nya punkter i ett snävare tidsintervall med högre upplösning. Pil ner zoomar ut
med minskad upplösning.

</topic>
</headerlevel>
</chapter>

<chapter>
<topic> opg_help
Hjälpfönstret

<h1>Att få hjälp
Hjälpfunktionen kan öppnas på följande sätt

<h2>Operatörsfönstret
I operaörsfönstrets mitt-del finns en hjälpknapp som visar hjälptexter för projektet.

<h2>Navigatorns meny
Menyentryt Help/Overview ger hjälp om ProviewR och operatörsmiljön. Help/Project ger hjälp
om projektet.

<h2>Kommando
En hjälptext öppnas med xtt-kommandot 'help'. Till help skickar man det ämne man är 
intresserad av. Kommandot help help visar t ex hur man använder help.

<h2>Objektsmetoder
För objekt finns det två metoder som ger hjälp,
- Help, visar hjälp för objektet eller anläggningsdelen.
- Help Class, visar information om objektets klass.

<h2>Hjälp och infoknappar i processbilder
Trycknappar i bilder kan kopplas till hjälptexter. Dessa är ofta markerade med ett 
frågetecken eller ett 'I'.
<image> opg_fig36.png
<b>Fig Hjälpknappar

<h1>Navigera i hjälptexten
Rader med länkar markeras med en pil i radens vänsterkant.
Först raden är en länk till föregående ämne.

<h2>Navigera från tangentbordet
PageUp och PageDown används för att scrolla upp och ner i texten. 
Man följer länkar genom att välja ut raden med länken med Pil-upp och Pil-ner, och sedan
trycka på Pil-höger.
Med Pil-vänster återgår man till föregående sida.

Med Ctrl+N går man till nästa avsnitt, och med Ctrl+P till föregående avsnitt.
Ctrl+A återgår till startsidan.

<h2>Navigera med musen
För att följa en länk klickar man på pilen, eller dubbelklickar på raden.
Genom att klicka på pilen på första raden återgår man till föregående sida.

<image> opg_fig35.png
<b>Fig Hjälpfönstret

</topic>
</chapter>

<chapter>
<topic> opg_navigator
Navigatör

Navigatören, ävan kallad Xtt, startas från knappen "Navigator" i operatörsfönstret. Den 
kan även startas som ett separat program, oberoende av operatörsmiljön. Det görs ofta vid
felsökning eller underhåll av systemet. Man startar då från ett terminalfönster.

<image> opg_fig14.png
<b>Fig Menyn i navigatorn

Figuren ovan visar menyn i navigatorn. Den översta mappen, "This Project" är konfigurerbar 
och kan innehålla en mapstruktur som är specifik för projektet (ofta saknas den helt). 
Övriga mappar är standard, 

Database <t><t>Visar objektsträdet och objekten i databasen <link>opg_nav_database
Alarm / Alarm List <t><t>Öppnar larmlistan. <link>opg_alarmlist
Alarm / Event List <t><t>Öppnar händleselistan. <link>opg_eventlist
Alarm / Blocked Alarms <t><t>Visar listan över blockerade larm. <link>opg_blocklist
Alarm / Historical List <t><t>Visar händelseloggen.<link>opg_eventlog
Store <t><t>Visar sparade samlingsbilder.
System / Nethandler / Link <t><t>Visar länkar till andra ProviewR system. <link>opg_nav_link
System / Nethandler / Subscription Client <t><t>Visar prenumerationer (client). <link>opg_nav_subcli
System / Nethandler / Subscription Server <t><t>Visar prenumerationer (server). <link>opg_nav_subsrv
System / Communication / RemNode <t><t>Visar remote kommunikation (noder) <link>opg_nav_remnode
System / Communication / RemTrans <t><t>Visar remote kommunikation (transar) <link>opg_nav_remtrans
System / Device <t><t>Visar I/O enheter <link>opg_nav_device
System / PlcThread <t><t>Visar Plc trådar <link>opg_nav_thread
System / PlcPgm <t><t>Visar PlcPgm. <link>opg_nav_plcpgm
System / Logging <t><t>Dialog för att starta logging av data. <link>opg_nav_logging
System / System Messages <t><t>Visar systemmeddelanden. <link>opg_nav_systemmsg
System / System Status <t><t>Visar systemstatus for noden.<link>opg_nav_systemsts
System / Nodes <t><t>Visar statusbild för noder. <link>opg_nav_nodes
System / Volumes <t><t>Visar laddade volymer. <link>opg_nav_volumes
Close <t><t>Stänger navigatorn.

<h1>Navigera
<h2>Navigera från tangenbordet
Det mest ergonomiska sättet att navigera i mapstrukturen är att använda piltangenterna.
Med Pil-Upp och Pil-Ned väljer man ut en map eller ett löv. Med Pil-Höger öppnar man en 
mapp och med Pil-Vänster stänger man. 

Ett objekt i databasen öppnar man med Shift Pil-Höger, dvs man trycker först ner Shift-
tangenten och håller den nedtryckt medan man trycker på Pil-Höger. Om objektet inte har
några barn räcker det att trycka på Pil-Höger.

Har man privilegiet RtWrite kan man ändra värden i attribut i databasen. Genom att öppna ett
objekt, välja ut attributet och trycka på Pil-Höger öppnas ett inmatningsfält där man
kan mata in ett nytt värde. 

<h2>Navigera med musen
Man naturligvis även navigera med musen. En mapp öppnas genom att man klickar på mappen
(eller dubbelklickar på texten). Sedan stänger man genom att återigen klicka på mappen.

Ett objekt i databasen öppnas genom att trycka in Shift och klicka på mappen/lövet för 
objektet.

<h1>Kommandon
Med Functions/Command, Ctrl+B, öppnar man en kommando-prompt på nedersta raden i navigatorn.
Härifrån kan man mata in kommandon och exekvera skript. Tillgängliga kommandon finns
beskrivna i kapitlet Kommandon och script i kapitlet Script

<option> printdisable
Kommandon <link>help command
Script <link> script
<option> printenable

<h1>Samlingsbild
Men Functions/Collect/Show, Ctrl+N, tittar man på insamlade objekt och attribut. Vid 
felsökning vill man ofta titta på ett antal olika attribut från olika objekt samtidigt. 
Genom att gå runt i objekts-trädet och samla in attribut med Functions/Collect/Insert, 
Ctrl+V, och sedan aktivera Functions/Collect/Show visas dessa attribut gemensamt på en sida.

Om man vill spara samlingsbilden till en senare session, görs det med 'save' kommandot.
För att spara en samlingsbild under namnet 'mycollection' skriver man kommandot

<c>> save/collect mycollection

<image> opg_fig15.png
<b>Fig Samlingsbild som lagras med namnet 'mycollection'

Bilden kommer att återfinnas under 'Store' mappen, och kan även återskapas med kommandot

<c>> @mycollection

<h2>Samlingsfönster
En samlingsbild can kopieras till ett separat fönster med /Functions/Collect/Copy To Window.
Även ett tomt fönster kan skapas från Functions/Collect/New Window. Nya attribut kan adderas
till förstret genom att att välja ut attributet i runtime navigatören, och activera 
Edit/Insert (Ctrl+V) i samlingsfönstret. Med Shift+PilUpp och Shift+PilNer kan attribut
flyttas upp resp. ner i fönstret.

Ett samlingsfönster sparas från Edit/Save (Ctrl+S) med ett specificerat namn. Det kan 
sen öppnas från Functions/CollectOpen i runtime navigatören, eller från File/Open i
ett samlingfönster. Det önskade fönstret öppnas från en lista med alla sparade 
samlingsfönster.

</topic>

<headerlevel>
<topic> opg_nav_database
Database

<image> opg_fig13.png
<b>Fig Objektträdet i navigatorn

Under mappen 'Database' visas objektträdet. Här kan man navigera i objektsträdet, öppna
objekt och titta på innehållet i olika attribut i objektet. Om man har privilegier kan man
även ändra på attributvärden.

Högerklickar man på ett objekt öppnas en popupmeny med objektets metoder. Knappar för att
aktivera objektets metoder finns även på den undre verkygspanelen i navigatören. Endast
metoder som är relevanta för ett objekt är tryckkänsliga. 

<image> opg_fig16.png
<b>Fig Metoderna kan aktiveras både från verktygspanelen och popupmenyn
</topic>

<topic> opg_nav_link
System / Nethandler / Link
Mappen 'System / Nethandler / Link' visar länkar till andra ProviewR-stationer. Även den egna
noden finns med i listan.

I figuren nedan kan man se att den lokala noden aristotle, har kontakt med noden pwrutv.

<image> opg_fig17.png
<b>Fig Länkar till andra noder

Beskrivning av kolumnerna i bilden

Node <t>Nodnamn.
Os <t>Operativsystem och hårdvara för noden.
Link <t>Status för länken. Kan vara Up, Active, Connected, Down eller Local.
UpCount <t>Antal gånger länken till noden har etablerats.
TimeUp <t>Tid för senaste etablering av länken till noden.

</topic>

<topic> opg_nav_subcli
System / Nethandler / Subscription Client

Bilden visar prenumerationer som den aktuella stationen har lagt upp på andra stationer.

När en operatörstation visar data från processtationer i en processbild, läggs det upp
en prenumeration på varje data som visas. Det innebär att processtationerna med jämna
mellanrum skickar nya data till operatörsstationen, som då uppdaterar processbilden med
dessa data.

Om man har ett fält i en processbild som inte uppdateras, kan man gå in Subsciption Client 
tabellen och se om prenumationen finns med och om den uppdateras. Varje gång nya data tas 
emot för en prenumeration räknas 'Count' upp och i 'Time' läggs tidpunken in.

På första raden, i 'Uknown', kan man se antalet prenumerationer där attributet är okänt.
Det kan vara prenumerationer på en station som ännu inte är i drift, men det kan också
vara prenumerationer som är felstavade, eller på objekt som inte längre existerar.

<image> opg_fig19.png
<b>Fig Klient prenumerationer

Beskrivning av kolumnerna

Subid <t>Identitet på prenumerationen.
Time <t>Senaste ankomsttid för prenumerationsdata.
Count <t>Antal gånger data har mottagits.
Node <t>Nod som skickar data för prenumerationen.
Size <t>Storlek i bytes på prenumerations-data.
Attribute <t>Det attribut i databasen som prenumerationen gäller.
</topic>

<topic> opg_nav_subsrv
System / Nethandler / Subscription Server

Bilden visar prenumerationer som andra stationer har lagt upp på den aktuella noden, dvs
prenumertioner som skickas cykliskt från den aktuella noden till andra noder, vanligtvis
från processtationer till opertörsstationer.

<image> opg_fig18.png
<b>Fig Server prenumerationer

Beskriving av kolumnerna

Subid <t>Identitet på prenumerationen.
Count <t>Antal gånger data har skickats.
Node <t>Nod till vilken data för prenumerationen skickas.
Size <t>Storlek i bytes på prenumerations-data.
Offset <t>Offset i det objekt som data hämtas ifrån.
Attribute <t>Det attribut i databasen som prenumerationen gäller.

</topic>

<topic> opg_nav_remnode
System / Communication / RemNode

Visar en lista noder som den aktuella noden kommunicerar med mha Remote.

Remote är en funktion för att skicka data mellan noder. Noder som man vill kommunicera med
konfigureras med RemNode objekt, och olika transaktioner som ska utbytas mellan noderna
konfigureras med RemTrans objekt. Ett antal olika protokoll för datautbytet finns inlagt,
Modbus, MQ, Serial, TCP, UDP, 3964R och ALCM.

<image> opg_fig20.png
<b>Fig Lista på RemNoder

Beskrivning på kolumnerna

RemNode <t>Namn på RemNode objektet, endast de två sista namnleden visas.
Type <t>Typ av kommunikation, Modbus, MQ, Serial, TCP, UDP, 3964R eller ALCM.
Description <t>Beskrivning.

Genom att välja ut en nod och trycka Pil-Höger visas RemTrans-objekten för noden (det 
går  även att klicka på mappen).
Med Shift/Pil-Höger öppnas RemNode objektet.

</topic>

<topic> opg_nav_remtrans
System / Communication / RemTrans

Visar en lista på samtliga RemTrans objekt.

Ett RemTrans objekt specificerar en transaktion som skickas mellan två noder mha Remote
funktionen. Transaktionen innebär att man skickar eller tar emot data. 


<image> opg_fig21.png
<b>Fig Lista på RemTrans-objekt

Beskrivning på kolumnerna

RemTrans <t>Namn på RemTrans objektet, endast sista namnledet visas.
DataValid <t>Anger att data finns som ännu ej har skickas (vid sändning) eller 
	<t>tagits hand om (vid mottagning).
Direction <t>Riktning på transaktionen, Snd (sändning) eller Rcv (mottagning).
TransCnt <t>Antal sända eller mottagna transaktioner.
TransTime <t>Tidpunkt för senaste transaktionen.
ErrCount <t>Antal misslyckade transaktioner.
LastSts <t>Status för senaste transaktionen.

Genom att välja ut en transaktion och trycka Pil-Höger visas innehållet i transaktionen (det 
går  även att klicka på mappen). Om attributet StructFile är ifyllt med den include fil
som innehåller datastrukturen för transaktionen, visas datainnehållet i klartext.
Med Shift/Pil-Höger öppnas RemTrans-objektet.
</topic>

<topic> opg_nav_device
System / Device

Visar lista med I/O enheter.

I/O systemet i ProviewR är indelat i fyra nivåer, agent, rack, kort och kanal. 
I Device listan visas alla kort-objekt.

<image> opg_fig22.png
<b>Fig Lista över I/O enheter

Bekrivning av kolumnerna

Device <t>Namn på kort-objektet. De två sista namnleden visas.
Class <t>Kortobjektets klass.
ErrorCount <t>Felräknare.
Process <t>Process som hanterar kortet. 1: plc, 2 io_comm.
PlcThread <t>Plctråd som hanterar kortet.
Address <t>Adress som är konfigurerad för kortet.

Genom att välja ut ett enhet och trycka Pil-Höger visas kanalerna för enheten (det går
även att klicka på lövet).

</topic>

<topic> opg_nav_thread
System / PlcThread

Visar lista på trådar i plc-programmet. 

Olika Plc program går med olika prioritet och med olika cykeltid. De är kopplade till
PlcThread objekt som bestämmer prioritet och cykeltid för exekveringen.

<image> opg_fig23.png
<b>Fig Lista på plc trådar

Beskrivning av kolumner

PlcThread <t>Namn på trådobjektet.
Prio <t>Trådens prioritet.
LoopCnt <t>Räknare för antal cykler sedan start av ProviewR.
ScanTime <t>Konfigurerad cykeltid.
Mean <t>Medelvärde på uppmätt cykeltid.
Coverage <t>Exekveringstiden för tråden i förhållande till cykeltiden i procent.
Count 1/8 <t>Antal cykler där exekveringstiden är mindre än 1/8 av cykeltiden.
Count 1/4 <t>Antal cykler där exekveringstiden är mindre än 1/4 av cykeltiden och
          <t>större än 1/8.
Count 1/2 <t>Antal cykler där exekveringstiden är mindre än 1/2 av cykeltiden och
          <t>större än 1/4.
Count 1/1 <t>Antal cykler där exekveringstiden är mindre än cykeltiden och
          <t>större än 1/2 cykeltiden.
</topic>

<topic> opg_nav_plcpgm
System / PlcPgm

Visar en lista på alla PlcPgm objekt.

Ett PlcPgm objekt omfattar plc-kod som styr en anläggningsdel, eller utför andra typer av 
beräkningar. PlcPgm objektet är kopplade till ett tråd objekt som bestämmer prioritet och 
cykeltid.

<image> opg_fig24.png
<b>Fig Lista på PlcPgm objekt

Beskrivning av kolumner

PlcPgm <t>Namn på PlcPgm objektet.
PlcThread <t>Plc tråd som objektet är kopplat till.
Description <t>Beskrivning.

PlcTrace för ett PlcPgm öppnas genom att välja ut PlcPgm objektet och trycka på Ctrl+L.
Med Pil-Höger visas all fönster i Plc-programmet.

</topic>

<topic> opg_nav_logging
System / Logging

Med loggnings-funktionen kan man logga signaler och värden i databasen på en text-fil.
Innehållet i textfilen kan visas i ett kurvfönster, eller läsas in i ett kalkyl-program, 
t ex Excel or Calc.

Upp till 100 attribut kan loggas i en loggfil, och det finns 10 st entry som var och en
hanterar en loggfil.

Att starta en loggning går till på följande sätt.

- Samla ihop de attribut som ska loggas i samlingsbilden, t ex genom att leta upp attributen
  i databasen och trycka på Ctrl+V.

- Kontrollera med Ctrl+N att rätt attribut finns i samlingsbilden.

<image> opg_fig25.png
<b>Fig Attribut insamlade i samlingsbilden

- Öppna Logging entry 1 (System / Logging / Logging Entry 1).

- Klicka på 'Insert' knappen. Attributen överförs nu från samlingsbilden till listan på
  attribut i loggentry bilden.

- Ange loggtid i ms, och ev annat filnamn.

- Starta loggningen genom att klicka på 'Start' knappen.

<image> opg_fig26.png
<b>Fig Loggentry med loggningen started

- När loggningen är klar klickar man på 'Stop' knappen. Observera att man inte får terminera
  navigatorn under tid loggningen pågår. Däremot kan man lämna loggentry-sidan.

- Titta på loggresultatet i kurvform genom att aktivera 'ShowFile'.

<image> opg_fig27.png
<b>Fig Loggingen i kurvform

Loggningen kan vara av två typer, antingen loggas värdet av attributen kontinuerligt med
en viss frekvens (kontinuerlig loggning), eller loggas ett attribut varje gång dess värde
ändras (händelsestyrd loggning).

<h2>Kontinuerlig loggning
Värdet av attributen i entryt loggas vid varje cykel. På filen skrivs dessutom tiden
sedan loggningen startades. Filen kan visas i Xtt's kurvfönster med 'ShowFile' eller
läsas in i ett kalkylprogram.

<h2>Händelsestyrd logging
Ett attribut i entryt loggas om värdet av attributet har ändrats.
I loggfilen skrivs tiden för ändringen och det nya värdet. Denna typ av loggning kan inte
visas med 'ShowFile'.

<h2>Buffer
Loggningen sker först internt i en buffer. När bufferten är full töms den på fil. Vid
snabba tidskritiska förlopp kan det vara lämpligt att öka bufferstorleken för att undvika
att störningar som kan uppstå när bufferten skrivs på fil.

<h2>Villkorlig loggning
I 'Condition kan man ange ett digitalt attribut som styr loggningen. Loggning
sker enbart om Condition attributet är sant.

Man kan även ange ett uttryck i 'Condition. Uttrycket startar med 'expr' följt av
villkoret omgivet av parenteser. I villkoret kan man hämta upp attribut-värden med 
GetA funktionen för analoga attribut, GetD funktionen för digitala attribut och GetI
funktionen för heltals attribut.

<b>Exempel
expr( GetD("H1-H2-Dv1.ActualValue") && GetA("H1-H2-Av2.ActualValue") > 2.5)

Loggningen utförs när Dv'n 'H1-H2-Dv1' är 1 och Av'n 'H1-H2-Av2' är större en 2.5.

<h2>Lagra
Logg konfigureringen kan sparas med 'Store' knappen, för att återskapas vid ett senare
tillfälle med 'Restore' knappen.

</topic>

<topic> opg_nav_systemmsg
System / System Messages

Proivew's systemlogg innehåller informations-, varnings- och felmeddelande som skrivs ut
av systemets olika serverprocesser. Även applikationer kan skriva på systemloggen genom
att använda errh gränssnittet. 

Meddelandena i loggfilen har olika grad av allvar, som makeras med en bokstav och färg:

F <t>rött <t>Fatal, är den allvarligaste formen av felmeddelande.
E <t>rött <t>Error, är ett felmeddelande. 
W <t>gult <t>Warning, är ett varningsmeddelande.
I <t>grönt<t>Information, är ett informations meddelande.
S <t>grönt <t>Success, är ett meddelande om en framgångsrikt utförd aktivitet.

Dessutom markeras uppstart av ProviewR med en gulfärgad rad.

Framför allt ska man vara uppmärksam på röda meddelanden som innebär att någonting är 
fel i systemet.

<image> opg_fig28.png
<b>Fig Systemloggen
</topic>

<topic> opg_nav_systemsts
System / System Status

System status visar en lista på noder i systemet, och genom att öppna en nod visas 
statusbilden för noden. 

Det mest intressanta in bilden är SystemStatus. Detta är en indikation på hur systemet mår.
Om SystemStatus är grön, mår systemet bra, om den är gul eller röd, är någonting fel i
systemet.

Färgmarkeringarna har samma betydelse som i Systemloggen ovan, dvs

F <t>blinkande rött <t>Fatal, är den allvarligaste formen av felstatus.
E <t>rött <t>Error, markerar felstatus. 
W <t>gult <t>Warning, markerar varnings-status.
I <t>grönt<t>Information, är ett informations status.
S <t>grönt <t>Success, innebär all allt är ok.
  <t>grått <t>Null status, funktionen är inte aktiverad.

Status för systemet är en summastatus av status för system- och applikations-processer. Under
systemstatus finns en lista på dessa processer, och här visas även status för dem. Dessutom
visas processernas senaste eller allvarligaste meddelande i systemloggen.

Om systemstatus t ex är gul, innebär det att någon system eller applikations process har gul
status. Förhoppningsvis kan man genom att läsa status texten och titta på systemloggen
lista ut vad felet är.

<image> opg_fig29.png
<b>Fig Statusbild för noden

Här följer en beskrivning på del olika system processerna som finns med i statusbilden.

rt_ini <t>Initiering <t>Uppstarts process som drar igång systemet. Hanterar även systemloggen.
rt_qmon <t>QCom monitorn <t>Sköter kommunikation med andra noder.
rt_neth <t>Näthanteraren <t> Hanterar utbyte av databas information mellan noder.
rt_neth_acp <t><t>Hjälp process till näthanteraren.
rt_io <t>I/O <t>Process för I/O hantering som är asynkron med Plc programmet.
rt_tmon <t>Timer monitorn <t>Hanterar sändning av prenumerationsdata.
rt_emon <t>Event monitorn <t>Hanterar larm och händelser.
rt_bck <t>Backup process <t>Hantera backup av attribut och objekt.
rt_linksup <t>Link supervision <t>Övervakning av länkar till andra noder.
rt_trend <t>Trend process <t>Hanterar lagring av trendkurvor.
rt_fast  <t>Fast process <t>Hanterar lagring av snabbkurvor.
rt_elog <t>Event logg <t>Hanterar logging av händelser.
rt_webmon <t>Web monitorn <t>Förser webgränssnitten med databasinformation.
rt_webmonmh <t>Web mh monitor <t>Förser webgränssnittet med larm och händelser.
rt_sysmon <t>System monitor <t>Övervakar systemet.
plc <t>Plc processen <t>Hanterar I/O och exekverar plc-koden.
rs_remote <t>Remote processen <t>Hanterar remote kommunikation.
opc_server <t>Opc server process.
rt_statussrv <t>Status server <t>Webservice för runtime monitorn och övervakningscentralen.
rt_post  <t>Post server <t>Sänder larm via email eller sms.
rt_report  <t>Report server <t>Genererar rapporter.
rt_sevhistmon <t>Storage monitor <t>Samlar och sänder historisk data till lagringsserver.
rt_powerlink <t>Ethernet powerlink server <t>Hanterar Powerlink kommunikation.

</topic>

<topic> opg_nav_volumes
System / Volumes

Visar laddade volymer.
För varje volym visas namn, klass, version och en bokstavskombination LCM där L står för
loaded, C för cached och M för mounted.

<image> opg_fig30.png
<b>Fig Laddade volymer
</topic>
</headerlevel>
</chapter>

<chapter>
<topic> opg_dashboard
Dashboard

Ett dashboard (instrumentbräda) är en förenklad graf med ett mycket begränsat antal
byggstenar. Byggstenarna kallas för celler och kan visa värden i form av indikatorer,
staplar, trendkurvor, givare etc.

<image> opg_fig43.png

Ett dashboard kan skapas in Ge editorn eller i operatörsmiljön.

Dashboardet är indelat i rader och kolumner där cellerna placeras. En cell har initialt
höjden av en rad och bredden av en kolumn, men storleken kan utökas till flera rader och
kolumner.

En cell kan innehålla fler element. En stapel cell till exemple, kan innehållar tre
element. Varje element kopplas till ett analog attribut som visas med en stapel. En 
trendcell kan innehålla två element och visa två kurvor.

Det finns tree huvudtyper av celler, analoga, digital och objekt.

<h1>Analoga celler
<h2>Bar
En stapelcell visar ett analog värde med en stapel och ett värdefält. Det kan innehålla
tre element.

<image> opg_fig44.png
<b>Fig Stapelceller med ett, två och tre element
<h2>BarArc
<image> opg_fig45.png

<h2>Trend
<image> opg_fig46.png

<h2>Gauge
<image> opg_fig47.png

<h2>Gauge2
<image> opg_fig48.png

<h2>Slider
<image> opg_fig49.png

<h2>Pie
<image> opg_fig50.png

<h1>Digitala celler
<h2>Indicator
<image> opg_fig51.png

<h2>DigitalTrend
<image> opg_fig52.png

<h1>Objektceller
Objektceller finns får några objekt, t ex DsTrendCurve.
<image> opg_fig53.png
<b>Fig Objektcell för DsTrendCurve

<h1>Skapa ett dashboard i rt_xtt
Genom att välja ut ett attribut in navigatorn, och aktivera Funktioner/Dashboard/Lägg till
(Ctrl+D) i meny, adderas attributet till ett dashboard. Om något dashboard befinner sig
i editiering-mod lägg det in där, annar läggs det in i "PwR Dashboard". Man kan addera
celler tills alla rader och kolumner är fyllda.

För ett analog attribute skapas en stapelcell. Cell-typen kan ändras genom att gå över i
editiering-mod från File/Edit (Ctrl+E) in menyn. Öppna cellens attribute (dubbelklick)
och välj en annan typ i Dash.Type. Lämna editerings-mod med Ctrl+E.

I editerings-mod, öppnas Ge editorn in begränsad mod. Några funktioner i editerings-mod är

 - Addera. Skapa en tom cell.
 - Ta bort. Ta bort en cell.
 - Kopiera. Kopiera celler.
 - Klistra in. Klistra in kopierade celler.
 - Koppla. Koppla utvalt attribut i navigatorn.
 - Slå ihop. Slå ihop celler. Utvalda celler slås ihop i den cell som var först utvalt.
 - Från GraphAttribut kan cykeltiden och dashboardets storlek ändras.

</topic>
</chapter>

<chapter>
<topic> opg_trace
Plc trace

Plc trace används för att studera och felsöka plc-koden. 
Trace öppnas med metoden 'Open Plc', eller via en korsreferens i plc-koden.
Man kan även öppna genom att välja ut ett PlcPgm objekt in navigatorn och aktivera
'Functions/OpenProgram' (Ctrl+L) i menyn.

Till höger finns ett navigationsfönster, där det visade områden är markerat med en fyrkant.
Genom att flytta fyrkanten genom att dra med MB1 flyttar man det visade området. Man kan
även zooma genom att dra med mittenknappen. 

Digitala objekt med hög status markeras med rött i koden.

<image> opg_fig32.png
<b>Fig Plc Trace

Man kan titta på värdet på analoga och digitala utgångar genom att skapa s k analys-noder
som visar värdet på utgången. Dessa skapas genom att dra med mittenknappen från utgången.

En uppsättning analysnoder kan sparas och återskapas med 'File/Save Trace' och 
'File/Restore Trace' i menyn.

Genom att högerklicka på ett objekt visas metoderna för objektet. En mycket användbar 
metod i det här sammanhanget är korsreferenser. Korsreferenserna visas även om man
dubbelklickar på ett objekt.

<h1>Korsreferenser

Korsreferenserna är en lista på var ett objekt eller attribut förekommer i koden och i 
processbilder. Om referensen innebär en läsning av värdet, markeras detta med en bok, om
det innebär en skrivning av värdet, markeras det med en penna. Läsning kan vara att värdet
visas i en bild eller hämtas upp i plckoden med ett Get objekt i koden. Skrivning kan ske 
med en trycknapp i en bild eller med ett Set eller Sto objekt i koden.

<image> opg_fig33.png
<b>Fig Korsreferenser

Genom att högerklicka på korsreferensen kan man öppna plc't eller process-grafen som 
referensen pekar på. På plc referenser kan man även dubbelklicka. När Plc Trace öppnas
är referensen makerad och centrerad.

<h1>Felsökning med Plc Trace och Korsreferenser
Plc trace och korsreferenser är ett mycket effektivt sätt att felsöka på. 
En felsökning utgår ofta från ett larm eller en felindikering i en process bild. Genom att
aktivera metoderna 'Crossreferences' eller 'Open Plc' letar man upp det eller de ställen
i koden där objektet skrivs. Genom att analysera koden sluter man sig till vilken signal
som saknas, tar upp korsreferenserna för denna och öppnar Plc Trace där denna skrivs. På
detta sätt kan man nästla sig bakåt i koden för att slutligen hitta orsaken.

<h1>Simulering
Vid simulering, dvs när man testkör ett system utan I/O system, kan man sätta över Plc Trace
i simuleringsmod, med Mode/Simulate i menyn. I simuleringsmod kan man toggla digitala 
signaler genom att klicka med Ctrl/Shift MB1 på dem i Plc Trace fönstret.

</topic>
</chapter>

<chapter>
<topic> opg_setupfile
Setup-skript

En setup-fil kan skapas på hemma-katalogen med namnet

<c>xtt_setup.rtt_com

Den kommer att exekveras när operatörsmiljön (eller rt_xtt) startas, och kan 
innehålla script satser och xtt kommandon.

Här är några exempel på användbara kommandon.

<b>Öppna en graf

<c>   open graph my_graph

<b>Skapa en underhålls meny i navigatören

<c>   create item/text="Maintenance"/menu/destination="DataBase"/before <LINK> create item
<c>   create item/text="My graph"/command="open graph my_graph"/pixmap=graph
<c>           /dest=Maintenance/first

<b>Ta bort menyalternativ ur navigatörens standardmeny

<c>   delete item /name=exit <LINK> delete item
<c>   delete item /name=system-nethandler

<b>Kortkommando för hieraki i databasen

<c>   define rb9 "show children /name=hql-rb9" <LINK> define

<b>Kortkommando for en graf

<c>   define my_graph "open graph my_graph"
</topic>

<headerlevel>
<topic> opg_symbol
Symbol

En xtt symbol kan användas som kortkommando eller som variabel i ett
kommando. Om symbolen används som variabel i ett kommando ska den omgärdas
av apostrofer.

Symboler skapas med define kommandot. <link> define

Exempel på en symbol använd som ett kortkommando

<c>xtt> define p1 "show child/name=hql-hvk-pumpar-pump1"
<c>xtt> p1

Exempel på en symbol använd som en variabel

<c>xtt> define p1 hql-hvk-pumpar-StartPump1
<c>xtt> open trace 'p1'

</topic>
</headerlevel>
</chapter>

<chapter>
<topic> opg_security
Användare och privilegier

ProviewR innehåller ett system med användare som tilldelas privilegier. För att utföra vissa 
saker krävs privilegier, och endast om användaren har dessa privilegier tillåts han att 
utföra dem.

Följande privilegier används i operatörsmiljön:

RtRead	<t>Läsrättigheter i runtime.
RtWrite <t>Skrivrättigheter i runtime. Gör att man kan ändra värden på attribut från
        <t>navigatören.
RtEvents <t>Privilegium för att hantera larm och händelser.
System  <t>System. Ger behörighet till det mesta.
Maintenance <t>Privilegium för underhållspersonal.
Process <t>Privilegium för process tekniker.
Instrument <t>Privilegium för instrument tekniker.
Operator1 <t>Privilegium för operatör.
Operator2 <t>Privilegium för operatör.
Operator3 <t>Privilegium för operatör.
Operator4 <t>Privilegium för operatör.
Operator5 <t>Privilegium för operatör.
Operator6 <t>Privilegium för operatör.
Operator7 <t>Privilegium för operatör.
Operator8 <t>Privilegium för operatör.
Operator9 <t>Privilegium för operatör.
Operator10 <t>Privilegium för operatör.

<h1>Användare 
När operatörsmiljön eller Xtt startas, loggar man antingen in som en användare, eller så
tilldelas man default privilegier som defineras i Security objektet.

Om uppstarten av operatörsmiljön sker med ett operatörsplats-objekt hämtas användare från
User objektets UserName attribut. Om användare saknas eller är ogiltig öppnas 
inloggings-fönstret och man måste logga in med användarnamn och passerord.

Om Xtt startas utan OpPlace objekt, hämtas privileger från Security-objektets DefaultXttPriv
attribut. Om där inte finns några privilegier som ger läsrättigheter, öppnas inloggings-
fönstret.

<b>Navigatören
För att göra förändringar i databasen från navigatören krävs RtWrite eller System. Detta 
gäller även kommandot 'set parameter'.

<b>Plc Trace
För att kunna göra ändringar från Plc Trace i simuleringsmod krävs RtWrite eller System.

<b>Objektsbilder
Generellt för objektsbilder krävs det RtWrite eller System för att göra ändringar i
databasen från dem. Det finns några undantag. I ChanAi och ChanAo har även Instrument 
behörighet att ändra signalområden, och att sätta en Ao i test-mod. I PID och Mode-bilderna 
har Process behörighet att ändra förutom RtWrite och System. I Mode-bilden kan man dessutom 
styra behörigheten genom att öppna bilden med kommandot 'open graph' och använda /access 
funktionen.

<b>Processbilder
I Processbilder väljer konstruktören för varje inmatningsfält och trycknapp vilka
privilegier som krävs för att göra en ändring.
</topic>
</chapter>

<chapter>
<topic> opg_functionkeys
Funktionstangenter

Man kan använda funktionstangenterna för att snabbt ta upp bilder eller påverka objekt
i databasen.

<h1>Funktionsanrop
Följande funktioner kan anropas när en funktionstangen trycks ner.

<h2>SetDig()
Sätter ett attribut av typen Boolean. Namnet på attributet ges som argument.

<h2>ResDig()
Återställer ett attribut av typen Boolean. Namnet på attributet ges som argument.

<h2>ToggleDig()
Togglar värdet på attribut av typen Boolean. Namnet på attributet ges som argument.

<h2>Command()
Exekverar ett xtt-kommando. Kommandot ges som argument.

<h1>Setup-fil
Kopplingen mellan tangenter och  funktionerna läggs i filen Rt_xtt på inloggningskatalogen. 
I filen skrivs en rad för varje tangent. På raden skrivs
- eventuella modifierare (Shift, Control eller Alt).
- <Key> följt av namnet på tangenten, t ex <Key>F7 eller <Key>m.
- ett kolon föjt av funktionen som ska anropas med argument.

Ett '#' tecken först på raden anger en kommentar.

<b>Exempel

<c>#
<c># Configuration of Global function keys
<c>     <Key>F5: Command(event ack /prio=A)
<c>     <Key>F6: Command(event ack /prio=NOA)
<c>     <Key>F7: Command(show alarm)
<c>     <Key>F8: Command(show event)
<c>     <Key>F9: Command(close all/except=navigator)
<c>     Shift Control <Key>m: SetDig(F1-Start.ActualValue)
<c>     Shift Control <Key>n: SetDig(F1-Stop.ActualValue)
<c>     Shift Alt <Key>n: SetDig(F1-Reset.ActualValue)

</topic>
</chapter>

<chapter>
<topic> opg_statusmonitor
Statusmonitorn

Statusmonitorn är ett verktyg för att övervaka och hantera process- och 
operatörs-stationer. Man adderar noder som man vill övervaka och statusmonitorn
visar status for noden i form av en färgmarkering och status-texten.

<image> opg_fig38.png
<b>Fig Status monitorn

<h1>Addera och ta bort noder
En nod adderas till statusmonitorn från File/Add Node i meny, eller från plus-tecknet
i verktygspanelen. En dialog öppnas där nodens namn anges. Man kan även ange en
beskrivning om man vill ha en annan beskrivning än den i nodens node-objekt.
Det är även möjlig att ange ett operatörsplats-objekt på noden, man kan då öppna
denna operatörsplats från menyn eller verkygspanelen. OBS! Ange inte en 
operatörsplats som redan är i bruk på en operatörsplats. OpPlace objektet ska vara
av typen 'Underhåll' eller dedicerad för statusmonitorn.

En nod tas bort från statusmonitorn genom att noden väljs ut, och 'File/Remove Node' 
aktiveras i menyn.

<image> opg_fig41.png
<b>Fig Addera en nod till monitorn

<h1>Status
Default är det systemstatus som övervakas. Systemstatus är en summastatus för
för processerna i systemet, och berättar hur noden mår ur systemets synvinkel.
I den här moden fungerar statusmonitorn som en övervakning för den systemansvarige.

Man kan även visa applikations-status, dvs en status som sätts av en
applikation i systemet, och som t ex visar status för processen eller för
en anläggningsdel. På det här sättet kan statusmonitorn fungera som en slags
överordnad operatörsplats, där man med hjälp av felstatus indikerar att noden 
behöver operatörens uppmärksamhet, och operatören sedan kan gå vidare och öppna 
operatörsplatsen på noden, om situation kräver detta.

<image> opg_fig39.png
<b>Fig Info om en nod

<image> opg_fig40.png
<b>Fig Status for processer på noden

</topic>
</chapter>

<chapter>
<TOPIC> help command
Xtt kommandon

add parameter<t>Addera ett attribut till en bild <LINK> add parameter
add menu    <t>Addera ett menyalternativ till en xtt meny <LINK> add menu
collect     <t>Addera ett attribut till samlingsbilden <LINK> collect
call method <t>Anropa en xtt metod för ett objekt <LINK> call method
check method <t>Kontrollera om en xtt metod är relevant för ett objekt <LINK> check method
collect show<t>Visa samlingsbilden		<LINK> collect show
collect clear<t>Töm samlingsbilden		<LINK> collect clear
close alarmlist <t>Stäng larmlistan		<LINK> close alarmlist
close eventlist <t>Stäng händleslistan		<LINK> close eventlist
close graph <t>Stäng en graf			<LINK> close graph
close navigator <t>Stäng navigatorn		<LINK> close navigator
create opmenuitem <t>Skapa ett menyalternativ i operatörsfönstret <LINK> create opmenuitem
create item <t>Skapa ett xtt menyalternativ	<LINK> create item
crossreference<t>Visa korsreferenser		<LINK> crossreference
define      <t>Definiera en symbol		<LINK> define
delete opmenuitem <t>Ta bort ett xtt menyalternativ <LINK> delete item
delete item <t>Ta bort ett menyalternativ i operatörsfönstret <LINK> delete item
emit signal <t>Sänd en Ge signal.		<LINK> emit signal
eventlist   <t>Hantera händelselistan		<LINK> eventlist
exit        <t>Stäng xtt			<LINK> exit
help        <t>Visa hjälp			<LINK> help
login       <t>Inloggning av användare		<LINK> login
logout      <t>Utloggning av änvändare		<LINK> logout
logging     <t>Logga attribut till fil		<LINK> logging
open graph  <t>Öppna en graf			<LINK> open graph
open jgraph <t>Öppna en java graf		<LINK> open jgraph
open fileview <t>Öppna en fileview		<LINK> open fileview
open navigator <t>Öppna navigatorn		<LINK> open navigator
open trace  <t>Öppna trace för ett plc-fönster  <LINK> open trace
open trend  <t>Öppna en trendkurva		<LINK> open trend
open operatorwindow<t>Öppna operatörsfönstret 	<LINK> open operatorwindow
read object <t>Läs innehållet av ett objekt från fil <LINK> read object
search	<t>Leta efter objekt eller sträng 	<LINK> search
set advanceduser<t>Sätt avancerad användare	<LINK> set advanceduser
set display<t>Sätt format for visning av utvalt attribut <LINK> set display
set folder	<t>Aktivera en flik i ett flikfönster.  <LINK> set folder
set parameter<t>Sätt värdet på ett attribut  	<LINK> set parameter
set signal  <t>Sätt invert, conversion och test på signaler.  <LINK> set signal
set subwindow<t>Visa in graf i ett Ge window objekt.  <LINK> set subwindow
set graph   <t>Hantering av graf.		<LINK> set graph
setup       <t>Xtt konfigurering		<LINK> setup
show version<t>Visa xtt version			<LINK> show version
show symbol <t>Visa en symbol			<LINK> show symbol
show plcpgm <t>Visa PlcPgm objekt		<LINK> show plcpgm
show plcthreads<t>Visa PlcThread objekt		<LINK> show plcthreads
show links  <t>Visa länkar			<LINK> show links
show logfiles<t>Visa xtt loggfiler		<LINK> show logfiles
show subsrv <t>Visa prenumerations servern	<LINK> show subsrv
show subcli <t>Visa prenumerations klienten	<LINK> show subcli
show device <t>Visa I/O enheter			<LINK> show device
show remnode<t>Visa RemNode objekt		<LINK> show remnode
show remtrans<t>Visa RemTrans objekt		<LINK> show remtrans
show database<t>Visa runtime databasen		<LINK> show database
show file  <t>Visa filer			<LINK> show file
show graph <t>Visa graf-filer			<LINK> show graph
show time  <t>Visa aktuell tid			<LINK> show time
show default<t>Visa default katalog		<LINK> show default
show children<t>Visa ett objekts barn 		<LINK> show children
show message<t>Visa ett meddelande 		<LINK> show message
show objectlist<t>Visa alla objects av en specifik klass<LINK> show objectlist
show objid <t>Visa ett objekts identitet	<LINK> show objid
show parameter<t>Visa ett objektsattribut	<LINK> show parameter
show logging<t>Vissa ett loggingentry		<LINK> show logging
show eventlist<t>Visa händlselistan		<LINK> show eventlist
show alarmlist<t>Visa larmlistan		<LINK> show alarmlist
show user  <t>Visa nuvarande användare		<LINK> show user
sound      <t>Spela upp ett ljud definerat av ett ljudobjekt <LINK> sound
store      <t>Lagra en lista på attribut in en fil <LINK> store
write object <t>Skriv innehållet i ett objekt till en fil <LINK> write object
</TOPIC>	

<headerlevel>
<TOPIC> call method <style> function
Kommando   call method

Anropa en xtt metod för ett objekt.
Xtt metoder aktiveras normalt från objektets popupmeny. Det här
är ett alternativt sätt att anropa en metod, t ex från en kommando 
trycknapp i en Ge graf.

<B>xtt> call method /method= /object=

/method=	<t>Namnet på metodet, dvs attributet ButtonName
		<t>i definitionen av metoden.
/object=	<t>Namn på objektet.
</TOPIC>

<TOPIC> check method <style> function
Kommando   check method

Anropa en xtt-metods filterfunktion för ett objekt.
Filterfunktionen används för att avgöra om en metod knapp ska visas
eller ej. Detta kommando kan användas för att göra en metod knapp
okänslig i en Ge graf. Det returnerar filter-värdet till anroparen.
Kommandot kan endast användas i en Ge graf.

<B>xtt> check method /method= /object=

/method=	<t>Namnet på metodet, dvs attributet ButtonName
		<t>i definitionen av metoden.
/object=	<t>Namn på objektet.
</TOPIC>

<TOPIC> add parameter <style> function
Kommando   add parameter

Addera ett attribut till listan av attribut, och visa attributets
värde.

En lista på attribut skapas med kommandot 'show parameter', och 
fler attribut kan adderas till listan med 'add parameter'.

Objekt som matchar specificerad klass, namn och hierarki visas i listan.

<B>xtt> add parameter /parameter= /name= /class= /hierarchy=

/parameter=	<t>Namn på attributete som ska visas.
/name=		<t>Namn på objektet, Wildcard är tillåtet.
/class=		<t>Visar objekt av angiven klass.
/hierarchy=	<t>Visar objekt under angivet objekt i hierarkin.

<H2>Se även
show parameter <LINK> show parameter
</TOPIC>

<TOPIC> show parameter <style> function
Kommando   show parameter

Skapa en ny lista, addera attribut till listan, och visa värdet på 
attributet.
Fler attribut kan adderas till listan med 'add parameter'.

Objekt som matchar klass, namn och hierarki beskrivninegen visas på
skärmen.

<B>xtt> show parameter /parameter= /name= /class= /hierarchy=

/parameter=	<t>Namn på attributete som ska visas.
/name=		<t>Namn på objektet, Wildcard är tillåtet.
/class=		<t>Visar objekt av angiven klass.
/hierarchy=	<t>Visar objekt under angivet objekt i hierarkin.

<H2>Se även
add parameter <LINK> add parameter
</TOPIC>

<TOPIC> set parameter <style> function
Kommando   set parameter

Sätt värdet på ett attribut.

<B>xtt> set parameter /name= /value=

/name=		<t>Namn på attributet.
/value=		<t>Värde som ska sättas på attributet.
/bypass=	<t>Gå förbi behörighetsrestriktioner.
</TOPIC>

<TOPIC> set folder <style> function
Kommando   set folder

Aktivera en flik i ett flikfönster objekt.

<B>xtt> set folder 'graphname' /name= /index=

/name=		<t>Namn på filkfönster objektet.
/index=		<t>Index på filken som ska aktiveras. Indexeringen startar från 0.
</TOPIC>

<TOPIC> set signal <style> function
Command   set signal

Sätt invert, conversion, test och testvalue för en signal.

Conversion kan sättas på Di, Ii och Ai,
Invert kan sättas på Di och Do.
Test kan sättas på Do, Ao och Io.
Testvalue kan sättas på Do.

<B>xtt> set signal conversion /on [/name=]
<B>xtt> set signal conversion /off [/name=]
<B>xtt> set signal invert /on [/name=]
<B>xtt> set signal invert /off [/name=]
<B>xtt> set signal test /on [/name=]
<B>xtt> set signal test /off [/name=]
<B>xtt> set signal testvalue /on [/name=]
<B>xtt> set signal testvalue /off [/name=]

/name	<t>Signalnamn. Om signalnamnet ej är angivet används den 
        <t>utvalda signalen.
/on	<t>Sätt entitet till.
/off	<t>Set entitet från.
</TOPIC>

<TOPIC> set subwindow <style> function
Command   set subwindow

Visar en graf in ett Ge window objekt. Kommandot används i kommando
knappar för att byta innehållet i ett window objekt. /source anger
namnet på den graf som ska visas. Även objekt-bilder kan visas genom
att aktuellt objekt med /object. 

<B>xtt> set subwindow 'graphname' /name= /source= [/object=]

'graphname' <t>den graf där window objektet ligger.
/name	<t>namn på window objektet. '$current' anger nuvarande graf.
/source	<t>namn på den Ge graf som ska visas i window objektet.
/object	<t>anger aktuellt objekt när grafen är en objekts-bild.
/x0	<t>Övre vänstra x-koordinaten i Ge för grafens gräns. Om x0, y0, x1, y1
        <t>anges kan en annan del av grafen än den som har specificerats i
        <t>Graph attribute visas. Implementerad för grafer i multiview celler,
        <t>inte för window-objekt.
/y0	<t>Övre vänstra y-koordinaten i Ge för grafen.
/x1	<t>Nedre högra x-koordinaten i Ge för grafen.
/y1	<t>Nedre högra y-koordinaten i Ge för grafen.
/continue <t>Normalt exekveras inte några fler actions i kommando-knappen, eftersom den
        <t>nuvarande grafen kan ha bytt ut sig själv. För att också exekvera efterföljande
        <t>actions för kappen, adderas /continue.

Om 'set subwindow' kommandot används i ett script, och byter ut den nuvarande
grafen, ska scriptet avslutas med ett anrop till exit( GLOW__SUBTERMINATED).

<c>main()
<c>  set subwindow motor1 /name=subw1 /source=motor1.pwg
<c>  ...
<c>  exit( GLOW__SUBTERMINATED);
<c>endmain

</TOPIC>

<TOPIC> add menu <style> function
Kommando   add menu

Addera ett menyalternativ till xtt's meny-hierarki.
Menyn placeras sist i menyn. Menyalternativet kan användas för
att exekvera ett xtt kommando eller visa attributen för ett objekt.

<B>xtt> add menu /text= /command=
<B>xtt> add menu /text= /object=

/text<t>Text för menyalternativet.
/command<t>Xtt som exekveras när menyalternativet aktiveras.
/object<t>Objekt som visas när menyalternativet aktiveras.

<H2>Se även
create item <LINK> create item
delete item <LINK> delete item
</TOPIC>

<TOPIC> collect <style> function
Kommando   collect

Addera ett attribut till samlingsbilden.
Om namnet inte anges adderas det utvalda objektet.

<B>xtt> collect
<B>xtt> collect /name=

/name<t>Namn på attributet.

Exempel

xtt> collect /name=hql-hvk-Start.ActualValue

<H2>Se även
collect show <LINK> collect show
collect clear <LINK> collect clear
</TOPIC>

<TOPIC> collect show <style> function
Kommando   collect show

Visa samlingsbilden.

<B>xtt> collect show

<H2>Se även
collect <LINK> collect
collect clear <LINK> collect clear
</TOPIC>

<TOPIC> collect clear <style> function
Kommando   collect clear

Töm samlingsbilden.

<B>xtt> collect clear

<H2>Se även
collect <LINK> collect
collect show <LINK> collect show
</TOPIC>

<TOPIC> create opmenuitem <style> function
Kommando   create opmenuitem

Skapa ett menyalternativ i operatörsfönstrets meny.
Menyalternativet kan användas för att exekvera ett xtt kommando.

<B>xtt> create opmenuitem /name= /command= /pixmap=

/name<t>Namn på menyalternativet inklusive namn på ovanliggande menyer.
     <t>Namnet bör inledas med 'Functions-' eller med dess översättning.
     <t>För övriga namnled skapas nya undermenyer om de inte redan finns.
     <t>Ex Functions-MyMenu-MyGraph
/command<t>Xtt kommando som exekveras när menyalternativet aktiveras.
/before	<t>Menyalternativet läggs först i menyn.
/after <t>Menyalternativet läggs sist i menyn.
/pixmap <t>Pixmap för menyalternativet: 'graph' eller 'curve'.

Exempel

xtt> create opmenuitem /name="Functions-MyMenu-MyGraph"/after/pixmap=graph

<H2>Se även
delete opmenuitem <LINK> delete opmenuitem
</TOPIC>

<TOPIC> create item <style> function
Kommando   create item

Skapa ett menyalternativ i xtt's meny hierarki.
Menyalternativet kan användas för att exekvera ett
xtt kommando, eller för att öppna en meny.

<B>xtt> create item /text= /command= /pixmap= /destination= /after /before /firstchild /lastchild
<B>xtt> create item /text= /menu /destination= /after /before /firstchild /lastchild

/text<t>Text på menyalternativet.
/command<t>Xtt kommando som exekveras när menyalternativet aktiveras.
/menu	<t>När menyalternativet aktiveras öppnas en meny.
/destination<t>Destinations meny. Kan vara förälder eller syskon. Om destination
        <t>är en null-sträng skapas menyalternativet på topnivån.
/after	<t>Placerar menyalternativet som syskon efter destinationen.
/before	<t>Placerar menyalternativet som syskon före destinationen.
/firstchild<t>Placerar menyalternativet som första barn till destinationen.
/lastchild<t>Placerar menyalternativet som sista barn till destinationen.
/pixmap <t>Pixmap för menyalternativet: 'map', 'leaf', 'graph', 'list' eller 'script'.

Exempel

xtt> create item /text="Motor1"/dest=Maintenance-Motors/command="open graph motor1"/first

<H2>Se även
add menu <LINK> add menu
delete item <LINK> delete item
</TOPIC>

<TOPIC> crossreference <style> function
Kommando   crossreference

Visar korsreferenser.
Korsreferenser kan visas för 
- Signaler.
- Objektreferenser med GetData.
- Referenser i Ge grafer.
- c-funktioner eller strängar som förekommer koden i CArithm eller 
  DataArithm objekt.

Om det inte anges några kvalifierare visas korsreferenser för det utvalda
objektet.

<B>xtt> crossreference
<B>xtt> crossreference /name=
<B>xtt> crossreference /function= [/brief]
<B>xtt> crossreference /string= [/brief]

/name 	<t>Namn på ett objekt.
/function<t>Namn på en c-funktion anropad i en CArithm eller DataArithm.
/string	<t>Sträng som letas efter i koden för CArithm och DataArithm objekt. 

Exempel

xtt> cross /name=hql-hvk-Start
xtt> cross /function="CreateHvkObject"
</TOPIC>

<TOPIC> emit signal <style> function
Command   emit signal

Sänd en Ge signal.
Signalen är sänd till en specificerad graf, eller till alla grafer och multiview
om graf inte är specificerad.

<B>xtt> emit signal /signalname= {/graph=] [/instance=]

/signal_name<t>Signalnamn.
/graph <t>Graf eller multiview till vilken signalen är riktad.
/instance <t>Instansobjekt om grafen är en objektsbild.
</TOPIC>

<TOPIC> exit <style> function
Kommando   exit

Stäng xtt.

<B>xtt> exit
</TOPIC>

<TOPIC> define <style> function
Kommando define

Definiera en symbol.

<B>xtt> define 'symbolname' 'text'

<h2>Se även
symbol <LINK> symbol
show symbol <LINK> show symbol
symbolfile <LINK> symbolfile
</TOPIC>	

<TOPIC> delete opmenuitem <style> function
Kommando   delete opmenuitem

Ta bort ett menyalternativ från operatörsfönstrets meny.
Menyalternativet kan vara skapat av användaren, eller tillhöra
standardmeny.

<B>xtt> delete opmenuitem /name=

/name<t>Namn på menyalternativet.

Exempel

xtt> delete opmenuitem /name=Functions-Curves

<H2>Se även
create opmenuitem <LINK> create opmenuitem
</TOPIC>

<TOPIC> delete item <style> function
Kommando   delete item

Ta bort ett menyalternativ ur Xtt-menyn.
Menyalternativet kan vara skapat av användaren, eller tillhöra xtt's
standardmeny.

<B>xtt> delete item /name=

/name<t>Namn på menyalternativet.

Exempel

xtt> delete item /name=exit

<H2>Se även
add menu <LINK> add menu
create item <LINK> create item
</TOPIC>

<TOPIC> eventlist <style> function
Kommando   eventlist

Hantera händelselistan

<b>xtt> eventlist load

Ladda händelselistan.

<b>xtt> eventlist unload

Ta bort händelselistan.

<b>xtt> eventlist acknowledge /priority= 

Kvittera det sista larmet med angiven priritet. Prioriteten kan vara A, B, C, D, I
eller NOA. NOA kvitterar det sista larmet som inte är ett A larm.

<b>xtt> eventlist acknowledge /autoacknowledge=

Kvittera alla larm automatiskt. Kvitteringen kommer att ske cykliskt med cykeltiden
specificerad av /autoacknowledge. Den här funktionen är gjord for test och kräver
System privilegium.

<b>xtt> eventlist acknowledge /all 

Kvittera alla larm.

<H2>Se även
show alarmlist <LINK> show alarmlist
show eventlist <LINK> show eventlist

</TOPIC>

<TOPIC> help <style> function
Kommando   help

Visar hjälp-information för ett ämne.
Hjälp-informationen letas upp i en hjälp fil. Filen kan vara
bas-hjälpfilen, projekt-hjälpfilen eller någon anna hjälpfil.

Om ingen hjälpfil anges letas efter ämnet i bas- och projekt-
hjälpfilerna.

<B>xtt> help 'subject' [/popnavigator] [/bookmark=] [/helpfile=]
<B>                       [/returncommand=][/width=][/height=]

/popnavigator	<t>Hjälpfönstret läggs ovanpå övriga fönster och ges input focus.
                <t>Detta kan användas när kommandot ges i en Ge graf.
/bookmark	<t>Nammet på ett bokmärke inom ett ämne. Visningen kommer att
                <t>placeras på bokmärket.
/helpfile	<t>En hjälpfil som innehåller information om angivet ämne.
/returncommand	<t>Ett kommando som exekveras vid retur från hjälpämnet.
/width		<t>Önskad bredd på hjälpfönstret.
/height		<t>Önskad höjd på hjälpfönstret.

<H2>Se även
helpfile <LINK> helpfile
</TOPIC>

<TOPIC> login <style> function
Kommando   login

Inloggning med användare och passerord. Användarens privilegier kommer
att hämtas från användardatabasen. Dessa avgör användarens behörighet.

<B>xtt> login 'username' 'password'

<H2>Se även
logout <LINK> logout
show user <LINK> show user
</TOPIC>

<TOPIC> show message <style> function
Command   show message

Öppna ett fönster med ett meddelande.

<B>xtt> show message /text= [/title=]

/text 	    <t>Meddelande.
/title      <t>Titel på fönstret.
</TOPIC>

<TOPIC> show objectlist <style> function
Command   show objectlist

Öppna ett fönster med en lista på all objekt av en specific klass eller
att antal specifika klasser. När ett objekt i listan aktiveras öppnas
objektsbilden för objektet.

<B>xtt> show objectlist /class= [/title=] [/sort]

/class <t>Namn på en klass, eller flera klasser avgränsade med
       <t>komma-tecken.
/title <t>Titel på fönstret.
/sort  <t>Objekten sorteras i alfabetisk ordning.
</TOPIC>

<TOPIC> logout <style> function
Kommando   logout

Loggar ut en användare, och återgår till den ursprungliga användaren.

<B>xtt> logout

<H2>Se även
login <LINK> login
show user <LINK> show user
</TOPIC>

<TOPIC> open graph <style> function
Kommando   open graph

Öppna en Ge graf. Grafen kan anges men en pwg-fil eller med ett
XttGraph objekt.

<B>xtt> open graph 'filename' /width= /height= /scrollbar /menu /navigator
<B>                           /instance= /focus= /inputempty
<B>xtt> open graph /object= /focus= /inputempty

/width	<t>Bredd i pixel.
/height	<t>Höjd i pixel.
/scrollbar<t>Fönstret skapas med skrollister.
/menu	<t>Fönstret skapas med en meny.
/navigator<t>En navigationsfönster öppnas.
/object	<t>Ett XttGraph-objekt. Om namnsträngen börjar med '*', ersätts * med
        <t>nodenamnet.
/instance <t>Öppnar objektsbilden för det objekt som anges i instance.
/focus  <t>Namn på ett inmatnings objekt. Objektet kommer att ges input focus
        <t>när grafen öppnas.
/inputempty <t>Texten i inmatningsfältet töms.
/pwindow <t>Filnamn för ett annat fönster som grafen ska placera ovanför. 
        <t>Strängen $current anger nuvarande fönster när grafen öppnas från en
	<t>tryckknapp i detta fönster.
/pinstance <t>Instance namn för pwindow grafen, om pwindow är en objektsbild.
/fullscreen <t>Öppna fönstret med full skärm utan ram.
/maximize   <t>Öppna fönstret maximerat med ram.
/iconify    <t>Öppna fönstret ikoniserat.
/hide	    <t>Visa inte fönstret på skärmen.
/x0	<t>Övre vänstra x koordinat i Ge för grafens gränslinje. Om x0, y0, x1, y1
        <t>angesvisas en annan del av grafen än den som är specificerad Graph 
        <t>attributes x0, y0, x1, y1.
/y0	<t>Övre vänstra y koordinat i Ge för grafens gränslinje.
/x1	<t>Undre högra x koordinat i Ge för grafen gränslinje.
/x1	<t>Undre högra y koordinat i Ge för grafen gränslinje.
</TOPIC>

<TOPIC> open jgraph <style> function
Kommando   open jgraph

Öppna en java frame. Java frame'en kan vara exporterad från Ge eller editerad
i t ex JBuilder.

<B>xtt> open jgraph 'name'
</TOPIC>

<TOPIC> open navigator <style> function
Command   open navigator

Öppna runtime navigatorn. Om ett object har angivits kommer detta att visas
och väljas ut i objektsträdet.

<B>xtt> open navigator [/object=]

/object <t>Namn på ett objekt eller attribut som visas och väljs ut.
</TOPIC>

<TOPIC> open fileview <style> function
Kommando   open fileview

Öppnar en fileview som viar filer som matchar det specifierade mönstret.
Fileview'en kan startas i 'Open File' eller 'Save File' mod, dvs för att
öppna eller spara filer.

I öppnings mod, väljs en fil ut och det utvalda filnamnet skrivs till ett
sträng attribut i databasen (target). Samtidigt sätts ett digitalt attribut
(trigger) för att indikera att öppningen ska utföras. Själva öppningen av
filen kan utföras av ett DataFRead objekt i plc programmet, men måste
programmeras av användaren.

I spara mod. kan en fil väljas ut, men man kan även mata in ett filnamn. 
Filnamnet skrivs till ett strängattribut och en digital signal sätts. Själva
spara funktionen kan utföras med ett DataFWrite objekt från plc programmet.

<B>xtt> open fileview /file= /target= /trigger= /type=save [/ftype=]
<B>xtt> open fileview /file= /target= /trigger= /type=open

/file   <t>Mönster för filnamn, innehållande wildcard '*', för filer som ska
        <t>visas i fileview'en.
/ftype  <t>Default filtyp. Om ett angivet filnamn (is spara mod) inte innehåller
        <t>filtyp, adderas den defaulta filtypen till filnamnet.
/target <t>Strängattribut där det utvalda eller inmatade filnamnet ska lagras.
/trigger <t>Boolean attribut som sätt för att indikera att öppna eller spara ska
        <t>utföras.
/type   <t>'save' eller 'open'

<b>Exempel
open fileview /file="$pwrp_load/*.txt"/ftype="txt"/target=P1-Sv.ActualValue/trigger=P1-Dv.ActualValue/type=save

</TOPIC>

<TOPIC> open trace <style> function
Kommando   open trace

Öppna Plc Trace för ett plcfönster. Om namn inte anges öppnas trace för 
det utvalda PlcPgm dller PlcWindow objektet.

<B>xtt> open trace [/name=] [/center=]

/name	<t>PlcPgm eller PlcWindow.
/center <t>Objekt i plc-fönstret som ska centeras och makeras.
	<t>Ange sista segmentet av namnet.

Exempel

xtt> open trace /name=hql-hvk-flow /center=Pid0
</TOPIC>

<TOPIC> open trend <style> function
Kommando   open trend

Öppnar kurvfönstret för ett DsTrend eller PlotGroup objekt.

<B>xtt> open trend [/name=] [/title=]

/name	<t>DsTrend eller PlotGroup. Kan vara en lista av DsTrend-objekt separerade
        <t>med komma-tecket.
/title  <t>Titel på kurvfönsret.

Exempel

xtt> open trend /name=hql-hvk-flow-Trend,hql-hvk-temperature-Trend
</TOPIC>

<TOPIC> open operatorwindow <style> function
Kommando   open operatorwindow

Öppna operatörsfönstret.

<B>xtt> open operatorwindow 'opplace-object'
</TOPIC>

<TOPIC> close graph <style> function
Kommando   close graph

Stäng en Ge graf. Grafen kan anges som en pwg-fil eller med ett XttGraph objekt.

<B>xtt> close graph 'filename' [/instance=] [/iconify]
<B>xtt> close graph /object=

/object	<t>Ett XttGraph-objekt. Om namnsträngen börjar med '*', ersätts * med
        <t>nodeobjektet.
/instance <t>Stänger objektsbilden för angiven instans.
/iconify  <t>Grafen blir ikoniserad istället för stängd.
</TOPIC>

<TOPIC> close alarmlist <style> function
Kommando   close alarmlist

Stänger larmlistan.

<B>xtt> close alarmlist

</TOPIC>

<TOPIC> close eventlist <style> function
Kommando   close eventlist

Stänger händleselistan.

<B>xtt> close eventlist

</TOPIC>

<TOPIC> close navigator <style> function
Kommando   close navigator

Stänger navigatören.

<B>xtt> close navigator

</TOPIC>

<TOPIC> search <style> function
Kommando   search

Letar efter ett objektsnamn eller en sträng.

<B>xtt> search 'object'
<B>xtt> search /regularexpression 'expression'
<B>xtt> search /next
</TOPIC>

<TOPIC> read object <style> function
Kommando   read object

Läs innehållet i ett objekt från ej fil.
Läser innehållet i en fil, vanligvis skapad med kommandot 'write object',
och lägger in data i det specificerade objektet.

<B>xtt> read object /object= /file=

/object <t>Namn på objektet.
/file   <t>Namn på fil att läsa från.
</TOPIC>

<TOPIC> set advanceduser <style> function
Kommando   set advanceduser

Sätt eller återställ advanced user.

<B>xtt> set advanceduser
<B>xtt> set noadvanceduser

<H2>Se även
advanced user <LINK> advanced user
</TOPIC>

<TOPIC> set display <style> function
Command   set display

Sätt format for visning av utvalt attribut. Ett attribut kan visas
som decimalt, hexadecimalt, oktalt, binärt, eller som heltal eller
flyttal. Objektidentiteter och attribut-referenser kan visas som
identiteter.

<B>xtt> set display default
<B>xtt> set display hexdecimal
<B>xtt> set display decimal
<B>xtt> set display octal
<B>xtt> set display binary
<B>xtt> set display integer
<B>xtt> set display float
<B>xtt> set display identity

</TOPIC>

<TOPIC> set graph <style> function
Command   set graph

Utför lagring av öppna inmatningsfält med egenskapen EscapeStore satt,
som ännu inte är lagrade i databasen.

<B>xtt> set graph 'filename' /escapestore [/instance=]
/escapestore <t>Utför lagring av öppna inmatningsfält med egenskapen EscapeStore satt,
             <t>som ännu inte är lagrade i databasen.
/instance <t>Instansobject specificerat för grafen.


</TOPIC>

<TOPIC> setup <style> function
Xtt setup
Unställning av xtt egenskaper.

ConfigureObject	<t><t>RttConfigure objekt.
DefaultDirectory<t><t>Default filkatalog för kommandofiler.
Scantime	<t><t>Scantid för att updatera värden.
AlarmMessage	<t><t>Visa semaste larm på Xtt's meddelanderad.
AlarmBeep	<t><t>Ge ljudsignal om det finns okvitterade larm.
AlarmReturn	<t><t>Visa retur händelser i händelselistan.
AlarmAck	<t><t>Visa kvittens händelser i händleslistan.
SymbolFilename	<t><t>Symbolfil.		<LINK> symbolfile
Verify		<t><t>Sätt verifiering vid exekvering av kommandofiler.
AdvancedUser	<t><t>Användaren är avancerad. <LINK> advanced user
</TOPIC>

<TOPIC> show version <style> function
Kommando   show version

Visa xtt version.

<B>xtt> show version
</TOPIC>

<TOPIC> show symbol <style> function
Kommando   show symbol

Visa en symbol, eller alla symboler.

<B>xtt> show symbol 'symbol'<t>	<t>Visa symbol 'symbol'
<B>xtt> show symbol<t>		<t>Visa alla symboler

<h2>Se även
define <LINK> define
symbol <LINK> symbol
</TOPIC>

<TOPIC> show plcpgm <style> function
Kommando   show plcpgm

Lista alla PlcPgm objekt is systemet.

<B>xtt> show plcpgm
</TOPIC>

<TOPIC> show plcthreads <style> function
Kommando   show plcthreads

Visa alla PlcThread objekt.
PlcThread objekt innehåller information och statistic för 
plc-trådarna.

<B>xtt> show plcthreads
</TOPIC>

<TOPIC> show links <style> function
Kommando   show links

Visa länkar till andra ProviewR system.

<B>xtt> show links
</TOPIC>

<TOPIC> show logfiles <style> function
Kommando   show logfiles

Visa xtt logg-filer på arbetskatalogen.
En logg-fil skapas med logging funktionen i rtt och xtt och
har filtypen .rtt_log.

En loggfil öppnas med dubbel-klick, eller genom att välja ut filen
och trycka på return.

<B>xtt> show logfiles
</TOPIC>

<TOPIC> show alarmlist <style> function
Kommando   show alarmlist

Öppna larmlistan.

<B>xtt> show alarmlist
</TOPIC>

<TOPIC> show eventlist <style> function
Kommando   show eventlist

Öppna händleslistan.

<B>xtt> show eventlist
</TOPIC>

<TOPIC> show user <style> function
Kommando   show user

Visa nuvarande användare med privilegier.

<B>xtt> show user
</TOPIC>

<TOPIC> sound <style> function
Kommando   sound

Spela upp ett ljud definerat med ett Sound eller 
SoundSequence objekt.

<B>xtt> sound 'object'

</TOPIC>

<TOPIC> store <style> function
Kommando   store

Lagra en attributlista till en skriptfil, eller lagra symboltabellen
till en script-fil.
Den genererade script-filen kan exekveras från kommando prompten
med @'filnamn'. Den återfinns även bland script-filer i menyn under
'Store'.

Om /collect används, återskapas attributlistan som en samlingsbild.

<B>xtt> store 'filename' [/collect]
<B>xtt> store 'filename' /symbols

/collect <t>Listan återskapas som en samlingsbild.
/symbols <t>Den nuvarande symboltabellen lagras.

</TOPIC>

<TOPIC> show logging <style> function
Kommando   show logging

Visar ett logging entry.

<B>xtt> show logging /entry=
</TOPIC>

<TOPIC> logging <style> function
Kommando   logging

Ett antal kommandon för att hantera logging funktionen i Xtt.

logging start		<LINK> logging start
logging stop		<LINK> logging stop
logging set		<LINK> logging set
logging show		<LINK> logging show
logging store		<LINK> logging store

</TOPIC>

<TOPIC> write object <style> function
Kommando   write object

Skriv innehållet i ett objekt till en fil.

<B>xtt> write object /object= /file=

/object <t>Namn på objektet.
/file   <t>Namn på fil att skriva till.
</TOPIC>


</headerlevel>
</chapter>

//
// Script
//

<chapter>
<TOPIC> script
Xtt script

Exekvera ett script	<LINK> execute script

<h2>Datatyper och declarationer
Datatyper		<LINK> datatypes
Datatyps konvertering	<LINK> datatype conversions
Variabel deklarationer	<LINK> variable declarations
Operatorer		<LINK> operators

<h2>Uttryck
main-endmain		<LINK> main-endmain
function-endfunction	<LINK> function-endfunction
if-else-endif		<LINK> if-else-endif
while-endwhile		<LINK> while-endwhile
for-endfor		<LINK> for-endfor
break			<LINK> break
continue		<LINK> continue
goto			<LINK> goto
include			<LINK> include

<h2>In och utmatnings funktioner
ask()			<LINK> ask()
printf()		<LINK> printf()
say()			<LINK> say()
scanf()			<LINK> scanf()

<h2>Filhanterings funktioner
fclose()		<LINK> fclose()
felement()		<LINK> felement()
fgets()			<LINK> fgets()
fopen()			<LINK> fopen()
fprintf()		<LINK> fprintf()
fscanf()		<LINK> fscanf()
translate_filename()	<LINK> translate_filename()

<h2>Sträng funktioner
edit()			<LINK> edit()
element()		<LINK> element()
extract()		<LINK> extract()
sprintf()		<LINK> sprintf()
strchr()		<LINK> strchr()
strrchr()		<LINK> strrchr()
strlen()		<LINK> strlen()
strstr()		<LINK> strstr()
toupper()		<LINK> toupper()
tolower()		<LINK> tolower()

<h2>Databas funktioner
GetAttribute()		<LINK> getattribute()
SetAttribute()		<LINK> setattribute()
GetChild()		<LINK> getchild()
GetParent()		<LINK> getparent()
GetNextSibling()	<LINK> getnextsibling()
GetClassList()		<LINK> getclasslist()
GetNextObject()		<LINK> getnextobject()
GetObjectClass()	<LINK> getobjectclass()
GetNodeObject()		<LINK> getnodeobject()
GetRootList()		<LINK> getrootlist()

<h2>System funktioner
exit()			<LINK> exit()
system()		<LINK> system()
time()			<LINK> time()
tzset()			<LINK> tzset()
verify()		<LINK> verify()

<h2>Vektor funktioner
arrayclear() 		<link> arrayclear()
arraypush()		<link> arraypush()
arraysize()		<link> arraysize()
sort()			<link> sort()

<h2>Matematiska funktioner
cos()	 		<link> cos()
EVEN()	 		<link> EVEN()
MAX()			<link> MAX()
MIN() 			<link> MIN()
ODD()	 		<link> ODD()
random() 		<link> random()
sin()	 		<link> sin()

<h2>Diverse funktioner
CutObjectName()		<LINK> cutobjectname()
ConfirmDialog()		<LINK> confirmdialog()
MessageError()		<LINK> messageerror()
MessageInfo()		<LINK> messageinfo()
GetCurrentText()	<LINK> getcurrenttext()
GetCurrentObject()	<LINK> getcurrentobject()
get_pwr_config()	<LINK> get_pwr_config()
get_node_name()		<LINK> get_node_name()
getmsg()		<LINK> getmsg()
EVEN()			<LINK> EVEN()
ODD()			<LINK> ODD()
get_language()		<LINK> get_language()
GetUser()		<LINK> getuser()
GetPrivileges()		<LINK> getprivileges()
GetGraphInstance()	<LINK> getgraphinstance()
GetGraphInstanceNext()	<LINK> getgraphinstancenext()
SetSubwindow()		<LINK> SetSubwindow()
Quit()			<LINK> quit()

<h2>xtt-commands
xtt-commands		<LINK> xtt-commands

</TOPIC>

<TOPIC> execute script
Exekvera ett script

En script-fil exekveras från kommando-raden med kommandot

xtt> @'filename'

</TOPIC>

<TOPIC> datatypes
Datatyper

Datatyperna är float, int och string.

int	<t>heltals värde.
float	<t>32-bitars flyttals värde.
string	<t>textsträng, 80 tecken lång (null terminerad).

Det finns tre olika tabeller som en variabel kan deklareras i: local, global
och extern. En lokal variabel är känd inom en funktion, en global är känd
i alla funktioner inom en fil, en extern är känd i alla filer som exekveras
i en session.
</TOPIC>

<TOPIC> datatype conversions
Datatyps konvertering

Om ett uttryck består av variabler och funktioner med olika datatyper kommer
variablerna att konverteras med företräde string, float, int. Om två operander
har typerna float och string, eller int och string, kommer resultatet att bli
string. Vid en tilldelning, kommer värdet av ett uttryck att konverteras till
typen för den tilldelade variabeln. Detta gäller även om resultatet är en sträng
och variablerna är av type float och int.

<b>Exempel

<c>string  str;
<c>int     i = 35;
<c>str = "Luthor" + i;
The value in str will be "Luthor35".

<c>float   f;
<c>string  str = "3.14";
<c>int     i = 159;
<c>f = str + i;
The value in f will be 3.14159.
</TOPIC>

<TOPIC> variable declarations
Variabel deklarationer

En variabel måste deklareras innan den avänds.
En deklaration består av
- tabellen (global eller extern, om local ska inte tabellen anges)
- datatypen (int, float eller string)
- variabelnamn (känsligt för stora och små bokstäver)
- antal element, om variabeln är en vektor inom hakparanteser, eller om 
  en vektor med längd 0, bara hakparenteser.
- likameds tecken följt av initierings värde, om det utelämnas är 
  intitialvärdet 0 eller en null-sträng
- semikolon.

En extern variabel bör tas bort (med delete) när den inte längre används.
Även globala variabler kan tas bort med deletegbl.

<b>Exempel

<c>int             i;
<c>float           flow = 33.4;
<c>string          str = "Hello";
<c>extern int      jakob[20];
<c>string          simon[];
<c>global float	   ferdinand = 1234;
<c>...
<c>delete jakob[];
<c>detetegbl fredinand;

</TOPIC>

<TOPIC> operators
Operatorer

Operatorerna har samma funktion som i c, med vissa begränsningar. Alla
operatorer är inte implementerade. Vissa operatorer (+,=,==) kan även
operera på string variabler. Prioriteten för operatorer är densamma som i c.

Operator	<t>Beskrivning		<t>Datatyper
+		<t>plus			<t>int, float, string
-		<t>minus			<t>int, float
*		<t>multiplikation		<t>int, float
/		<t>division			<t>int, float
++	 	<t>inkrement, postfix only.	<t>int, float
--	 	<t>dekrement, postfix only	<t>int, float
>>	 	<t>bitar höger-skift		<t>int
<<	 	<t>bitar vänster-skift		<t>int
<		<t>mindre än			<t>int, float
>		<t>större än			<t>int, float
<=	 	<t>mindre eller lika med	<t>int, float
>=	 	<t>större eller lika med	<t>int, float
==	 	<t>lika med			<t>int, float, string
!=	 	<t>ej lika med			<t>int, float, string
&		<t>bitvis och			<t>int
|		<t>bitvis eller			<t>int
&&	 	<t>logisk och			<t>int
||	 	<t>logisk eller			<t>int
!		<t>logisk not			<t>int
=		<t>tilldelning			<t>int, float, string
+=	 	<t>addera och tilldela		<t>int, float
-=	 	<t>minus och tilldela		<t>int, float
&=	 	<t>logisk och och tilldelning	<t>int
|=	 	<t>logisk eller och tilldelning	<t>int
</TOPIC>

<TOPIC> sc_statements <style> function
Script uttryck

main-endmain		<t>Main funktion.<LINK> main-endmain
function-endfunction	<t>Funktions deklaration.<LINK> function-endfunction
if-else-endif		<t>Villkorlig exekvering.<LINK> if-else-endif
while-endwhile		<t>While loop.<LINK> while-endwhile
for-endfor		<t>For loop.<LINK> for-endfor
break			<t>Avsluta while eller for loop.<LINK> break
continue		<t>Fortsätt while eller for loop.<LINK> continue
goto			<t>Hoppa till label.<LINK> goto
include			<t>Inkludera script fil.<LINK> include
</TOPIC>

<headerlevel>
<TOPIC> main-endmain <style> function
main-endmain

main och endmain satserna kontrollerar var exekveringen börjar och slutar.
Om det inte finns några main och endmain satser, startar exekveringen i
början på filen, och slutar i slutet på filen.

<b>Exempel

<c>main()
<c>  int a;

<c>  a = p1 + 5;
<c>  printf( "a = %d", a);
<c>endmain
</TOPIC>

<TOPIC> function-endfunction <style> function
function-endfunction

En funktions deklaration består av
- datatypen för funktionens retur värde
- namnet på funktionen
- en argumentlista separerade med kommatecken och omgiven av parenteser.
  Argumentlistan innehåller typdeklaration och namn på varje argument.

Argumenten som skickas med vid anropet kommer att konverteras till den typ
som är deklarerad i argumentlistan. Om ett argument ändrar värde inne i 
funktionen, kommer det nya värdet att överföras till anroparen. På detta
sätt blir de möjlig att returnera andra värden än retur värdet för funktionen.
En funktion kan innehålla en eller flera return statser. Return satsen kommer
att flytta över exekveringen till anroparen och returnera det angivna värdet.

<b>Exempel

<c>function float calculate_flow(float a, float b)
<c>  float c;
<c>  c = a + b;
<c>  return c;
<c>endfunction

...
<c>flow = korr * calculate_flow( v, 35.2);
</TOPIC>

<TOPIC> if-else-endif <style> function
if-else-endif

Raderna mellan en if-endif stats exekveras om uttrycket i if-statsen är sant.
Uttrycket ska omges av parenteser. Om en else sats hittas mellan if och endif,
kommer raderna mellan else och endif att exekveras när uttrycket är falskt.

<b>Exempel

<c>if ( i < 10 && i > 5)
<c>  a = b + c;
<c>endif

<c>if ( i < 10)
<c>  a = b + c;
<c>else
<c>  a = b - c;
<c>endif
</TOPIC>

<TOPIC> while-endwhile <style> function
while-endwhile

Raderna mellan en while-endwhile sats exekveras så länge uttrycket i
while-satsen är sant. Uttrycket ska omges av parentser.

<b>Exempel

<c>while ( i < 10)
<c>  i++;
<c>endwhile
</TOPIC>

<TOPIC> for-endfor <style> function
for-endfor

Raderna mellan en for-endfor sats exekveras så länge mitten-uttrycket i 
for-satsen är sant. for-satsen består av tre uttryck, avgränsade med semicolon
och omgivna av parenteser. Det första uttrycket exekveras före den första
loopen, det tredje exekveras efter varje loop, och det i mittne exekveras
före varje loop, och om det är sant, gör ytterligare ett varv, annars lämnas
loopen.

<b>Exempel

<c>for ( i = 0; i < 10; i++)
<c>  a += b;
<c>endfor
</TOPIC>

<TOPIC> break <style> function
break

En break sats kommer att söka efter nästa endwhile eller endfor sats
och försätta exekveringen på raden efter denna.

<b>Exempel

<c>for ( i = 0; i < 10; i++)
<c>  a += b;
<c>  if ( a > 100)
<c>    break;
<c>endfor
</TOPIC>

<TOPIC> continue <style> function
continue

En continue sats kommera att söka efter närmast föregående while eller
for sats och forsätta att utföra loopen.

<b>Exempel

<c>for ( i = 0; i < 10; i++)
<c>  b = my_function(i);
<c>  if ( b > 100)
<c>    continue;
<c>  a += b;
<c>endfor
</TOPIC>

<TOPIC> goto <style> function
goto

En goto sats orsakar ett hopp i exekveringen till en rad som är
definierad med en label. Label raden avslutas med ett kolon.

<b>Exempel

<c>  b = attribute("MOTOR-ON.ActualValue", sts);
<c>  if (!sts)
<c>    goto some_error; 
<c>  ...
<c>some_error:
<c>  say("Something went wrong!");
</TOPIC>

<TOPIC> include <style> function
include

En script include-fil xom innehåller funktioner kan inkluderas med
#include satsen. Default filtyp för filen är '.rtt_com'.

<b>Exempel

<c>#include <my_functions>
</TOPIC>
</headerlevel>

<TOPIC> sc_input_output_functions <style> function
In och utmatnings funktioner

<b>Funktion <t>Beskrivning
ask <t>Skriv en fråga och läs ett svar.<link> ask() 
printf <t>Formaterad utskrift.	<link> printf()
say <t>Skriv en text.		<link> say()
scanf  <t>Formaterad läsning.	<link> scanf()
</TOPIC>

<headerlevel>

<TOPIC> ask() <style> function
ask()

int ask( string question, (arbitrary type) reply)

<b>Beskrivning

Promptar för inmatning med den angivna strängen.
Returnerar antal lästa element, 1 or 0.

<b>Arguments

string 			<t>question	<t>Prompt.
godtycklig typ		<t>reply	<t>Inmatat svar. Kan vara int,
			<t>		<t>float eller string.

<b>Exempel
<c> string reply;

<c> ask( "Do you want to continue? [y/n] ", reply);
<c> if ( reply != "y")
<c>   exit();
<c> endif
</TOPIC>

<TOPIC> printf() <style> function
printf()

int printf( string format [, (arbitrary type) arg1, (arbitrary type) arg2])

<b>Beskrivning

Formaterad utskrift. C-syntax. Format argument och inget, ett eller två
värde argument. 
Returnerar antal utskrivna tecken.

<b>Argument

string 			<t>format	<t>Format.
godtycklig typ		<t>arg1		<t>Värde argument. Valfritt, Kan vara int,
			<t>		<t>float eller string.
godtycklig typ		<t>arg2		<t>Värde argument. Valfritt. Kan vara int,
			<t>		<t>float eller string.

<b>Exempel

<c>  printf( "Watch out!");
<c>  printf( "a = %d", a);
<c>  printf( "a = %d och str = %s", a, str);
</TOPIC>

<TOPIC> say() <style> function
say()

int say( string text)

<b>Beskrivning

Skriver ut en sträng.

<b>Argument

string 			<t>text		<t>Text att skriva ut.

<b>Exempel
<c> say( "Three quarks for Muster Mark!");
</TOPIC>

<TOPIC> scanf() <style> function
scanf()

int scanf( string format , (godtycklig typ) arg1)

<b>Beskrivning

Formaterad inmatning. C-syntax.
Returnerar antal inlästa tecken.

<b>Argument

string 			<t>format	<t>Format.
godtycklig typ		<t>arg1		<t>Värde argument. Returnerat. Kan vara int,
			<t>		<t>float eller string.

<b>Exempel

<c>  scanf( "%d", i);
</TOPIC>
</headerlevel>

<TOPIC> sc_file_handling_functions <style> function
Filhanterings funktioner

<b>Funktion <t>Beskrivning
fclose <t>Stäng en fil. 		<link> fclose()
felement <t>Extrahera ett element från senaste lästa rad. <link> felement()
fgets <t>Läs en rad från en fil. 	<link> fgets()
fopen <t>Öppna en fil.			<link> fopen()
fprintf <t>Formaterad utskrift till fil. <link> fprintf()
fscanf <t>Formaterad läsning från fil.	<link> fscanf()
translate_filename <t>Översätt omgivnings-variabler i ett filnamn. <link> translate_filename()
</TOPIC>

<headerlevel>

<TOPIC> fclose() <style> function
fclose()

int fclose( int file)

<b>Beskrivning

Stänger en öppnad fil.

<b>Argument

int		<t>file		<t>fil-id returnerad av fopen.

<b>Exempel

<c>  int infile;
<c>  infile = fopen("some_file.txt","r");
<c>  ...
<c>  fclose( infile);
</TOPIC>

<TOPIC> felement() <style> function
felement()

string felement( int file int number, string delimiter, string str)

<b>Beskrivning

Extraherar ett element från en sträng av element läst från en file med
fgets() funktionen. felement() kan användas istället för element() när den
lästa strängen är längre än sträng-storleken 256. felement() kan hantera rader
upp till 1023 tecken.

<b>Argument

int		<t>number	<t>elementets nummer.
string		<t>delimiter	<t>avgränsnings tecken.

<b>Exempel

<c>  string elem1;
<c>  int file;
<c>  string line;

<c>  file = fopen( "my_file.txt", "r");
<c>  while( fgets( line, file))
<c>    elem1 = felement( 1, " ");
<c>  endwhile
</TOPIC>

<TOPIC> fgets() <style> function
fgets()

int fgets( string str, int file)

<b>Beskrivning

Läser en rad från en angiven fil.
Returnerar noll vid filslut.

<b>Argument

string 		<t>str		<t>Läst rad. Returnerad. 
int		<t>file		<t>Fil id returnerad av fopen.

<b>Exempel

<c>  file = fopen("some_file.txt","r");
<c>  while( fgets( str, file))
<c>    say( str);
<c>  endwhile
<c>  fclose( file);
</TOPIC>

<TOPIC> fopen() <style> function
fopen()

int fopen( string filespec, string mode)

<b>Beskrivning

Öppnar en fil för att läsa eller skriva.
Returnerar en fil identitet, Om filen inte kunde öppnas, returneras noll.

<b>Argument

string 		<t>filespec	<t>Namn på filen. 
string		<t>mode		<t>Access mod

<b>Exempel

<c>  int infile;
<c>  int outfile;

<c>  infile = fopen("some_file.txt","r");
<c>  outfile = fopen("another_file.txt","w");
<c>  ...
<c>  fclose( infile);
<c>  fclose( outfile);
</TOPIC>

<TOPIC> fprintf() <style> function
fprintf()

int fprintf( int file, string format [, (godtycklig typ) arg1,
	(godtycklig typ) arg2])

<b>Beskrivning

Formaterad utskrift på fil. C-syntax. Format argument och inget, ett eller två
värde argument.
Returnerarn antal utskrivna tecken.

<b>Argument

int 			<t>file		<t>Fil id returnerat av fopen.
string 			<t>format	<t>Format.
godtycklig typ		<t>arg1		<t>Värde argument. Valfritt. Kan vara int,
			<t>		<t>float eller string.
godtycklig typ		<t>arg2		<t>Värde argument. Valfritt. Kan vara int,
			<t>		<t>float eller string.

<b>Exempel

<c>  int outfile;
<c>  outfile = fopen( "my_file.txt", "w");
<c>  if (!outfile)
<c>    exit();
<c>  fprintf( outfile, "Some text");
<c>  fprintf( outfile, "a = %d", a);
<c>  fclose( outfile);
</TOPIC>

<TOPIC> fscanf() <style> function
fscanf()

int fscanf( int file, string format, (godtycklig typ) arg1)

<b>Beskrivning

Formaterad läsning från fil. C-syntax.
Returnerar antal inlästa tecken.

<b>Argument

int			<t>file		<t>Fil id.
string 			<t>format	<t>Format.
godtycklig typ		<t>arg1		<t>Värde argument. Returnerat. Kan vara int,
			<t>		<t>float eller string.

<b>Exempel

<c>  int file;
<c>  int i;

<c>  file = fopen( "my_file.txt", "r");
<c>  if (file)
<c>    fscanf( file, "%d", i);
<c>    fclose( file);
<c>  endif
</TOPIC>

<TOPIC> translate_filename() <style> function
translate_filename()

string translate_filename( string fname)

<b>Beskrivning

Byter ut omgivnings variabler i ett filnamn.

<b>Argument

string		<t>fname	<t>Ett filnamn.

<b>Returns
string				<t><t>Sträng med utbytta omgivningsvariabler.

<b>Exempel

<c>  string fname1 = "$pwrp_db/a.wb_load";
<c>  string fname2;
<c>  fname2 = translate_filename( fname1);
</TOPIC>
</headerlevel>

<TOPIC> string_functions <style> function
Sträng funktioner

<b>Funktion <t>Beskrivning
edit <t>Ta bort överfödiga mellanslag och tab. <link> edit()
element <t>Extrahera ett element från en sträng. <link> element()
extract <t>Extrahera en delsträng från en sträng. <link> extract()
sprintf <t>Formaterad utskrift till en sträng.	<link> sprintf()
strchr <t>Returnera första förekomsten av ett tecken i en sträng. <link> strchr()
strrchr <t>Returnera sista förekomsten av ett tecken i en sträng. <link> strrchr()
strlen <t>Beräkna längden på en sträng.	<link> strlen()
strstr <t>Returnera första förekomsten av en delsträng i en sträng. <link> strstr()
tolower <t>Konvertera till små bokstäver. <link> tolower()
toupper <t>Konvertera till stora bokstäver. <link> toupper()
</TOPIC>

<headerlevel>
<TOPIC> edit() <style> function
edit()

string edit( string str)

<b>Beskrivning

Tar bort inledande och avslutande blanktecken och tabbar, och ersätter flera
tabbar och blanktecken med ett blanktecken.
Returnerar den editerade stängen.

<b>Argument

string		<t>str		<t>sträng som ska editeras.

<b>Exempel

<c>  collapsed_str = edit(str);
</TOPIC>

<TOPIC> element() <style> function
element()

string element( int number, string delimiter, string str)

<b>Beskrivning

Extraherar ett element från en sträng av element.
Returnerar det extraherade elementet.

<b>Argument

int		<t>number	<t>elementets nummer.
string		<t>delimiter	<t>avgränsnings tecken.
string		<t>str		<t>sträng med element.

<b>Exempel

<c>  string str = "mary, lisa, anna, john";
<c>  string elem1;
<c>  elem1 = elment( 1, ",", str);
</TOPIC>

<TOPIC> extract() <style> function
extract()

string extract( int start, int length, string str)

<b>Beskrivning

Extraherar de angivna tecknen från angiven sträng.
Returnerar de extraherade tecknen som en sträng.

<b>Argument

int		<t>start	<t>start positionen för första tecknet.
				<t><t>Första tecknet har position 1.
int		<t>length	<t>antalet tecken som ska extraheras.
string		<t>str		<t>sträng som tecknen ska extraheras från.

<b>Exempel

<c>  extracted_str = extract( 5, 7, str);
</TOPIC>

<TOPIC> sprintf() <style> function
sprintf()

int sprintf( string str, string format [, (arbitrary type) arg1, (arbitrary type) arg2])

<b>Beskrivning

Formaterad utskrift. C-syntax. Format argument och inget, ett eller två
värde argument. 
Returnerar antal utskrivna tecken.

<b>Argument

string			<t>str		<t>Sträng att skriva till.
string 			<t>format	<t>Format.
godtycklig typ		<t>arg1		<t>Värde argument. Valfritt, Kan vara int,
			<t>		<t>float eller string.
godtycklig typ		<t>arg2		<t>Värde argument. Valfritt. Kan vara int,
			<t>		<t>float eller string.

<b>Exempel

<c>  string str;
<c>  int items;

<c>  sprintf( str, "Number of items: %d", items);
</TOPIC>

<TOPIC> strchr() <style> function
strchr()

int strchr( string str, string c)

<b>Beskrivning

Returnerar första förekomsten av ett tecken in en sträng.

<b>Argument

string		<t>str		<t>Sträng att söka i.
string		<t>c		<t>Tecken att söka efter.

<b>Returns
int				<t><t>Index för första förekomsen av ett tecken.
				<t><t>Första tecknet har index 1. Returnerar
				<t><t>noll om tecknet inte hittas.
<b>Exempel

<c>  string str = "index.html";
<c>  int idx;

<c>  idx = strchr( str, ".");
</TOPIC>

<TOPIC> strrchr() <style> function
strrchr()

int strrchr( string str, string c)

<b>Beskrivning

Returnerar sista förekomsten av ett tecken in en sträng.

<b>Argument

string		<t>str		<t>Sträng att söka i.
string		<t>c		<t>Tecken att söka efter.

<b>Returns
int				<t><t>Index för den sista förekomsten av tecknet.
				<t><t>Första tecknet har index 1. Returnerar
				<t><t>noll om tecknet inte hittas.
<b>Exempel

<c>  string str = "/usr/local/pwrrt";
<c>  int idx;

<c>  idx = strrchr( str, "/");
</TOPIC>

<TOPIC> strlen() <style> function
strlen()

int strlen( string str, string c)

<b>Beskrivning

Beräknar längden av en sträng.

<b>Argument

string		<t>str		<t>Sträng att beräkna längden för.

<b>Returns
int				<t><t>Strängens längd.

<b>Exempel

<c>  string str = "/usr/local/pwrrt";
<c>  int len;

<c>  len = strlen( str);
</TOPIC>

<TOPIC> strstr() <style> function
strstr()

int strstr( string str, string substr)

<b>Beskrivning

Returnar första förekomsten av en delsträng i en sträng.

<b>Arguments

string		<t>str		<t>Sträng att söka i.
string		<t>substr	<t>Delsträng att söka efter.

<b>Returns
int				<t><t>Index för första förekomsten av delsträngen.
				<t><t>Första tecknet har index 1. Returnerar
				<t><t>noll om delsträngen inte hittas.
<b>Exempel

<c>  string str = "index.html";
<c>  int idx;

<c>  idx = strstr( str, ".html");
</TOPIC>

<TOPIC> tolower() <style> function
tolower()

string tolower( string str)

<b>Beskrivning

Konverterar en sträng till små bokstäver.

<b>Argument

string		<t>str		<t>sträng som ska konverteras.

<b>Returns
string				<t><t>sträng med små bokstäver.

<b>Exempel

<c>  string str1 = "Buster Wilson";
<c>  string str2;
<c>  str2 = tolower( str);
</TOPIC>

<TOPIC> toupper() <style> function
toupper()

string toupper( string str)

<b>Beskrivning

Konverterar en sträng till stora bokstäver.

<b>Argument

string		<t>str		<t>sträng som ska konverteras.

<b>Returns
string				<t><t>sträng med stora bokstäver.

<b>Exempel

<c>  string str1 = "Buster Wilson";
<c>  string str2;
<c>  str2 = toupper( str);
</TOPIC>

</headerlevel>

<TOPIC> system_functions <style> function
System funktioner

<b>Funktion <t>Beskrivning
exit <t>Avsluta scriptet. <link> exit()
system <t>Exekvera ett shell kommando. <link> system()
time <t>Hämta systemtiden. <link> time()
tzset <t>Sätt tidszon. <link> tzset()
verify <t>Skriv ut exekverade rader. <link> verify()
</TOPIC>

<headerlevel>
<TOPIC> exit() <style> function
exit()

int exit()

<b>Beskrivning

Avslutar exekveringen av en fil.

<b>Exempel

<c>  exit();
</TOPIC>

<TOPIC> system() <style> function
system()

int system( string cmd)

<b>Beskrivning

Exekvera ett shell kommando.

<b>Argument

string		<t>cmd		<t>Shell kommando att exekvera.

<b>Returns
int				<t><t>Returvärdet är -1 vid fel eller annars returstatus 
				<t><t>för kommandot.

<b>Exempel

<c>  string cmd;

<c>  cmd = "firefox http://www.proview.se";
<c>  system( cmd);
</TOPIC>

<TOPIC> time() <style> function
time()

string time()

<b>Beskrivning

Returnerar nuvarande tid i strängformat.

<b>Exempel

<c>  string t;
<c>  t = time();
</TOPIC>

<TOPIC> tzset() <style> function
tzset()

string tzset( string timezone)

<b>Beskrivning

Sätt tidszon.

<b>Exempel

<c>  tzset("Europe/Stockholm");
</TOPIC>

<TOPIC> verify() <style> function
verify()

int verify( [int mode])

<b>Beskrivning

Sätter eller visar verifikatione mod. Om verifiering är till, visas alla 
exekverade rader på skärmen.
Returnerar nuvarande verifikations mod.

<b>Argument

int		<t>mode		<t>verifikaion till (1) eller från (0). Valfri.

<b>Exempel

<c>  verify(1);
</TOPIC>
</headerlevel>

<TOPIC> array_functions <style> function
Vektor funktioner

<b>Funktion <t>Beskrivning
arrayclear <t>Töm en dynamisk vektor. <link> arrayclear()
arraypush <t>Addera till en dynamisk vektor. <link> arraypush()
arraysize <t>Hämta storleken på en vektor. <link> arraysize()
sort <t>Sortera en vektor. <link> sort()
</TOPIC>

<headerlevel>

<TOPIC> arrayclear() <style> function
arrayclear()

int arrayclear((arbitrary array type) array)

<b>Beskrivning

Ta bort alla element i en vektor och sätt storleken till 0.
Vektor-argumentet ska specificeras med hakparenteser.

Returnerar operationens status.

<b>Argument

(arbitrary array type)	<t>array <t>Namn på vektorn. Ska anges med
				 <t><t>hakparenteser.

<b>Exempel

<c>  float temp[];
<c>  ...
<c>  arrayclear(temp[]);
</TOPIC>

<TOPIC> arraypush() <style> function
int arraypush((godtycklig vektortyp) array, (godtycklig typ)value)

<b>Beskrivning

Addera ett element sist i vektorn och lägg in angivet värde i elementet.
Vektor-argumentet ska specificeras med hakparenteser.

Returnerar operationens status.

<b>Arguments

(godtycklig vektortyp)	<t>array <t>Namn på vektorn. Ska anges med
				 <t><t>hakparenteser.
(godtycklig typ)	<t>value <t>Värde add addera till vektorn.

<b>Exempel

<c>  float x[];
<c>  
<c>  arraypush(x[], 29.2);
</TOPIC>

<TOPIC> arraysize() <style> function
int arraysize((godtycklig vektortyp) array)

<b>Beskrivning

Hämta storleken på en vektor, dvs antalet element i vektorn.
Vektor-argumentet ska specificeras med hakparenteser.

Returnerar storleken på vektorn.

<b>Argument

(godtycklig vektortyp)	<t>array <t>Namn på vektorn. Ska anges med
				 <t><t>hakparenteser.

<b>Exempel

<c>  float x[];
<c>  int size;
<c>  ...
<c>  size = arraysize(x[]);
</TOPIC>

<TOPIC> sort() <style> function
int sort((godtyclig vektortyp) array1 [,(godtycklig vektortyp) array2)...]

<b>Beskrivning

Sortera en sträng-vektor i alfabetisk ordning, eller en int- eller float-
vektor in numerisk ordning.
Upp till sju ytterligare vektorer kan anges som kommer att sorteras på 
samma sätt som den första vektorn. Dessa vektorer ska ha samma storlek, eller
vara större än det första vektorn.
Vektor-argumenten ska specificeras med hakparenteser.

Returnerar operationens status.

<b>Arguments

(godtycklig vektortyp)	<t>array1 <t>Namn på vektorn som ska sorteras. 
				<t><t>Ska anges med hakparenteser.
(godtycklig vektortyp)	<t>array2 - array8 <t>Ytterligare valfria vektorer som 
				<t><t>kommer att sorteras på samma sätt som den
				<t><t>första vektorn. Ska anges med hakparenteser.

<b>Exempel

<c>  string name[];
<c>  string description[];
<c>  int sts;
<c>  ...
<c>  sts = sort(name[], description[]);
</TOPIC>

<TOPIC> math_functions <style> function
Matematiska funktioner

<b>Funktion <t>Beskrivning
cos <t>Cosinus funktion. <link> cos()
EVEN <t>Testa om värdet är jämnt. <link> EVEN()
MAX <t>Returnera största värdet. <link> MAX()
MIN <t>Returnera minsta värdet. <link> MIN()
ODD <t>Test om värdet är udda. <link> ODD()
random <t>Returnera ett slumptal. <link> random()
sin <t>Sinus funktion. <link> sin()
</TOPIC>

<headerlevel>

<TOPIC> cos() <style> function
cos()

float cos(float angle)

<b>Beskrivning

Returnerar cosinus-värdet för en vinkel i grader.

<b>Argument

float	<t>angle <t>Vinkel i grader.

<b>Exempel

<c> float x;
<c> float angle = 45;

<c> x = cos(angle);
</TOPIC>

<TOPIC> EVEN() <style> function
EVEN()

int EVEN(int val)

<b>Beskrivning

Testa om ett värde är jämnt.

Returnerar 1 om värdet är jämnt, annars 0.

<b>Argument

int	<t>val <t>Värde.
</TOPIC>

<TOPIC> MAX() <style> function
MAX()

float MAX(float v1, float v2)

<b>Beskrivning

Returnerar det största av två värden.

<b>Argument

float	<t>v1 <t>Värde.
float	<t>v2 <t>Värde.

<b>Exempel

<c> float f1;
<c> float f2;
<c> float max;

<c> max = MAX(f1, f2);
</TOPIC>

<TOPIC> MIN() <style> function
MIN()

float MIN(float v1, float v2)

<b>Beskrivning

Returnerar det minsta av två värden.

<b>Argument

float	<t>v1 <t>Värde.
float	<t>v2 <t>Värde.

<b>Exempel

<c> float f1;
<c> float f2;
<c> float min;

<c> min = MIN(f1, f2);
</TOPIC>

<TOPIC> ODD() <style> function
ODD()

int ODD(int val)

<b>Beskrivning

Testa om ett värde är udda.

Returnerar 1 om värdet är udda, annar 0.

<b>Argument

int	<t>val <t>Värde.
</TOPIC>

<TOPIC> random() <style> function
random()

float random(float min_value, float max_value)

<b>Beskrivning

Returnerar ett slumpmässigt värde i det angivna intervallet.

<b>Argument

float	<t>min_value <t>Undre gräns för slumptalet.
float	<t>max_value <t>Övre gräns för slumptalet.

<b>Exempel

<c> float val;

<c> val = random(0.0, 100.0);
</TOPIC>

<TOPIC> sin() <style> function
sin()

float sin(float angle)

<b>Beskrivning

Returnerar sinus-värdet för en vinkel i grader.

<b>Argument

float	<t>angle <t>Vinkel i grader.

<b>Exempel

<c> float x;
<c> float angle = 45;

<c> x = sin(angle);
</TOPIC>
</headerlevel>

<TOPIC> database_functions <style> function
Databas funktioner

<b>Function <t>Description
GetAttribute()	<t>Hämta värde för ett attribut. <LINK> getattribute()
SetAttribute()	<t>Sätt värde på ett attribut. <LINK> setattribute()
GetChild()	<t>Hämta barn till ett objekt.	<LINK> getchild()
GetParent()	<t>Hämta föräder till ett objekt. <LINK> getparent()
GetNextSibling()<t>Hämta syskon för ett objekt.	<LINK> getnextsibling()
GetClassList()	<t>Hämta första instansen av en klass. <LINK> getclasslist()
GetNextObject()	<t>Hämta nästa instans av en klass. <LINK> getnextobject()
GetObjectClass() <t>Hämta klassen för ett objekt. <LINK> getobjectclass()
GetNodeObject()	<t>Hämta nod-objektet.	<LINK> getnodeobject()
GetRootList()	<t>Hämta första objektet i rot-listan. <LINK> getrootlist()
</TOPIC>
<headerlevel>

<TOPIC> getattribute() <style> function
GetAttribute()

(variable type) GetAttribute( string name [, int status])

<b>Beskrivning

Hämta värdet för angivet attribut. Typen av det returnerade värdet beror
på typen av attributet. Attributet kommer att konverteras till int, float
eller string.

<b>Argument

string		<t>name		<t>namn på attributet som ska hämtas.
int		<t>status	<t>status för operationen. Returnerad. Om noll
		<t>		<t>kunde inte attributet hämtas. Valfritt.
<b>Exempel

<c>  int alarm;
<c>  int sts;

<c>  alarm = GetAttribute("Roller-Motor-Alarm.ActualValue");
<c>  on = GetAttribute("Roller-Motor-On.ActualValue", sts);
<c>  if ( !sts)
<c>    say("Could not find motor on attribute!");
</TOPIC>

<TOPIC> setattribute() <style> function
SetAttribute()

int SetAttribute( string name, (arbitrary type)value [, int publicwrite])

<b>Beskrivning

Sätt värdet på angivet attribut.

För att sätta värdet på ett vanligt attribut krävs RtWrite privilegiet. Det är
dock möjligt skriva till attribute som är definierade som PublicWrite även utan
detta privilegie, om publicwrite argumentet anges. PublicWrite attribut can bl a 
hittas i klasserna PublicAv, PublicIv och PublicDv.

Returnerar status av operationen.

<b>Argument

string		<t>name		<t>namn på attributet som ska sättas.
<godtycklig typ)<t>value	<t>värde som ska sättas.
int		<t>publicwrite	<t>om 1, skrivning till ett attribut definierad som PublicWrite
		<t>		<t>är tillåtet även utan RtWrite privilegiet.

<b>Exempel

<c>  float value = 22.2;
<c>  int sts;

<c>  sts = SetAttribute("Roller-Motor-Reference.ActualValue", value);
<c>  if ( !(sts & 1))
<c>    printf( "SetAttribute error %d\n", sts);
<c>  endif
</TOPIC>

<TOPIC> getchild() <style> function
GetChild()

string GetChild( string name)

<b>Beskrivning

Hämta första barnet till ett objekt. Nästföljande barn kan hämtas med
GetNextSibling().
Returnerar namnet på barnet. Om det inte finns något barn, returneras en
null-sträng.

<b>Argument

string		<t>name		<t>objektets namn.

<b>Exempel

<c>  string child;

<c>  child = GetChild("Roller-Motor");
</TOPIC>

<TOPIC> getparent() <style> function
GetParent()

string GetParent( string name)

<b>Beskrivning

Hämta föräldern till ett objekt.
Returnerar förälderns namn. Om det inte finns någon förälder returneras
en null-sträng.

<b>Argument

string		<t>name		<t>objektets namn.

<b>Exempel

<c>  string parent;

<c>  parent = GetChild("Roller-Motor");
</TOPIC>

<TOPIC> getnextsibling() <style> function
GetNextSibling()

string GetNextSibling( string name)

<b>Beskrivning

Hämtar nästa syskon till ett objekt.
Returnerar namnet på syskonet. Om det inte finns något nästa systkon
returneras en null-sträng.

<b>Argument

string		<t>name		<t>objektets namn.

<b>Exempel

<c> string name;
<c> int not_first;

<c> name = GetChild("Rt");
<c> not_first = 0;
<c> while ( name != "")
<c>   if ( !not_first)
<c>     create menu/title="The Rt objects"/text="'name'"/object="'name'"
<c>   else
<c>     add menu/text="'name'"/object="'name'"
<c>   endif
<c>   not_first = 1;
<c>   name = GetNextSibling(nname);
<c> endwhile
<c> if ( !not_first )
<c>   MessageError("No objects found");
</TOPIC>

<TOPIC> getclasslist() <style> function
GetClassList()

string GetClassList( string class)

<b>Beskrivning

Hämta första objektet av angiven klass. Nästa objekt av klassen kan
hämtas med GetNextObject().
Returnerar namnet på första objektet. Om det inte finns några instanser
av klassen returneras en null-sträng.

<b>Argument

string		<t>name		<t>namn på klassen.

<b>Exempel

<c>  string name;

<c>  name = GetClassList("Dv");
</TOPIC>

<TOPIC> getnextobject() <style> function
GetNextObject()

string GetNextObject( string name)

<b>Beskrivning

Hämta nästa objekt i klasslistan.
Returnerar namnet på objektet. Om det inte finns något nästa objekt
returneras en null-sträng.

<b>Argument

string		<t>name		<t>objektets namn.

<b>Exempel

<c>  string name;

<c>  name = GetClassList("Di");
<c>  while ( name != "")
<c>    printf("Di object found: %s", name);
<c>    name = GetNextObject(name);
<c>  endwhile
</TOPIC>

<TOPIC> getobjectclass() <style> function
GetObjectClass()

string GetObjectClass( string name)

<b>Beskrivning

Hämta klassen för ett objekt.
Returnerar klassens namn.

<b>Argument

string		<t>name		<t>objektets namn.

<b>Exempel

<c>  string class;

<c>  class = GetObjectClass("Motor-Enable");
</TOPIC>

<TOPIC> getnodeobject() <style> function
GetNodeObject()

string GetNodeObject()

<b>Beskrivning

Hämta nod objektet.
Returnerar namnet på nod objektet.

<b>Exempel

<c>  string node;
<c>  node = GetNodeObject();
</TOPIC>

<TOPIC> getrootlist() <style> function
GetRootList()

string GetRootList()

<b>Beskrivning

Hämta första objektet i rot listan.
Returnerar namnet på rotobjektet. Nästa objekt i rotlistan kan hämtas med
GetNextSibling().

<b>Exempel

<c>  string name;

<c>  name = GetRootList();
<c>  while( name != "")
<c>    printf( "Root object found: %s", name);
<c>    name = GetNextSibling(name);
<c>  endwhile
</TOPIC>
</headerlevel>

<TOPIC> misc_functions <style> function
Diverse funktioner
CutObjectName()	<t>Klipp av ett objektsnamn. <LINK> cutobjectname()
ConfirmDialog()	<t>Öppna en konfirmerings-dialog <LINK> confirmdialog()
MessageError()	<t>Skriv ett felmeddelande. <LINK> messageerror()
MessageInfo()	<t>Skriv ett informationsmeddelande. <LINK> messageinfo()
GetCurrentText() <t>Hämta text för utvalt alternativ.	<LINK> getcurrenttext()
GetCurrentObject() <t>Hämta utvalt objekt.	<LINK> getcurrentobject()
get_pwr_config() <t>Hämta konfigurations-värden <LINK> get_pwr_config()
get_node_name() <t>Hämta nodnamn <LINK> get_node_name()
getmsg()	<t>Hämta text för status. <LINK> getmsg()
EVEN()		<t>Testa om ett värde är jämnt. <LINK> EVEN()
ODD()		<t>Testa om ett värde är udda.	<LINK> ODD()
get_language()	<t>Hämta nuvarande språk <LINK> get_language()
GetUser() 	<t>Hämta nuvarande användare. <LINK> getuser()
GetPrivileges()	<t>Hämta privilegier för nuvarande användare. <LINK> getprivileges()
GetGraphInstance() <t>Hämta instansobjekt för en objektgraf. <LINK> getgraphinstance()
GetGraphInstanceNext() <t>Hämta instansobjekt för nästa graf. <LINK> getgraphinstancenext()
SetSubwindow() 	<t>Set graf för ett Ge Window-objekt. <LINK> SetSubwindow()
Quit() 		<t>Avsluta operatörsmiljön. <LINK> quit()
</TOPIC>

<headerlevel>

<TOPIC> cutobjectname() <style> function
CutObjectName()

string CutObjectName( string name, int segments)

<b>Beskrivning

Kapa av de första segmenten av ett objektsnamn.
Returnerar de sista segmenten av ett objektsnamn. Antalet segment som 
returneras specificeras i det andra argumentet.

<b>Argument

string		<t>name		<t>Objektsnamn med path.
int		<t>segments	<t>Antalet namnsegment som ska returneras.

<b>Exempel

<c>  string path_name;
<c>  string object_name;

<c>  path_name = GetChild("Rt-Motor");
<c>  object_name = CutObjectName( path_name, 1);
</TOPIC>

<TOPIC> confirmdialog() <style> function
ConfirmDialog()

int ConfirmDialog( string title, string text)

<b>Beskrivning

Öppna ett konfirmerings-fönster.
Returnerar 1 om Ja-kappen har aktiverats, annars 0.

<b>Argument

string		<t>title	<t>Titel.
string		<t>text		<t>Konfirmerings text.

<b>Exempel

<c>  if ( ! ConfirmDialog( "Confirm", "Do you really want to..."))
<c>    printf( "Yes is pressed\n");
<c>  else
<c>    printf( "No is pressed\n");
<c>  endif

</TOPIC>

<TOPIC> messageerror() <style> function
MessageError()

string MessageError( string message)

<b>Beskrivning

Skriv ett xtt felmeddelande på skärmen.

<b>Exempel

<c>  MessageError("Something went wrong");
</TOPIC>

<TOPIC> messageinfo() <style> function
MessageInfo()

string MessageInfo( string message)

<b>Beskrivning

Skriv ett xtt info meddelande på skärmen.

<b>Exempel

<c>  MessageInfo("Everything is all right so far");
</TOPIC>

<TOPIC> getcurrenttext() <style> function
GetCurrentText()

string GetCurrentText()

<b>Beskrivning

Hämta texten på det utvalda menyalternativet.

<b>Exempel

<c>  string text;

<c>  text = GetCurrentText();
</TOPIC>

<TOPIC> getcurrentobject() <style> function
GetCurrentObject()

string GetCurrentObject()

<b>Beskrivning

Hämta utvalt objekt. Om inte något objekt är utval
returneras en null-sträng.

<b>Exempel

<c>  string object;

<c>  object = GetCurrentObject();
</TOPIC>

<TOPIC> get_pwr_config() <style> function
get_pwr_config()

string get_pwr_config( string name)

<b>Beskivning

Hämta värdet för en ProviewR konfigureringsvariabel.
Konfigureringsvariabler sätts i /etc/proview.cnf.
Returnerar värdet på konfigureringsvariablen.

<b>Exempel
<c> string id;
<c>
<c> id = get_pwr_config( "qcomBusId");
</TOPIC>

<TOPIC> get_node_name() <style> function
get_node_name()

string get_node_name()

<b>Beskrivning

Hämta nodnamnet för aktuell nod.
Returnerar nodnamnet.

<b>Exempel

<c>  name = get_node_name();
</TOPIC>

<TOPIC> getmsg() <style> function
getmsg()

string getmsg(int status)

<b>Beskrivning

Hämta texten för ett status värde.
Returnerar texten.

<b>Exempel

<c>  msg = getmsg(sts);
</TOPIC>

<TOPIC> EVEN() <style> function
EVEN()

int EVEN( int sts)

<b>Beskrivning

Testa om ett heltal är jämnt.
Returnerar 1 om talet är jämnt, 0 om talet är udda.

<b>Exempel

<c>  sts = SetAttribute( "Pump-V1-Switch.Description", "Valve switch open");
<c>  if ( EVEN(sts))
<c>    printf("Couldn't set attribute\n");
<c>  endif
</TOPIC>

<TOPIC> ODD() <style> function
ODD()

int ODD( int sts)

<b>Description

Testa om ett heltal är udda.
Returnerar 1 om heltalet är udda, 0 om det är jämnt.

<b>Exempel

<c>  sts = SetAttribute( "Pump-V1-Switch.Description", "Valve switch open");
<c>  if ( ODD(sts))
<c>    printf("Set operation successful\n");
<c>  endif
</TOPIC>

<TOPIC> get_language() <style> function
get_language()

string get_language()

<b>Beskrivning

Hämta nuvarande språk.

<b>Returns
string				<t><t>Nuvarande språk, t.ex. en_us, sv_se, de_de.

<b>Exempel

<c>  string lng;

<c>  lng = get_language();
<c>  if ( lng == "sv_se")
<c>    create opmenu/name="Funktioner-Bilder-Översikt"/command="open graph overview"
<c>  endif
<c>  if ( lng == "en_us")
<c>    create opmenu/name="Functions-ProcessGraphs-Overview"/command="open graph overview"
<c>  endif
</TOPIC>
<TOPIC> getuser() <style> function
GetUser()

string GetUser()

<b>Beskrivning

Hämta nuvarande användare.

<b>Exempel

<c>  string user;

<c>  user = GetUser();
</TOPIC>

<TOPIC> getprivileges() <style> function
GetPrivileges()

int GetPrivileges()

<b>Beskrivning

Hämta privilegier för nuvarande användare.

<b>Exempel

<c>  int priv;

<c>  priv = GetPrivileges();
<c>  if ( priv & 4)
<c>    # Has system privilege
<c>    ...
<c>  endif
</TOPIC>

<TOPIC> getgraphinstance() <style> function
GetGraphInstance()

string GetGraphInstance( string graph)

<b>Beskrivning

Hämta instansobjektet för en öppnad objektsbild.
Returnerar instansobjektet, eller en tom sträng om 
grafen inte är öppnad.

<b>Argument

string		<t>graph	<t>Filnamn för graf.

<b>Exempel

<c>  string instance;

<c>  instance = GetGraphInstance( "$pwr_exe/pwr_c_dv.pwg");

</TOPIC>

<TOPIC> getgraphinstancenext() <style> function
GetGraphInstanceNext()

string GetGraphInstanceNext( string graph, string previous)

<b>Beskrivning

Hämta nästa instansobjekt för den angivna objektsbilden.
Används när flera versioner av samma objektsbild är öppen
för olika objekt.
Returnerar instansobjektet, eller en tom sträng om det inte
finns någon mer instans.

<b>Argument

string		<t>graph	<t>Filname för graf.
string		<t>previous	<t>Föregående instans.

<b>Exempel

<c>  string instance;

<c>  instance = GetGraphInstance( "$pwr_exe/pwr_c_dv.pwg");
<c>  while ( instance != "")
<c>    printf( "Instance %s\n", instance);
<c>    instance = GetGraphInstanceNext( "$pwr_exe/pwr_c_dv.pwg", instance);
<c>  endwile
</TOPIC>


<TOPIC> setsubwindow() <style> function
SetSubwindow()

string SetSubwindow(string graph, string window, string source, [string object, int self])

<b>Beskrivning

Visar en graf in ett Ge window objekt. Kommandot används i kommando
knappar för att byta innehållet i ett window objekt. source anger
namnet på den graf som ska visas. Även objekt-bilder kan visas genom
att aktuellt objekt med object argumentet. 

Om funktionen exekveras i fönstret som byts ut, ska self argumentet vara 1.

<b>Argument

string		<t>graph	<t>Namn på graf.
string		<t>window	<t>Namn på Ge windowobjekt.
string		<t>source	<t>pwg-fil or ge scrip som ska visas i
                                <t><t>window objektet.
string		<t>object	<t>Instansobjekt om grafen är en objektsbild.
int		<t>self		<t>Ska vara 1 om funktionen exekveras i det
				<t><t>fönster vars innehåll byts ut.
<b>Exempel pwg-fil

<c>  SetSubwindow("$current", "W1", "motor1.pwg", 0, 1);

<b>Exempel script-fil

<c>  SetSubwindow("$current", "W1", "@m1script", 0, 1);
</TOPIC>

<TOPIC> quit() <style> function
Quit()

Quit()

<b>Beskrivning

Avsluta operatörsmiljön.
</TOPIC>

</headerlevel>

<TOPIC> xtt-commands <style> function
Xtt kommandon

Alla xtt kommandon finns tillgängliga i script koden. En xtt-kommando rad
ska INTE avslutas med semikolon. Variabler kan substitueras i kommandot
genom add omges av apostrofer.

<b>Exempel

<c>  string name = "PUMP-VALVE-Open.ActualValue";
<c>  float  value = 2.2;
<c>  set parameter/name='name'/value='value'

<b>Exempel

<c>  string name;
<c>  string parname;
<c>  int j;
<c>  int i;
<c>  for ( i = 0; i < 3; i++)
<c>    parname = "vkv-test-obj" + (i+1);
<c>    create obj/name='parname'
<c>    for ( j = 0; j < 3; j++)
<c>      name = parname + "-obj" + (j+1);
<c>      create obj/name='name'
<c>    endfor
<c>  endfor
</TOPIC>

</chapter>

