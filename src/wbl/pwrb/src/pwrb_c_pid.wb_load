! 
!  ProviewR   Open Source Process Control.
!  Copyright (C) 2005-2021 SSAB EMEA AB.
! 
!  This file is part of ProviewR.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with ProviewR. If not, see <http://www.gnu.org/licenses/>
! 
!  Linking ProviewR statically or dynamically with other modules is
!  making a combined work based on ProviewR. Thus, the terms and
!  conditions of the GNU General Public License cover the whole 
!  combination.
! 
!  In addition, as a special exception, the copyright holders of
!  ProviewR give you permission to, from the build function in the
!  ProviewR Configurator, combine ProviewR with modules generated by the
!  ProviewR PLC Editor to a PLC program, regardless of the license
!  terms of these modules. You may copy and distribute the resulting
!  combined work under the terms of your choice, provided that every 
!  copy of the combined work is accompanied by a complete copy of 
!  the source code of ProviewR (the version used to produce the
!  combined work), being distributed under the terms of the GNU 
!  General Public License plus this exception.
!
!  pwrb_c_pid.wb_load -- Defines the class PID.
!
SObject         pwrb:Class
!/**
!  @Version 1.0
!  @Code rt_plc_pid.c
!  @Group Plc,PlcControl
!  @Summary Implements the robust PID control algorithm
!  Implements the robust PID control algorithm.
!  @image orm_en1-141.gif
!

!  @h1 Handy to know for a start
!  Normally the PID-object is used together with a Mode-object. The same goes for 
!  CompPID and CompMode.
!  The Modeobject works as an interface to the PID. From the Modeobject you can 
!  choose between MANUAL, AUTO and CASCADE: 
! 
!   -Manual mode. The Outsignal of the controller is forced to the desired output.
!   
!   -Auto mode. The controller setpoint is input from the operator, and stored in
!    the Mode-object.
!   
!   -Cascade mode. An external setpoint comes to the Mode-object in XSetVal [XSV],
!     and is distributed to the controller. 
!
!  @h1 PID-controller
!
!  The proportional term and the derivative term of the controller, can be based 
!  either on the process value, or the control deviation. The PidAlg parameter 
!  decides which. 
!  Example: PI+D means that the P-part and I-part works on the control deviation, 
!  but the derivative part works only on the process value. A step change on the 
!  setpoint won't affect the D-part at all, but the P-part will give a step and 
!  the I-part will give a slope.
!  I+P means that the P-part will only be affected by changes on the process value.
!
!  When using the P- or PD-algorithm we use an absolute algorithm. The output 
!  will not be stable away from zero without a control deviation.
!  If PDAbsFlag is zero, there will be a offset that is calculated when the
!  controller is in manual mode (force), so that there is no jump in the output
!  when going from manual to auto.
!  When using algorithms with I-part, the output is divided in two parts, depending
!  on the bitmask WindupMask. The I-part is always calculated and limited in the
!  OutWindup, and you can select to include the Bias, the P-part and the D-part also.
!  OutWindup is limited to MinWindup and MaxWindup, which sets the signals EndMin and EndMax
!  The rest of the output is calculated as an absolute part in AbsOut, that is added to the
!  OutWindup, and then limited to MinOutput and MaxOutput.
!  You can still turn off the integration
!  with an input to the object
!
!  The PID-object has two outputs.
!  OUT (OutVal ) is the normal output from the controller, or from the operator in
!  manual mode. It is used for speedreferences, setpoint for positioning of a
!  valve, or similar output.
!  OC (OutChange ) is the change of the output signal (incremental form), that
!  works even if the controller output is restricted by MinOut or MaxOut. It can
!  be used with an INC3P-object, that integrates the signal, and converts it to
!  time for opening or closing, if we have a valve without position transducer.
!
!  The derivative term of the controller is filtered with a 1st order filter. You
!  can remove the filtering by setting DerGain to zero, but that will result in a
!  controller, very sensitive for ripple.
!  Normally DerGain is about 3, which means the output from the derivate part
!  initially will be 3 times that of the P-part. The D-part will then be smeared
!  out in time, so that the total effect of the D-part will be the same as it
!  would have been without the filter.
!
!  You can use a feedforward signal by the Bias-input, with BiasGain.
! 
!  The output from the controller is divided in two parts, OutWindup and AbsOut.
!  The OutWindup contains the I-part and possibly the bias, P and D parts.
!  Select by WindupMask between I, BI, BPI and BPID.
!  OutWindup, is limited to the interval { MinWindup , MaxWindup }. This means
!  that you can loose your stable controlpoint if you have much noise. Especially
!  if you use the D-part of the controller. If you set the flag WindupMask to BIP
!  you remove the influence of D from the OutWindup. You can also set it to BI or I to remove the
!  influence of P and Bias from the OutWindup
!  The total output is also limited to the interval {MinOut , MaxOut }
!
!  Example: You have a rather noisy flowcontrol with an output 0-100% as
!  speedreference to a pump. WindupMask = BPID. MinWindup = 0, MaxWindup = 100.
!  The output varies +- 5% as a result of the noise. At the moment we need 98%
!  output as an average to reach the desired setpoint. If we use 100% as MaxWindup
!  for the controller, the output will be cut all the time, and it will vary
!  between 90 and 100% with 95% as an average. We will not reach the setpoint.
!  The solution is to change WindupMask to I or BI. The disturbances will not affect the windup,
!  but the output will still be limited to 0-100 %
!
!  For a servo valve for position control, you may want to have a slow I-part for leakage control,
!  but limited to +- 20 %. WindupMask = I or BI,
!  Set MinWindup = -20, Max Windup = + 20, MinOutput = -100, Max Output = +100
!  EndMin and EndMax can now be used to give alarm for leakage.
!
!  The controller has bumpless transfer between manual and auto, and after forced
!  output, but not if you use the P or PD-form with the flag PDAbsFlag.
!
!
!
!  EXAMPLE 1
!
!  Curves to show the effect of the P- and D-part at different input to the
!  controller.
!
!  @image orm_pid_3.png
!
!  Upper part:
!  Brown curve   Input ( and also P-part of controller). Step and then a ramp.
!  Cerise curve  Output from PID (yellow curve in lower part)
!
!  Lower part - D-component of controller.
!  Green curve   DerTime = 10s. No filtering (DerGain = 0) Note very big peak
!                at the step.
!  Yellow curve  DerTime = 10s. Filtered D. DerGain = 3.
!  Blue curve    DerTime = 20s. Filtered D. DerGain = 3.
!
!
!
!  EXAMPLE 2 to show the difference betweenPID, PI+D och I+PD on a setpont step:
!
!  @image orm_pid_4.png
!
!  I+PD (upper left) starts slowly to integrate the output after the step.
!  PI+D (upper right) starts with a step from the P, which quickens the 
!       process respons.
!  PID  (lower left) adds a short spike at the start, which in this case 
!       doesn't affect anything. 
!       MaxOut = 500%
!  PID  (lower right) is identical with the left, except for MaxWindup = 100%, 
!       and WindupMask = BPID, which gives "wrong" result.
!       At the setpoint step, the P-part gives an increase of 30 %, and the 
!       P-part wants a spike of 90 %. That results in an output of 155%, which 
!       is cut to 100% because of saturation of the output signal. Then the D-part 
!       will remove 90 % again, and the controller will restart from 10% output, 
!       which is not desired. 
!       Use WindupMask = BPI !!
!
!
! @h1 Examples
!
! @b Flow Control 
!
!  Flow control by speed control of a pump; see figure See Speed Control of a Pump. 
!
!  The set point value is set from an external optimising program (the Av signal 
!  OptFlow) once / 10 minutes e.g., or direct by an operator. 
!  Starts with the control signal 0 at pump start. 
!
!  @image orm_en1-151.gif
!  Speed Control of a Pump 
!
!  A solution in principle to control the pump is shown in figure 3-36 
!
!  @image orm_en1-152.gif
!  Configuration of Speed Control of a Pump 
!
!  The Mode object is configured as follows: 
!  @image orm_en1-153.gif
! 
!  The Pid object is configured as follows: 
!  @image orm_en1-154.gif
!
!  The input signal Force1 and the parameter OpMod in the Mode object shows the
!   current operational mode. 
!
!  OpMod = MANUAL (=1)
!  The output signal Force from the Mode object becomes TRUE. The Pid
!  object is forced to the value of ForcVal.
!  At the switching time, AUTO --> MANUAL, ForcVal has the value of the
!  last control signal OutVal. This value is a good initial value to start upon
!  in a manual increase/decrease session.
!  In this mode the operator can change ForcVal as well as the set point
!  value SetVal.
!  MinOut and MaxOut, in the Pid object, represent no limitation at all in
!  the MANUAL mode. 
!
!  OpMod = AUTO (=2)
!  The operator sets and changes the flow set point value SetVal. The value
!  has to be in the interval of MinSet and MaxSet. The optimising set point
!  value XSetVal is ignored.
!  The controller's control signal OutVal varies in the interval 10 -100.
!  The Mode object reads in the Pid object the last value of OutVal and
!  stores it in the output signal ForcVal as long as this mode continues. 
!
!  OpMod = CASCADE (=4)
!  The optimising external set point value XSetVal is copied into SetVal.
!  The Pid object controls against this set point value..
!
!  Force1 = 1 PUMP STOP
!  Independent of the value of OpMod the control signal of the controller is
!  forced against ForcVal = XForcVal (=0), i.e. MinOut and MaxOut
!  represent no limitation at all at forced control.
!
! @b Alternate Controllers with Tracking 
! 
!  @image orm_en1-155.gif
!  Shunt Control 
!
!  Through shunt control by the heat exchanger, the TT1-temperature in the
!  secondary loop will be kept constant. The TT2-temperature of the return
!  flow to the boiler may not be below the dewpoint, which may be the case
!  at high power consumption. 
!
!  At low primary temperature TT2-control is selected. When the operating
!  conditions allows, the control is focused on TT1 again. 
!
!  In MANUAL mode the shunt valve is fed by the TT1-controller. TIC2 may not
!  be set in MANUAL mode. See figure See PLC program with Alternative Controllers. 
!
!  Adjustments 
!
!  ... in the Mode object TIC1M have been selected: 
!
!  AccMod = 3 , i.e. AUTO / MANUAL are allowed modes. 
!  OpMod = AUTO means that the operator sets the set point value in SetVal
!  = MANUAL means that the operator sets the output signal ForcVal 
!  ... in the Pid object TIC1 has been selected: 
!
!  Inverse = TRUE, i.e. low TT1-temperature implies an increasing flow through the heat exchanger. 
!  ... in the Mode object TIC2M have been selected: 
!
!  AccMod = 2 , i.e. only AUTO 
!  The designer sets the limit value, i.e. the minimum of TT2 in SetVal 
!  ... in the Pid object TIC2 has been selected: 
!
!  Inverse = FALSE, i.e. reverse control action, at low TT2-temperatures the
!  flow through the heat exchanger decreases, the by-pass increases. 
!
!  @image orm_en1-156.gif
!  PLC program with Alternative Controllers 
!
!  Operating conditions: 
!
!  Normal operating conditions. TIC1 in AUTO. TIC2 follows in forced control. 
!  TT2 low. TIC2 is switched to AUTO, and TIC1 follows in forced control. 
!  TIC1M in MANUAL. TIC1 chooses the value of TICM. ForcVal as output 
!  TIC2 follows in forced control. 
!  TIC2 returns to AUTO when TT2 goes below the limit. 
!  The flow through the heat exchanger is enough to put the TT1 above the set
!   point value. Switches to TT1-control, i.e. TIC1 controls the shunt valve. 
!
! @b Cascade Control 
!  Temperature control in a furnace with two separate fuel loops, apart from
!  the control of combustion air for the furnace, is shown in figure See Block
!  Diagram Temperature Control. TT is the temperature transmitter, FT the flow
!  transmitters, and FIC the flow controllers. TIC is a temperature controller 
!
!  @image orm_en1-157.gif
!  Block Diagram Temperature Control 
!
!  All the Pid objects have Inverse set to TRUE. Forced control with average
!  flow ought to be added to TIC1M, when none of the flow controllers is in
!  cascade. An implementation is shown in figure See Traditional Cascade Configuration. 
!
!  @image orm_en1-158.gif
!  Traditional Cascade Configuration 
!
! @b Common or Individual Control of Several Control Loops 
!  In figure 3-41 two control loops share a common Mode object to a synchronous
!  behaviour in AUTO and MANUAL mode. But every single loop can also be controlled
!  individually from separate Mode objects with an internal set point and its own
!  manual output signal. The individual control overrides the common one. 
!
!  @image orm_en1-159.gif
!  Two Levels with Mode Objects in a Control Loop 
!
! @b Ratio Control 
!  Figure See Addition of a Reagent shows addition of a reagent. The ratio of the
!  mixing is to be kept constant and independent of the FT2-flow. FT is the flow
!  transmitter and FIC the flow controller. 
!
!  @image orm_en1-160.gif
!  Addition of a Reagent 
!
!  An implementation is shown in figure See Ratio Control. The control can be made
!  in AUTO (= the operator sets the ratio set point value) or MANUAL ( = the
!  operator sets the control signal to adjust the valve position). The ratio
!  process value ought to be checked against division by zero. 
!
!  @image orm_en1-161.gif
!  Ratio Control 
!
! @b Object graph
!  @image orm_pid_og.gif
!
! @b See also
!  @classlink Mode pwrb_mode.html
!  @classlink CompPID basecomponent_comppid.html
!*/
  Object PID $ClassDef 174 
    Body SysBody
      Attr Editor = pwr_eEditor_PlcEd
      Attr Method = pwr_eMethod_Connections
      Attr PopEditor = pwr_ePopEditor_GMS
    EndBody
    Object RtBody $ObjBodyDef 1 
      Body SysBody
        Attr StructName = "pid"
      EndBody
      !/**
      !  Specifies the process value.
      !*/
      Object ProcVal $Input 1 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "PV"
	  Attr Flags |= PWR_MASK_STATE
	  Attr Flags |= PWR_MASK_NOEDIT
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies the set point value. This input is in general
      !  connected to the corresponding output of a Mode object.
      !*/
      Object SetVal $Input 2 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "SV"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies the feed forward value. The value may be
      !  changed in the more info form of the Pid object.
      !*/
      Object Bias $Input 3 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "BIS"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies which value is to be used when Force is TRUE.
      !  When Force is TRUE OutVal is equal to ForcVal. This
      !  input is in general connected to the corresponding
      !  output of a Mode object.
      !*/
      Object ForcVal $Input 4 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "FOV"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies whether forced or MANUAL control is selected
      !  or not. FALSE means none; TRUE means that either forced
      !  or MANUAL control has been selected. This input is in
      !  general connected to the corresponding output of a Mode
      !  object.
      !*/
      Object Force $Input 5 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Boolean"
          Attr GraphName = "for"
	  Attr Flags |= PWR_MASK_NOINVERT
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies whether to enable or disable the integration.
      !  FALSE means that the integration is on; TRUE switches
      !  the integration off.
      !  
      !  The value may be changed in the more info form of the
      !  Pid object.
      !*/
      Object IntOff $Input 6 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Boolean"
          Attr GraphName = "iof"
	  Attr Flags |= PWR_MASK_STATE
	  Attr Flags |= PWR_MASK_NOEDIT
	  Attr Flags |= PWR_MASK_NOINVERT
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  The controller's control signal. The value is based
      !  either on the algorithm's current result, a value set
      !  by the operator in MANUAL mode, or a forced value.
      !*/
      Object OutVal $Output 7 
        Body SysBody
          Attr PgmName = "OutVal"
	  Attr Flags |= PWR_MASK_STATE
	  Attr Flags |= PWR_MASK_NOEDIT
          Attr Flags |= PWR_MASK_REDUTRANSFER
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "OUT"
        EndBody
      EndObject
      !/**
      !  Changes in the control signal between two consecutive
      !  scans; i.e. OutVal(t)  - OutVal(t-1).
      !*/
      Object OutChange $Output 8 
        Body SysBody
          Attr PgmName = "OutChange"
	  Attr Flags |= PWR_MASK_STATE
	  Attr Flags |= PWR_MASK_NOEDIT
          Attr Flags |= PWR_MASK_REDUTRANSFER
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "OC"
        EndBody
      EndObject
      !/**
      !  Control error (= ProcVal - SetVal).
      !*/
      Object ControlDiff $Output 9 
        Body SysBody
          Attr PgmName = "ControlDiff"
	  Attr Flags |= PWR_MASK_STATE
	  Attr Flags |= PWR_MASK_NOEDIT
          Attr Flags |= PWR_MASK_REDUTRANSFER
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "DIF"
        EndBody
      EndObject
      !/**
      !  Specifies if OutWindup at this scanning has been limited
      !  against any of the limit values in the interval {
      !  MinWindup, MaxWindup } or not. If a limitation is done
      !  against
      !  
      !  --  MinWindup, then EndMin is set TRUE
      !  --  MaxWindup, then EndMax is set TRUE
      !  else they are FALSE.
      !  
      !  EndMin /EndMax can only be set in AUTO or CASCADE
      !  control mode, i.e. not in MANUAL mode for example. See
      !  also EndHys below.
      !*/
      Object EndMax $Output 10 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Boolean"
          Attr GraphName = "max"
          Attr Flags |= PWR_MASK_STATE
          Attr Flags |= PWR_MASK_NOEDIT
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      Object EndMin $Output 11 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Boolean"
          Attr GraphName = "min"
          Attr Flags |= PWR_MASK_STATE
          Attr Flags |= PWR_MASK_NOEDIT
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  @Summary The PID control algorithm
      !  There are several variations of the PID control
      !  algorithm. PidAlg specifies the current choice. The
      !  possible values are as follows:
      !  
      !  1   -- I     Integral controller. Gain is not used.
      !
      !  3   -- I+P   Integral controller with proportional
      !               control action. The P-term is based on the
      !               the process value.
      !
      !  6   -- P     Proportional Controller.
      !
      !  7   -- PI    Proportional Integral Controller. The
      !               P-term is based on the control error.
      !  
      !  11  -- I+PD Integral controller with proportional
      !              derivative control action. Both the P- and
      !              D-term are based on the process value.
      !
      !  14  -- P+D  Proportional Controller with derivative
      !              control action. P is based on the control error,
      !              D on the process value.
      !  
      !  15  -- PI+D Proportional Integral Controller with
      !              derivative control action. P is based on
      !              the control error, D on the process value.
      !
      !  30  -- PD   Proportional Derivative Controller. Both
      !              the P- and D-term are based on the control
      !              error.
      !  
      !  31  -- PID  Proportional Integral Derivative
      !              Controller. Both the P- and D-term are
      !              based on the control error.
      !*/
      Object PidAlg $Intern 12 
        Body SysBody
          Attr TypeRef = "pwrb:Type-PidAlgEnum"
          Attr GraphName = "PidAlg"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies the proportional control factor; >= 0.
      !  The value may be changed in the more info form of the
      !  Pid object.
      !*/
      Object Gain $Intern 13 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "Gain"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies the integral action time in seconds.
      !  The value may be changed in the more info form of the
      !  Pid object.
      !*/
      Object IntTime $Intern 14 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "IntTime"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies the derivative time in seconds; see p. 3-258.
      !  Normally DerTime is greater than ScanTime and
      !     1.0 <=  DerGain < DerTime/ScanTime
      !*/
      Object DerTime $Intern 15 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "DerTime"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Factor to specify the first order lag filter used in
      !  filtering of the derivative contribution.
      !     
      !  1.0 <= DerGain < DerTime/ScanTime, otherwise no filtering
      !  
      !  DerGain is normally in the size of 3 to 4.
      !  The value may be changed in the more info form of the
      !  Pid object.
      !*/
      Object DerGain $Intern 16 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "DerGain"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies whether the control action should be inverted
      !  or not. FALSE means that a spontaneous increasing
      !  process value, in a control with fixed set point, is
      !  met by an increasing control signal, i.e. reverse
      !  control action. TRUE is the normal case, where a
      !  spontaneous increasing process value is met by a
      !  decreasing control signal.
      !*/
      Object Inverse $Intern 17 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Boolean"
          Attr GraphName = "Inverse"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies the feed forward gain; this factor may be
      !  negative.
      !  
      !  The values may be changed in the more info form of the
      !  Pid object.
      !*/
      Object BiasGain $Intern 18 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "BiasGain"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Flag to force no offset after manual mode. Will cause an output jump
      !  when switching from manual to Auto. Not Bumpless transfer!
      !*/
      Object PDAbsFlag $Intern 49 
        Body SysBody
          Attr TypeRef = "pwrb:Type-Boolean"
          Attr GraphName = "PDAbsFlag"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  WindupMask
      !  The possible values are as follows:
      !  
      !  1   -- I     Only the I-part is limited in OutWindup
      !
      !  2   -- BI    Bias and I are limited in OutWindup
      !
      !  4   -- BPI   Bias, P and I are limited in OutWindup
      !
      !  8   -- BPID  All parts of the controller are limited in OutWindup
      !*/
      Object WindupMask $Intern 50 
        Body SysBody
          Attr TypeRef = "pwrb:Type-WindupMaskEnum"
          Attr GraphName = "WindupMask"
        EndBody
      EndObject
      !/**
      !  At AUTO and CASCADE control for controllers with an I-part,
      !  the control signal OutWindup is supposed to be
      !  in the interval { MinWindup, MaxWindup }.
      !  The EndMin /EndMax flags are used to signal if any
      !  limitation has occurred.
      !  If OutWindup is greater than MaxWindup or less than MinWindup,
      !  OutWindup is limited to the value at the end of the
      !  interval.
      !  If MinWindup >= MaxWindup no limitation will occur.
      !  
      !  After addition of the absolute output part, 
      !  OutVal is limited  to the interval {MinOut , MaxOut }.
      !  If MinOut >= MaxOut no limitation will occur.
      !*/
      Object MinWindup $Intern 51 
        Body SysBody
          Attr TypeRef = "pwrb:Type-Float32"
          Attr GraphName = "MinWindup"
        EndBody
      EndObject
      Object MaxWindup $Intern 52 
        Body SysBody
          Attr TypeRef = "pwrb:Type-Float32"
          Attr GraphName = "MaxWindup"
        EndBody
      EndObject
      Object MinOut $Intern 19 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MinOut"
        EndBody
      EndObject
      Object MaxOut $Intern 20 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MaxOut"
        EndBody
      EndObject
      !/**
      !  Specifies the hysteresis on MinOut and MaxOut in
      !  connection with the handling of EndMin/EndMax.
      !  @image orm_en1-144.gif
      !*/
      Object EndHys $Intern 47 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "EndHys"
        EndBody
      EndObject
      !/**
      !  The lower respectively upper limit in the graph at
      !  presentation of ProcVal and SetVal in the Pid object
      !  display. The values may be changed in the more info
      !  form of the Pid object.
      !*/
      Object SetMinShow $Intern 41 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "SetMinShow"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      Object SetMaxShow $Intern 40 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "SetMaxShow"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies the engineering unit of SetVal / SetMinShow /
      !  SetMaxShow, e.g. meter. Used in the Pid object display.
      !*/
      Object SetEngUnit $Intern 44 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$String16"
          Attr GraphName = "SetEngUnit"
        EndBody
      EndObject
      !/**
      !  Specifies the number of characters displayed after the decimal point
      !  for set value and process value in the object graph.
      !*/
      Object SetPrecision $Intern 56 
        Body SysBody
          Attr TypeRef = "pwrb:Type-FloatPrecisionEnum"
        EndBody
      EndObject
      !/**
      !  The lower respectively upper limit in the graph at
      !  presentation of the control signal OutVal in the Pid
      !  object display. The values may be changed in the more
      !  info form of the Pid object.
      !*/
      Object OutMinShow $Intern 43 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "OutMinShow"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      Object OutMaxShow $Intern 42 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "OutMaxShow"
          Attr Flags |= PWR_MASK_REDUTRANSFER
        EndBody
      EndObject
      !/**
      !  Specifies the engineering unit of OutVal / Force / OutMinShow /
      !  OutMaxShow, e.g., %. Used in the Pid object display.
      !*/
      Object OutEngUnit $Intern 45 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$String16"
          Attr GraphName = "OutEngUnit"
        EndBody
      EndObject
      !/**
      !  Specifies the number of characters displayed after the decimal point
      !  for output value in the object graph.
      !*/
      Object OutPrecision $Intern 57 
        Body SysBody
          Attr TypeRef = "pwrb:Type-FloatPrecisionEnum"
        EndBody
      EndObject
      !/**
      !  Specifies time range for the trends in the object graph.
      !*/
      Object TrendTimeRange $Intern 58 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
        EndBody
      EndObject
      !/**
      !  Program cycle period in seconds, i.e. the sample time.
      !*/
      Object ScanTime $Intern 21 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "ScanTime"
	  Attr Flags |= PWR_MASK_INVISIBLE
	  Attr Flags |= PWR_MASK_POINTER
          Attr Flags |= PWR_MASK_PRIVATE
        EndBody
      EndObject
      !/**
      !  The operator's authorities to change Gain respectively
      !  IntTime.
      !    0   -- Changes not allowed.
      !    != 0 -- Changes allowed.
      !*/
      Object AccGain $Intern 22 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Int32"
          Attr GraphName = "AccGain"
        EndBody
      EndObject
      Object AccInt $Intern 23 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Int32"
          Attr GraphName = "AccInt"
        EndBody
      EndObject
      !/**
      !  The operator's authorities to change DerTime.
      !    0   -- Changes not allowed.
      !    != 0 -- Changes allowed.
      !*/
      Object AccDer $Intern 24 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Int32"
          Attr GraphName = "AccDer"
        EndBody
      EndObject
      !/**
      !  The operator's authorities to change DerGain.
      !    0   -- Changes not allowed.
      !    != 0 -- Changes allowed.
      !*/
      Object AccDGain $Intern 25 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Int32"
          Attr GraphName = "AccDGain"
        EndBody
      EndObject
      Object AccBias $Intern 26 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Int32"
          Attr GraphName = "AccBias"
        EndBody
      EndObject
      Object AccBGain $Intern 27 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Int32"
          Attr GraphName = "AccBGain"
        EndBody
      EndObject
      !/**
      !  The minimum and maximum allowed value of Gain at
      !  changes made by an operator.
      !*/
      Object MinGain $Intern 28 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MinGain"
        EndBody
      EndObject
      Object MaxGain $Intern 29 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MaxGain"
        EndBody
      EndObject
      !/**
      !  The minimum and maximum allowed value of IntTim at
      !  changes made by an operator.
      !*/
      Object MinInt $Intern 30 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MinInt"
        EndBody
      EndObject
      Object MaxInt $Intern 31 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MaxInt"
        EndBody
      EndObject
      !/**
      !  The minimum and maximum allowed value of DerTim at
      !  changes made by an operator.
      !*/
      Object MinDer $Intern 32 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MinDer"
        EndBody
      EndObject
      Object MaxDer $Intern 33 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MaxDer"
        EndBody
      EndObject
      !/**
      !  The minimum and maximum allowed value of DerGain at
      !  changes made by an operator.
      !*/
      Object MinDGain $Intern 34 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MinDGain"
        EndBody
      EndObject
      Object MaxDGain $Intern 35 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MaxDGain"
        EndBody
      EndObject
      !/**
      !  The minimum and maximum allowed value of Gain at
      !  changes made by an operator.
      !*/
      Object MinBias $Intern 36 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MinBias"
        EndBody
      EndObject
      Object MaxBias $Intern 37 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MaxBias"
        EndBody
      EndObject
      !/**
      !  The minimum and maximum allowed value of BiasGain at
      !  changes made by an operator.
      !*/
      Object MinBGain $Intern 38 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MinBGain"
        EndBody
      EndObject
      Object MaxBGain $Intern 39 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "MaxBGain"
        EndBody
      EndObject
      !/**
      !  Specifies the complete name of the Mode object
      !  associated to this Pid object. The attribute makes it
      !  possible to start the object display of the associated
      !  Mode object from a button in the object display of the
      !  Pid object.
      !*/
      Object ModeObjDId $Intern 46 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Objid"
          Attr GraphName = "ModeObjDId"
        EndBody
      EndObject
      !/**
      !  Filtered derivative is saved to the next program cycle.
      !*/
      Object FiltDer $Intern 48 
        Body SysBody
	  Attr Flags |= PWR_MASK_INVISIBLE
	  Attr Flags |= PWR_MASK_STATE
	  Attr Flags |= PWR_MASK_NOEDIT
          Attr Flags |= PWR_MASK_REDUTRANSFER
          Attr TypeRef = "pwrs:Type-$Float32"
          Attr GraphName = "FiltDer"
        EndBody
      EndObject
      !/**
      !  Offset for PD-controller when switching from manual to auto mode
      !*/
      Object PDManOffset $Intern 53 
        Body SysBody
          Attr TypeRef = "pwrb:Type-Float32"
          Attr GraphName = "PDManOffset"
	  Attr Flags |= PWR_MASK_INVISIBLE
	  Attr Flags |= PWR_MASK_STATE
	  Attr Flags |= PWR_MASK_NOEDIT
          Attr Flags |= PWR_MASK_REDUTRANSFER
         EndBody
      EndObject
      !/**
      !  Output that is cut off (limited) with MinWindup and MaxWindup
      !*/
      Object OutWindup $Intern 54 
        Body SysBody
          Attr TypeRef = "pwrb:Type-Float64"
          Attr GraphName = "OutWindup"
	  Attr Flags |= PWR_MASK_INVISIBLE
	  Attr Flags |= PWR_MASK_STATE
	  Attr Flags |= PWR_MASK_NOEDIT
          Attr Flags |= PWR_MASK_REDUTRANSFER
         EndBody
      EndObject
      !/**
      !  The absolute part of the output. (Contrary to OutWindup) 
      !*/
      Object AbsOut $Intern 55 
        Body SysBody
          Attr TypeRef = "pwrb:Type-Float64"
          Attr GraphName = "AbsOut"
	  Attr Flags |= PWR_MASK_INVISIBLE
	  Attr Flags |= PWR_MASK_STATE
	  Attr Flags |= PWR_MASK_NOEDIT
          Attr Flags |= PWR_MASK_REDUTRANSFER
         EndBody
      EndObject
    EndObject
    Object DevBody $ObjBodyDef 2 
      Object PlcNode $Buffer 1 
        Body SysBody
          Attr Class = pwr_eClass_PlcNode
	  Attr Flags |= PWR_MASK_INVISIBLE
        EndBody
      EndObject
    EndObject
    Object GraphPlcNode $GraphPlcNode
      Body SysBody
        Attr object_type = 150
        Attr parameters[0] = 6
        Attr parameters[1] = 0
        Attr parameters[2] = 5
        Attr parameters[3] = 0
        Attr subwindows = 0
        Attr graphmethod = 0
        Attr graphindex = 0
        Attr default_mask[0] = 27
        Attr default_mask[1] = 1
        Attr segname_annotation = 1
        Attr compmethod = 4
        Attr compindex = 0
	Attr executeordermethod = 2
        Attr objname = "PID"
        Attr graphname = "PID"
        Attr debugpar = ""
      EndBody
    EndObject
    Object ModeObjDId $ReferenceList
      Body SysBody
	Attr ObjectClass[0] = pwr_cClass_mode
	Attr Filter = 145
      EndBody
    EndObject
    Object Template PID
      Body RtBody
        Attr PidAlg = 3
        Attr Gain = 1.0
        Attr IntTime = 120.0
        Attr MaxOut = 100
        Attr DerGain = 3.0
        Attr BiasGain = 1.0
        Attr Inverse = 1
        Attr AccGain = 15
        Attr AccInt = 15
        Attr AccDer = 15
        Attr AccBias = 15
        Attr AccBGain = 15
        Attr MinGain = 0.1
        Attr MaxGain = 10.0
        Attr MinInt = 10.0
        Attr MaxInt = 600.0
        Attr MaxDer = 20.0
        Attr MaxBias = 100.0
        Attr MinBGain = -100.0
        Attr MaxBGain = 100.0
        Attr OutMaxShow = 100.0
        Attr SetMaxShow = 100.0
        Attr SetEngUnit = "%"
        Attr SetPrecision = 1
        Attr OutEngUnit = "%"
        Attr OutPrecision = 1
        Attr TrendTimeRange = 100
        Attr WindupMask = 4
        Attr MaxWindup = 100.0
      EndBody
    EndObject
  EndObject
EndSObject
