!** Invisible: Include file for io configuration script
! 
# ProviewR   Open Source Process Control.
# Copyright (C) 2005-2021 SSAB EMEA AB.
#
# This file is part of ProviewR.
#
#  This program is free software; you can redistribute it and/or 
#  modify it under the terms of the GNU General Public License as 
#  published by the Free Software Foundation, either version 2 of 
#  the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful 
#  but WITHOUT ANY WARRANTY; without even the implied warranty of 
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License 
# along with ProviewR. If not, see <http://www.gnu.org/licenses/>
#
# Linking ProviewR statically or dynamically with other modules is
# making a combined work based on ProviewR. Thus, the terms and
# conditions of the GNU General Public License cover the whole 
# combination.
#
# In addition, as a special exception, the copyright holders of
# ProviewR give you permission to, from the build function in the
# ProviewR Configurator, combine ProviewR with modules generated by the
# ProviewR PLC Editor to a PLC program, regardless of the license
# terms of these modules. You may copy and distribute the resulting
# combined work under the terms of your choice, provided that every 
# copy of the combined work is accompanied by a complete copy of 
# the source code of ProviewR (the version used to produce the
# combined work), being distributed under the terms of the GNU 
# General Public License plus this exception.
!
!
! Create a signal.
! If the card of the signal does not exist, the card with channels, and signals
! positioned in the reservhierarchy, will be created, and signals and channels
! will be connected.
! If the card already exist the signal will be move from the reservhierarchy
! to the given destination
!
function int ssab_create_signal( string rname, string resname, string chname, string signame, string chan_descr, string chan_ident, string sig_descr)
  string 	cname;
  string 	cardclass;
  string 	type;
  int		channels;
  int		i;
  int		j;
  string	newname;
  string	oldname;
  string	rnam;
  string	chnam;
  string	cnam;
  string	hnam;
  string	snam;
  string	chnr_str;
  string	tnam;
  int		sts;

! Check if card exist
  cname = extract( 1, 4, chname);
  chname = toupper( chname);
  type = extract( 1, 2, chname);
  chnr_str = extract( 5, 2, chname);

  cnam=rname + "-" + cname;

  if ( type == "DI")
    cardclass = "Ssab_DI32D";
    channels = 32;
  endif
  if ( type == "DO")
    cardclass = "Ssab_DO32DKS";
    channels = 32;
  endif
  if ( type == "AI")
    cardclass = "Ssab_AI32uP";
    channels = 32;
  endif
  if ( type == "AO")
    cardclass = "Ssab_AO8uP";
    channels = 8;
  endif
  if ( type == "CO")
    cardclass = "Ssab_Co4uP";
    channels = 4;
  endif

  if (!ObjectExist(cnam))
!   Create the rack and reservhierarchy if not created
    ssab_create_object( rname, "Rack_SSAB");
    ssab_create_object( resname, "$PlantHier");

!   The card didn't exist, create it
!   Create the card
    create object/dest="'rname'"/class='cardclass'/name="'cname'"

!   Create signalobjects in reserv hierarchy
    for ( i = 1; i < channels + 1; i++)
      sprintf( rnam, "Reserv_%s%02.2d", cname, i);
      sprintf( hnam, "%s-%s", resname, rnam);
      if (!ObjectExist(hnam))
        create object/dest='resname'/class='type'/name="'rnam'"
        sprintf( chnam, "Ch%02.2d", i);
        ! Connect to channel
        set attr/noco/name='hnam'/attr=SigChanCon/value='rname'-'cname'.'chnam'
      endif
    endfor

  endif

! Set description and identity in channel
  set attr/noco/name='rname'-'cname'.Ch'chnr_str'/attr=Description/value="'chan_descr'"
  set attr/noco/name='rname'-'cname'.Ch'chnr_str'/attr=Identity/value="'chan_ident'"

! Set description in signal
  sprintf( rnam, "Reserv_%s%s", cname, chnr_str);
  set attr/noco/name='resname'-'rnam'/attr=Description/value="'sig_descr'"

! Move signal to the final destination
  i = strrchr( signame, "-");
  if ( i)
    i++;
    j = i - 2;
    hnam = extract( 1, j, signame);
    snam = extract( i, 80, signame);
  endif
  ssab_create_object( hnam, "$PlantHier");
  move obj/source='resname'-'rnam'/dest='hnam'/rename="'snam'"
endfunction

!
! Create an object and it's ancestors if they doesn't exist
!
function int  ssab_create_object( string name, string class)
  int	 i;
  int	 j;
  string parent;
  string object;
  int	 sts;

  i = strrchr( name, "-");
  if ( i)
    i++;
    j = i - 2;
    parent = extract( 1, j, name);
    object = extract( i, 80, name);
  else
    object = name;
    parent = "";
  endif
  if ( !ObjectExist( name))
    if ( parent != "")
      ssab_create_object( parent, class);
    endif
    create object/dest="'parent'"/class='class'/name="'object'"
  endif
endfunction

