/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#if defined PWRE_CONF_HDF5

#include <cmath>

#include "pwr_names.h"

#include "co_cdh.h"
#include "co_cnf.h"
#include "co_dcli.h"
#include "co_dcli_msg.h"
#include "co_string.h"
#include "co_syi.h"
#include "co_time.h"

#include "rt_errh.h"
#include "rt_load.h"

#include "sev_dbhdf5.h"

using namespace std;

#define ITER_MAX 50
#define cName_Dir "/Dir"
#define cName_Stat "/Stat"
#define cName_Items "/Items"
#define cName_ObjectItems "/ObjectItems"
#define cName_ObjectItemAttributes "/ObjectItemAttributes"
#define cName_Cmn "/Cmn"
#define cName_Tables "/Tables"
#define cName_Header "/Header"
#define cName_Data "/Data"

#if (pwr_dHost_byteOrder == pwr_dLittleEndian)
#define H5_I8 H5T_STD_I8LE
#define H5_I16 H5T_STD_I16LE
#define H5_I32 H5T_STD_I32LE
#define H5_I64 H5T_STD_I64LE
#define H5_U8 H5T_STD_U8LE
#define H5_U16 H5T_STD_U16LE
#define H5_U32 H5T_STD_U32LE
#define H5_U64 H5T_STD_U64LE
#define H5_F32 H5T_IEEE_F32LE
#define H5_F64 H5T_IEEE_F64LE
#else
#define H5_I8 H5T_STD_I8BE
#define H5_I16 H5T_STD_I16BE
#define H5_I32 H5T_STD_I32BE
#define H5_I64 H5T_STD_I64BE
#define H5_U8 H5T_STD_U8BE
#define H5_U16 H5T_STD_U16BE
#define H5_U32 H5T_STD_U32BE
#define H5_U64 H5T_STD_U64BE
#define H5_F32 H5T_IEEE_F32BE
#define H5_F64 H5T_IEEE_F64BE
#endif
#define H5_S1 H5T_C_S1

typedef struct {
  unsigned int id;
  char tablename[256];
  unsigned int vid;
  unsigned int oix;
  char oname[256];
  char aname[256];
  unsigned int uptime;
  unsigned int creatime;
  unsigned int storagetime;
  float deadband;
  unsigned int options;
  float scantime;
  char description[80];
  unsigned int vtype;
  unsigned int vsize;
  char unit[16];
  unsigned int deleted;
} sev_sItem;

typedef struct {
  unsigned int id;
  char tablename[256];
  unsigned int vid;
  unsigned int oix;
  char oname[256];
  char aname[256];
  unsigned int uptime;
  unsigned int creatime;
  unsigned int storagetime;
  float deadband;
  unsigned int options;
  float scantime;
  char description[80];
  unsigned int deleted;
} sev_sObjectItem;

typedef struct {
  char tablename[256];
  char attributename[256];
  unsigned int attributeidx;
  unsigned int attributetype;
  unsigned int attributesize;
  unsigned int deleted;
} sev_sObjectAttributes;

sev_db* sev_dbhdf5::open_database()
{
  sev_dbhdf5* db;
  int sts;

  db = new sev_dbhdf5();

  sts = db->open_db();
  if (EVEN(sts))
    return 0;

  return db;
}

int sev_dbhdf5::create_types()
{
  herr_t hsts;

  // Create file type for items dataset
  hid_t str_type256 = H5Tcopy(H5T_C_S1);
  hsts = H5Tset_size(str_type256, 256);
  hid_t str_type80 = H5Tcopy(H5T_C_S1);
  hsts = H5Tset_size(str_type80, 80);
  hid_t str_type16 = H5Tcopy(H5T_C_S1);
  hsts = H5Tset_size(str_type16, 16);

  m_item_mtype = H5Tcreate(H5T_COMPOUND, 912);
  hsts = H5Tinsert(m_item_mtype, "id", 0, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_item_mtype, "tablename", 4, str_type256);
  hsts = H5Tinsert(m_item_mtype, "vid", 260, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_item_mtype, "oix", 264, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_item_mtype, "oname", 268, str_type256);
  hsts = H5Tinsert(m_item_mtype, "aname", 524, str_type256);
  hsts = H5Tinsert(m_item_mtype, "uptime", 780, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_item_mtype, "creatime", 784, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_item_mtype, "storagetime", 788, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_item_mtype, "deadband", 792, H5T_NATIVE_FLOAT);
  hsts = H5Tinsert(m_item_mtype, "options", 796, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_item_mtype, "scantime", 800, H5T_NATIVE_FLOAT);
  hsts = H5Tinsert(m_item_mtype, "description", 804, str_type80);
  hsts = H5Tinsert(m_item_mtype, "vtype", 884, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_item_mtype, "vsize", 888, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_item_mtype, "unit", 892, str_type16);
  hsts = H5Tinsert(m_item_mtype, "deleted", 908, H5T_NATIVE_UINT);

  m_objectitem_mtype = H5Tcreate(H5T_COMPOUND, 888);
  hsts = H5Tinsert(m_objectitem_mtype, "id", 0, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_objectitem_mtype, "tablename", 4, str_type256);
  hsts = H5Tinsert(m_objectitem_mtype, "vid", 260, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_objectitem_mtype, "oix", 264, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_objectitem_mtype, "oname", 268, str_type256);
  hsts = H5Tinsert(m_objectitem_mtype, "aname", 524, str_type256);
  hsts = H5Tinsert(m_objectitem_mtype, "uptime", 780, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_objectitem_mtype, "creatime", 784, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_objectitem_mtype, "storagetime", 788, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_objectitem_mtype, "deadband", 792, H5T_NATIVE_FLOAT);
  hsts = H5Tinsert(m_objectitem_mtype, "options", 796, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_objectitem_mtype, "scantime", 800, H5T_NATIVE_FLOAT);
  hsts = H5Tinsert(m_objectitem_mtype, "description", 804, str_type80);
  hsts = H5Tinsert(m_objectitem_mtype, "deleted", 884, H5T_NATIVE_UINT);

  m_objectattributes_mtype = H5Tcreate(H5T_COMPOUND, 528);
  hsts = H5Tinsert(m_objectattributes_mtype, "tablename", 0, str_type256);
  hsts = H5Tinsert(m_objectattributes_mtype, "attributename", 256, str_type256);
  hsts = H5Tinsert(
      m_objectattributes_mtype, "attributeidx", 512, H5T_NATIVE_UINT);
  hsts = H5Tinsert(
      m_objectattributes_mtype, "attributetype", 516, H5T_NATIVE_UINT);
  hsts = H5Tinsert(
      m_objectattributes_mtype, "attributesize", 520, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_objectattributes_mtype, "deleted", 524, H5T_NATIVE_UINT);

  m_header_mtype = H5Tcreate(H5T_COMPOUND, 24);
  hsts = H5Tinsert(m_header_mtype, "data_size", 0, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_header_mtype, "data_type", 4, H5T_NATIVE_INT);
  hsts = H5Tinsert(m_header_mtype, "first_idx", 8, H5T_NATIVE_INT);
  hsts = H5Tinsert(m_header_mtype, "last_idx", 12, H5T_NATIVE_INT);
  hsts = H5Tinsert(m_header_mtype, "first_time", 16, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_header_mtype, "last_time", 20, H5T_NATIVE_UINT);

  m_stat_mtype = H5Tcreate(H5T_COMPOUND, 32);
  hsts = H5Tinsert(m_stat_mtype, "current_load", 0, H5T_NATIVE_FLOAT);
  hsts = H5Tinsert(m_stat_mtype, "medium_load", 4, H5T_NATIVE_FLOAT);
  hsts = H5Tinsert(m_stat_mtype, "storage_rate", 8, H5T_NATIVE_FLOAT);
  hsts = H5Tinsert(m_stat_mtype, "medium_storage_rate", 12, H5T_NATIVE_FLOAT);
  hsts = H5Tinsert(m_stat_mtype, "datastore_msg_cnt", 16, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_stat_mtype, "dataget_msg_cnt", 20, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_stat_mtype, "items_msg_cnt", 24, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_stat_mtype, "eventstore_msg_cnt", 28, H5T_NATIVE_UINT);

  m_event_mtype = H5Tcreate(H5T_COMPOUND, 188);
  hsts = H5Tinsert(m_event_mtype, "time", 0, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_event_mtype, "ntime", 4, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_event_mtype, "eventtype", 8, H5T_NATIVE_INT);
  hsts = H5Tinsert(m_event_mtype, "eventprio", 12, H5T_NATIVE_INT);
  hsts = H5Tinsert(m_event_mtype, "eventid_nix", 16, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_event_mtype, "eventid_birthtime", 20, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_event_mtype, "eventid_idx", 24, H5T_NATIVE_UINT);
  hsts = H5Tinsert(m_event_mtype, "eventtext", 28, str_type80);
  hsts = H5Tinsert(m_event_mtype, "eventname", 108, str_type80);

  hsts = H5Tclose(str_type256);
  hsts = H5Tclose(str_type80);
  hsts = H5Tclose(str_type16);

  return 1;
}

int sev_dbhdf5::create_db(char* dbname)
{
  herr_t hsts;
  hsize_t dim, max_dim;

  m_file = H5Fcreate(dbname, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);

  // Create group /Dir and /Tables

  hid_t dir_group_id
      = H5Gcreate2(m_file, cName_Dir, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
  hid_t data_group_id
      = H5Gcreate2(m_file, cName_Tables, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

  // Create file type for items dataset
  hid_t str_type256 = H5Tcopy(H5T_C_S1);
  hsts = H5Tset_size(str_type256, 256);
  hid_t str_type80 = H5Tcopy(H5T_C_S1);
  hsts = H5Tset_size(str_type80, 80);
  hid_t str_type16 = H5Tcopy(H5T_C_S1);
  hsts = H5Tset_size(str_type16, 16);

  hid_t item_ftype = H5Tcreate(H5T_COMPOUND, 912);
  hsts = H5Tinsert(item_ftype, "id", 0, H5T_STD_U32LE);
  hsts = H5Tinsert(item_ftype, "tablename", 4, str_type256);
  hsts = H5Tinsert(item_ftype, "vid", 260, H5T_STD_U32LE);
  hsts = H5Tinsert(item_ftype, "oix", 264, H5T_STD_U32LE);
  hsts = H5Tinsert(item_ftype, "oname", 268, str_type256);
  hsts = H5Tinsert(item_ftype, "aname", 524, str_type256);
  hsts = H5Tinsert(item_ftype, "uptime", 780, H5T_STD_U32LE);
  hsts = H5Tinsert(item_ftype, "creatime", 784, H5T_STD_U32LE);
  hsts = H5Tinsert(item_ftype, "storagetime", 788, H5T_STD_U32LE);
  hsts = H5Tinsert(item_ftype, "deadband", 792, H5T_IEEE_F32LE);
  hsts = H5Tinsert(item_ftype, "options", 796, H5T_STD_U32LE);
  hsts = H5Tinsert(item_ftype, "scantime", 800, H5T_IEEE_F32LE);
  hsts = H5Tinsert(item_ftype, "description", 804, str_type80);
  hsts = H5Tinsert(item_ftype, "vtype", 884, H5T_STD_U32LE);
  hsts = H5Tinsert(item_ftype, "vsize", 888, H5T_STD_U32LE);
  hsts = H5Tinsert(item_ftype, "unit", 892, str_type16);
  hsts = H5Tinsert(item_ftype, "deleted", 908, H5T_STD_U32LE);

  // Create dataset Items
  dim = m_cmn.items_alloc = m_cItemsInitSize;
  max_dim = H5S_UNLIMITED;
  hid_t properties = H5Pcreate(H5P_DATASET_CREATE);
  hsts = H5Pset_chunk(properties, 1, &dim);
  hid_t dataspace_id = H5Screate_simple(1, &dim, &max_dim);
  hid_t dataset_id = H5Dcreate2(dir_group_id, "Items", item_ftype, dataspace_id,
      H5P_DEFAULT, properties, H5P_DEFAULT);

  // Create file type for object items dataset
  hid_t obj_item_ftype = H5Tcreate(H5T_COMPOUND, 888);
  hsts = H5Tinsert(obj_item_ftype, "id", 0, H5T_STD_U32LE);
  hsts = H5Tinsert(obj_item_ftype, "tablename", 4, str_type256);
  hsts = H5Tinsert(obj_item_ftype, "vid", 260, H5T_STD_U32LE);
  hsts = H5Tinsert(obj_item_ftype, "oix", 264, H5T_STD_U32LE);
  hsts = H5Tinsert(obj_item_ftype, "oname", 268, str_type256);
  hsts = H5Tinsert(obj_item_ftype, "aname", 524, str_type256);
  hsts = H5Tinsert(obj_item_ftype, "uptime", 780, H5T_STD_U32LE);
  hsts = H5Tinsert(obj_item_ftype, "creatime", 784, H5T_STD_U32LE);
  hsts = H5Tinsert(obj_item_ftype, "storagetime", 788, H5T_STD_U32LE);
  hsts = H5Tinsert(obj_item_ftype, "deadband", 792, H5T_IEEE_F32LE);
  hsts = H5Tinsert(obj_item_ftype, "options", 796, H5T_STD_U32LE);
  hsts = H5Tinsert(obj_item_ftype, "scantime", 800, H5T_IEEE_F32LE);
  hsts = H5Tinsert(obj_item_ftype, "description", 804, str_type80);
  hsts = H5Tinsert(obj_item_ftype, "deleted", 884, H5T_STD_U32LE);

  // Create dataset ObjectItems
  dim = m_cmn.objectitems_alloc = m_cItemsInitSize;
  max_dim = H5S_UNLIMITED;
  hid_t obj_properties = H5Pcreate(H5P_DATASET_CREATE);
  hsts = H5Pset_chunk(obj_properties, 1, &dim);
  hid_t obj_dataspace_id = H5Screate_simple(1, &dim, &max_dim);
  hid_t obj_dataset_id = H5Dcreate2(dir_group_id, "ObjectItems", obj_item_ftype,
      obj_dataspace_id, H5P_DEFAULT, obj_properties, H5P_DEFAULT);

  // Create file type for object item attributes dataset
  hid_t obj_item_attr_ftype = H5Tcreate(H5T_COMPOUND, 528);
  hsts = H5Tinsert(obj_item_attr_ftype, "tablename", 0, str_type256);
  hsts = H5Tinsert(obj_item_attr_ftype, "attributename", 256, str_type256);
  hsts = H5Tinsert(obj_item_attr_ftype, "attributeidx", 512, H5T_STD_U32LE);
  hsts = H5Tinsert(obj_item_attr_ftype, "attributetype", 516, H5T_STD_U32LE);
  hsts = H5Tinsert(obj_item_attr_ftype, "attributesize", 520, H5T_STD_U32LE);
  hsts = H5Tinsert(obj_item_attr_ftype, "deleted", 524, H5T_STD_U32LE);

  // Create dataset ObjectItemsAttributes
  dim = m_cmn.objectitemattr_alloc = m_cItemsInitSize;
  max_dim = H5S_UNLIMITED;
  hid_t objattr_properties = H5Pcreate(H5P_DATASET_CREATE);
  hsts = H5Pset_chunk(objattr_properties, 1, &dim);
  hid_t objattr_dataspace_id = H5Screate_simple(1, &dim, &max_dim);
  hid_t objattr_dataset_id
      = H5Dcreate2(dir_group_id, "ObjectItemAttributes", obj_item_attr_ftype,
          objattr_dataspace_id, H5P_DEFAULT, objattr_properties, H5P_DEFAULT);

  // Create file type for statistics
  hid_t stat_ftype = H5Tcreate(H5T_COMPOUND, 32);
  hsts = H5Tinsert(stat_ftype, "current_load", 0, H5T_IEEE_F32LE);
  hsts = H5Tinsert(stat_ftype, "medium_load", 4, H5T_IEEE_F32LE);
  hsts = H5Tinsert(stat_ftype, "storage_rate", 8, H5T_IEEE_F32LE);
  hsts = H5Tinsert(stat_ftype, "medium_storage_rate", 12, H5T_IEEE_F32LE);
  hsts = H5Tinsert(stat_ftype, "datastore_msg_cnt", 16, H5T_STD_U32LE);
  hsts = H5Tinsert(stat_ftype, "dataget_msg_cnt", 20, H5T_STD_U32LE);
  hsts = H5Tinsert(stat_ftype, "items_msg_cnt", 24, H5T_STD_U32LE);
  hsts = H5Tinsert(stat_ftype, "eventstore_msg_cnt", 28, H5T_STD_U32LE);

  // Create dataset ObjectItemsAttributes
  dim = 1;
  hid_t stat_dataspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t stat_dataset_id = H5Dcreate2(dir_group_id, "Stat", stat_ftype,
      stat_dataspace_id, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

  // Create dataset Cmn
  dim = 10;
  hid_t cmn_dataspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t cmn_dataset_id = H5Dcreate2(dir_group_id, "Cmn", H5T_STD_I32LE,
      cmn_dataspace_id, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
  write_cmn();

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);

  hsts = H5Tclose(str_type256);
  hsts = H5Tclose(str_type80);
  hsts = H5Tclose(str_type16);
  hsts = H5Tclose(item_ftype);
  hsts = H5Sclose(dataspace_id);
  hsts = H5Dclose(dataset_id);
  hsts = H5Tclose(obj_item_ftype);
  hsts = H5Sclose(obj_dataspace_id);
  hsts = H5Dclose(obj_dataset_id);
  hsts = H5Tclose(obj_item_attr_ftype);
  hsts = H5Sclose(objattr_dataspace_id);
  hsts = H5Dclose(objattr_dataset_id);
  hsts = H5Sclose(stat_dataspace_id);
  hsts = H5Dclose(stat_dataset_id);
  hsts = H5Sclose(cmn_dataspace_id);
  hsts = H5Dclose(cmn_dataset_id);
  hsts = H5Gclose(dir_group_id);
  hsts = H5Gclose(data_group_id);

  return 1;
}

int sev_dbhdf5::open_db()
{
  char dbname[350];
  char system_name[80];
  int sts;
  pwr_tTime time;
  pwr_tFileName dir;

  sts = get_systemname(system_name);
  if (EVEN(sts))
    return sts;

  create_types();

  if (!cnf_get_value("sevDatabaseDirectory", dir, sizeof(dir)))
    strcpy(dir, "$pwrp_db/");
  if (dir[strlen(dir) - 1] != '/')
    strcat(dir, "/");

  sprintf(dbname, "%spwrp__%s.h5", dir, system_name);
  dcli_translate_filename(dbname, dbname);

  sts = dcli_file_time(dbname, &time);
  if (sts == DCLI__NOFILE) {
    // Create the database
    create_db(dbname);
  } else {
    // Open the database
    m_file = H5Fopen(dbname, H5F_ACC_RDWR, H5P_DEFAULT);
    if (m_file == -1) {
      errh_Error("Unable to open database '%s'", dbname);
      return 0;
    }
  }
  if (!m_file) {
    errh_Error("Unable to open database '%s'", dbname);
    return 0;
  }

  read_cmn();

  errh_Info("Database opened '%s'", dbname);
  return 1;
}

int sev_dbhdf5::read_cmn()
{
  hid_t dataset_id = H5Dopen2(m_file, cName_Dir cName_Cmn, H5P_DEFAULT);
  herr_t status = H5Dread(
      dataset_id, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT, &m_cmn);
  status = H5Dclose(dataset_id);
  return 1;
}

int sev_dbhdf5::write_cmn()
{
  hid_t dataset_id = H5Dopen2(m_file, cName_Dir cName_Cmn, H5P_DEFAULT);
  herr_t status = H5Dwrite(
      dataset_id, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT, &m_cmn);
  status = H5Dclose(dataset_id);
  return 1;
}

int sev_dbhdf5::checkAndUpdateVersion(unsigned int version)
{
  return 1;
}

sev_eDataType sev_dbhdf5::get_datatype(
    pwr_eType type, pwr_tMask options, unsigned int size)
{
  sev_eDataType dtype;

  switch (type) {
  case pwr_eType_Boolean:
    dtype = sev_eDataType_Boolean;
    break;
  case pwr_eType_Int8:
    dtype = sev_eDataType_Int8;
    break;
  case pwr_eType_Int16:
    dtype = sev_eDataType_Int16;
    break;
  case pwr_eType_Int32:
    dtype = sev_eDataType_Int32;
    break;
  case pwr_eType_Int64:
    dtype = sev_eDataType_Int64;
    break;
  case pwr_eType_UInt8:
    dtype = sev_eDataType_UInt8;
    break;
  case pwr_eType_UInt16:
    dtype = sev_eDataType_UInt16;
    break;
  case pwr_eType_UInt32:
    dtype = sev_eDataType_UInt32;
    break;
  case pwr_eType_UInt64:
    dtype = sev_eDataType_UInt64;
    break;
  case pwr_eType_Float32:
    dtype = sev_eDataType_Float32;
    break;
  case pwr_eType_Float64:
    dtype = sev_eDataType_Float64;
    break;
  case pwr_eType_Time:
    dtype = sev_eDataType_Time;
    break;
  case pwr_eType_DeltaTime:
    dtype = sev_eDataType_DeltaTime;
    break;
  case pwr_eType_String:
    switch (size) {
    case 8:
      dtype = sev_eDataType_String8;
      break;
    case 16:
      dtype = sev_eDataType_String16;
      break;
    case 32:
      dtype = sev_eDataType_String32;
      break;
    case 40:
      dtype = sev_eDataType_String40;
      break;
    case 80:
      dtype = sev_eDataType_String80;
      break;
    case 132:
      dtype = sev_eDataType_String132;
      break;
    case 256:
      dtype = sev_eDataType_String256;
      break;
    default:
      return sev_eDataType_Unknown;
    }
  default:
    return sev_eDataType_Unknown;
  }

  if (options & pwr_mSevOptionsMask_HighTimeResolution
      && !(options & pwr_mSevOptionsMask_UseDeadBand))
    dtype = sev_eDataType(dtype + 1);
  else if (!(options & pwr_mSevOptionsMask_HighTimeResolution)
      && options & pwr_mSevOptionsMask_UseDeadBand)
    dtype = sev_eDataType(dtype + 2);
  else if (options & pwr_mSevOptionsMask_HighTimeResolution
      && options & pwr_mSevOptionsMask_UseDeadBand)
    dtype = sev_eDataType(dtype + 3);

  return dtype;
}

int sev_dbhdf5::get_fdatatype(
    sev_eDataType type, unsigned int size, hid_t* mtype)
{
  herr_t hsts;
  hid_t str_type;

  // Create type
  switch (type) {
  case sev_eDataType_Boolean:
    *mtype = H5Tcreate(H5T_COMPOUND, 8);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_STD_U32LE);
    break;
  case sev_eDataType_BooleanHt:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U32LE);
    break;
  case sev_eDataType_BooleanDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U32LE);
    break;
  case sev_eDataType_BooleanHtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_STD_U32LE);
    break;
  case sev_eDataType_Int8:
    *mtype = H5Tcreate(H5T_COMPOUND, 5);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_STD_I8LE);
    break;
  case sev_eDataType_Int8Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 9);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_I8LE);
    break;
  case sev_eDataType_Int8Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 9);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_I8LE);
    break;
  case sev_eDataType_Int8HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 13);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_STD_I8LE);
    break;
  case sev_eDataType_Int16:
    *mtype = H5Tcreate(H5T_COMPOUND, 6);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_STD_I16LE);
    break;
  case sev_eDataType_Int16Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 10);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_I16LE);
    break;
  case sev_eDataType_Int16Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 10);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_I16LE);
    break;
  case sev_eDataType_Int16HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 14);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_STD_I16LE);
    break;
  case sev_eDataType_Int32:
    *mtype = H5Tcreate(H5T_COMPOUND, 8);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_STD_I32LE);
    break;
  case sev_eDataType_Int32Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_I32LE);
    break;
  case sev_eDataType_Int32Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_I32LE);
    break;
  case sev_eDataType_Int32HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_STD_I32LE);
    break;
  case sev_eDataType_Int64:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_STD_I64LE);
    break;
  case sev_eDataType_Int64Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_I64LE);
    break;
  case sev_eDataType_Int64Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_I64LE);
    break;
  case sev_eDataType_Int64HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_STD_I64LE);
    break;
  case sev_eDataType_UInt8:
    *mtype = H5Tcreate(H5T_COMPOUND, 5);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_STD_U8LE);
    break;
  case sev_eDataType_UInt8Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 9);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U8LE);
    break;
  case sev_eDataType_UInt8Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 9);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U8LE);
    break;
  case sev_eDataType_UInt8HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 13);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_STD_U8LE);
    break;
  case sev_eDataType_UInt16:
    *mtype = H5Tcreate(H5T_COMPOUND, 6);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_STD_U16LE);
    break;
  case sev_eDataType_UInt16Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 10);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U16LE);
    break;
  case sev_eDataType_UInt16Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 10);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U16LE);
    break;
  case sev_eDataType_UInt16HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 14);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_STD_U16LE);
    break;
  case sev_eDataType_UInt32:
    *mtype = H5Tcreate(H5T_COMPOUND, 8);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_STD_U32LE);
    break;
  case sev_eDataType_UInt32Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U32LE);
    break;
  case sev_eDataType_UInt32Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U32LE);
    break;
  case sev_eDataType_UInt32HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_STD_U32LE);
    break;
  case sev_eDataType_UInt64:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_STD_U64LE);
    break;
  case sev_eDataType_UInt64Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U64LE);
    break;
  case sev_eDataType_UInt64Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U64LE);
    break;
  case sev_eDataType_UInt64HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_STD_U64LE);
    break;
  case sev_eDataType_Float32:
    *mtype = H5Tcreate(H5T_COMPOUND, 8);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_IEEE_F32LE);
    break;
  case sev_eDataType_Float32Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_IEEE_F32LE);
    break;
  case sev_eDataType_Float32Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_IEEE_F32LE);
    break;
  case sev_eDataType_Float32HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_IEEE_F32LE);
    break;
  case sev_eDataType_Float64:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_IEEE_F64LE);
    break;
  case sev_eDataType_Float64Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_IEEE_F64LE);
    break;
  case sev_eDataType_Float64Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_IEEE_F64LE);
    break;
  case sev_eDataType_Float64HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_IEEE_F64LE);
    break;
  case sev_eDataType_Time:
    *mtype = H5Tcreate(H5T_COMPOUND, 8);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_STD_U32LE);
    break;
  case sev_eDataType_TimeHt:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "nvalue", 12, H5T_STD_U32LE);
    break;
  case sev_eDataType_TimeDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_U32LE);
    break;
  case sev_eDataType_TimeHtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "nvalue", 16, H5T_STD_U32LE);
    break;
  case sev_eDataType_DeltaTime:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, H5T_STD_I64LE);
    break;
  case sev_eDataType_DeltaTimeHt:
    *mtype = H5Tcreate(H5T_COMPOUND, 24);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_I64LE);
    hsts = H5Tinsert(*mtype, "nvalue", 16, H5T_STD_I64LE);
    break;
  case sev_eDataType_DeltaTimeDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, H5T_STD_I64LE);
    break;
  case sev_eDataType_DeltaTimeHtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 28);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, H5T_STD_I64LE);
    hsts = H5Tinsert(*mtype, "nvalue", 20, H5T_STD_I64LE);
    break;
  case sev_eDataType_String8:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 8);

    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String8Ht:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 8);

    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String8Db:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 8);

    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String8HtDb:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 8);

    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String16:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 16);

    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String16Ht:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 16);

    *mtype = H5Tcreate(H5T_COMPOUND, 24);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String16Db:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 16);

    *mtype = H5Tcreate(H5T_COMPOUND, 24);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String16HtDb:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 16);

    *mtype = H5Tcreate(H5T_COMPOUND, 28);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String32:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 32);

    *mtype = H5Tcreate(H5T_COMPOUND, 36);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String32Ht:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 32);

    *mtype = H5Tcreate(H5T_COMPOUND, 40);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String32Db:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 32);

    *mtype = H5Tcreate(H5T_COMPOUND, 40);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String32HtDb:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 32);

    *mtype = H5Tcreate(H5T_COMPOUND, 44);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String40:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 40);

    *mtype = H5Tcreate(H5T_COMPOUND, 44);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String40Ht:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 40);

    *mtype = H5Tcreate(H5T_COMPOUND, 48);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String40Db:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 40);

    *mtype = H5Tcreate(H5T_COMPOUND, 48);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String40HtDb:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 40);

    *mtype = H5Tcreate(H5T_COMPOUND, 52);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String80:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 80);

    *mtype = H5Tcreate(H5T_COMPOUND, 84);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String80Ht:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 80);

    *mtype = H5Tcreate(H5T_COMPOUND, 88);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String80Db:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 80);

    *mtype = H5Tcreate(H5T_COMPOUND, 88);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String80HtDb:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 80);

    *mtype = H5Tcreate(H5T_COMPOUND, 92);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String132:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 132);

    *mtype = H5Tcreate(H5T_COMPOUND, 136);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String132Ht:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 132);

    *mtype = H5Tcreate(H5T_COMPOUND, 140);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String132Db:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 132);

    *mtype = H5Tcreate(H5T_COMPOUND, 140);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String132HtDb:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 132);

    *mtype = H5Tcreate(H5T_COMPOUND, 144);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String256:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 256);

    *mtype = H5Tcreate(H5T_COMPOUND, 260);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String256Ht:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 256);

    *mtype = H5Tcreate(H5T_COMPOUND, 264);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String256Db:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 256);

    *mtype = H5Tcreate(H5T_COMPOUND, 264);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String256HtDb:
    str_type = H5Tcopy(H5T_C_S1);
    hsts = H5Tset_size(str_type, 256);

    *mtype = H5Tcreate(H5T_COMPOUND, 268);
    hsts = H5Tinsert(*mtype, "time", 0, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "jump", 8, H5T_STD_U32LE);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  default:
    return 0;
  }

  return 1;
}

int sev_dbhdf5::get_mdatatype(
    sev_eDataType type, unsigned int size, hid_t* mtype)
{
  herr_t hsts;
  hid_t str_type;

  if (m_value_mtype[type]) {
    // Type already created
    *mtype = m_value_mtype[type];
    return 1;
  }

  // Create type
  switch (type) {
  case sev_eDataType_Boolean:
    *mtype = H5Tcreate(H5T_COMPOUND, 8);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_U32);
    break;
  case sev_eDataType_BooleanHt:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U32);
    break;
  case sev_eDataType_BooleanDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U32);
    break;
  case sev_eDataType_BooleanHtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_U32);
    break;
  case sev_eDataType_Int8:
    *mtype = H5Tcreate(H5T_COMPOUND, 5);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_I8);
    break;
  case sev_eDataType_Int8Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 9);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_I8);
    break;
  case sev_eDataType_Int8Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 9);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_I8);
    break;
  case sev_eDataType_Int8HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 13);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_I8);
    break;
  case sev_eDataType_Int16:
    *mtype = H5Tcreate(H5T_COMPOUND, 6);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_I16);
    break;
  case sev_eDataType_Int16Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 10);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_I16);
    break;
  case sev_eDataType_Int16Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 10);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_I16);
    break;
  case sev_eDataType_Int16HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 14);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_I16);
    break;
  case sev_eDataType_Int32:
    *mtype = H5Tcreate(H5T_COMPOUND, 8);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_I32);
    break;
  case sev_eDataType_Int32Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_I32);
    break;
  case sev_eDataType_Int32Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_I32);
    break;
  case sev_eDataType_Int32HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_I32);
    break;
  case sev_eDataType_Int64:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_I64);
    break;
  case sev_eDataType_Int64Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_I64);
    break;
  case sev_eDataType_Int64Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_I64);
    break;
  case sev_eDataType_Int64HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_I64);
    break;
  case sev_eDataType_UInt8:
    *mtype = H5Tcreate(H5T_COMPOUND, 5);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_U8);
    break;
  case sev_eDataType_UInt8Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 9);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U8);
    break;
  case sev_eDataType_UInt8Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 9);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U8);
    break;
  case sev_eDataType_UInt8HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 13);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_U8);
    break;
  case sev_eDataType_UInt16:
    *mtype = H5Tcreate(H5T_COMPOUND, 6);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_U16);
    break;
  case sev_eDataType_UInt16Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 10);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U16);
    break;
  case sev_eDataType_UInt16Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 10);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U16);
    break;
  case sev_eDataType_UInt16HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 14);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_U16);
    break;
  case sev_eDataType_UInt32:
    *mtype = H5Tcreate(H5T_COMPOUND, 8);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_U32);
    break;
  case sev_eDataType_UInt32Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U32);
    break;
  case sev_eDataType_UInt32Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U32);
    break;
  case sev_eDataType_UInt32HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_U32);
    break;
  case sev_eDataType_UInt64:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_U64);
    break;
  case sev_eDataType_UInt64Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U64);
    break;
  case sev_eDataType_UInt64Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U64);
    break;
  case sev_eDataType_UInt64HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_U64);
    break;
  case sev_eDataType_Float32:
    *mtype = H5Tcreate(H5T_COMPOUND, 8);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_F32);
    break;
  case sev_eDataType_Float32Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_F32);
    break;
  case sev_eDataType_Float32Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_F32);
    break;
  case sev_eDataType_Float32HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_F32);
    break;
  case sev_eDataType_Float64:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_F64);
    break;
  case sev_eDataType_Float64Ht:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_F64);
    break;
  case sev_eDataType_Float64Db:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_F64);
    break;
  case sev_eDataType_Float64HtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_F64);
    break;
  case sev_eDataType_Time:
    *mtype = H5Tcreate(H5T_COMPOUND, 8);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_U32);
    break;
  case sev_eDataType_TimeHt:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "nvalue", 12, H5_U32);
    break;
  case sev_eDataType_TimeDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_U32);
    break;
  case sev_eDataType_TimeHtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_U32);
    hsts = H5Tinsert(*mtype, "nvalue", 16, H5_U32);
    break;
  case sev_eDataType_DeltaTime:
    *mtype = H5Tcreate(H5T_COMPOUND, 8);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, H5_I64);
    break;
  case sev_eDataType_DeltaTimeHt:
    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_I64);
    hsts = H5Tinsert(*mtype, "nvalue", 12, H5_I64);
    break;
  case sev_eDataType_DeltaTimeDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, H5_I64);
    break;
  case sev_eDataType_DeltaTimeHtDb:
    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, H5_I64);
    hsts = H5Tinsert(*mtype, "nvalue", 16, H5_I64);
    break;
  case sev_eDataType_String8:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 8);

    *mtype = H5Tcreate(H5T_COMPOUND, 12);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String8Ht:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 8);

    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String8Db:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 8);

    *mtype = H5Tcreate(H5T_COMPOUND, 16);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String8HtDb:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 8);

    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String16:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 16);

    *mtype = H5Tcreate(H5T_COMPOUND, 20);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String16Ht:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 16);

    *mtype = H5Tcreate(H5T_COMPOUND, 24);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String16Db:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 16);

    *mtype = H5Tcreate(H5T_COMPOUND, 24);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String16HtDb:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 16);

    *mtype = H5Tcreate(H5T_COMPOUND, 28);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String32:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 32);

    *mtype = H5Tcreate(H5T_COMPOUND, 36);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String32Ht:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 32);

    *mtype = H5Tcreate(H5T_COMPOUND, 40);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String32Db:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 32);

    *mtype = H5Tcreate(H5T_COMPOUND, 40);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String32HtDb:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 32);

    *mtype = H5Tcreate(H5T_COMPOUND, 44);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String40:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 40);

    *mtype = H5Tcreate(H5T_COMPOUND, 44);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String40Ht:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 40);

    *mtype = H5Tcreate(H5T_COMPOUND, 48);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String40Db:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 40);

    *mtype = H5Tcreate(H5T_COMPOUND, 48);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String40HtDb:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 40);

    *mtype = H5Tcreate(H5T_COMPOUND, 52);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String80:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 80);

    *mtype = H5Tcreate(H5T_COMPOUND, 84);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String80Ht:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 80);

    *mtype = H5Tcreate(H5T_COMPOUND, 88);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String80Db:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 80);

    *mtype = H5Tcreate(H5T_COMPOUND, 88);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String80HtDb:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 80);

    *mtype = H5Tcreate(H5T_COMPOUND, 92);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String132:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 132);

    *mtype = H5Tcreate(H5T_COMPOUND, 136);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String132Ht:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 132);

    *mtype = H5Tcreate(H5T_COMPOUND, 140);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String132Db:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 132);

    *mtype = H5Tcreate(H5T_COMPOUND, 140);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String132HtDb:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 132);

    *mtype = H5Tcreate(H5T_COMPOUND, 144);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String256:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 256);

    *mtype = H5Tcreate(H5T_COMPOUND, 260);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 4, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String256Ht:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 256);

    *mtype = H5Tcreate(H5T_COMPOUND, 264);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String256Db:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 256);

    *mtype = H5Tcreate(H5T_COMPOUND, 264);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 8, str_type);
    hsts = H5Tclose(str_type);
    break;
  case sev_eDataType_String256HtDb:
    str_type = H5Tcopy(H5_S1);
    hsts = H5Tset_size(str_type, 256);

    *mtype = H5Tcreate(H5T_COMPOUND, 268);
    hsts = H5Tinsert(*mtype, "time", 0, H5_U32);
    hsts = H5Tinsert(*mtype, "ntime", 4, H5_U32);
    hsts = H5Tinsert(*mtype, "jump", 8, H5_U32);
    hsts = H5Tinsert(*mtype, "value", 12, str_type);
    hsts = H5Tclose(str_type);
    break;
  default:
    return 0;
  }

  m_value_mtype[type] = *mtype;
  return 1;
}

void sev_dbhdf5::free_mdatatype()
{
  for (int i = 0; i < sev_eDataType__; i++) {
    if (m_value_mtype[i]) {
      H5Tclose(m_value_mtype[i]);
      m_value_mtype[i] = 0;
    }
  }
}

int sev_dbhdf5::create_table(pwr_tStatus* sts, char* tablename, pwr_eType type,
    unsigned int size, pwr_tMask options, float deadband,
    pwr_tDeltaTime storage_time, pwr_tFloat32 scantime)
{
  unsigned int table_len
      = int((pwr_tFloat32(storage_time.tv_sec) / scantime + 0.5));
  char gname[200], dname[200];
  herr_t hsts;
  hsize_t dim, max_dim;
  hid_t table_ftype;

  sev_eDataType dtype = get_datatype(type, options, size);
  if (dtype == sev_eDataType_Unknown)
    return 0;

  get_fdatatype(dtype, size, &table_ftype);

  // Create dataset
  strcpy(gname, cName_Tables);
  strcat(gname, "/");
  strcat(gname, tablename);
  hid_t group_id
      = H5Gcreate2(m_file, gname, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

  strcpy(dname, gname);
  strcat(dname, cName_Data);
  dim = table_len;
  max_dim = H5S_UNLIMITED;
  hid_t properties = H5Pcreate(H5P_DATASET_CREATE);
  hsts = H5Pset_chunk(properties, 1, &dim);
  hid_t dataspace_id = H5Screate_simple(1, &dim, &max_dim);
  hid_t dataset_id = H5Dcreate2(m_file, dname, table_ftype, dataspace_id,
      H5P_DEFAULT, properties, H5P_DEFAULT);

  H5Pclose(properties);
  H5Sclose(dataspace_id);
  H5Dclose(dataset_id);

  hid_t header_ftype = H5Tcreate(H5T_COMPOUND, 24);
  hsts = H5Tinsert(header_ftype, "data_size", 0, H5T_STD_U32LE);
  hsts = H5Tinsert(header_ftype, "data_type", 4, H5T_STD_I32LE);
  hsts = H5Tinsert(header_ftype, "first_idx", 8, H5T_STD_I32LE);
  hsts = H5Tinsert(header_ftype, "last_idx", 12, H5T_STD_I32LE);
  hsts = H5Tinsert(header_ftype, "first_time", 16, H5T_STD_U32LE);
  hsts = H5Tinsert(header_ftype, "last_time", 20, H5T_STD_U32LE);

  strcpy(dname, gname);
  strcat(dname, cName_Header);
  dim = 1;
  dataspace_id = H5Screate_simple(1, &dim, 0);
  dataset_id = H5Dcreate2(m_file, dname, header_ftype, dataspace_id,
      H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

  sev_sHeader header;
  header.data_size = table_len;
  header.data_type = dtype;
  header.first_idx = -1;
  header.last_idx = -1;
  header.first_time = 0;
  header.last_time = 0;

  hsts = H5Dwrite(
      dataset_id, m_header_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &header);

  H5Sclose(dataspace_id);
  H5Dclose(dataset_id);
  H5Gclose(group_id);
  H5Tclose(header_ftype);
  H5Tclose(table_ftype);

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);
  return 1;
}

// Delete a table.
// Note, only the links are deleted. The space is not retrieved.
//
int sev_dbhdf5::delete_table(pwr_tStatus* sts, char* tablename)
{
  herr_t hsts;
  char gname[200], dname[200];

  strcpy(gname, cName_Tables);
  strcat(gname, "/");
  strcat(gname, tablename);

  strcpy(dname, gname);
  strcat(dname, cName_Header);
  hsts = H5Ldelete(m_file, dname, H5P_DEFAULT);

  strcpy(dname, gname);
  strcat(dname, cName_Data);
  hsts = H5Ldelete(m_file, dname, H5P_DEFAULT);

  hsts = H5Ldelete(m_file, gname, H5P_DEFAULT);
  return 1;
}

int sev_dbhdf5::create_event_table(pwr_tStatus* sts, char* tablename,
    pwr_tMask options, pwr_tDeltaTime storage_time, pwr_tFloat32 scantime)
{
  unsigned int table_len = int(scantime);
  char gname[200], dname[200];
  herr_t hsts;
  hsize_t dim, max_dim;
  hid_t table_ftype;

  hid_t str_type80 = H5Tcopy(H5T_C_S1);
  hsts = H5Tset_size(str_type80, 80);

  table_ftype = H5Tcreate(H5T_COMPOUND, 188);
  hsts = H5Tinsert(table_ftype, "time", 0, H5T_STD_U32LE);
  hsts = H5Tinsert(table_ftype, "ntime", 4, H5T_STD_U32LE);
  hsts = H5Tinsert(table_ftype, "eventtype", 8, H5T_STD_I32LE);
  hsts = H5Tinsert(table_ftype, "eventprio", 12, H5T_STD_I32LE);
  hsts = H5Tinsert(table_ftype, "eventid_nix", 16, H5T_STD_U32LE);
  hsts = H5Tinsert(table_ftype, "eventid_birthtime", 20, H5T_STD_U32LE);
  hsts = H5Tinsert(table_ftype, "eventid_idx", 24, H5T_STD_U32LE);
  hsts = H5Tinsert(table_ftype, "eventtext", 28, str_type80);
  hsts = H5Tinsert(table_ftype, "eventname", 108, str_type80);

  H5Tclose(str_type80);

  // Create dataset
  strcpy(gname, cName_Tables);
  strcat(gname, "/");
  strcat(gname, tablename);
  hid_t group_id
      = H5Gcreate2(m_file, gname, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

  strcpy(dname, gname);
  strcat(dname, cName_Data);
  dim = table_len;
  max_dim = H5S_UNLIMITED;
  hid_t properties = H5Pcreate(H5P_DATASET_CREATE);
  hsts = H5Pset_chunk(properties, 1, &dim);
  hid_t dataspace_id = H5Screate_simple(1, &dim, &max_dim);
  hid_t dataset_id = H5Dcreate2(m_file, dname, table_ftype, dataspace_id,
      H5P_DEFAULT, properties, H5P_DEFAULT);

  H5Pclose(properties);
  H5Sclose(dataspace_id);
  H5Dclose(dataset_id);

  hid_t header_ftype = H5Tcreate(H5T_COMPOUND, 24);
  hsts = H5Tinsert(header_ftype, "data_size", 0, H5T_STD_U32LE);
  hsts = H5Tinsert(header_ftype, "data_type", 4, H5T_STD_I32LE);
  hsts = H5Tinsert(header_ftype, "first_idx", 8, H5T_STD_I32LE);
  hsts = H5Tinsert(header_ftype, "last_idx", 12, H5T_STD_I32LE);
  hsts = H5Tinsert(header_ftype, "first_time", 16, H5T_STD_U32LE);
  hsts = H5Tinsert(header_ftype, "last_time", 20, H5T_STD_U32LE);

  strcpy(dname, gname);
  strcat(dname, cName_Header);
  dim = 1;
  dataspace_id = H5Screate_simple(1, &dim, 0);
  dataset_id = H5Dcreate2(m_file, dname, header_ftype, dataspace_id,
      H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

  sev_sHeader header;
  header.data_size = table_len;
  header.data_type = sev_eDataType_;
  header.first_idx = -1;
  header.last_idx = -1;
  header.first_time = 0;
  header.last_time = 0;

  hsts = H5Dwrite(
      dataset_id, m_header_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &header);

  H5Sclose(dataspace_id);
  H5Dclose(dataset_id);
  H5Gclose(group_id);
  H5Tclose(header_ftype);
  H5Tclose(table_ftype);

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);
  return 1;
}

int sev_dbhdf5::delete_event_table(pwr_tStatus* sts, char* tablename)
{
  herr_t hsts;
  char gname[200], dname[200];

  strcpy(gname, cName_Tables);
  strcat(gname, "/");
  strcat(gname, tablename);

  strcpy(dname, gname);
  strcat(dname, cName_Header);
  hsts = H5Ldelete(m_file, dname, H5P_DEFAULT);

  strcpy(dname, gname);
  strcat(dname, cName_Data);
  hsts = H5Ldelete(m_file, dname, H5P_DEFAULT);

  hsts = H5Ldelete(m_file, gname, H5P_DEFAULT);
  return 1;
}

int sev_dbhdf5::items_extend()
{
  hid_t dataset_id = H5Dopen2(m_file, cName_Dir cName_Items, H5P_DEFAULT);
  hsize_t dim = m_cmn.items_alloc + m_cItemsExtendSize;
  herr_t hsts = H5Dset_extent(dataset_id, &dim);
  m_cmn.items_alloc += m_cItemsExtendSize;
  write_cmn();

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);

  return 1;
}

int sev_dbhdf5::objectitems_extend()
{
  hid_t dataset_id = H5Dopen2(m_file, cName_Dir cName_ObjectItems, H5P_DEFAULT);
  hsize_t dim = m_cmn.objectitems_alloc + m_cItemsExtendSize;
  herr_t hsts = H5Dset_extent(dataset_id, &dim);
  m_cmn.objectitems_alloc += m_cItemsExtendSize;
  write_cmn();

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);

  return 1;
}

int sev_dbhdf5::objectitemattr_extend()
{
  hid_t dataset_id
      = H5Dopen2(m_file, cName_Dir cName_ObjectItemAttributes, H5P_DEFAULT);
  hsize_t dim = m_cmn.objectitemattr_alloc + m_cItemsExtendSize;
  herr_t hsts = H5Dset_extent(dataset_id, &dim);
  m_cmn.objectitemattr_alloc += m_cItemsExtendSize;
  write_cmn();

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);

  return 1;
}

int sev_dbhdf5::store_item(pwr_tStatus* sts, char* tablename, pwr_tOid oid,
    char* oname, char* aname, pwr_tDeltaTime storagetime, pwr_eType vtype,
    unsigned int vsize, char* description, char* unit, pwr_tFloat32 scantime,
    pwr_tFloat32 deadband, pwr_tMask options, unsigned int* idx)
{
  sev_sItem item;
  pwr_tTime current_time;
  herr_t hsts;

  if (m_cmn.next_items_idx >= m_cmn.items_alloc) {
    // Extend items dataset
    items_extend();
  }

  time_GetTime(&current_time);

  sprintf(tablename, "%s_%d", oid_to_table(oid, (char*)""), m_cmn.next_item_id);

  item.id = m_cmn.next_item_id;
  strncpy(item.tablename, tablename, sizeof(item.tablename));
  item.vid = oid.vid;
  item.oix = oid.oix;
  strncpy(item.oname, oname, sizeof(item.oname));
  strncpy(item.aname, aname, sizeof(item.aname));
  item.creatime = current_time.tv_sec;
  item.storagetime = storagetime.tv_sec;
  item.deadband = deadband;
  item.options = options;
  item.scantime = scantime;
  strncpy(item.description, description, sizeof(item.description));
  item.vtype = vtype;
  item.vsize = vsize;
  strncpy(item.unit, unit, sizeof(item.unit));
  item.deleted = 0;

  // Create the data space for the dataset.
  hsize_t dim = 1;
  hsize_t offset = m_cmn.next_items_idx;
  hsize_t count = dim;
  hsize_t stride = 1;
  hsize_t block = 1;

  hid_t dataset_id = H5Dopen2(m_file, cName_Dir cName_Items, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  hsts = H5Sselect_hyperslab(
      dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

  // Write the dataset
  hsts = H5Dwrite(
      dataset_id, m_item_mtype, memspace_id, dataspace_id, H5P_DEFAULT, &item);

  *idx = m_cmn.next_items_idx;
  m_cmn.next_items_idx++;
  m_cmn.next_item_id++;
  write_cmn();

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);

  // Close the dataset
  hsts = H5Sclose(memspace_id);
  hsts = H5Sclose(dataspace_id);
  hsts = H5Dclose(dataset_id);

  *sts = SEV__SUCCESS;
  return 1;
}

int sev_dbhdf5::update_item(sev_item* item)
{
  sev_sItem ritem;
  herr_t hsts;

  hsize_t dim = 1;
  hsize_t offset = item->idx;
  hsize_t count = dim;
  hsize_t stride = 1;
  hsize_t block = 1;

  hid_t dataset_id = H5Dopen2(m_file, cName_Dir cName_Items, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  hsts = H5Sselect_hyperslab(
      dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

  // Read the dataset
  hsts = H5Dwrite(
      dataset_id, m_item_mtype, memspace_id, dataspace_id, H5P_DEFAULT, &ritem);

  ritem.id = item->id;
  strncpy(ritem.tablename, item->tablename, sizeof(ritem.tablename));
  ritem.vid = item->oid.vid;
  ritem.oix = item->oid.oix;
  strncpy(ritem.oname, item->oname, sizeof(ritem.oname));
  strncpy(ritem.aname, item->attr[0].aname, sizeof(ritem.aname));
  ritem.uptime = item->modtime.tv_sec;
  ritem.creatime = item->creatime.tv_sec;
  ritem.storagetime = item->storagetime.tv_sec;
  ritem.deadband = item->deadband;
  ritem.options = item->options;
  ritem.scantime = item->scantime;
  strncpy(ritem.description, item->description, sizeof(ritem.description));
  ritem.vtype = item->attr[0].type;
  ritem.vsize = item->attr[0].size;
  strncpy(ritem.unit, item->attr[0].unit, sizeof(ritem.unit));
  ritem.deleted = item->deleted;

  // Create the data space for the dataset.
  // Write the dataset
  hsts = H5Dwrite(
      dataset_id, m_item_mtype, memspace_id, dataspace_id, H5P_DEFAULT, &item);

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);

  // Close the dataset
  hsts = H5Sclose(memspace_id);
  hsts = H5Sclose(dataspace_id);
  hsts = H5Dclose(dataset_id);

  return 1;
}

int sev_dbhdf5::remove_item(pwr_tStatus* sts, pwr_tOid oid, char* aname)
{
  return 1;
}

int sev_dbhdf5::get_items(pwr_tStatus* sts)
{
  sev_sItem ritem;
  herr_t hsts;

  m_items.clear();

  hsize_t dim = 1;
  hid_t dataset_id = H5Dopen2(m_file, cName_Dir cName_Items, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  for (int idx = 0; idx < m_cmn.next_items_idx; idx++) {
    // Create the data space for the dataset.
    hsize_t offset = idx;
    hsize_t count = dim;
    hsize_t stride = 1;
    hsize_t block = 1;

    hsts = H5Sselect_hyperslab(
        dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

    // Read the dataset
    hsts = H5Dread(dataset_id, m_item_mtype, memspace_id, dataspace_id,
        H5P_DEFAULT, &ritem);

    if (ritem.deleted == 1 || ritem.vid == 0)
      continue;

    sev_item item;
    sev_attr attr;
    item.attr.push_back(attr);

    item.id = ritem.id;
    strncpy(item.tablename, ritem.tablename, sizeof(item.tablename));
    item.oid.vid = ritem.vid;
    item.oid.oix = ritem.oix;
    strncpy(item.oname, ritem.oname, sizeof(item.oname));
    strncpy(item.attr[0].aname, ritem.aname, sizeof(item.attr[0].aname));
    item.modtime.tv_sec = ritem.uptime;
    item.modtime.tv_nsec = 0;
    item.creatime.tv_sec = ritem.creatime;
    item.creatime.tv_nsec = 0;
    item.storagetime.tv_sec = ritem.storagetime;
    item.storagetime.tv_nsec = 0;
    item.attr[0].type = (pwr_eType)ritem.vtype;
    item.attr[0].size = ritem.vsize;
    strncpy(item.description, ritem.description, sizeof(item.description));
    strncpy(item.attr[0].unit, ritem.unit, sizeof(item.attr[0].unit));
    item.scantime = ritem.scantime;
    item.deadband = ritem.deadband;
    item.options = ritem.options;

    item.attrnum = 1;

    m_items.push_back(item);
  }

  *sts = SEV__SUCCESS;

  return 1;
}

int sev_dbhdf5::store_value(pwr_tStatus* sts, void* thread, int item_idx,
    int attr_idx, pwr_tTime time, void* buf, unsigned int size)
{
  sev_uDataType data;
  sev_sHeader header;
  herr_t hsts;
  hid_t mdatatype;
  char gname[80], dname[80], tname[80];

  if (streq(m_items[item_idx].attr[0].aname, "Events"))
    return 1;
  if (m_items[item_idx].attrnum > 1) {
    return store_objectvalue(
        sts, item_idx, attr_idx, time, buf, m_items[item_idx].old_value, size);
  }

  // Read header
  strcpy(gname, cName_Tables);
  strcat(gname, "/");
  strcat(gname, m_items[item_idx].tablename);
  strcpy(dname, gname);
  strcat(dname, cName_Header);

  hid_t dataset_id = H5Dopen2(m_file, dname, H5P_DEFAULT);
  if (dataset_id == -1)
    return SEV__NOSUCHTABLE;

  hsts = H5Dread(
      dataset_id, m_header_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &header);

  if (header.first_idx == -1) {
    header.first_idx = 0;
    header.last_idx = 0;
  } else {
    header.last_idx++;
    if (header.last_idx >= (int)header.data_size)
      header.last_idx = 0;
    if (header.last_idx == header.first_idx) {
      header.first_idx++;
      if (header.first_idx >= (int)header.data_size)
        header.first_idx = 0;
    }
  }

  header.last_time = time.tv_sec;
  hsts = H5Dwrite(
      dataset_id, m_header_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &header);
  H5Dclose(dataset_id);

  switch (header.data_type) {
  case sev_eDataType_Boolean: {
    data.dtBoolean.time = time.tv_sec;
    data.dtBoolean.value = *(pwr_tBoolean*)buf;
    break;
  }
  case sev_eDataType_BooleanHt: {
    data.dtBooleanHt.time = time.tv_sec;
    data.dtBooleanHt.ntime = time.tv_nsec;
    data.dtBooleanHt.value = *(pwr_tBoolean*)buf;
    break;
  }
  case sev_eDataType_BooleanDb: {
    data.dtBooleanDb.time = time.tv_sec;
    data.dtBooleanDb.jump = 0;
    data.dtBooleanDb.value = *(pwr_tBoolean*)buf;
    break;
  }
  case sev_eDataType_BooleanHtDb: {
    data.dtBooleanHtDb.time = time.tv_sec;
    data.dtBooleanHtDb.ntime = time.tv_nsec;
    data.dtBooleanHtDb.jump = 0;
    data.dtBooleanHtDb.value = *(pwr_tBoolean*)buf;
    break;
  }
  case sev_eDataType_Int8: {
    data.dtInt8.time = time.tv_sec;
    data.dtInt8.value = *(pwr_tInt8*)buf;
    break;
  }
  case sev_eDataType_Int8Ht: {
    data.dtInt8Ht.time = time.tv_sec;
    data.dtInt8Ht.ntime = time.tv_nsec;
    data.dtInt8Ht.value = *(pwr_tInt8*)buf;
    break;
  }
  case sev_eDataType_Int8Db: {
    data.dtInt8Db.time = time.tv_sec;
    data.dtInt8Db.jump = 0;
    data.dtInt8Db.value = *(pwr_tInt8*)buf;
    break;
  }
  case sev_eDataType_Int8HtDb: {
    data.dtInt8HtDb.time = time.tv_sec;
    data.dtInt8HtDb.ntime = time.tv_nsec;
    data.dtInt8HtDb.jump = 0;
    data.dtInt8HtDb.value = *(pwr_tInt8*)buf;
    break;
  }
  case sev_eDataType_Int16: {
    data.dtInt16.time = time.tv_sec;
    data.dtInt16.value = *(pwr_tInt16*)buf;
    break;
  }
  case sev_eDataType_Int16Ht: {
    data.dtInt16Ht.time = time.tv_sec;
    data.dtInt16Ht.ntime = time.tv_nsec;
    data.dtInt16Ht.value = *(pwr_tInt16*)buf;
    break;
  }
  case sev_eDataType_Int16Db: {
    data.dtInt16Db.time = time.tv_sec;
    data.dtInt16Db.jump = 0;
    data.dtInt16Db.value = *(pwr_tInt16*)buf;
    break;
  }
  case sev_eDataType_Int16HtDb: {
    data.dtInt16HtDb.time = time.tv_sec;
    data.dtInt16HtDb.ntime = time.tv_nsec;
    data.dtInt16HtDb.jump = 0;
    data.dtInt16HtDb.value = *(pwr_tInt16*)buf;
    break;
  }
  case sev_eDataType_Int32: {
    data.dtInt32.time = time.tv_sec;
    data.dtInt32.value = *(pwr_tInt32*)buf;
    break;
  }
  case sev_eDataType_Int32Ht: {
    data.dtInt32Ht.time = time.tv_sec;
    data.dtInt32Ht.ntime = time.tv_nsec;
    data.dtInt32Ht.value = *(pwr_tInt32*)buf;
    break;
  }
  case sev_eDataType_Int32Db: {
    data.dtInt32Db.time = time.tv_sec;
    data.dtInt32Db.jump = 0;
    data.dtInt32Db.value = *(pwr_tInt32*)buf;
    break;
  }
  case sev_eDataType_Int32HtDb: {
    data.dtInt32HtDb.time = time.tv_sec;
    data.dtInt32HtDb.ntime = time.tv_nsec;
    data.dtInt32HtDb.jump = 0;
    data.dtInt32HtDb.value = *(pwr_tInt32*)buf;
    break;
  }
  case sev_eDataType_Int64: {
    data.dtInt64.time = time.tv_sec;
    data.dtInt64.value = *(pwr_tInt64*)buf;
    break;
  }
  case sev_eDataType_Int64Ht: {
    data.dtInt64Ht.time = time.tv_sec;
    data.dtInt64Ht.ntime = time.tv_nsec;
    data.dtInt64Ht.value = *(pwr_tInt64*)buf;
    break;
  }
  case sev_eDataType_Int64Db: {
    data.dtInt64Db.time = time.tv_sec;
    data.dtInt64Db.jump = 0;
    data.dtInt64Db.value = *(pwr_tInt64*)buf;
    break;
  }
  case sev_eDataType_Int64HtDb: {
    data.dtInt64HtDb.time = time.tv_sec;
    data.dtInt64HtDb.ntime = time.tv_nsec;
    data.dtInt64HtDb.jump = 0;
    data.dtInt64HtDb.value = *(pwr_tInt64*)buf;
    break;
  }
  case sev_eDataType_UInt8: {
    data.dtUInt8.time = time.tv_sec;
    data.dtUInt8.value = *(pwr_tUInt8*)buf;
    break;
  }
  case sev_eDataType_UInt8Ht: {
    data.dtUInt8Ht.time = time.tv_sec;
    data.dtUInt8Ht.ntime = time.tv_nsec;
    data.dtUInt8Ht.value = *(pwr_tUInt8*)buf;
    break;
  }
  case sev_eDataType_UInt8Db: {
    data.dtUInt8Db.time = time.tv_sec;
    data.dtUInt8Db.jump = 0;
    data.dtUInt8Db.value = *(pwr_tUInt8*)buf;
    break;
  }
  case sev_eDataType_UInt8HtDb: {
    data.dtUInt8HtDb.time = time.tv_sec;
    data.dtUInt8HtDb.ntime = time.tv_nsec;
    data.dtUInt8HtDb.jump = 0;
    data.dtUInt8HtDb.value = *(pwr_tUInt8*)buf;
    break;
  }
  case sev_eDataType_UInt16: {
    data.dtUInt16.time = time.tv_sec;
    data.dtUInt16.value = *(pwr_tUInt16*)buf;
    break;
  }
  case sev_eDataType_UInt16Ht: {
    data.dtUInt16Ht.time = time.tv_sec;
    data.dtUInt16Ht.ntime = time.tv_nsec;
    data.dtUInt16Ht.value = *(pwr_tUInt16*)buf;
    break;
  }
  case sev_eDataType_UInt16Db: {
    data.dtUInt16Db.time = time.tv_sec;
    data.dtUInt16Db.jump = 0;
    data.dtUInt16Db.value = *(pwr_tUInt16*)buf;
    break;
  }
  case sev_eDataType_UInt16HtDb: {
    data.dtUInt16HtDb.time = time.tv_sec;
    data.dtUInt16HtDb.ntime = time.tv_nsec;
    data.dtUInt16HtDb.jump = 0;
    data.dtUInt16HtDb.value = *(pwr_tUInt16*)buf;
    break;
  }
  case sev_eDataType_UInt32: {
    data.dtUInt32.time = time.tv_sec;
    data.dtUInt32.value = *(pwr_tUInt32*)buf;
    break;
  }
  case sev_eDataType_UInt32Ht: {
    data.dtUInt32Ht.time = time.tv_sec;
    data.dtUInt32Ht.ntime = time.tv_nsec;
    data.dtUInt32Ht.value = *(pwr_tUInt32*)buf;
    break;
  }
  case sev_eDataType_UInt32Db: {
    data.dtUInt32Db.time = time.tv_sec;
    data.dtUInt32Db.jump = 0;
    data.dtUInt32Db.value = *(pwr_tUInt32*)buf;
    break;
  }
  case sev_eDataType_UInt32HtDb: {
    data.dtUInt32HtDb.time = time.tv_sec;
    data.dtUInt32HtDb.ntime = time.tv_nsec;
    data.dtUInt32HtDb.jump = 0;
    data.dtUInt32HtDb.value = *(pwr_tUInt32*)buf;
    break;
  }
  case sev_eDataType_UInt64: {
    data.dtUInt64.time = time.tv_sec;
    data.dtUInt64.value = *(pwr_tUInt64*)buf;
    break;
  }
  case sev_eDataType_UInt64Ht: {
    data.dtUInt64Ht.time = time.tv_sec;
    data.dtUInt64Ht.ntime = time.tv_nsec;
    data.dtUInt64Ht.value = *(pwr_tUInt64*)buf;
    break;
  }
  case sev_eDataType_UInt64Db: {
    data.dtUInt64Db.time = time.tv_sec;
    data.dtUInt64Db.jump = 0;
    data.dtUInt64Db.value = *(pwr_tUInt64*)buf;
    break;
  }
  case sev_eDataType_UInt64HtDb: {
    data.dtUInt64HtDb.time = time.tv_sec;
    data.dtUInt64HtDb.ntime = time.tv_nsec;
    data.dtUInt64HtDb.jump = 0;
    data.dtUInt64HtDb.value = *(pwr_tUInt64*)buf;
    break;
  }
  case sev_eDataType_Float32: {
    data.dtFloat32.time = time.tv_sec;
    data.dtFloat32.value = *(pwr_tFloat32*)buf;
    break;
  }
  case sev_eDataType_Float32Ht: {
    data.dtFloat32Ht.time = time.tv_sec;
    data.dtFloat32Ht.ntime = time.tv_nsec;
    data.dtFloat32Ht.value = *(pwr_tFloat32*)buf;
    break;
  }
  case sev_eDataType_Float32Db: {
    data.dtFloat32Db.time = time.tv_sec;
    data.dtFloat32Db.jump = 0;
    data.dtFloat32Db.value = *(pwr_tFloat32*)buf;
    break;
  }
  case sev_eDataType_Float32HtDb: {
    data.dtFloat32HtDb.time = time.tv_sec;
    data.dtFloat32HtDb.ntime = time.tv_nsec;
    data.dtFloat32HtDb.jump = 0;
    data.dtFloat32HtDb.value = *(pwr_tFloat32*)buf;
    break;
  }
  case sev_eDataType_Float64: {
    data.dtFloat64.time = time.tv_sec;
    data.dtFloat64.value = *(pwr_tFloat64*)buf;
    break;
  }
  case sev_eDataType_Float64Ht: {
    data.dtFloat64Ht.time = time.tv_sec;
    data.dtFloat64Ht.ntime = time.tv_nsec;
    data.dtFloat64Ht.value = *(pwr_tFloat64*)buf;
    break;
  }
  case sev_eDataType_Float64Db: {
    data.dtFloat64Db.time = time.tv_sec;
    data.dtFloat64Db.jump = 0;
    data.dtFloat64Db.value = *(pwr_tFloat64*)buf;
    break;
  }
  case sev_eDataType_Float64HtDb: {
    data.dtFloat64HtDb.time = time.tv_sec;
    data.dtFloat64HtDb.ntime = time.tv_nsec;
    data.dtFloat64HtDb.jump = 0;
    data.dtFloat64HtDb.value = *(pwr_tFloat64*)buf;
    break;
  }
  case sev_eDataType_Time: {
    data.dtTime.time = time.tv_sec;
    data.dtTime.value = ((pwr_tTime*)buf)->tv_sec;
    break;
  }
  case sev_eDataType_TimeHt: {
    data.dtTimeHt.time = time.tv_sec;
    data.dtTimeHt.ntime = time.tv_nsec;
    data.dtTimeHt.value = ((pwr_tTime*)buf)->tv_sec;
    data.dtTimeHt.nvalue = ((pwr_tTime*)buf)->tv_nsec;
    break;
  }
  case sev_eDataType_TimeDb: {
    data.dtTimeDb.time = time.tv_sec;
    data.dtTimeDb.jump = 0;
    data.dtTimeDb.value = ((pwr_tTime*)buf)->tv_sec;
    break;
  }
  case sev_eDataType_TimeHtDb: {
    data.dtTimeHtDb.time = time.tv_sec;
    data.dtTimeHtDb.ntime = time.tv_nsec;
    data.dtTimeHtDb.jump = 0;
    data.dtTimeHtDb.value = ((pwr_tTime*)buf)->tv_sec;
    data.dtTimeHtDb.nvalue = ((pwr_tTime*)buf)->tv_nsec;
    break;
  }
  case sev_eDataType_DeltaTime: {
    data.dtDeltaTime.time = time.tv_sec;
    data.dtDeltaTime.value = ((pwr_tDeltaTime*)buf)->tv_sec;
    break;
  }
  case sev_eDataType_DeltaTimeHt: {
    data.dtDeltaTimeHt.time = time.tv_sec;
    data.dtDeltaTimeHt.ntime = time.tv_nsec;
    data.dtDeltaTimeHt.value = ((pwr_tDeltaTime*)buf)->tv_sec;
    data.dtDeltaTimeHt.nvalue = ((pwr_tDeltaTime*)buf)->tv_nsec;
    break;
  }
  case sev_eDataType_DeltaTimeDb: {
    data.dtDeltaTimeDb.time = time.tv_sec;
    data.dtDeltaTimeDb.jump = 0;
    data.dtDeltaTimeDb.value = ((pwr_tDeltaTime*)buf)->tv_sec;
    break;
  }
  case sev_eDataType_DeltaTimeHtDb: {
    data.dtDeltaTimeHtDb.time = time.tv_sec;
    data.dtDeltaTimeHtDb.ntime = time.tv_nsec;
    data.dtDeltaTimeHtDb.jump = 0;
    data.dtDeltaTimeHtDb.value = ((pwr_tDeltaTime*)buf)->tv_sec;
    data.dtDeltaTimeHtDb.nvalue = ((pwr_tDeltaTime*)buf)->tv_nsec;
    break;
  }
  case sev_eDataType_String8: {
    data.dtString8.time = time.tv_sec;
    strncpy(data.dtString8.value, (char*)buf, sizeof(data.dtString8.value));
    break;
  }
  case sev_eDataType_String8Ht: {
    data.dtString8Ht.time = time.tv_sec;
    data.dtString8Ht.ntime = time.tv_nsec;
    strncpy(data.dtString8.value, (char*)buf, sizeof(data.dtString8.value));
    break;
  }
  case sev_eDataType_String8Db: {
    data.dtString8Db.time = time.tv_sec;
    data.dtString8Db.jump = 0;
    strncpy(data.dtString8.value, (char*)buf, sizeof(data.dtString8.value));
    break;
  }
  case sev_eDataType_String8HtDb: {
    data.dtString8HtDb.time = time.tv_sec;
    data.dtString8HtDb.ntime = time.tv_nsec;
    data.dtString8HtDb.jump = 0;
    strncpy(data.dtString8.value, (char*)buf, sizeof(data.dtString8.value));
    break;
  }
  case sev_eDataType_String16: {
    data.dtString16.time = time.tv_sec;
    strncpy(data.dtString16.value, (char*)buf, sizeof(data.dtString16.value));
    break;
  }
  case sev_eDataType_String16Ht: {
    data.dtString16Ht.time = time.tv_sec;
    data.dtString16Ht.ntime = time.tv_nsec;
    strncpy(data.dtString16.value, (char*)buf, sizeof(data.dtString16.value));
    break;
  }
  case sev_eDataType_String16Db: {
    data.dtString16Db.time = time.tv_sec;
    data.dtString16Db.jump = 0;
    strncpy(data.dtString16.value, (char*)buf, sizeof(data.dtString16.value));
    break;
  }
  case sev_eDataType_String16HtDb: {
    data.dtString16HtDb.time = time.tv_sec;
    data.dtString16HtDb.ntime = time.tv_nsec;
    data.dtString16HtDb.jump = 0;
    strncpy(data.dtString16.value, (char*)buf, sizeof(data.dtString16.value));
    break;
  }
  case sev_eDataType_String32: {
    data.dtString32.time = time.tv_sec;
    strncpy(data.dtString32.value, (char*)buf, sizeof(data.dtString32.value));
    break;
  }
  case sev_eDataType_String32Ht: {
    data.dtString32Ht.time = time.tv_sec;
    data.dtString32Ht.ntime = time.tv_nsec;
    strncpy(data.dtString32.value, (char*)buf, sizeof(data.dtString32.value));
    break;
  }
  case sev_eDataType_String32Db: {
    data.dtString32Db.time = time.tv_sec;
    data.dtString32Db.jump = 0;
    strncpy(data.dtString32.value, (char*)buf, sizeof(data.dtString32.value));
    break;
  }
  case sev_eDataType_String32HtDb: {
    data.dtString32HtDb.time = time.tv_sec;
    data.dtString32HtDb.ntime = time.tv_nsec;
    data.dtString32HtDb.jump = 0;
    strncpy(data.dtString32.value, (char*)buf, sizeof(data.dtString32.value));
    break;
  }
  case sev_eDataType_String40: {
    data.dtString40.time = time.tv_sec;
    strncpy(data.dtString40.value, (char*)buf, sizeof(data.dtString40.value));
    break;
  }
  case sev_eDataType_String40Ht: {
    data.dtString40Ht.time = time.tv_sec;
    data.dtString40Ht.ntime = time.tv_nsec;
    strncpy(data.dtString40.value, (char*)buf, sizeof(data.dtString40.value));
    break;
  }
  case sev_eDataType_String40Db: {
    data.dtString40Db.time = time.tv_sec;
    data.dtString40Db.jump = 0;
    strncpy(data.dtString40.value, (char*)buf, sizeof(data.dtString40.value));
    break;
  }
  case sev_eDataType_String40HtDb: {
    data.dtString40HtDb.time = time.tv_sec;
    data.dtString40HtDb.ntime = time.tv_nsec;
    data.dtString40HtDb.jump = 0;
    strncpy(data.dtString40.value, (char*)buf, sizeof(data.dtString40.value));
    break;
  }
  case sev_eDataType_String80: {
    data.dtString80.time = time.tv_sec;
    strncpy(data.dtString80.value, (char*)buf, sizeof(data.dtString80.value));
    break;
  }
  case sev_eDataType_String80Ht: {
    data.dtString80Ht.time = time.tv_sec;
    data.dtString80Ht.ntime = time.tv_nsec;
    strncpy(data.dtString80.value, (char*)buf, sizeof(data.dtString80.value));
    break;
  }
  case sev_eDataType_String80Db: {
    data.dtString80Db.time = time.tv_sec;
    data.dtString80Db.jump = 0;
    strncpy(data.dtString80.value, (char*)buf, sizeof(data.dtString80.value));
    break;
  }
  case sev_eDataType_String80HtDb: {
    data.dtString80HtDb.time = time.tv_sec;
    data.dtString80HtDb.ntime = time.tv_nsec;
    data.dtString80HtDb.jump = 0;
    strncpy(data.dtString80.value, (char*)buf, sizeof(data.dtString80.value));
    break;
  }
  case sev_eDataType_String132: {
    data.dtString132.time = time.tv_sec;
    strncpy(data.dtString132.value, (char*)buf, sizeof(data.dtString132.value));
    break;
  }
  case sev_eDataType_String132Ht: {
    data.dtString132Ht.time = time.tv_sec;
    data.dtString132Ht.ntime = time.tv_nsec;
    strncpy(data.dtString132.value, (char*)buf, sizeof(data.dtString132.value));
    break;
  }
  case sev_eDataType_String132Db: {
    data.dtString132Db.time = time.tv_sec;
    data.dtString132Db.jump = 0;
    strncpy(data.dtString132.value, (char*)buf, sizeof(data.dtString132.value));
    break;
  }
  case sev_eDataType_String132HtDb: {
    data.dtString132HtDb.time = time.tv_sec;
    data.dtString132HtDb.ntime = time.tv_nsec;
    data.dtString132HtDb.jump = 0;
    strncpy(data.dtString132.value, (char*)buf, sizeof(data.dtString132.value));
    break;
  }
  case sev_eDataType_String256: {
    data.dtString256.time = time.tv_sec;
    strncpy(data.dtString256.value, (char*)buf, sizeof(data.dtString256.value));
    break;
  }
  case sev_eDataType_String256Ht: {
    data.dtString256Ht.time = time.tv_sec;
    data.dtString256Ht.ntime = time.tv_nsec;
    strncpy(data.dtString256.value, (char*)buf, sizeof(data.dtString256.value));
    break;
  }
  case sev_eDataType_String256Db: {
    data.dtString256Db.time = time.tv_sec;
    data.dtString256Db.jump = 0;
    strncpy(data.dtString256.value, (char*)buf, sizeof(data.dtString256.value));
    break;
  }
  case sev_eDataType_String256HtDb: {
    data.dtString256HtDb.time = time.tv_sec;
    data.dtString256HtDb.ntime = time.tv_nsec;
    data.dtString256HtDb.jump = 0;
    strncpy(data.dtString256.value, (char*)buf, sizeof(data.dtString256.value));
    break;
  }
  default:
    return 0;
  }

  *sts = get_mdatatype((sev_eDataType)header.data_type, size, &mdatatype);
  if (EVEN(*sts))
    return 0;

  // Create the data space for the dataset
  hsize_t dim = 1;
  hsize_t offset = header.last_idx;
  hsize_t count = dim;
  hsize_t stride = 1;
  hsize_t block = 1;

  strcpy(tname, gname);
  strcat(tname, cName_Data);

  dataset_id = H5Dopen2(m_file, tname, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  hsts = H5Sselect_hyperslab(
      dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

  // Write the dataset
  hsts = H5Dwrite(
      dataset_id, mdatatype, memspace_id, dataspace_id, H5P_DEFAULT, &data);

  hsts = H5Sclose(memspace_id);
  hsts = H5Sclose(dataspace_id);
  hsts = H5Dclose(dataset_id);

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);

  return 1;
}

int sev_dbhdf5::get_values(pwr_tStatus* sts, void* thread, pwr_tOid oid,
    pwr_tMask options, float deadband, char* aname, pwr_eType type,
    unsigned int size, pwr_tFloat32 scantime, pwr_tTime* creatime,
    pwr_tTime* starttime, pwr_tTime* endtime, int maxsize, pwr_tTime** tbuf,
    void** vbuf, unsigned int* bsize)
{
  unsigned int item_idx;
  get_item(sts, &item_idx, oid, aname);
  if (EVEN(*sts)) {
    return 0;
  }

  sev_uDataType data;
  sev_sHeader header;
  hid_t mdatatype;
  herr_t hsts;
  char gname[80], dname[80], tname[80];
  unsigned int first_time;
  int from_iter = 0;
  int to_iter = 0;
  int to_idx, from_idx;
  unsigned int to, from;

  // Read header
  strcpy(gname, cName_Tables);
  strcat(gname, "/");
  strcat(gname, m_items[item_idx].tablename);
  strcpy(dname, gname);
  strcat(dname, cName_Header);

  hid_t dataset_id = H5Dopen2(m_file, dname, H5P_DEFAULT);
  hsts = H5Dread(
      dataset_id, m_header_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &header);

  if (header.first_idx == -1)
    return 0;

  hsize_t dim = 1;

  strcpy(tname, gname);
  strcat(tname, cName_Data);

  dataset_id = H5Dopen2(m_file, tname, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  *sts = get_mdatatype((sev_eDataType)header.data_type, size, &mdatatype);
  if (EVEN(*sts))
    return 0;

  // Read time for first idx
  pwr_tStatus lsts = get_time(dataset_id, memspace_id, dataspace_id, mdatatype,
      header.first_idx, &first_time);

  to = endtime->tv_sec;
  from = starttime->tv_sec;
  int res = (int)((float)(to - from) / scantime / 1000);
  if (res < 2)
    res = 2;
  if (to < header.first_time || from > header.last_time) {
    printf("No samples\n");
    return 0;
  }
  if (to > header.last_time)
    to_idx = header.last_idx;
  else {
    lsts = time_to_idx(dataset_id, memspace_id, dataspace_id, mdatatype, to,
        header.data_size, header.first_idx, header.last_idx, first_time,
        header.last_time, res, 0, &to_iter, &to_idx);
  }

  if (from < first_time)
    from_idx = header.first_idx;
  else {
    lsts = time_to_idx(dataset_id, memspace_id, dataspace_id, mdatatype, from,
        header.data_size, header.first_idx, header.last_idx, first_time,
        header.last_time, res, 0, &from_iter, &from_idx);
  }
  if (from_iter == ITER_MAX + 1 || to_iter == ITER_MAX + 1) {
    *sts = SEV__RANGE;
    return 0;
  }

  printf("first time %d, last time %d res %d\n", first_time, header.last_time,
      res);
  printf("from idx  %d, to idx  %d, iter %d %d\n", from_idx, to_idx, from_iter,
      to_iter);

  *tbuf = (pwr_tTime*)calloc(maxsize, sizeof(pwr_tTime));
  *vbuf = calloc(maxsize, size);

  int bcnt = 0;
  char* vbufp = (char*)*vbuf;
  pwr_tTime* tbufp = (pwr_tTime*)*tbuf;
  int from_j = from_idx;
  int to_j = to_idx;
  if (to_j < from_j)
    to_j += header.data_size;
  int div = (to_j - from_j) / maxsize + 1;
  printf("range %d div %d\n", to_j - from_j, div);
  for (int j = from_j; j < to_j; j++) {
    if (bcnt >= maxsize)
      break;

    unsigned int idx = j;
    if (idx >= header.data_size)
      idx -= header.data_size;

    if (!(idx % div == 0))
      continue;

    hsize_t offset = idx;
    hsize_t count = 1;
    hsize_t stride = 1;
    hsize_t block = 1;

    hsts = H5Sselect_hyperslab(
        dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

    // Read the dataset
    hsts = H5Dread(
        dataset_id, mdatatype, memspace_id, dataspace_id, H5P_DEFAULT, &data);

    switch (header.data_type) {
    case sev_eDataType_Boolean: {
      tbufp->tv_sec = data.dtBoolean.time;
      *(pwr_tBoolean*)vbufp = data.dtBoolean.value;
      tbufp++;
      vbufp += sizeof(pwr_tBoolean);
      break;
    }
    case sev_eDataType_BooleanHt: {
      tbufp->tv_sec = data.dtBooleanHt.time;
      tbufp->tv_nsec = data.dtBooleanHt.ntime;
      *(pwr_tBoolean*)vbufp = data.dtBooleanHt.value;
      tbufp++;
      vbufp += sizeof(pwr_tBoolean);
      break;
    }
    case sev_eDataType_BooleanDb: {
      tbufp->tv_sec = data.dtBooleanDb.time;
      *(pwr_tBoolean*)vbufp = data.dtBooleanDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tBoolean);
      break;
    }
    case sev_eDataType_BooleanHtDb: {
      tbufp->tv_sec = data.dtBooleanHtDb.time;
      tbufp->tv_nsec = data.dtBooleanHtDb.ntime;
      *(pwr_tBoolean*)vbufp = data.dtBooleanHtDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tBoolean);
      break;
    }
    case sev_eDataType_Int8: {
      tbufp->tv_sec = data.dtInt8.time;
      *(pwr_tInt8*)vbufp = data.dtInt8.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt8);
      break;
    }
    case sev_eDataType_Int8Ht: {
      tbufp->tv_sec = data.dtInt8Ht.time;
      tbufp->tv_nsec = data.dtInt8Ht.ntime;
      *(pwr_tInt8*)vbufp = data.dtInt8Ht.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt8);
      break;
    }
    case sev_eDataType_Int8Db: {
      tbufp->tv_sec = data.dtInt8Db.time;
      *(pwr_tInt8*)vbufp = data.dtInt8Db.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt8);
      break;
    }
    case sev_eDataType_Int8HtDb: {
      tbufp->tv_sec = data.dtInt8HtDb.time;
      tbufp->tv_nsec = data.dtInt8HtDb.ntime;
      *(pwr_tInt8*)vbufp = data.dtInt8HtDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt8);
      break;
    }
    case sev_eDataType_Int16: {
      tbufp->tv_sec = data.dtInt16.time;
      *(pwr_tInt16*)vbufp = data.dtInt16.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt16);
      break;
    }
    case sev_eDataType_Int16Ht: {
      tbufp->tv_sec = data.dtInt16Ht.time;
      tbufp->tv_nsec = data.dtInt16Ht.ntime;
      *(pwr_tInt16*)vbufp = data.dtInt16Ht.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt16);
      break;
    }
    case sev_eDataType_Int16Db: {
      tbufp->tv_sec = data.dtInt16Db.time;
      *(pwr_tInt16*)vbufp = data.dtInt16Db.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt16);
      break;
    }
    case sev_eDataType_Int16HtDb: {
      tbufp->tv_sec = data.dtInt16HtDb.time;
      tbufp->tv_nsec = data.dtInt16HtDb.ntime;
      *(pwr_tInt16*)vbufp = data.dtInt16HtDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt16);
      break;
    }
    case sev_eDataType_Int32: {
      tbufp->tv_sec = data.dtInt32.time;
      *(pwr_tInt32*)vbufp = data.dtInt32.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt32);
      break;
    }
    case sev_eDataType_Int32Ht: {
      tbufp->tv_sec = data.dtInt32Ht.time;
      tbufp->tv_nsec = data.dtInt32Ht.ntime;
      *(pwr_tInt32*)vbufp = data.dtInt32Ht.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt32);
      break;
    }
    case sev_eDataType_Int32Db: {
      tbufp->tv_sec = data.dtInt32Db.time;
      *(pwr_tInt32*)vbufp = data.dtInt32Db.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt32);
      break;
    }
    case sev_eDataType_Int32HtDb: {
      tbufp->tv_sec = data.dtInt32HtDb.time;
      tbufp->tv_nsec = data.dtInt32HtDb.ntime;
      *(pwr_tInt32*)vbufp = data.dtInt32HtDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt32);
      break;
    }
    case sev_eDataType_Int64: {
      tbufp->tv_sec = data.dtInt64.time;
      *(pwr_tInt64*)vbufp = data.dtInt64.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt64);
      break;
    }
    case sev_eDataType_Int64Ht: {
      tbufp->tv_sec = data.dtInt64Ht.time;
      tbufp->tv_nsec = data.dtInt64Ht.ntime;
      *(pwr_tInt64*)vbufp = data.dtInt64Ht.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt64);
      break;
    }
    case sev_eDataType_Int64Db: {
      tbufp->tv_sec = data.dtInt64Db.time;
      *(pwr_tInt64*)vbufp = data.dtInt64Db.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt64);
      break;
    }
    case sev_eDataType_Int64HtDb: {
      tbufp->tv_sec = data.dtInt64HtDb.time;
      tbufp->tv_nsec = data.dtInt64HtDb.ntime;
      *(pwr_tInt64*)vbufp = data.dtInt64HtDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tInt64);
      break;
    }
    case sev_eDataType_UInt8: {
      tbufp->tv_sec = data.dtUInt8.time;
      *(pwr_tUInt8*)vbufp = data.dtUInt8.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt8);
      break;
    }
    case sev_eDataType_UInt8Ht: {
      tbufp->tv_sec = data.dtUInt8Ht.time;
      tbufp->tv_nsec = data.dtUInt8Ht.ntime;
      *(pwr_tUInt8*)vbufp = data.dtUInt8Ht.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt8);
      break;
    }
    case sev_eDataType_UInt8Db: {
      tbufp->tv_sec = data.dtUInt8Db.time;
      *(pwr_tUInt8*)vbufp = data.dtUInt8Db.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt8);
      break;
    }
    case sev_eDataType_UInt8HtDb: {
      tbufp->tv_sec = data.dtUInt8HtDb.time;
      tbufp->tv_nsec = data.dtUInt8HtDb.ntime;
      *(pwr_tUInt8*)vbufp = data.dtUInt8HtDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt8);
      break;
    }
    case sev_eDataType_UInt16: {
      tbufp->tv_sec = data.dtUInt16.time;
      *(pwr_tUInt16*)vbufp = data.dtUInt16.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt16);
      break;
    }
    case sev_eDataType_UInt16Ht: {
      tbufp->tv_sec = data.dtUInt16Ht.time;
      tbufp->tv_nsec = data.dtUInt16Ht.ntime;
      *(pwr_tUInt16*)vbufp = data.dtUInt16Ht.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt16);
      break;
    }
    case sev_eDataType_UInt16Db: {
      tbufp->tv_sec = data.dtUInt16Db.time;
      *(pwr_tUInt16*)vbufp = data.dtUInt16Db.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt16);
      break;
    }
    case sev_eDataType_UInt16HtDb: {
      tbufp->tv_sec = data.dtUInt16HtDb.time;
      tbufp->tv_nsec = data.dtUInt16HtDb.ntime;
      *(pwr_tUInt16*)vbufp = data.dtUInt16HtDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt16);
      break;
    }
    case sev_eDataType_UInt32: {
      tbufp->tv_sec = data.dtUInt32.time;
      *(pwr_tUInt32*)vbufp = data.dtUInt32.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt32);
      break;
    }
    case sev_eDataType_UInt32Ht: {
      tbufp->tv_sec = data.dtUInt32Ht.time;
      tbufp->tv_nsec = data.dtUInt32Ht.ntime;
      *(pwr_tUInt32*)vbufp = data.dtUInt32Ht.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt32);
      break;
    }
    case sev_eDataType_UInt32Db: {
      tbufp->tv_sec = data.dtUInt32Db.time;
      *(pwr_tUInt32*)vbufp = data.dtUInt32Db.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt32);
      break;
    }
    case sev_eDataType_UInt32HtDb: {
      tbufp->tv_sec = data.dtUInt32HtDb.time;
      tbufp->tv_nsec = data.dtUInt32HtDb.ntime;
      *(pwr_tUInt32*)vbufp = data.dtUInt32HtDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt32);
      break;
    }
    case sev_eDataType_UInt64: {
      tbufp->tv_sec = data.dtUInt64.time;
      *(pwr_tUInt64*)vbufp = data.dtUInt64.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt64);
      break;
    }
    case sev_eDataType_UInt64Ht: {
      tbufp->tv_sec = data.dtUInt64Ht.time;
      tbufp->tv_nsec = data.dtUInt64Ht.ntime;
      *(pwr_tUInt64*)vbufp = data.dtUInt64Ht.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt64);
      break;
    }
    case sev_eDataType_UInt64Db: {
      tbufp->tv_sec = data.dtUInt64Db.time;
      *(pwr_tUInt64*)vbufp = data.dtUInt64Db.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt64);
      break;
    }
    case sev_eDataType_UInt64HtDb: {
      tbufp->tv_sec = data.dtUInt64HtDb.time;
      tbufp->tv_nsec = data.dtUInt64HtDb.ntime;
      *(pwr_tUInt64*)vbufp = data.dtUInt64HtDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tUInt64);
      break;
    }
    case sev_eDataType_Float32: {
      tbufp->tv_sec = data.dtFloat32.time;
      *(pwr_tFloat32*)vbufp = data.dtFloat32.value;
      tbufp++;
      vbufp += sizeof(pwr_tFloat32);
      break;
    }
    case sev_eDataType_Float32Ht: {
      tbufp->tv_sec = data.dtFloat32Ht.time;
      tbufp->tv_nsec = data.dtFloat32Ht.ntime;
      *(pwr_tFloat32*)vbufp = data.dtFloat32Ht.value;
      tbufp++;
      vbufp += sizeof(pwr_tFloat32);
      break;
    }
    case sev_eDataType_Float32Db: {
      tbufp->tv_sec = data.dtFloat32Db.time;
      *(pwr_tFloat32*)vbufp = data.dtFloat32Db.value;
      tbufp++;
      vbufp += sizeof(pwr_tFloat32);
      break;
    }
    case sev_eDataType_Float32HtDb: {
      tbufp->tv_sec = data.dtFloat32HtDb.time;
      tbufp->tv_nsec = data.dtFloat32HtDb.ntime;
      *(pwr_tFloat32*)vbufp = data.dtFloat32HtDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tFloat32);
      break;
    }
    case sev_eDataType_Float64: {
      tbufp->tv_sec = data.dtFloat64.time;
      *(pwr_tFloat64*)vbufp = data.dtFloat64.value;
      tbufp++;
      vbufp += sizeof(pwr_tFloat64);
      break;
    }
    case sev_eDataType_Float64Ht: {
      tbufp->tv_sec = data.dtFloat64Ht.time;
      tbufp->tv_nsec = data.dtFloat64Ht.ntime;
      *(pwr_tFloat64*)vbufp = data.dtFloat64Ht.value;
      tbufp++;
      vbufp += sizeof(pwr_tFloat64);
      break;
    }
    case sev_eDataType_Float64Db: {
      tbufp->tv_sec = data.dtFloat64Db.time;
      *(pwr_tFloat64*)vbufp = data.dtFloat64Db.value;
      tbufp++;
      vbufp += sizeof(pwr_tFloat64);
      break;
    }
    case sev_eDataType_Float64HtDb: {
      tbufp->tv_sec = data.dtFloat64HtDb.time;
      tbufp->tv_nsec = data.dtFloat64HtDb.ntime;
      *(pwr_tFloat64*)vbufp = data.dtFloat64HtDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tFloat64);
      break;
    }
    case sev_eDataType_Time: {
      tbufp->tv_sec = data.dtTime.time;
      ((pwr_tTime*)vbufp)->tv_sec = data.dtTime.value;
      tbufp++;
      vbufp += sizeof(pwr_tTime);
      break;
    }
    case sev_eDataType_TimeHt: {
      tbufp->tv_sec = data.dtTimeHt.time;
      tbufp->tv_nsec = data.dtTimeHt.ntime;
      ((pwr_tTime*)vbufp)->tv_sec = data.dtTimeHt.value;
      ((pwr_tTime*)vbufp)->tv_nsec = data.dtTimeHt.nvalue;
      tbufp++;
      vbufp += sizeof(pwr_tTime);
      break;
    }
    case sev_eDataType_TimeDb: {
      tbufp->tv_sec = data.dtTimeDb.time;
      ((pwr_tTime*)vbufp)->tv_sec = data.dtTimeDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tTime);
      break;
    }
    case sev_eDataType_TimeHtDb: {
      tbufp->tv_sec = data.dtTimeHtDb.time;
      tbufp->tv_nsec = data.dtTimeHtDb.ntime;
      ((pwr_tTime*)vbufp)->tv_sec = data.dtTimeHtDb.value;
      ((pwr_tTime*)vbufp)->tv_nsec = data.dtTimeHtDb.nvalue;
      tbufp++;
      vbufp += sizeof(pwr_tTime);
      break;
    }
    case sev_eDataType_DeltaTime: {
      tbufp->tv_sec = data.dtDeltaTime.time;
      ((pwr_tDeltaTime*)vbufp)->tv_sec = data.dtDeltaTime.value;
      tbufp++;
      vbufp += sizeof(pwr_tDeltaTime);
      break;
    }
    case sev_eDataType_DeltaTimeHt: {
      tbufp->tv_sec = data.dtDeltaTimeHt.time;
      tbufp->tv_nsec = data.dtDeltaTimeHt.ntime;
      ((pwr_tDeltaTime*)vbufp)->tv_sec = data.dtDeltaTimeHt.value;
      ((pwr_tDeltaTime*)vbufp)->tv_nsec = data.dtDeltaTimeHt.nvalue;
      tbufp++;
      vbufp += sizeof(pwr_tDeltaTime);
      break;
    }
    case sev_eDataType_DeltaTimeDb: {
      tbufp->tv_sec = data.dtDeltaTimeDb.time;
      ((pwr_tDeltaTime*)vbufp)->tv_sec = data.dtDeltaTimeDb.value;
      tbufp++;
      vbufp += sizeof(pwr_tDeltaTime);
      break;
    }
    case sev_eDataType_DeltaTimeHtDb: {
      tbufp->tv_sec = data.dtDeltaTimeHtDb.time;
      tbufp->tv_nsec = data.dtDeltaTimeHtDb.ntime;
      ((pwr_tDeltaTime*)vbufp)->tv_sec = data.dtDeltaTimeHtDb.value;
      ((pwr_tDeltaTime*)vbufp)->tv_nsec = data.dtDeltaTimeHtDb.nvalue;
      tbufp++;
      vbufp += sizeof(pwr_tDeltaTime);
      break;
    }
    case sev_eDataType_String8: {
      tbufp->tv_sec = data.dtString8.time;
      strncpy(vbufp, data.dtString8.value, sizeof(pwr_tString8));
      tbufp++;
      vbufp += sizeof(pwr_tString8);
      break;
    }
    case sev_eDataType_String8Ht: {
      tbufp->tv_sec = data.dtString8Ht.time;
      tbufp->tv_nsec = data.dtString8Ht.ntime;
      strncpy(vbufp, data.dtString8Ht.value, sizeof(pwr_tString8));
      tbufp++;
      vbufp += sizeof(pwr_tString8);
      break;
    }
    case sev_eDataType_String8Db: {
      tbufp->tv_sec = data.dtString8Db.time;
      strncpy(vbufp, data.dtString8Db.value, sizeof(pwr_tString8));
      tbufp++;
      vbufp += sizeof(pwr_tString8);
      break;
    }
    case sev_eDataType_String8HtDb: {
      tbufp->tv_sec = data.dtString8HtDb.time;
      tbufp->tv_nsec = data.dtString8HtDb.ntime;
      strncpy(vbufp, data.dtString8HtDb.value, sizeof(pwr_tString8));
      tbufp++;
      vbufp += sizeof(pwr_tString8);
      break;
    }
    case sev_eDataType_String16: {
      tbufp->tv_sec = data.dtString16.time;
      strncpy(vbufp, data.dtString16.value, sizeof(pwr_tString16));
      tbufp++;
      vbufp += sizeof(pwr_tString16);
      break;
    }
    case sev_eDataType_String16Ht: {
      tbufp->tv_sec = data.dtString16Ht.time;
      tbufp->tv_nsec = data.dtString16Ht.ntime;
      strncpy(vbufp, data.dtString16Ht.value, sizeof(pwr_tString16));
      tbufp++;
      vbufp += sizeof(pwr_tString16);
      break;
    }
    case sev_eDataType_String16Db: {
      tbufp->tv_sec = data.dtString16Db.time;
      strncpy(vbufp, data.dtString16Db.value, sizeof(pwr_tString16));
      tbufp++;
      vbufp += sizeof(pwr_tString16);
      break;
    }
    case sev_eDataType_String16HtDb: {
      tbufp->tv_sec = data.dtString16HtDb.time;
      tbufp->tv_nsec = data.dtString16HtDb.ntime;
      strncpy(vbufp, data.dtString16HtDb.value, sizeof(pwr_tString16));
      tbufp++;
      vbufp += sizeof(pwr_tString16);
      break;
    }
    case sev_eDataType_String32: {
      tbufp->tv_sec = data.dtString32.time;
      strncpy(vbufp, data.dtString32.value, sizeof(pwr_tString32));
      tbufp++;
      vbufp += sizeof(pwr_tString32);
      break;
    }
    case sev_eDataType_String32Ht: {
      tbufp->tv_sec = data.dtString32Ht.time;
      tbufp->tv_nsec = data.dtString32Ht.ntime;
      strncpy(vbufp, data.dtString32Ht.value, sizeof(pwr_tString32));
      tbufp++;
      vbufp += sizeof(pwr_tString32);
      break;
    }
    case sev_eDataType_String32Db: {
      tbufp->tv_sec = data.dtString32Db.time;
      strncpy(vbufp, data.dtString32Db.value, sizeof(pwr_tString32));
      tbufp++;
      vbufp += sizeof(pwr_tString32);
      break;
    }
    case sev_eDataType_String32HtDb: {
      tbufp->tv_sec = data.dtString32HtDb.time;
      tbufp->tv_nsec = data.dtString32HtDb.ntime;
      strncpy(vbufp, data.dtString32HtDb.value, sizeof(pwr_tString32));
      tbufp++;
      vbufp += sizeof(pwr_tString32);
      break;
    }
    case sev_eDataType_String40: {
      tbufp->tv_sec = data.dtString40.time;
      strncpy(vbufp, data.dtString40.value, sizeof(pwr_tString40));
      tbufp++;
      vbufp += sizeof(pwr_tString40);
      break;
    }
    case sev_eDataType_String40Ht: {
      tbufp->tv_sec = data.dtString40Ht.time;
      tbufp->tv_nsec = data.dtString40Ht.ntime;
      strncpy(vbufp, data.dtString40Ht.value, sizeof(pwr_tString40));
      tbufp++;
      vbufp += sizeof(pwr_tString40);
      break;
    }
    case sev_eDataType_String40Db: {
      tbufp->tv_sec = data.dtString40Db.time;
      strncpy(vbufp, data.dtString40Db.value, sizeof(pwr_tString40));
      tbufp++;
      vbufp += sizeof(pwr_tString40);
      break;
    }
    case sev_eDataType_String40HtDb: {
      tbufp->tv_sec = data.dtString40HtDb.time;
      tbufp->tv_nsec = data.dtString40HtDb.ntime;
      strncpy(vbufp, data.dtString40HtDb.value, sizeof(pwr_tString40));
      tbufp++;
      vbufp += sizeof(pwr_tString40);
      break;
    }
    case sev_eDataType_String80: {
      tbufp->tv_sec = data.dtString80.time;
      strncpy(vbufp, data.dtString80.value, sizeof(pwr_tString80));
      tbufp++;
      vbufp += sizeof(pwr_tString80);
      break;
    }
    case sev_eDataType_String80Ht: {
      tbufp->tv_sec = data.dtString80Ht.time;
      tbufp->tv_nsec = data.dtString80Ht.ntime;
      strncpy(vbufp, data.dtString80Ht.value, sizeof(pwr_tString80));
      tbufp++;
      vbufp += sizeof(pwr_tString80);
      break;
    }
    case sev_eDataType_String80Db: {
      tbufp->tv_sec = data.dtString80Db.time;
      strncpy(vbufp, data.dtString80Db.value, sizeof(pwr_tString80));
      tbufp++;
      vbufp += sizeof(pwr_tString80);
      break;
    }
    case sev_eDataType_String80HtDb: {
      tbufp->tv_sec = data.dtString80HtDb.time;
      tbufp->tv_nsec = data.dtString80HtDb.ntime;
      strncpy(vbufp, data.dtString80HtDb.value, sizeof(pwr_tString80));
      tbufp++;
      vbufp += sizeof(pwr_tString80);
      break;
    }
    case sev_eDataType_String132: {
      tbufp->tv_sec = data.dtString132.time;
      strncpy(vbufp, data.dtString132.value, sizeof(pwr_tString132));
      tbufp++;
      vbufp += sizeof(pwr_tString132);
      break;
    }
    case sev_eDataType_String132Ht: {
      tbufp->tv_sec = data.dtString132Ht.time;
      tbufp->tv_nsec = data.dtString132Ht.ntime;
      strncpy(vbufp, data.dtString132Ht.value, sizeof(pwr_tString132));
      tbufp++;
      vbufp += sizeof(pwr_tString132);
      break;
    }
    case sev_eDataType_String132Db: {
      tbufp->tv_sec = data.dtString132Db.time;
      strncpy(vbufp, data.dtString132Db.value, sizeof(pwr_tString132));
      tbufp++;
      vbufp += sizeof(pwr_tString132);
      break;
    }
    case sev_eDataType_String132HtDb: {
      tbufp->tv_sec = data.dtString132HtDb.time;
      tbufp->tv_nsec = data.dtString132HtDb.ntime;
      strncpy(vbufp, data.dtString132HtDb.value, sizeof(pwr_tString132));
      tbufp++;
      vbufp += sizeof(pwr_tString132);
      break;
    }
    case sev_eDataType_String256: {
      tbufp->tv_sec = data.dtString256.time;
      strncpy(vbufp, data.dtString256.value, sizeof(pwr_tString256));
      tbufp++;
      vbufp += sizeof(pwr_tString256);
      break;
    }
    case sev_eDataType_String256Ht: {
      tbufp->tv_sec = data.dtString256Ht.time;
      tbufp->tv_nsec = data.dtString256Ht.ntime;
      strncpy(vbufp, data.dtString256Ht.value, sizeof(pwr_tString256));
      tbufp++;
      vbufp += sizeof(pwr_tString256);
      break;
    }
    case sev_eDataType_String256Db: {
      tbufp->tv_sec = data.dtString256Db.time;
      strncpy(vbufp, data.dtString256Db.value, sizeof(pwr_tString256));
      tbufp++;
      vbufp += sizeof(pwr_tString256);
      break;
    }
    case sev_eDataType_String256HtDb: {
      tbufp->tv_sec = data.dtString256HtDb.time;
      tbufp->tv_nsec = data.dtString256HtDb.ntime;
      strncpy(vbufp, data.dtString256HtDb.value, sizeof(pwr_tString256));
      tbufp++;
      vbufp += sizeof(pwr_tString16);
      break;
    }
    default:
      *sts = SEV__UNKNOWNTYPE;
      return 0;
    }

    bcnt++;
  }
  *bsize = bcnt;

  /* Close the dataset. */
  hsts = H5Sclose(memspace_id);
  hsts = H5Sclose(dataspace_id);
  hsts = H5Dclose(dataset_id);

  *sts = SEV__SUCCESS;
  return 1;
}

int sev_dbhdf5::store_event(
    pwr_tStatus* sts, void* thread, int item_idx, sev_event* ep)
{
  hid_t mdatatype;
  herr_t hsts;
  char gname[200], dname[200], tname[200];
  unsigned int mtype_size;
  int value_offs;

  get_objectitem_datatype(item_idx, &mdatatype, &mtype_size, &value_offs);

  sev_sEventDb data;
  data.time = ep->time.tv_sec;
  data.ntime = ep->time.tv_nsec;
  data.eventtype = ep->type;
  data.eventprio = ep->eventprio;
  data.eventid_nix = ep->eventid.Nix;
  data.eventid_birthtime = ep->eventid.BirthTime.tv_sec;
  data.eventid_idx = ep->eventid.Idx;
  strncpy(data.eventtext, ep->eventtext, sizeof(data.eventtext));
  strncpy(data.eventname, ep->eventname, sizeof(data.eventname));

  // Read header
  strcpy(gname, cName_Tables);
  strcat(gname, "/");
  strcat(gname, m_items[item_idx].tablename);
  strcpy(dname, gname);
  strcat(dname, cName_Header);

  sev_sHeader header;
  hid_t dataset_id = H5Dopen2(m_file, dname, H5P_DEFAULT);
  hsts = H5Dread(
      dataset_id, m_header_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &header);

  if (header.first_idx == -1) {
    header.first_idx = 0;
    header.last_idx = 0;
  } else {
    header.last_idx++;
    if (header.last_idx >= (int)header.data_size)
      header.last_idx = 0;
    if (header.last_idx == header.first_idx) {
      header.first_idx++;
      if (header.first_idx >= (int)header.data_size)
        header.first_idx = 0;
    }
  }

  header.last_time = ep->time.tv_sec;
  hsts = H5Dwrite(
      dataset_id, m_header_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &header);
  H5Dclose(dataset_id);

  // Create the data space for the dataset
  hsize_t dim = 1;
  hsize_t offset = header.last_idx;
  hsize_t count = dim;
  hsize_t stride = 1;
  hsize_t block = 1;

  strcpy(tname, gname);
  strcat(tname, cName_Data);

  dataset_id = H5Dopen2(m_file, tname, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  hsts = H5Sselect_hyperslab(
      dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

  // Write the dataset
  hsts = H5Dwrite(
      dataset_id, m_event_mtype, memspace_id, dataspace_id, H5P_DEFAULT, &data);

  hsts = H5Sclose(memspace_id);
  hsts = H5Sclose(dataspace_id);
  hsts = H5Dclose(dataset_id);

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);

  return 1;
}

int sev_dbhdf5::check_item(pwr_tStatus* sts, pwr_tOid oid, char* oname,
    char* aname, pwr_tDeltaTime storagetime, pwr_eType type, unsigned int size,
    char* description, char* unit, pwr_tFloat32 scantime, pwr_tFloat32 deadband,
    pwr_tMask options, unsigned int* idx)
{
  pwr_tTime uptime;

  time_GetTime(&uptime);

  for (unsigned int i = 0; i < m_items.size(); i++) {
    if (m_items[i].deleted)
      continue;

    if (cdh_ObjidIsEqual(oid, m_items[i].oid)
        && str_NoCaseStrcmp(aname, m_items[i].attr[0].aname) == 0) {
      bool itemdefchange = false;
      bool modified = false;
      if (type != m_items[i].attr[0].type || size != m_items[i].attr[0].size) {
        itemdefchange = true;
      }

      if (storagetime.tv_sec != m_items[i].storagetime.tv_sec) {
        m_items[i].storagetime = storagetime;
        modified = true;
      }
      if (!streq(oname, m_items[i].oname)) {
        strncpy(m_items[i].oname, oname, sizeof(m_items[i].oname));
        modified = true;
      }
      if (type != m_items[i].attr[0].type) {
        m_items[i].attr[0].type = type;
        modified = true;
      }
      if (size != m_items[i].attr[0].size) {
        m_items[i].attr[0].size = size;
        modified = true;
      }
      if (scantime != m_items[i].scantime) {
        m_items[i].scantime = scantime;
        modified = true;
      }
      if (deadband != m_items[i].deadband) {
        m_items[i].deadband = deadband;
        modified = true;
      }
      if (!streq(description, m_items[i].description)) {
        strncpy(m_items[i].description, description,
            sizeof(m_items[i].description));
        modified = true;
      }
      if (!streq(unit, m_items[i].attr[0].unit)) {
        strncpy(m_items[i].attr[0].unit, unit, sizeof(m_items[i].attr[0].unit));
        modified = true;
      }

      if (modified) {
        m_items[i].modtime = uptime;
        update_item(&m_items[i]);
      }

      if (itemdefchange) {
        if (!handle_itemchange(sts, m_items[i].tablename, i)) {
          *idx = i;
          return 1;
        }
      }
      *idx = i;
      *sts = SEV__SUCCESS;
      return 1;
    }
  }
  *sts = SEV__NOSUCHITEM;
  return 0;
}

int sev_dbhdf5::add_item(pwr_tStatus* sts, pwr_tOid oid, char* oname,
    char* aname, pwr_tDeltaTime storagetime, pwr_eType type, unsigned int size,
    char* description, char* unit, pwr_tFloat32 scantime, pwr_tFloat32 deadband,
    pwr_tMask options, unsigned int* idx)
{
  char tablename[256];
  unsigned int db_idx;

  store_item(sts, tablename, oid, oname, aname, storagetime, type, size,
      description, unit, scantime, deadband, options, &db_idx);
  if (EVEN(*sts))
    return 0;

  if (streq(aname, "Events"))
    create_event_table(sts, tablename, options, storagetime, scantime);
  else {
    create_table(
        sts, tablename, type, size, options, deadband, storagetime, scantime);
  }
  if (EVEN(*sts))
    return 0;

  sev_item item;
  sev_attr attr;
  item.attr.push_back(attr);
  item.id = 0;
  strncpy(item.tablename, tablename, sizeof(item.tablename));
  item.oid = oid;
  strncpy(item.oname, oname, sizeof(item.oname));
  strncpy(item.attr[0].aname, aname, sizeof(item.attr[0].aname));
  time_GetTime(&item.creatime);
  item.modtime = item.creatime;
  item.storagetime = storagetime;
  item.attr[0].type = type;
  item.attr[0].size = size;
  strncpy(item.description, description, sizeof(item.description));
  strncpy(item.attr[0].unit, unit, sizeof(item.attr[0].unit));
  item.scantime = scantime;
  item.deadband = deadband;
  item.options = options;
  item.attrnum = 1;
  item.idx = db_idx;

  // Only tables with id are implemented
  item.options |= pwr_mSevOptionsMask_ReadOptimized;

  m_items.push_back(item);
  *idx = m_items.size() - 1;

  *sts = SEV__SUCCESS;

  return 1;
}

int sev_dbhdf5::delete_item(pwr_tStatus* sts, pwr_tOid oid, char* aname)
{
  unsigned int idx;
  get_item(sts, &idx, oid, aname);
  if (EVEN(*sts)) {
    return 0;
  }

  m_items[idx].deleted = 1;

  update_item(&m_items[idx]);
  delete_table(sts, m_items[idx].tablename);
  return 1;
}

int sev_dbhdf5::delete_old_data(pwr_tStatus* sts, void* thread, char* tablename,
    pwr_tMask options, pwr_tTime limit, pwr_tFloat32 scantime,
    pwr_tFloat32 garbagecycle)
{
  return 1;
}

int sev_dbhdf5::check_objectitem(pwr_tStatus* sts, char* tablename,
    pwr_tOid oid, char* oname, char* aname, pwr_tDeltaTime storagetime,
    char* description, pwr_tFloat32 scantime, pwr_tFloat32 deadband,
    pwr_tMask options, unsigned int attrnum, sev_sHistAttr* attr,
    unsigned int* idx)
{
  pwr_tTime uptime;

  time_GetTime(&uptime);

  for (unsigned int i = 0; i < m_items.size(); i++) {
    if (m_items[i].deleted)
      continue;

    if (cdh_ObjidIsEqual(oid, m_items[i].oid)
        && str_NoCaseStrcmp(oname, m_items[i].oname) == 0) {
      bool itemdefchange = false;
      bool modified = false;

      if (storagetime.tv_sec != m_items[i].storagetime.tv_sec) {
        m_items[i].storagetime = storagetime;
        modified = true;
      }
      if (!streq(oname, m_items[i].oname)) {
        strncpy(m_items[i].oname, oname, sizeof(m_items[i].oname));
        modified = true;
      }
      if (scantime != m_items[i].scantime) {
        m_items[i].scantime = scantime;
        modified = true;
      }
      if (deadband != m_items[i].deadband) {
        m_items[i].deadband = deadband;
        modified = true;
      }
      if (!streq(description, m_items[i].description)) {
        strncpy(m_items[i].description, description,
            sizeof(m_items[i].description));
        modified = true;
      }

      if (modified) {
        m_items[i].modtime = uptime;
        update_item(&m_items[i]);
      }

      if (itemdefchange) {
        if (!handle_itemchange(sts, m_items[i].tablename, i)) {
          *idx = i;
          return 1;
        }
      }
      *idx = i;
      *sts = SEV__SUCCESS;
      return 1;
    }
  }
  *sts = SEV__NOSUCHITEM;
  return 0;
}

int sev_dbhdf5::add_objectitem(pwr_tStatus* sts, char* tname, pwr_tOid oid,
    char* oname, char* aname, pwr_tDeltaTime storagetime, char* description,
    pwr_tFloat32 scantime, pwr_tFloat32 deadband, pwr_tMask options,
    unsigned int attrnum, sev_sHistAttr* attr, unsigned int* idx)
{
  char tablename[256];
  unsigned int db_idx;

  store_objectitem(sts, tablename, oid, oname, aname, storagetime, description,
      scantime, deadband, options, attrnum, attr, &db_idx);
  if (EVEN(*sts))
    return 0;

  if (streq(aname, "Events"))
    create_event_table(sts, tablename, options, storagetime, scantime);
  else {
    create_objecttable(sts, tablename, options, deadband, storagetime, scantime,
        attrnum, attr);
  }
  if (EVEN(*sts))
    return 0;

  sev_item item;
  item.id = 0;
  item.id = 0;
  strncpy(item.tablename, tablename, sizeof(item.tablename));
  item.oid = oid;
  strncpy(item.oname, oname, sizeof(item.oname));
  time_GetTime(&item.creatime);
  item.modtime = item.creatime;
  item.storagetime = storagetime;
  strncpy(item.description, description, sizeof(item.description));
  item.scantime = scantime;
  item.deadband = deadband;
  item.options = options;
  item.attrnum = 0;
  item.idx = db_idx;

  // Only tables with id are implemented
  item.options |= pwr_mSevOptionsMask_ReadOptimized;

  for (size_t i = 0; i < attrnum; i++) {
    sev_attr a;
    strncpy(a.aname, attr[i].aname, sizeof(a.aname));
    a.type = attr[i].type;
    a.size = attr[i].size;
    strncpy(a.unit, attr[i].unit, sizeof(a.unit));

    item.attr.push_back(a);
  }

  m_items.push_back(item);
  *idx = m_items.size() - 1;

  *sts = SEV__SUCCESS;

  return 1;
}
int sev_dbhdf5::store_objectitem(pwr_tStatus* sts, char* tablename,
    pwr_tOid oid, char* oname, char* aname, pwr_tDeltaTime storagetime,
    char* description, pwr_tFloat32 scantime, pwr_tFloat32 deadband,
    pwr_tMask options, unsigned int attrnum, sev_sHistAttr* attr,
    unsigned int* idx)
{
  sev_sObjectItem item;
  pwr_tTime current_time;
  herr_t hsts;

  if (m_cmn.next_objectitems_idx >= m_cmn.objectitems_alloc) {
    // Extend items dataset
    objectitems_extend();
  }

  time_GetTime(&current_time);

  sprintf(tablename, "%s_%d", oid_to_table(oid, (char*)""), m_cmn.next_item_id);

  item.id = m_cmn.next_item_id;
  strncpy(item.tablename, tablename, sizeof(item.tablename));
  item.vid = oid.vid;
  item.oix = oid.oix;
  strncpy(item.oname, oname, sizeof(item.oname));
  strncpy(item.aname, aname, sizeof(item.aname));
  item.creatime = current_time.tv_sec;
  item.storagetime = storagetime.tv_sec;
  item.deadband = deadband;
  item.options = options;
  item.scantime = scantime;
  strncpy(item.description, description, sizeof(item.description));
  item.deleted = 0;

  // Create the data space for the dataset.
  hsize_t dim = 1;
  hsize_t offset = m_cmn.next_objectitems_idx;
  hsize_t count = dim;
  hsize_t stride = 1;
  hsize_t block = 1;

  hid_t dataset_id = H5Dopen2(m_file, cName_Dir cName_ObjectItems, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  hsts = H5Sselect_hyperslab(
      dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

  // Write the dataset
  hsts = H5Dwrite(
      dataset_id, m_item_mtype, memspace_id, dataspace_id, H5P_DEFAULT, &item);

  *idx = m_cmn.next_objectitems_idx;
  m_cmn.next_objectitems_idx++;
  m_cmn.next_item_id++;

  // Close the dataset
  hsts = H5Sclose(memspace_id);
  hsts = H5Sclose(dataspace_id);
  hsts = H5Dclose(dataset_id);

  for (size_t i = 0; i < attrnum; i++) {
    sev_sObjectAttributes adata;

    strncpy(adata.tablename, tablename, sizeof(adata.tablename));
    strncpy(adata.attributename, attr[i].aname, sizeof(adata.attributename));
    adata.attributeidx = i;
    adata.attributetype = attr[i].type;
    adata.attributesize = attr[i].size;
    adata.deleted = 0;

    hsize_t dim = 1;
    hsize_t offset = m_cmn.next_objectitemattr_idx;
    hsize_t count = dim;
    hsize_t stride = 1;
    hsize_t block = 1;

    hid_t dataset_id
        = H5Dopen2(m_file, cName_Dir cName_ObjectItemAttributes, H5P_DEFAULT);
    hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
    hid_t dataspace_id = H5Dget_space(dataset_id);

    hsts = H5Sselect_hyperslab(
        dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

    // Write the dataset
    hsts = H5Dwrite(dataset_id, m_objectattributes_mtype, memspace_id,
        dataspace_id, H5P_DEFAULT, &adata);
    m_cmn.next_objectitemattr_idx++;
  }

  write_cmn();

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);

  *sts = SEV__SUCCESS;
  return 1;
}

int sev_dbhdf5::create_objecttable(pwr_tStatus* sts, char* tablename,
    pwr_tMask options, float deadband, pwr_tDeltaTime storage_time,
    pwr_tFloat32 scantime, unsigned int attrnum, sev_sHistAttr* attr)
{
  unsigned int table_len
      = int((pwr_tFloat32(storage_time.tv_sec) / scantime + 0.5));
  char gname[200], dname[200];
  herr_t hsts;
  hsize_t dim, max_dim;
  hid_t table_ftype;

  // Calculate size
  unsigned int ftype_size = 0;
  if (options & pwr_mSevOptionsMask_HighTimeResolution)
    ftype_size += 8;
  else
    ftype_size += 4;
  if (options & pwr_mSevOptionsMask_UseDeadBand)
    ftype_size += 4;

  for (unsigned int i = 0; i < attrnum; i++) {
    sev_eDataType dtype = get_datatype(attr[i].type, options, attr[i].size);
    if (dtype == sev_eDataType_Unknown)
      return 0;

    ftype_size += attr[i].size;
  }

  unsigned int offs = 0;
  table_ftype = H5Tcreate(H5T_COMPOUND, ftype_size);
  hsts = H5Tinsert(table_ftype, "time", offs, H5T_STD_U32LE);
  offs += 4;
  if (options & pwr_mSevOptionsMask_HighTimeResolution) {
    hsts = H5Tinsert(table_ftype, "ntime", offs, H5T_STD_U32LE);
    offs += 4;
  }
  if (options & pwr_mSevOptionsMask_UseDeadBand) {
    hsts = H5Tinsert(table_ftype, "jump", offs, H5T_STD_U32LE);
    offs += 4;
  }
  for (unsigned int i = 0; i < attrnum; i++) {
    int atype;
    switch (attr[i].type) {
    case pwr_eType_Boolean:
      atype = H5T_STD_U32LE;
      break;
    case pwr_eType_Int8:
      atype = H5T_STD_I8LE;
      break;
    case pwr_eType_Int16:
      atype = H5T_STD_I16LE;
      break;
    case pwr_eType_Int32:
      atype = H5T_STD_I32LE;
      break;
    case pwr_eType_Int64:
      atype = H5T_STD_I64LE;
      break;
    case pwr_eType_UInt8:
      atype = H5T_STD_U8LE;
      break;
    case pwr_eType_UInt16:
      atype = H5T_STD_U16LE;
      break;
    case pwr_eType_UInt32:
      atype = H5T_STD_U32LE;
      break;
    case pwr_eType_UInt64:
      atype = H5T_STD_U64LE;
      break;
    case pwr_eType_Float32:
      atype = H5T_IEEE_F32LE;
      break;
    case pwr_eType_Float64:
      atype = H5T_IEEE_F64LE;
      break;
    case pwr_eType_String:
      atype = H5Tcopy(H5T_C_S1);
      hsts = H5Tset_size(atype, attr[i].size);
      break;
    default:
      return 0;
    }
    hsts = H5Tinsert(table_ftype, attr[i].aname, offs, atype);
    offs += attr[i].size;

    switch (attr[i].type) {
    case pwr_eType_String:
      hsts = H5Tclose(atype);
      break;
    default:;
    }
  }

  // Create dataset
  strcpy(gname, cName_Tables);
  strcat(gname, "/");
  strcat(gname, tablename);
  hid_t group_id
      = H5Gcreate2(m_file, gname, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

  strcpy(dname, gname);
  strcat(dname, cName_Data);
  dim = table_len;
  max_dim = H5S_UNLIMITED;
  hid_t properties = H5Pcreate(H5P_DATASET_CREATE);
  hsts = H5Pset_chunk(properties, 1, &dim);
  hid_t dataspace_id = H5Screate_simple(1, &dim, &max_dim);
  hid_t dataset_id = H5Dcreate2(m_file, dname, table_ftype, dataspace_id,
      H5P_DEFAULT, properties, H5P_DEFAULT);

  H5Pclose(properties);
  H5Sclose(dataspace_id);
  H5Dclose(dataset_id);

  hid_t header_ftype = H5Tcreate(H5T_COMPOUND, 24);
  hsts = H5Tinsert(header_ftype, "data_size", 0, H5T_STD_U32LE);
  hsts = H5Tinsert(header_ftype, "data_type", 4, H5T_STD_I32LE);
  hsts = H5Tinsert(header_ftype, "first_idx", 8, H5T_STD_I32LE);
  hsts = H5Tinsert(header_ftype, "last_idx", 12, H5T_STD_I32LE);
  hsts = H5Tinsert(header_ftype, "first_time", 16, H5T_STD_U32LE);
  hsts = H5Tinsert(header_ftype, "last_time", 20, H5T_STD_U32LE);

  strcpy(dname, gname);
  strcat(dname, cName_Header);
  dim = 1;
  dataspace_id = H5Screate_simple(1, &dim, 0);
  dataset_id = H5Dcreate2(m_file, dname, header_ftype, dataspace_id,
      H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

  sev_sHeader header;
  header.data_size = table_len;
  header.data_type = sev_eDataType_;
  header.first_idx = -1;
  header.last_idx = -1;
  header.first_time = 0;
  header.last_time = 0;

  hsts = H5Dwrite(
      dataset_id, m_header_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &header);

  H5Sclose(dataspace_id);
  H5Dclose(dataset_id);
  H5Gclose(group_id);
  H5Tclose(header_ftype);
  H5Tclose(table_ftype);

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);

  return 1;
}

int sev_dbhdf5::check_objectitemattr(pwr_tStatus* sts, char* tablename,
    pwr_tOid oid, char* aname, char* oname, pwr_eType type, unsigned int size,
    unsigned int* idx)
{
  sev_item* item = &m_items[*idx];
  for (size_t j = 0; j < item->attr.size(); j++) {
    if (str_NoCaseStrcmp(aname, item->attr[j].aname) == 0) {
      if (type != item->attr[j].type || size != item->attr[j].size) {
        *sts = SEV__NOSUCHITEM;
        return 0;
        /*
        if( !handle_attrchange(sts, tablename, oid, aname,oname,type,size, *idx,
        j) ) {
          return 1;
        }
        item->attr[j].type = type;
        item->attr[j].size = size;
        update_objectitemattr(sts, tablename, aname, type, size);
        */
      }
      *sts = SEV__SUCCESS;
      return 1;
    }
  }
  *sts = SEV__NOSUCHITEM;

  return 0;
}

int sev_dbhdf5::get_objectitem_datatype(
    int item_idx, hid_t* atype, unsigned int* size, int* value_offset)
{
  hid_t mdatatype;
  herr_t hsts;

  // Calculate size
  unsigned int mtype_size = 0;
  if (m_items[item_idx].options & pwr_mSevOptionsMask_HighTimeResolution)
    mtype_size += 8;
  else
    mtype_size += 4;
  if (m_items[item_idx].options & pwr_mSevOptionsMask_UseDeadBand)
    mtype_size += 4;

  for (size_t i = 0; i < m_items[item_idx].attr.size(); i++) {
    sev_eDataType dtype = get_datatype(m_items[item_idx].attr[i].type,
        m_items[item_idx].options, m_items[item_idx].attr[i].size);
    if (dtype == sev_eDataType_Unknown)
      return 0;

    mtype_size += m_items[item_idx].attr[i].size;
  }

  unsigned int offs = 0;
  mdatatype = H5Tcreate(H5T_COMPOUND, mtype_size);
  hsts = H5Tinsert(mdatatype, "time", offs, H5T_STD_U32LE);
  offs += 4;
  if (m_items[item_idx].options & pwr_mSevOptionsMask_HighTimeResolution) {
    hsts = H5Tinsert(mdatatype, "ntime", offs, H5T_STD_U32LE);
    offs += 4;
  }
  if (m_items[item_idx].options & pwr_mSevOptionsMask_UseDeadBand) {
    hsts = H5Tinsert(mdatatype, "jump", offs, H5T_STD_U32LE);
    offs += 4;
  }
  *value_offset = offs;
  for (size_t i = 0; i < m_items[item_idx].attr.size(); i++) {
    int atype;
    switch (m_items[item_idx].attr[i].type) {
    case pwr_eType_Boolean:
      atype = H5T_STD_U32LE;
      break;
    case pwr_eType_Int8:
      atype = H5T_STD_I8LE;
      break;
    case pwr_eType_Int16:
      atype = H5T_STD_I16LE;
      break;
    case pwr_eType_Int32:
      atype = H5T_STD_I32LE;
      break;
    case pwr_eType_Int64:
      atype = H5T_STD_I64LE;
      break;
    case pwr_eType_UInt8:
      atype = H5T_STD_U8LE;
      break;
    case pwr_eType_UInt16:
      atype = H5T_STD_U16LE;
      break;
    case pwr_eType_UInt32:
      atype = H5T_STD_U32LE;
      break;
    case pwr_eType_UInt64:
      atype = H5T_STD_U64LE;
      break;
    case pwr_eType_Float32:
      atype = H5T_IEEE_F32LE;
      break;
    case pwr_eType_Float64:
      atype = H5T_IEEE_F64LE;
      break;
    case pwr_eType_String:
      atype = H5Tcopy(H5T_C_S1);
      hsts = H5Tset_size(atype, m_items[item_idx].attr[i].size);
      break;
    default:
      return 0;
    }
    hsts = H5Tinsert(mdatatype, m_items[item_idx].attr[i].aname, offs, atype);
    offs += m_items[item_idx].attr[i].size;

    switch (m_items[item_idx].attr[i].type) {
    case pwr_eType_String:
      hsts = H5Tclose(atype);
      break;
    default:;
    }
  }
  *atype = mdatatype;
  *size = mtype_size;
  return SEV__SUCCESS;
}

int sev_dbhdf5::store_objectvalue(pwr_tStatus* sts, int item_idx, int attr_idx,
    pwr_tTime time, void* buf, void* oldbuf, unsigned int size)
{
  hid_t mdatatype;
  herr_t hsts;
  char gname[200], dname[200], tname[200];
  unsigned int mtype_size;
  int value_offs;

  get_objectitem_datatype(item_idx, &mdatatype, &mtype_size, &value_offs);

  char* data = (char*)calloc(1, mtype_size);

  int offs = 0;
  *(pwr_tUInt32*)(&data[offs]) = time.tv_sec;
  offs += 4;
  if (m_items[item_idx].options & pwr_mSevOptionsMask_HighTimeResolution) {
    *(pwr_tUInt32*)(&data[offs]) = time.tv_nsec;
    offs += 4;
  }
  if (m_items[item_idx].options & pwr_mSevOptionsMask_UseDeadBand)
    *(pwr_tUInt32*)(&data[offs]) = 0;
  memcpy(&data[value_offs], buf, mtype_size - value_offs);

  // Read header
  strcpy(gname, cName_Tables);
  strcat(gname, "/");
  strcat(gname, m_items[item_idx].tablename);
  strcpy(dname, gname);
  strcat(dname, cName_Header);

  sev_sHeader header;
  hid_t dataset_id = H5Dopen2(m_file, dname, H5P_DEFAULT);
  hsts = H5Dread(
      dataset_id, m_header_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &header);

  if (header.first_idx == -1) {
    header.first_idx = 0;
    header.last_idx = 0;
  } else {
    header.last_idx++;
    if (header.last_idx >= (int)header.data_size)
      header.last_idx = 0;
    if (header.last_idx == header.first_idx) {
      header.first_idx++;
      if (header.first_idx >= (int)header.data_size)
        header.first_idx = 0;
    }
  }

  header.last_time = time.tv_sec;
  hsts = H5Dwrite(
      dataset_id, m_header_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &header);
  H5Dclose(dataset_id);

  // Create the data space for the dataset
  hsize_t dim = 1;
  hsize_t offset = header.last_idx;
  hsize_t count = dim;
  hsize_t stride = 1;
  hsize_t block = 1;

  strcpy(tname, gname);
  strcat(tname, cName_Data);

  dataset_id = H5Dopen2(m_file, tname, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  hsts = H5Sselect_hyperslab(
      dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

  // Write the dataset
  hsts = H5Dwrite(
      dataset_id, mdatatype, memspace_id, dataspace_id, H5P_DEFAULT, data);

  free(data);
  hsts = H5Sclose(memspace_id);
  hsts = H5Sclose(dataspace_id);
  hsts = H5Dclose(dataset_id);
  hsts = H5Tclose(mdatatype);

  hsts = H5Fflush(m_file, H5F_SCOPE_GLOBAL);

  return 1;
}

int sev_dbhdf5::get_item(pwr_tStatus* sts, void* thread, sev_item* item,
    pwr_tOid oid, char* attributename)
{
  unsigned int idx;

  get_item(sts, &idx, oid, attributename);
  if (EVEN(*sts))
    return 0;

  *item = m_items[idx];

  *sts = SEV__SUCCESS;
  return 1;
}

int sev_dbhdf5::get_item(
    pwr_tStatus* sts, unsigned int* idx, pwr_tOid oid, char* attributename)
{
  for (unsigned int i = 0; i < m_items.size(); i++) {
    if (m_items[i].deleted)
      continue;

    if (cdh_ObjidIsEqual(oid, m_items[i].oid)
        && str_NoCaseStrcmp(attributename, m_items[i].attr[0].aname) == 0) {
      *idx = i;
      *sts = SEV__SUCCESS;
      return 1;
    }
  }
  *sts = 0;
  return 0;
}

int sev_dbhdf5::get_objectitem(pwr_tStatus* sts, void* thread, sev_item* item,
    pwr_tOid oid, char* attributename)
{
  sev_sObjectItem ritem;
  herr_t hsts;

  hsize_t dim = 1;
  hid_t dataset_id = H5Dopen2(m_file, cName_Dir cName_ObjectItems, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  int found = 0;
  for (int idx = 0; idx < m_cmn.next_objectitems_idx; idx++) {
    // Create the data space for the dataset.
    hsize_t offset = idx;
    hsize_t count = dim;
    hsize_t stride = 1;
    hsize_t block = 1;

    hsts = H5Sselect_hyperslab(
        dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

    // Read the dataset
    hsts = H5Dread(dataset_id, m_objectitem_mtype, memspace_id, dataspace_id,
        H5P_DEFAULT, &ritem);

    if (ritem.deleted == 1 || ritem.vid == 0)
      continue;

    if (ritem.oix == oid.oix && ritem.vid == oid.vid
        && str_NoCaseStrcmp(attributename, ritem.aname) == 0) {
      item->id = ritem.id;
      strncpy(item->tablename, ritem.tablename, sizeof(item->tablename));
      item->oid.vid = ritem.vid;
      item->oid.oix = ritem.oix;
      strncpy(item->oname, ritem.oname, sizeof(item->oname));
      item->modtime.tv_sec = ritem.uptime;
      item->modtime.tv_nsec = 0;
      item->creatime.tv_sec = ritem.creatime;
      item->creatime.tv_nsec = 0;
      item->storagetime.tv_sec = ritem.storagetime;
      item->storagetime.tv_nsec = 0;
      strncpy(item->description, ritem.description, sizeof(item->description));
      item->scantime = ritem.scantime;
      item->deadband = ritem.deadband;
      item->options = ritem.options;

      get_objectitemattributes(sts, item, item->tablename);
      item->attrnum = item->attr.size();
      found = 1;
      *sts = SEV__SUCCESS;
      break;
    }
  }

  if (!found) {
    *sts = SEV__NOSUCHITEM;
    return 0;
  }
  return 1;
}

int sev_dbhdf5::get_objectitems(pwr_tStatus* sts)
{
  sev_sObjectItem ritem;
  herr_t hsts;

  hsize_t dim = 1;
  hid_t dataset_id = H5Dopen2(m_file, cName_Dir cName_ObjectItems, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  for (int idx = 0; idx < m_cmn.next_objectitems_idx; idx++) {
    // Create the data space for the dataset.
    hsize_t offset = idx;
    hsize_t count = dim;
    hsize_t stride = 1;
    hsize_t block = 1;

    hsts = H5Sselect_hyperslab(
        dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

    // Read the dataset
    hsts = H5Dread(dataset_id, m_objectitem_mtype, memspace_id, dataspace_id,
        H5P_DEFAULT, &ritem);

    if (ritem.deleted == 1 || ritem.vid == 0)
      continue;

    sev_item item;

    item.id = ritem.id;
    strncpy(item.tablename, ritem.tablename, sizeof(item.tablename));
    item.oid.vid = ritem.vid;
    item.oid.oix = ritem.oix;
    strncpy(item.oname, ritem.oname, sizeof(item.oname));
    item.modtime.tv_sec = ritem.uptime;
    item.modtime.tv_nsec = 0;
    item.creatime.tv_sec = ritem.creatime;
    item.creatime.tv_nsec = 0;
    item.storagetime.tv_sec = ritem.storagetime;
    item.storagetime.tv_nsec = 0;
    strncpy(item.description, ritem.description, sizeof(item.description));
    item.scantime = ritem.scantime;
    item.deadband = ritem.deadband;
    item.options = ritem.options;

    get_objectitemattributes(sts, &item, item.tablename);
    item.attrnum = item.attr.size();

    m_items.push_back(item);
  }

  *sts = SEV__SUCCESS;
  return 1;
}

int sev_dbhdf5::get_objectitemattributes(
    pwr_tStatus* sts, sev_item* item, char* tablename)
{
  sev_sObjectAttributes ritem;
  herr_t hsts;

  hsize_t dim = 1;
  hid_t dataset_id
      = H5Dopen2(m_file, cName_Dir cName_ObjectItemAttributes, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  int found = 0;
  for (int idx = 0; idx < m_cmn.next_objectitemattr_idx; idx++) {
    // Create the data space for the dataset.
    hsize_t offset = idx;
    hsize_t count = dim;
    hsize_t stride = 1;
    hsize_t block = 1;

    hsts = H5Sselect_hyperslab(
        dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

    // Read the dataset
    hsts = H5Dread(dataset_id, m_objectattributes_mtype, memspace_id,
        dataspace_id, H5P_DEFAULT, &ritem);

    if (ritem.deleted == 1 || ritem.attributesize == 0)
      continue;

    if (streq(ritem.tablename, tablename)) {
      sev_attr a;

      strncpy(a.aname, ritem.attributename, sizeof(a.aname));
      a.type = (pwr_eType)ritem.attributetype;
      a.size = ritem.attributesize;
      // strncpy( a.unit, ritem.unit, sizeof(a.unit));

      item->attr.push_back(a);
      item->value_size += a.size;
      found = 1;
    }
  }

  if (!found) {
    *sts = SEV__NOSUCHATTR;
    return 0;
  }

  *sts = SEV__SUCCESS;
  return 1;
}

int sev_dbhdf5::delete_old_objectdata(pwr_tStatus* sts, void* thread,
    char* tablename, pwr_tMask options, pwr_tTime limit, pwr_tFloat32 scantime,
    pwr_tFloat32 garbagecycle)
{
  return 1;
}

int sev_dbhdf5::check_deadband(pwr_eType type, unsigned int size,
    pwr_tFloat32 deadband, void* value, void* oldvalue)
{
  int deadband_active = 0;
  switch (type) {
  case pwr_eType_Float32:
    if (ABS(*(pwr_tFloat32*)value - *(pwr_tFloat32*)oldvalue) < deadband) {
      deadband_active = 1;
    }
    break;
  case pwr_eType_Float64:
    if (ABS(*(pwr_tFloat64*)value - *(pwr_tFloat64*)oldvalue) < deadband) {
      deadband_active = 1;
    }
    break;
  case pwr_eType_Int64:
    if (ABS(*(pwr_tInt64*)value - *(pwr_tInt64*)oldvalue) < deadband) {
      deadband_active = 1;
    }
    break;
  case pwr_eType_Int32:
    if (ABS(*(pwr_tInt32*)value - *(pwr_tInt32*)oldvalue) < deadband) {
      deadband_active = 1;
    }
    break;
  case pwr_eType_Int16:
    if (ABS(*(pwr_tInt16*)value - *(pwr_tInt16*)oldvalue) < deadband) {
      deadband_active = 1;
    }
    break;
  case pwr_eType_Int8:
  case pwr_eType_Char:
    if (ABS(*(pwr_tInt8*)value - *(pwr_tInt8*)oldvalue) < deadband) {
      deadband_active = 1;
    }
    break;
  case pwr_eType_UInt64:
    if (ABS(((pwr_tInt64)(*(pwr_tUInt64*)value - *(pwr_tUInt64*)oldvalue)))
        < deadband) {
      deadband_active = 1;
    }
    break;
  case pwr_eType_UInt32:
  case pwr_eType_Boolean:
    if (ABS(((pwr_tInt32)(*(pwr_tUInt32*)value - *(pwr_tUInt32*)oldvalue)))
        < deadband) {
      deadband_active = 1;
    }
    break;
  case pwr_eType_UInt16:
    if (ABS(((pwr_tInt16)(*(pwr_tUInt16*)value - *(pwr_tUInt16*)oldvalue)))
        < deadband) {
      deadband_active = 1;
    }
    break;
  case pwr_eType_UInt8:
    if (ABS(((pwr_tInt8)(*(pwr_tUInt8*)value - *(pwr_tUInt8*)oldvalue)))
        < deadband) {
      deadband_active = 1;
    }
    break;
  case pwr_eType_String:
  case pwr_eType_Text:
    if (!memcmp(value, oldvalue, size)) {
      deadband_active = 1;
    }
    break;
  default:;
  }
  return deadband_active;
}

int sev_dbhdf5::get_objectvalues(pwr_tStatus* sts, void* thread, sev_item* item,
    unsigned int size, pwr_tTime* starttime, pwr_tTime* endtime, int maxsize,
    pwr_tTime** tbuf, void** vbuf, unsigned int* bsize)
{
  unsigned int item_idx;
  get_item(sts, &item_idx, item->oid, item->attr[0].aname);
  if (EVEN(*sts)) {
    return 0;
  }

  sev_sHeader header;
  hid_t mdatatype;
  herr_t hsts;
  char gname[200], dname[200], tname[200];
  unsigned int first_time;
  int from_iter = 0;
  int to_iter = 0;
  int to_idx, from_idx;
  unsigned int to, from;
  unsigned int mtype_size;
  int value_offset;

  get_objectitem_datatype(item_idx, &mdatatype, &mtype_size, &value_offset);

  // Read header
  strcpy(gname, cName_Tables);
  strcat(gname, "/");
  strcat(gname, m_items[item_idx].tablename);
  strcpy(dname, gname);
  strcat(dname, cName_Header);

  hid_t dataset_id = H5Dopen2(m_file, dname, H5P_DEFAULT);
  hsts = H5Dread(
      dataset_id, m_header_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &header);

  if (header.first_idx == -1)
    return 0;

  hsize_t dim = 1;

  strcpy(tname, gname);
  strcat(tname, cName_Data);

  dataset_id = H5Dopen2(m_file, tname, H5P_DEFAULT);
  hid_t head_memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t head_dataspace_id = H5Dget_space(dataset_id);

  // Read time for first idx
  pwr_tStatus lsts = get_time(dataset_id, head_memspace_id, head_dataspace_id,
      mdatatype, header.first_idx, &first_time);

  to = endtime->tv_sec;
  from = starttime->tv_sec;
  int res = (int)((float)(to - from) / item->scantime / 1000);
  if (res < 2)
    res = 2;
  if (to < header.first_time || from > header.last_time) {
    printf("No samples\n");
    return 0;
  }
  if (to > header.last_time)
    to_idx = header.last_idx;
  else {
    lsts = time_to_idx(dataset_id, head_memspace_id, head_dataspace_id,
        mdatatype, to, header.data_size, header.first_idx, header.last_idx,
        first_time, header.last_time, res, 0, &to_iter, &to_idx);
  }

  if (from < first_time)
    from_idx = header.first_idx;
  else {
    lsts = time_to_idx(dataset_id, head_memspace_id, head_dataspace_id,
        mdatatype, from, header.data_size, header.first_idx, header.last_idx,
        first_time, header.last_time, res, 0, &from_iter, &from_idx);
  }

  printf("first time %d, last time %d res %d\n", first_time, header.last_time,
      res);
  printf("from idx  %d, to idx  %d, iter %d %d\n", from_idx, to_idx, from_iter,
      to_iter);

  *tbuf = (pwr_tTime*)calloc(maxsize, sizeof(pwr_tTime));
  *vbuf = calloc(maxsize, size);

  int bcnt = 0;
  char* vbufp = (char*)*vbuf;
  pwr_tTime* tbufp = (pwr_tTime*)*tbuf;
  int from_j = from_idx;
  int to_j = to_idx;
  if (to_j < from_j)
    to_j += header.data_size;
  int div = (to_j - from_j) / maxsize + 1;
  printf("range %d div %d\n", to_j - from_j, div);

  char* data = (char*)calloc(1, mtype_size);

  // Create the data space for the dataset
  dim = 1;

  strcpy(tname, gname);
  strcat(tname, cName_Data);

  dataset_id = H5Dopen2(m_file, tname, H5P_DEFAULT);
  hid_t memspace_id = H5Screate_simple(1, &dim, NULL);
  hid_t dataspace_id = H5Dget_space(dataset_id);

  for (int j = from_j; j < to_j; j++) {
    if (bcnt >= maxsize)
      break;

    unsigned int idx = j;
    if (idx >= header.data_size)
      idx -= header.data_size;

    if (!(idx % div == 0))
      continue;

    hsize_t offset = idx;
    hsize_t count = 1;
    hsize_t stride = 1;
    hsize_t block = 1;

    hsts = H5Sselect_hyperslab(
        dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

    // Read the dataset
    hsts = H5Dread(
        dataset_id, mdatatype, memspace_id, dataspace_id, H5P_DEFAULT, data);

    tbufp->tv_sec = *(pwr_tUInt32*)data;
    if (item->options & pwr_mSevOptionsMask_HighTimeResolution)
      tbufp->tv_nsec = *(pwr_tUInt32*)(data + 4);
    tbufp++;
    memcpy(vbufp, (char*)(data + value_offset), mtype_size - value_offset);
    vbufp += mtype_size - value_offset;

    bcnt++;
  }
  *bsize = bcnt;

  /* Close the dataset. */
  free(data);
  hsts = H5Sclose(head_memspace_id);
  hsts = H5Sclose(head_dataspace_id);
  hsts = H5Sclose(memspace_id);
  hsts = H5Sclose(dataspace_id);
  hsts = H5Dclose(dataset_id);
  hsts = H5Tclose(mdatatype);

  *sts = SEV__SUCCESS;
  return 1;
}

int sev_dbhdf5::get_time(hid_t dataset_id, hid_t memspace_id,
    hid_t dataspace_id, hid_t mtype, int idx, unsigned int* time)
{
  herr_t hsts;
  sev_uDataType data;

  /* Create the data space for the dataset. */
  hsize_t dim = 1;
  hsize_t offset = idx;
  hsize_t count = dim;
  hsize_t stride = 1;
  hsize_t block = 1;

  hsts = H5Sselect_hyperslab(
      dataspace_id, H5S_SELECT_SET, &offset, &stride, &count, &block);

  // Read the dataset
  hsts = H5Dread(
      dataset_id, mtype, memspace_id, dataspace_id, H5P_DEFAULT, &data);

  *time = data.dtAny.time;

  return 1;
}

int sev_dbhdf5::time_to_idx(hid_t dataset_id, hid_t memspace_id,
    hid_t dataspace_id, hid_t mtype, unsigned int stime, int size, int low_idx,
    int high_idx, unsigned int low_time, unsigned int high_time, int resolution,
    unsigned int prev_time, int* iter, int* ridx)
{
  unsigned int time;
  int idx;

  (*iter)++;
  if (*iter > ITER_MAX)
    return 0;

  if (high_idx < low_idx)
    high_idx += size;

  idx = (int)((float)(high_idx - low_idx) / (high_time - low_time)
          * (stime - low_time)
      + low_idx + 0.5);
  if (idx >= size)
    idx -= size;
  if (idx >= size)
    idx = size - 1;
  get_time(dataset_id, memspace_id, dataspace_id, mtype, idx, &time);
  printf("%d Search time : %d %d\n", idx, stime, time);
  if (ABS((int)time - (int)stime) <= resolution) {
    *ridx = idx;
    return 1;
  }
  if (prev_time && ABS((int)time - (int)prev_time) <= 1) {
    if (ABS((int)time - (int)low_time) > ABS((int)high_time - (int)time))
      idx = high_idx - (high_idx - low_idx) / 10;
    else
      idx = low_idx + (high_idx - low_idx) / 10;
    get_time(dataset_id, memspace_id, dataspace_id, mtype, idx, &time);
    printf("%d Search time : %d %d\n", idx, stime, time);
    if (ABS((int)time - (int)stime) <= resolution) {
      *ridx = idx;
      return 1;
    }
  }

  if (time < stime) {
    low_time = time;
    low_idx = idx;
  } else {
    high_time = time;
    high_idx = idx;
  }
  return time_to_idx(dataset_id, memspace_id, dataspace_id, mtype, stime, size,
      low_idx, high_idx, low_time, high_time, resolution, time, iter, ridx);
}

int sev_dbhdf5::handle_itemchange(
    pwr_tStatus* sts, char* tablename, unsigned int item_idx)
{
  return 1;
}

int sev_dbhdf5::handle_objectchange(
    pwr_tStatus* sts, char* tablename, unsigned int item_idx, bool newObject)
{
  return 1;
}

int sev_dbhdf5::store_stat(sev_sStat* stat)
{
  sev_sStatDb data;
  herr_t hsts;

  data.current_load = stat->current_load;
  data.medium_load = stat->medium_load;
  data.storage_rate = stat->storage_rate;
  data.medium_storage_rate = stat->medium_storage_rate;
  data.datastore_msg_cnt = stat->datastore_msg_cnt;
  data.dataget_msg_cnt = stat->dataget_msg_cnt;
  data.items_msg_cnt = stat->items_msg_cnt;
  data.eventstore_msg_cnt = stat->eventstore_msg_cnt;

  hid_t dataset_id = H5Dopen2(m_file, cName_Dir cName_Stat, H5P_DEFAULT);
  hsts = H5Dwrite(
      dataset_id, m_stat_mtype, H5S_ALL, H5S_ALL, H5P_DEFAULT, &data);
  H5Dclose(dataset_id);
  return 1;
}

char* sev_dbhdf5::oid_to_table(pwr_tOid oid, char* aname)
{
  static char tbl[40];
  unsigned char vid[4];

  memcpy(&vid, &oid.vid, sizeof(vid));
  sprintf(tbl, "O%3.3u_%3.3u_%3.3u_%3.3u_%8.8x_%s", vid[3], vid[2], vid[1],
      vid[0], oid.oix, cdh_Low(aname));

  // Replace '.' in attribute with '_'
  for (char* s = tbl; *s; s++) {
    if (*s == '.')
      *s = '_';
    if (*s == '[')
      *s = '$';
    if (*s == ']')
      *s = '$';
  }
  return tbl;
}

sev_dbhdf5::~sev_dbhdf5()
{
  free_mdatatype();
  H5Tclose(m_item_mtype);
  H5Tclose(m_objectitem_mtype);
  H5Tclose(m_objectattributes_mtype);
  H5Tclose(m_header_mtype);
  H5Tclose(m_stat_mtype);
  H5Fclose(m_file);

  for (size_t idx = 0; idx < m_items.size(); idx++) {
    if (m_items[idx].old_value != 0) {
      free(m_items[idx].old_value);
      m_items[idx].old_value = 0;
    }
  }
}

#else
extern int no_sev_dbhdf5;
int no_sev_dbhdf5 = 0;
#endif
