/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef sev_db_h
#define sev_db_h

#include <vector>

#include "pwr_class.h"
#include "pwr_baseclasses.h"
#include "pwr_sevclasses.h"

#include "rt_mh_net.h"
#include "rt_sev_net.h"
#include "sev_valuecache.h"

#define sev_cVersion 5

typedef enum {
  sev_eDbType_,
  sev_eDbType_Mysql,
  sev_eDbType_Sqlite,
  sev_eDbType_HDF5
} sev_eDbType;

typedef struct {
  float LinearRegrMaxTime;
  int LinearRegrAll;
  int MeanValueAll;
  float MeanValueInterval1;
  float MeanValueInterval2;
  pwr_tFileName Socket;
  char Engine[80];
} sev_sDbConfig;

typedef struct {
  float current_load;
  float medium_load;
  float storage_rate;
  float medium_storage_rate;
  float write_rate;
  float medium_write_rate;
  float write_quota;
  unsigned int datastore_msg_cnt;
  unsigned int dataget_msg_cnt;
  unsigned int items_msg_cnt;
  unsigned int eventstore_msg_cnt;
} sev_sStat;

typedef struct {
  pwr_tTime time;
  pwr_tFloat32 value;
  int stored;
} sev_StoredFloat32;

typedef struct {
  pwr_tTime time;
  pwr_tInt32 value;
  int stored;
} sev_StoredInt32;

typedef struct {
  int size;
  int first;
  int last;
  void* values;
} sev_sStoredValues;

class sev_attr {
public:
  sev_attr();
  sev_attr(const sev_attr& x);
  pwr_tOName aname;
  pwr_eType type;
  unsigned int size;
  unsigned int elem;
  pwr_tString16 unit;
  pwr_sClass_SevItem* ip;
  pwr_tDlid refid;
};

class sev_event {
public:
  unsigned int type;
  unsigned int eventprio;
  mh_sEventId eventid;
  pwr_tTime time;
  char eventtext[80];
  char eventname[80];
  pwr_tAttrRef supobject;
  unsigned int eventstatus;
};

class sev_item {
public:
  sev_item();
  sev_item(const sev_item& x);
  sev_item& operator=(const sev_item& x);
  ~sev_item();
  unsigned int id;
  char tablename[256];
  pwr_tOid oid;
  pwr_tOName oname;
  pwr_tTime creatime;
  pwr_tTime modtime;
  pwr_tDeltaTime storagetime;
  pwr_tRefId sevid;
  pwr_tString80 description;
  pwr_tFloat32 scantime;
  pwr_tFloat32 deadband;
  pwr_tMask options;
  int deadband_active;
  unsigned int last_id;
  // char		old_value[8];
  unsigned int value_size;
  void* old_value;
  int first_storage;
  unsigned int attrnum;
  std::vector<sev_attr> attr;
  pwr_tStatus status;
  pwr_tStatus logged_status;
  sev_valuecache* cache;
  unsigned int idx;
  int deleted;
  pwr_tFloat32 mean_value;
  pwr_tFloat32 mean_acc_time;
  pwr_tFloat32 variance_acc;
  int variance_cnt;
};

class sev_db {
public:
  std::vector<sev_item> m_items;
  float m_meanvalue_interval1;
  float m_meanvalue_interval2;
  sev_sDbConfig m_cnf;
  static char m_orignode[80];

  sev_db();
  virtual ~sev_db();

  pwr_tStatus tree_update();
  pwr_tStatus tree_update_value(int item_idx, int attr_idx, pwr_tTime time, void* buf);
  void get_item_idx(pwr_tStatus* sts, unsigned int* item_idx, pwr_tOid oid,
      char* attributename);
  void get_item_idx_by_name(pwr_tStatus* sts, unsigned int* item_idx, char* name);
  static void set_orignode(char *node) {strncpy(m_orignode, node, sizeof(m_orignode));}
  static void get_orignode(char *node) {strcpy(node, m_orignode);}

  virtual int check_item(pwr_tStatus* sts, pwr_tOid oid, char* oname,
      char* aname, pwr_tDeltaTime storatetime, pwr_eType type,
      unsigned int size, char* description, char* unit, pwr_tFloat32 scantime,
      pwr_tFloat32 deadband, pwr_tMask options, unsigned int* idx);
  virtual int add_item(pwr_tStatus* sts, pwr_tOid oid, char* oname, char* aname,
      pwr_tDeltaTime storagetime, pwr_eType type, unsigned int size,
      char* description, char* unit, pwr_tFloat32 scantime,
      pwr_tFloat32 deadband, pwr_tMask options, unsigned int* idx);
  virtual int delete_item(pwr_tStatus* sts, pwr_tOid oid, char* aname);
  virtual int store_value(pwr_tStatus* sts, void* thread, int item_idx,
      int attr_idx, pwr_tTime time, void* buf, unsigned int size);
  virtual int get_values(pwr_tStatus* sts, void* thread, pwr_tOid oid,
      pwr_tMask options, float deadband, char* aname, pwr_eType type,
      unsigned int size, pwr_tFloat32 scantime, pwr_tTime* creatime,
      pwr_tTime* starttime, pwr_tTime* endtime, int maxsize, pwr_tTime** tbuf,
      void** vbuf, unsigned int* bsize);
  virtual int get_items(pwr_tStatus* sts);
  virtual int delete_old_data(pwr_tStatus* sts, void* thread, char* tablename,
      pwr_tMask options, pwr_tTime limit, pwr_tFloat32 scantime,
      pwr_tFloat32 garbagecycle);

  virtual int check_objectitem(pwr_tStatus* sts, char* tablename, pwr_tOid oid,
      char* oname, char* aname, pwr_tDeltaTime storagetime, char* description,
      pwr_tFloat32 scantime, pwr_tFloat32 deadband, pwr_tMask options,
      unsigned int attrnum, sev_sHistAttr* attr, unsigned int* idx);
  virtual int add_objectitem(pwr_tStatus* sts, char* tablename, pwr_tOid oid,
      char* oname, char* aname, pwr_tDeltaTime storagetime, char* description,
      pwr_tFloat32 scantime, pwr_tFloat32 deadband, pwr_tMask options,
      unsigned int attrnum, sev_sHistAttr* attr, unsigned int* idx);
  virtual int store_objectitem(pwr_tStatus* sts, char* tablename, pwr_tOid oid,
      char* oname, char* aname, pwr_tDeltaTime storagetime, char* description,
      pwr_tFloat32 scantime, pwr_tFloat32 deadband, pwr_tMask options);
  virtual int store_event(
      pwr_tStatus* sts, void* thread, int item_idx, sev_event* ep);
  virtual int get_item(pwr_tStatus* sts, void* thread, sev_item* item,
      pwr_tOid oid, char* attributename);
  virtual int get_objectitem(pwr_tStatus* sts, void* thread, sev_item* item,
      pwr_tOid oid, char* attributename);
  virtual int get_objectitems(pwr_tStatus* sts);
  virtual int check_objectitemattr(pwr_tStatus* sts, char* tablename,
      pwr_tOid oid, char* aname, char* oname, pwr_eType type, unsigned int size,
      unsigned int* idx);
  virtual int delete_old_objectdata(pwr_tStatus* sts, void* thread,
      char* tablename, pwr_tMask options, pwr_tTime limit,
      pwr_tFloat32 scantime, pwr_tFloat32 garbagecycle);
  virtual int get_objectvalues(pwr_tStatus* sts, void* thread, sev_item* item,
      unsigned int size, pwr_tTime* starttime, pwr_tTime* endtime, int maxsize,
      pwr_tTime** tbuf, void** vbuf, unsigned int* bsize);
  virtual int handle_objectchange(
      pwr_tStatus* sts, char* tablename, unsigned int item_idx, bool newObject);
  virtual int get_events(pwr_tStatus *sts, void *thread, pwr_tOid,
			 pwr_tMask options, pwr_tMask eventtypemask, 
			 pwr_tMask eventpriomask, char *eventtext, char *eventname,
			 pwr_tTime *starttime, pwr_tTime *endtime, unsigned int numpoints, 
			 std::vector<sev_event> &list) {return 0;}
  virtual int repair_table(pwr_tStatus* sts, char* tablename);
  virtual int alter_engine(pwr_tStatus* sts, char* tablename);
  virtual int optimize(pwr_tStatus* sts, char* tablename);
  virtual int store_stat(sev_sStat* stat);
  virtual int begin_transaction(void* thread);
  virtual int commit_transaction(void* thread);
  virtual char* dbName();
  virtual void* new_thread();
  virtual void delete_thread(void* thread);

  static sev_db* open_database(sev_eDbType type, sev_sDbConfig* cnf);
  static int get_systemname(char* name);
};
#endif
