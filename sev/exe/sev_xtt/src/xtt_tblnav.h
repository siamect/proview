/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_tblnav_h
#define xtt_tblnav_h

/* xtt_attrnav.h -- Sev Table Viewer */

#include <vector>

#include "pwr_privilege.h"

#include "flow_browapi.h"

#include "rt_sevcli.h"

class ItemBase;

typedef enum {
  tblnav_eItemType_Local,
  tblnav_eItemType_LocalAttr,
  tblnav_eItemType_TreeLocal,
  tblnav_eItemType_TreeNode,
  tblnav_eItemType_TreeCommand
} tblnav_eItemType;

typedef enum {
  tblnav_mOpen_All = ~0,
  tblnav_mOpen_Children = 1 << 0,
  tblnav_mOpen_Attributes = 1 << 1
} tblnav_mOpen;

class TblNav_sevhistobjectattr {
public:
  pwr_tAName aname;
  pwr_eType type;
  unsigned int size;
  unsigned int elem;
  pwr_tString16 unit;
};

class TblNav_sevhistobject {
public:
  pwr_tOid oid;
  pwr_tAName oname;
  pwr_tDeltaTime storagetime;
  pwr_tTime creatime;
  pwr_tTime modtime;
  pwr_tString80 description;
  pwr_tFloat32 scantime;
  pwr_tFloat32 deadband;
  pwr_tMask options;
  unsigned int attrnum;
  std::vector<TblNav_sevhistobjectattr> objectattrlist;
};

class TblNav_command {
public:
  pwr_tAName oname;
  pwr_tCmd command;
};

typedef enum {
  tblnav_eTreeItemType_No,
  tblnav_eTreeItemType_SevHist,
  tblnav_eTreeItemType_Command
} tblnav_eTreeItemType;

class TblTreeNode {
public:
  TblTreeNode()
      : fth(0), fch(0), fws(0), bws(0), type(tblnav_eTreeItemType_No), idx(0),
        deleted(0)
  {
    strcpy(sname, "");
  }
  int fth;
  int fch;
  int fws;
  int bws;
  char sname[80];
  tblnav_eTreeItemType type;
  int idx;
  int deleted;
};

//! Class for handling of brow.
class TblNavBrow {
public:
  TblNavBrow(BrowCtx* brow_ctx, void* xn) : ctx(brow_ctx), tblnav(xn)
  {
  }
  ~TblNavBrow();

  BrowCtx* ctx;
  void* tblnav;
  brow_tNodeClass nc_object;
  brow_tNodeClass nc_attr;
  flow_sAnnotPixmap* pixmap_leaf;
  flow_sAnnotPixmap* pixmap_map;
  flow_sAnnotPixmap* pixmap_openmap;
  flow_sAnnotPixmap* pixmap_attr;
  flow_sAnnotPixmap* pixmap_attrarray;

  void free_pixmaps();
  void allocate_pixmaps();
  void create_nodeclasses();
  void brow_setup();
};

//! The navigation area of the attribute editor.
class TblNav {
public:
  TblNav(void* xn_parent_ctx, sevcli_sHistItem* xn_itemlist, int xn_item_cnt,
      pwr_tStatus* status);
  virtual ~TblNav();

  void* parent_ctx;
  TblNavBrow* brow;
  sevcli_sHistItem* itemlist;
  std::vector<TblNav_sevhistobject> sevhistobjectlist;
  std::vector<TblNav_command> commandlist;
  int item_cnt;
  void (*message_cb)(void*, char, const char*);
  int (*is_authorized_cb)(void*, unsigned int, int);
  int (*command_cb)(void*, char* cmd);
  std::vector<TblTreeNode> tree;
  int list_layout;

  void print(char* filename);
  int is_authorized(unsigned int access = pwr_mAccess_AllSev, int msg = 1);
  int create_items();
  void build_tree();
  void tree_add(char* name, int list_index, tblnav_eTreeItemType type);
  int get_select(ItemBase** item);
  int get_item(char* oname, TblNav_sevhistobject** hi);
  void get_zoom(double* zoom_factor);
  void zoom(double zoom_factor);
  void unzoom();
  void show_tree();
  void show_list();
  void delete_item(TblNav_sevhistobject* hi);
  void create_objectlist(
      sevcli_sHistItem* xn_itemlist, int xn_item_cnt, pwr_tStatus* status);
  void add_item_command(char* name, char* command);

  virtual void message(char sev, const char* text);
  virtual void set_inputfocus()
  {
  }
  static int init_brow_cb(FlowCtx* fctx, void* client_data);
};

class ItemBase {
public:
  ItemBase(tblnav_eItemType t);
  virtual ~ItemBase();
  tblnav_eItemType type;
  virtual int close(TblNav* tblnav, double x, double y);
};

//! Item for a normal attribute.
class ItemLocal : public ItemBase {
public:
  //  ItemLocal( TblNav *tblnav, sevcli_sHistItem *item, brow_tNode dest,
  //  flow_eDest dest_code);
  ItemLocal(TblNav* tblnav, TblNav_sevhistobject* item, brow_tNode dest,
      flow_eDest dest_code);

  virtual ~ItemLocal()
  {
  }

  //  sevcli_sHistItem 	item;
  TblNav_sevhistobject item;
  brow_tNode node;

  int open_attributes(TblNav* tblnav, double x, double y);
  int close(TblNav* tblnav, double x, double y);
};

class ItemLocalAttr : public ItemBase {
public:
  ItemLocalAttr(TblNav* tblnav, const char* iname, char* ivalue,
      brow_tNode dest, flow_eDest dest_code);
  virtual ~ItemLocalAttr();

  TblNav_sevhistobject item;
  // sevcli_sHistItem 	item;
  brow_tNode node;
};

//! Item for a normal attribute.
class ItemTreeLocal : public ItemLocal {
public:
  ItemTreeLocal(TblNav* tblnav, TblNav_sevhistobject* item, int index,
      brow_tNode dest, flow_eDest dest_code);
  virtual ~ItemTreeLocal();

  int idx;
};

//! Item for a normal attribute.
class ItemTreeNode : public ItemBase {
public:
  ItemTreeNode(TblNav* tblnav, char* name, int index, brow_tNode dest,
      flow_eDest dest_code);
  virtual ~ItemTreeNode();

  brow_tNode node;
  int idx;

  int open_children(TblNav* tblnav, double x, double y);
  int close(TblNav* tblnav, double x, double y);
};

//! Item for a command object.
class ItemTreeCommand : public ItemBase {
public:
  ItemTreeCommand(TblNav* tblnav, TblNav_command* xitem, int index,
      brow_tNode dest, flow_eDest dest_code);
  virtual ~ItemTreeCommand();

  TblNav_command item;
  int idx;
  brow_tNode node;
};

#endif
