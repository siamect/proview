/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef sev_import_h
#define sev_import_h

#include <vector>
#include "rt_que.h"
#include "rt_mh_net.h"
#include "rt_sev_net.h"

class sev_import;

class sev_node {
public:
  pwr_tNodeId nid;
  char name[80];
};

typedef struct {
  tree_sNode node;
  pwr_tRefId id;
  int idx;
} sev_sRefid;

class sev_exportitem {
public:
  sev_exportitem();
  sev_exportitem(const sev_exportitem& x);
  ~sev_exportitem() {}
  pwr_tOid oid;
  pwr_tOName oname;
  pwr_tOName aname;
  pwr_eType type;
  unsigned int size;
  unsigned int elem;
  pwr_tDlid refid;
  pwr_tRefId sevid;
  pwr_tString80 description;
  pwr_tFloat32 scantime;
  pwr_tMask options;
  unsigned int idx;
  pwr_sClass_SevExpItem* ip;
  int deleted;
  pwr_tFloat32 mean_value;
  pwr_tFloat32 mean_acc_time;
  pwr_tFloat32 variance_acc;
  int variance_cnt;
};

class sev_import {
public:
  sev_import()
    : m_refid(0), m_msg_id(0), m_config(0) {}

  ~sev_import();
  pwr_tStatus m_sts;
  pwr_tStatus m_import_status;
  std::vector<sev_node> m_nodes;
  tree_sTable* m_refid;
  unsigned int m_msg_id;
  pwr_tStatus m_server_status;
  pwr_sClass_SevImportServer* m_config;
  pwr_tDlid m_config_dlid;
  std::vector<sev_exportitem> m_items;

  int init(void);
  int connect(void);
  int request_items(pwr_tNid nid);
  int mainloop(void);
  int check_exportitems(sev_sMsgExportItems* msg, unsigned int size);
  int tree_update(void);
  int receive_exportdata( sev_sMsgExportData* msg, unsigned int size, 
			  pwr_tNid nid);
  int store_value(int item_idx, pwr_tTime time, void *buf, int size);
};
#endif
