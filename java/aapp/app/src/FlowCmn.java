/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.app;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

import android.graphics.Canvas;
import android.view.MotionEvent;


public class FlowCmn implements PlowCmnIfc {
  PwrtObjid objid;
  static final int display_level = Flow.mDisplayLevel_1;
  static final int scrollOffset = 200;
  boolean debug;
  boolean antiAliasing;
  PlowAppl appl;
  Gdh gdh;
  double zoom_factor;
  double base_zoom_factor;
  int offset_x;
  int offset_y;
  double x_right;
  double x_left;
  double y_high;
  double y_low;
  PlowDrawIfc gdraw;
  // Canvas canvas;
  int canvasWidth;
  int canvasHeight;
  FlowNode currentNode;
  FlowNode selectedNode;
  boolean opened = false;
  Object userData;
  double storedScrollX = 0;
  double storedScrollY = 0;
  
  Vector<FlowArrayElem> a = new Vector<FlowArrayElem>();
  Vector<FlowArrayElem> a_nc = new Vector<FlowArrayElem>();
  Vector<FlowArrayElem> a_cc = new Vector<FlowArrayElem>();

  public FlowCmn( PlowAppl appl, Gdh gdh, PwrtObjid objid) {
    this.gdh = gdh;
    this.objid = objid;
    this.appl = appl;
    this.debug = false;
    this.antiAliasing = true;
    currentNode = null;
    selectedNode = null;
  }
  
  @Override
  public int type() {
	  return PlowCmnIfc.TYPE_FLOW;
  }
  public PwrtObjid getObjid() {
	  return objid;
  }
  public void setGDraw(PlowDrawIfc gdraw) {
    this.gdraw = gdraw;
	canvasWidth = gdraw.getCanvasWidth();
	canvasHeight = gdraw.getCanvasHeight();
  }

  public void draw() {
	for ( int i = 0; i < a.size(); i++) {
		a.get(i).draw(new FlowPoint(this), null, false);
	}
  }
	
  @Override
  public void zoom(double factor) {
	  zoom_factor *= factor;
	  draw();
  }

  @Override
  public void zoom(double factor, double x, double y) {
          double scrollX = (x + offset_x) * factor - (x + offset_x) + storedScrollX;
          double scrollY = (y + offset_y) * factor - (y + offset_y) + storedScrollY;
	  storedScrollX = scrollX - (double)((int)scrollX);
	  storedScrollY = scrollY - (double)((int)scrollY);
      
	  zoom_factor *= factor;
	  scroll( (int)scrollX, (int)scrollY);

	  draw();
  }

  @Override
  public void scroll( int x, int y) {
	  offset_y += y;
	  offset_x += x;
	  if ( offset_x > x_right * zoom_factor - canvasWidth + scrollOffset)
		  offset_x = (int)(x_right * zoom_factor - canvasWidth) + scrollOffset;
	  if ( offset_x < x_left * zoom_factor - scrollOffset)
		  offset_x = (int)(x_left * zoom_factor) - scrollOffset;
	  if ( offset_y > y_high * zoom_factor - canvasHeight + 80 + scrollOffset)
		  offset_y = (int)(y_high * zoom_factor - canvasHeight + 80) + scrollOffset;
	  if ( offset_y < y_low * zoom_factor - scrollOffset)
		  offset_y = (int)(y_low * zoom_factor) - scrollOffset;
  }
  @Override
  public void pageUp() {
	  offset_y -= canvasHeight * 0.8;
	  if ( offset_y < y_low * zoom_factor)
		  offset_y = (int)(y_low * zoom_factor);
  }
  @Override
  public void pageDown() {
	  offset_y += canvasHeight * 0.8;
	  if ( offset_y > y_high * zoom_factor - canvasHeight + 80)
		  offset_y = (int)(y_high * zoom_factor - canvasHeight + 80);
  }	

  @Override
  public void eventHandler(int action, double fx, double fy) {
		double x = (fx + offset_x) / zoom_factor;
		double y = (fy + offset_y) / zoom_factor;
		int type;

		switch( action) {
		case PlowCmnIfc.ACTION_CLICK:
 			type = PlowEvent.TYPE_CLICK;
			break;
		case PlowCmnIfc.ACTION_LONG_CLICK:
 			type = PlowEvent.TYPE_LONG_CLICK;
			break;
		default:
			return;
		}
		
		System.out.println("Event: " + type + "(" + x + "," + y + ")");
		
		PlowEvent e = new PlowEvent(type, x, y, null);
		currentNode = null;
		for ( int i = 0; i < a.size(); i++) {
			if ( a.get(i).eventHandler(e))
				break;
		}	

		appl.eventHandler(e);

		switch (e.type) {
		case PlowEvent.TYPE_OBJECT_DELETED:
			if ( currentNode == selectedNode)
				selectedNode = null;
			break;
		}
		
	}

    @Override
    public void select(Object node) {
		selectedNode = (FlowNode)node;
	}
    @Override
	public void selectClear() {
		selectedNode = null;
	}
    @Override
	public Object getSelect() {
		return selectedNode;
	}

    public void centerObject(FlowArrayElem object) {
    	if ( object.type() == Flow.eObjectType_Node) {
    		FlowDimension d = ((FlowNode)object).measureNode();

    		int x = (int)((d.x1 + d.x2) / 2 * zoom_factor - canvasWidth / 2);
    		int y = (int)((d.y1 + d.y2) / 2 * zoom_factor - canvasHeight / 2);

    		scroll(x - offset_x, y - offset_y);
    		draw();
    	}
    }	
	
    public void dynamicOpen() {
    	System.out.println("FlowCmn::dynamicOpen");
    	for ( int i = 0; i < a.size(); i++) {
    		if ( a.get(i).type() == Flow.eObjectType_Node)
    			((FlowNode)a.get(i)).dynamicOpen();
    	}
    	opened = true;
    }

    public void dynamicClose() {
    	for ( int i = 0; i < a.size(); i++) {
    		if ( a.get(i).type() == Flow.eObjectType_Node)
    			((FlowNode)a.get(i)).dynamicClose();
    	}
    }

    public void dynamicUpdate() {
    	if (!opened)
    		return;
    	System.out.println("FlowCmn::dynamicUpdate");
    	for ( int i = 0; i < a.size(); i++) {
    		if ( a.get(i).type() == Flow.eObjectType_Node)
    			((FlowNode)a.get(i)).dynamicUpdate(false);
    	}
    }
    public void configure() {}
	public Object getUserData() {
		return userData;
	}
	public void setUserData(Object userData) {
		this.userData = userData;
	}

	public void setCanvas(Canvas canvas) {
		gdraw.setCanvas(canvas);
	}
	public Object getFirst() {
		return null;
	}
	public Object getLast() {
		return null;
	}
	public Object getNext(Object elem) {
		return null;
	}
	public Object getPrevious(Object elem) {
		return null;
	}
	public int remove(Object e) {
		return 0;
	}
        public void setNodraw() {
	}
        public void resetNodraw() {
	}
        public int getNodraw() {
	    return 0;
	}
}
