/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.app;
import java.io.*;
import java.util.*;

public class FlowRect implements FlowArrayElem {
  FlowPoint ll;
  FlowPoint ur;
  int draw_type;
  int line_width;
  int display_level;
  int fill;
  FlowCmn cmn;

  public FlowRect( FlowCmn cmn) {
    this.cmn = cmn;
    ll = new FlowPoint(cmn);
    ur = new FlowPoint(cmn);
  }

  @Override
  public int type() {
	 return Flow.eObjectType_Rect;
  }

  public void open( BufferedReader reader) {
    String line;
    StringTokenizer token;
    boolean end = false;

    try {
      while( (line = reader.readLine()) != null) {
	token = new StringTokenizer(line);
	int key = new Integer(token.nextToken()).intValue();
	if ( cmn.debug) System.out.println( "line : " + key);

	switch ( key) {
	case Flow.eSave_Rect_draw_type:
	  draw_type  = new Integer(token.nextToken()).intValue();
	  break;
	case Flow.eSave_Rect_line_width:
	  line_width  = new Integer(token.nextToken()).intValue();
	  break;
	case Flow.eSave_Rect_display_level:
	  display_level = new Integer( token.nextToken()).intValue();
	  break;
	case Flow.eSave_Rect_fill:
	  fill = new Integer( token.nextToken()).intValue();
	  break;
	case Flow.eSave_Rect_ll:
	  ll.open( reader);
	  break;
	case Flow.eSave_Rect_ur:
	  ur.open( reader);
	  break;
	case Flow.eSave_End:
	  end = true;
	  break;
	default:
	  System.out.println( "Syntax error in FlowRect");
	  break;
	}
	if ( end)
	  break;
      }
    } catch ( Exception e) {
      System.out.println( "IOExeption FlowRect");
    }
  }

  public void draw( FlowPoint p, FlowNodeIfc node, boolean highlight) {
      if ( (display_level & FlowCmn.display_level) == 0)
    	  return;

      int color;

      if ( highlight)
    	  color = Plow.COLOR_RED;
      else
    	  color = Plow.COLOR_BLACK;

      cmn.gdraw.rect(true, color, (float)((ll.x + p.x) * cmn.zoom_factor - cmn.offset_x), 
				(float)((ll.y + p.y) * cmn.zoom_factor - cmn.offset_y), 
				(float)((ur.x + p.x) * cmn.zoom_factor - cmn.offset_x), 
				(float)((ur.y + p.y) * cmn.zoom_factor - cmn.offset_y));

  }
  @Override
  public boolean getSelect() {
	  return false;
  }
  @Override
  public void setSelect(boolean select) {	  
  }
  public boolean eventHandler(PlowEvent e) {
	  return false;	
  }	

}













