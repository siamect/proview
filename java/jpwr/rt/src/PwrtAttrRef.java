/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.rt;
import java.io.Serializable;

/**
 * Attribute reference.
 * <p>
 * Basic type attribute reference. Reference to an attribute in an object. The reference 
 * contains 
 * <li>- objid of the referenced object 
 * <li>- classid of body 
 * <li>- offset of the attribute 
 * <li>- size of the attribute 
 * <li>- a flagword. 
 * <p>
 * If the bit Indirect is set, the attribute is a pointer. The string notation for an attrref 
 * is _A'vid':'oix'('classvolume':'class').'attribute'[index], e.g.
 * _A0.123.34.63:1234567890(pwrb:Ai).FilterAttribute[2] or if the class is unknown, the notation 
 * is _A'vid':'oix'('cid').('bix')'offset'.'size', e.g. _A0.123.34.63.1234567890(_C0.1:34).(_B1)60.34 
 * where vid is the volume id for the object. oix is the object index for the object. cid is 
 * classid for the class of the object. bix is body index for the body of the attribute. 
 * @author	cs
 */

public class PwrtAttrRef implements Serializable
{
  static final long serialVersionUID = -7487543277705441066L;

  public static final int INDIRECT    	= 1 << 0;
  public static final int OBJECT   	= 1 << 1;
  public static final int OBJECTATTR   	= 1 << 2;
  public static final int ARRAY    	= 1 << 3;
  public static final int SHADOWED    	= 1 << 4;
  public static final int CASTATTR    	= 1 << 5;
  public static final int DISABLEATTR   = 1 << 6;

  public PwrtObjid objid;
  public int body;
  public int offset;
  public int size;
  public int flags;
  
  public PwrtAttrRef( PwrtObjid objid, int body, int offset,
		    int size, int flags) {
    this.objid = objid;
    this.offset = offset;
    this.body = body;
    this.size = size;
    this.flags = flags;
  }
  public PwrtAttrRef( PwrtObjid objid) {
    this.objid = objid;
    this.body = 0;
    this.offset = 0;
    this.size = 0;
    this.flags = OBJECT;
  }
  public PwrtObjid getObjid() { return objid;}
  public int getOix() { return objid.getOix();}
  public int getVid() { return objid.getVid();}
  public int getBody() { return body;}
  public int getOffset() { return offset;}
  public int getSize() { return size;}
  public int getFlags() { return flags;}

  public boolean isNull() {
    return objid.isNull();
  }
  public boolean isEqual( PwrtAttrRef aref) {
    return ( objid.isEqual( aref.objid) &&
	     offset == aref.offset && size == aref.size);
  }
}
