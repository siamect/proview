/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.rt;
import java.util.Vector;

/**
   Interface to gdh, the Global Data Handler.
   <p>
   This Gdh class in the pwr_rt package uses native functions as interface to
   the Proview kernel.
   <p>
   A corresponding Gdh class also exist in the pwr_rt_client package that is used
   by web clients and apps. This class is communicating via a socket and the GdhServer
   class.
*/
public class Gdh {
    static {
	System.loadLibrary("jpwr_rt_gdh");
    }
  
    private static boolean initDone = false;

    private static String currentSystemGroup = null;
    private static String	currentUser = null;
    private static String currentPassword = null;
    private static int defaultPrivilege = Pwr.mPrv_RtRead;
    private static int currentPrivilege = defaultPrivilege;


    public Gdh( GdhApplIfc root) {

	if ( !initDone) {
	    init();
	    initDone = true;
	}
    }

    /** 
	Close gdh.
    */
    public void close() {
    }
  
    public void getObjectRefInfoAll() {
    }

    public void refObjectInfoList() {
    }
  
    /**
       Not used in native Gdh.
    */
    public void printStatistics( int lockRejected) {
    }

    /**
       Set the value of a float attribute.
    */
    public PwrtStatus setObjectInfo( String attributeName, float value) {
	return setObjectInfoFloat( attributeName, value);
    } 

    /**
       Set the value of a boolean attribute.
    */
    public PwrtStatus setObjectInfo( String attributeName, boolean value) {
	return setObjectInfoBoolean( attributeName, value);
    } 

    /**
       Set the value of an integer attribute.
    */
    public PwrtStatus setObjectInfo( String attributeName, int value) {
	return setObjectInfoInt( attributeName, value);
    } 

    /**
       Set the value of a string attribute.
    */
    public PwrtStatus setObjectInfo( String attributeName, String value) {
	return setObjectInfoString( attributeName, value);
    } 

    /**
       User login.
    */
    public int login( String user, String password) {
	// Get system group
	String systemGroup = "NotUsed";
	CdhrInt ret = RtSecurity.checkUser( systemGroup, user, 
					    password);
	if ( ret.evenSts()) {
	    logout();
	    return ret.getSts();
	}
	currentSystemGroup = systemGroup;
	currentUser = user;
	currentPassword = password;
	currentPrivilege = ret.value;
	return 1;
    }

    /**
       Log out the current user.
    */
    public void logout() {
	currentSystemGroup = null;
	currentUser = null;
	currentPassword = null;
	currentPrivilege = defaultPrivilege;
    }

    /**
       Not used in native Gdh.
    */
    public int checkUser() {
	return 1;
    }

    /**
       Get the current user.
    */
    public String getUser() {
	return currentUser;
    }
    public int getPrivilege() {
	return currentPrivilege;
    }

    /**
       Check if the current users privileges matches the access.
    */
    public boolean isAuthorized( int access) {
	return (access & currentPrivilege) != 0;
    }

    /**
       Not used in native Gdh.
    */
    public PwrtStatus createInstanceFile( String from, String to, 
					  String instance) {
	// Dummy
	return new PwrtStatus(0);
    }
    /**
       Not used in native Gdh.
    */
    public void logString( String str) {
	// Dummy
    }

    /**
       Not used in native Gdh.
    */
    public PwrtStatus unrefObjectInfoAll() {
	// Used by applets only, not by applications
	return new PwrtStatus(0);
    }

    /**
       Not used in native Gdh.
    */
    public boolean isBusy() {
	// Used by applets only
	return false;
    }

    //public Vector getAllClassAttributes( int classid, PwrtObjid objid_obj )
    public Vector<CdhrObjAttr> getAllClassAttributes( int classid, PwrtObjid objid_obj) {
	//System.out.println("getAllClassAttributes" + classid + " " + objid_obj.oix + " " + objid_obj.vid);

	String name = this.objidToName(objid_obj, Cdh.mName_pathStrict).str;

	CdhrClassId cdhrClassId = this.getObjectClass(objid_obj);

	GdhrsAttrDef[] gdhrsAttrDefArr = this.getObjectBodyDef(classid, new PwrtAttrRef(objid_obj));

	Vector<CdhrObjAttr> v = new Vector<CdhrObjAttr>();
	//Vector v = new Vector();

	for( int i = 0;i<gdhrsAttrDefArr.length;i++) {
	    if ( gdhrsAttrDefArr[i] == null)
		break;
	    //System.out.println("getAllClassAttributesFor:" + i + gdhrsAttrDefArr[i].attrName);

	    while ( gdhrsAttrDefArr[i].attrName.startsWith("Super."))
		gdhrsAttrDefArr[i].attrName = gdhrsAttrDefArr[i].attrName.substring(6);
	    CdhrObjAttr oa;
	    if ( (gdhrsAttrDefArr[i].info.Flags & Pwr.mAdef_class) > 0) {
		oa = new CdhrObjAttr(this.nameToObjid(name + "." + gdhrsAttrDefArr[i].attrName).objid,
				     gdhrsAttrDefArr[i].attrName,
				     gdhrsAttrDefArr[i].typeRef,
				     gdhrsAttrDefArr[i].info.Size,
				     gdhrsAttrDefArr[i].info.Flags,
				     gdhrsAttrDefArr[i].info.Elements);
		CdhrObjid classObj = this.classIdToObjid( gdhrsAttrDefArr[i].info.Type);
		if ( classObj.oddSts())
		    oa.className = this.objidToName(classObj.objid, Cdh.mName_object).str;
            }
	    else {
		//System.out.println("getAllClassAttr:" + name + "." + gdhrsAttrDefArr[i].attrName);
		oa = new CdhrObjAttr(this.nameToObjid(name + "." + gdhrsAttrDefArr[i].attrName).objid,
				     gdhrsAttrDefArr[i].attrName,
				     gdhrsAttrDefArr[i].info.Type,
				     gdhrsAttrDefArr[i].info.Size,
				     gdhrsAttrDefArr[i].info.Flags,
				     gdhrsAttrDefArr[i].info.Elements);
	    }
	    v.add(oa);
	}

	return v;
    }

    public Vector<CdhrObjAttr> getAllClassAttributes( String name )
    //public Vector getAllClassAttributes( String name )
    {

	CdhrAttrRef attrRef = this.nameToAttrRef(name);
	CdhrTypeId cdhrTypeId = this.getAttrRefTid( attrRef.aref );

	GdhrsAttrDef[] gdhrsAttrDefArr = this.getObjectBodyDef(cdhrTypeId.getTypeId(), attrRef.aref);

	if(gdhrsAttrDefArr == null)
	    {
		System.out.println("getAllClassAttributes(String name) gdhrsAttrDefArr == null");
		return this.getAllClassAttributes(this.getObjectClass(this.nameToObjid(name).objid).classId, this.nameToObjid(name).objid );

	    }
	Vector<CdhrObjAttr> v = new Vector<CdhrObjAttr>();
	//Vector v = new Vector();
	for(int i = 0;i<gdhrsAttrDefArr.length;i++)
	    {
		if(gdhrsAttrDefArr[i] == null)
		    break;
		//System.out.println("getAllClassAttributesFor:" + i + gdhrsAttrDefArr[i].attrName);

		while(gdhrsAttrDefArr[i].attrName.startsWith("Super."))
		    gdhrsAttrDefArr[i].attrName = gdhrsAttrDefArr[i].attrName.substring(6);
		CdhrObjAttr oa;
		if((gdhrsAttrDefArr[i].info.Flags & Pwr.mAdef_class) > 0)
		    {
			oa = new CdhrObjAttr(this.nameToObjid(name + "." + gdhrsAttrDefArr[i].attrName).objid,
					     gdhrsAttrDefArr[i].attrName,
					     gdhrsAttrDefArr[i].typeRef,
					     gdhrsAttrDefArr[i].info.Size,
					     gdhrsAttrDefArr[i].info.Flags,
					     gdhrsAttrDefArr[i].info.Elements);
		    }
		else
		    {
			//System.out.println("getAllClassAttr2:" + name + "." + gdhrsAttrDefArr[i].attrName);
			oa = new CdhrObjAttr(this.nameToObjid(name + "." + gdhrsAttrDefArr[i].attrName).objid,
					     gdhrsAttrDefArr[i].attrName,
					     gdhrsAttrDefArr[i].info.Type,
					     gdhrsAttrDefArr[i].info.Size,
					     gdhrsAttrDefArr[i].info.Flags,
					     gdhrsAttrDefArr[i].info.Elements);
		    }
		v.add(oa);
	    }
	return v;
    }





    public Vector<CdhrObjid> getAllSiblings( PwrtObjid objid )
    //public Vector getAllSiblings( PwrtObjid objid )
    {
	CdhrObjid sibling = this.getNextSibling(objid);
	Vector<CdhrObjid> v = new Vector<CdhrObjid>();
	//Vector v = new Vector();
	while(sibling.oddSts())
	    {
		v.add(sibling);
		sibling = this.getNextSibling(sibling.objid);
	    }
	return v;
    }
  
    public Vector<GdhrGetXttObj> getAllXttSiblings( PwrtObjid objid )
    //public Vector getAllXttSiblings( PwrtObjid objid )
    {
	String name = null;
	String fullName = null;
	String description = " ";
	String className = null;
	CdhrObjid cdhrObjId;
	CdhrClassId cdhrClassId;
	int sts = 2;
	boolean hasChildren = false;
	Vector<GdhrGetXttObj> v = new Vector<GdhrGetXttObj>();
	//Vector v = new Vector();
    
	CdhrObjid classObj;
    
	cdhrObjId = this.getNextSibling(objid);
	while(cdhrObjId.oddSts())
	    {
		cdhrClassId = this.getObjectClass(cdhrObjId.objid);
		if(cdhrClassId.oddSts())
		    {
			classObj = this.classIdToObjid( cdhrClassId.classId );
			if(classObj.oddSts())
			    {
				className = this.objidToName(classObj.objid, Cdh.mName_object).str;
				fullName = this.objidToName( cdhrObjId.objid, Cdh.mName_pathStrict).str;
				name = this.objidToName( cdhrObjId.objid, Cdh.mName_object).str;
				CdhrString ret = this.getObjectInfoString(fullName + ".Description");
				if(ret.oddSts())
				    description = ret.str;
				else
				    description = " ";
				sts = 1;
				if(this.getChild(cdhrObjId.objid).oddSts())
				    {
					hasChildren = true;
				    }
			    }
		    }
	
		v.add(new GdhrGetXttObj(name, 
					fullName, 
					description,
					className, 
					cdhrObjId, 
					cdhrClassId, 
					sts,
					hasChildren));
		cdhrObjId = this.getNextSibling(cdhrObjId.objid);
		hasChildren = false;
		sts = 2;
	    }
	return v;
    }
    public Vector<GdhrGetXttObj> getAllXttChildren( PwrtObjid objid )
    //public Vector getAllXttChildren( PwrtObjid objid )
    {
	String name = null;
	String fullName = null;
	String description = " ";
	String className = null;
	CdhrObjid cdhrObjId;
	CdhrClassId cdhrClassId;
	int sts = 2;
	boolean hasChildren = false;
	Vector<GdhrGetXttObj> v = new Vector<GdhrGetXttObj>();
	//Vector v = new Vector();
    
	CdhrObjid classObj;
    
	cdhrObjId = this.getChild(objid);
	while(cdhrObjId.oddSts())
	    {
		//System.out.println("whilegetAllXttChildren");
		cdhrClassId = this.getObjectClass(cdhrObjId.objid);
		if(cdhrClassId.oddSts())
		    {
			classObj = this.classIdToObjid( cdhrClassId.classId );
			if(classObj.oddSts())
			    {
				className = this.objidToName(classObj.objid, Cdh.mName_object).str;
				fullName = this.objidToName( cdhrObjId.objid, Cdh.mName_pathStrict).str;
				name = this.objidToName( cdhrObjId.objid, Cdh.mName_object).str;
				CdhrString ret = this.getObjectInfoString(fullName + ".Description");
				if(ret.oddSts())
				    description = ret.str;
				else
				    description = " ";
				sts = 1;
				if(this.getChild(cdhrObjId.objid).oddSts())
				    {
					hasChildren = true;
				    }
			    }
		    }
	
		v.add(new GdhrGetXttObj(name, 
					fullName, 
					description,
					className, 
					cdhrObjId, 
					cdhrClassId, 
					sts,
					hasChildren));
		cdhrObjId = this.getNextSibling(cdhrObjId.objid);
		hasChildren = false;
		sts = 2;
	    }
	return v;
    }

    public Vector<GdhrRefObjectInfo> refObjectInfo_Vector( Vector vec )
    //public Vector refObjectInfo_Vector( Vector vec )
    {
	Vector<GdhrRefObjectInfo> retVec = new Vector<GdhrRefObjectInfo>();
	//Vector retVec = new Vector();
	for(int i = 0;i < vec.size();i++)
	    {
		GdhrRefObjectInfo ret = this.refObjectInfo( (String)vec.get(i) );

		// System.out.println("refObjectInfo_vector: " + (String)vec.get(i) + " sts: " + ret.sts);
		retVec.add(ret);
	    }
	return retVec;
    }
    public Vector unrefObjectInfo_Vector( Vector vec )
    { 
	Vector retVec = new Vector();
	//    for(int i = 0;i < vec.size();i++)
	//    {
	//      GdhrRefObjectInfo ret = this.refObjectInfo( (String)vec.get(i) );
	//      retVec.add(ret);
	//    }
	return retVec;
    }
  
    private native int init();
    private native PwrtStatus setObjectInfoFloat( String attributeName, float value);
    private native PwrtStatus setObjectInfoInt( String attributeName, int value);
    private native PwrtStatus setObjectInfoBoolean( String attributeName, boolean value);
    private native PwrtStatus setObjectInfoString( String attributeName, String value);

    /**
       Get the value of a float attribute.
    */
    public native CdhrFloat getObjectInfoFloat( String attributeName);

    /**
       Get the value of an integer attribute.
    */
    public native CdhrInt getObjectInfoInt( String attributeName);

    /**
       Get the value of a boolean attribute.
    */
    public native CdhrBoolean getObjectInfoBoolean( String attributeName);

    /**
       Get the value of a string attribute.
    */
    public native CdhrString getObjectInfoString( String attributeName);

    /**
       Get the value of an attribute of type pwr_tObjid.
    */
    public native CdhrObjid getObjectInfoObjid( String attributeName);

    /**
       Get the values of a float array attribute.
    */
    public native CdhrFloatArray getObjectInfoFloatArray( String attributeName, int size);

    /**
       Get the value of an integer array attribute.
    */
    public native CdhrIntArray getObjectInfoIntArray( String attributeName, int size);

    /**
       Toggle the value of a boolean attribute.
    */
    public native PwrtStatus toggleObjectInfo( String attributeName);

    /**
       Subscribe to an attribute.
    */
    public native GdhrRefObjectInfo refObjectInfo( String attributeName);

    /**
       Get the subscribed value of a float attribute.
    */
    public native float getObjectRefInfoFloat( int id);

    /**
       Get the subscribed value of a boolean attribute.
    */
    public native boolean getObjectRefInfoBoolean( int id);

    /**
       Get the subscribed value of an integer attribute.
    */
    public native int getObjectRefInfoInt( int id);

    /**
       Get the subscribed value of a string attribute.
    */
    public native String getObjectRefInfoString( int id, int typeid);

    /**
       Get the subscribed values of a float array attribute.
    */
    public native float[] getObjectRefInfoFloatArray( int id, int elements);

    /**
       Get the subscribed values of a boolean array attribute.
    */
    public native boolean[] getObjectRefInfoBooleanArray( int id, int elements);

    /**
       Get the subscribed values of an integer array attribute.
    */
    public native int[] getObjectRefInfoIntArray( int id, int elements);

    /**
       Get the subscribed values of a string array attribute.
    */
    public native String[] getObjectRefInfoStringArray( int id, int typeid, int size, int elements);

    /**
       Close a subscription.
    */
    public native PwrtStatus unrefObjectInfo( PwrtRefId refid);

    /**
       Get the object identity for an object specified by name.
    */
    public native CdhrObjid nameToObjid( String objectName);

    /**
       Get the attribute reference for an attribute specified by name.
    */
    public native CdhrAttrRef nameToAttrRef( String objectName);

    /**
       Get the name of an object from object identity.
       @param objid    Object identity of the object.
       @param nameType Type of returned name, eg Cdh.mName_object, Cdh.mName_pathStrict or
       Cdh.mName_pathStrict.
    */
    public native CdhrString objidToName( PwrtObjid objid, int nameType);

    /**
       Get the name of an attribute from attribute reference.
       @param aref  Attribut reference for the attribute.
       @param nameType Type of returned name, eg Cdh.mName_object, Cdh.mName_pathStrict or
       Cdh.mName_pathStrict.
    */
    public native CdhrString attrRefToName( PwrtAttrRef aref, int nameType);

    /**
       Get the first root object in the object tree.

       <p>Returns the object identity for the first root object
       <p>Other root objects are fetched with getNextObject()
    */
    public native CdhrObjid getRootList();

    /**
       Get the object identity of the next object in the list of objects of
       a certain class.
       @param objid Object identity for the previous object.
    */
    public native CdhrObjid getNextObject( PwrtObjid objid);
    /** 
	Get the object identity of the first child of an object.
	<p>Other children are fetched with getNextSibling().
    */
    public native CdhrObjid getChild( PwrtObjid objid);
    /**
       Get the object identity of the parent of an object.  
    */
    public native CdhrObjid getParent( PwrtObjid objid);
    /** 
	Get the object identity of the next sibling (i.e.
	the next object with the same parent). 
	@param objid The object identity for the previous sibling.
    */
    public native CdhrObjid getNextSibling( PwrtObjid objid);

    /**
       Get the class identifier of an object. 
       @param objid Object identity.
    */
    public native CdhrClassId getObjectClass( PwrtObjid objid);
    /**
       Get the type or class identifier of an attribute reference. 
       @param aref Attribute reference.
    */
    public native CdhrTypeId getAttrRefTid( PwrtAttrRef aref);

    /**
       Get the class identifier from class name. 
       @param name Class name.
    */
    public native CdhrClassId classNameToId( String name);

    /** 
	Get the object identity of the first object
	in the list of objects of a specified class.
	@param classid Class identifier for the object class.
    */
    public native CdhrObjid getClassList( int classid);

    /**
       Get the object identity for the $ClassDef object for a class from the class identifier.
    */
    public native CdhrObjid classIdToObjid( int classid);

    /**
       Return the objid of the node object for a node identified by a
       node identifier (of type pwr_tNodeId).

       <p>If the node identity is specified as zero,
       the node object for the local node is returned.
    */
    public native CdhrObjid getNodeObject( int nodeIdx);

    /** 
	Get the characteristics of an attribute, given
	its name and the class it belongs to. 
    */
    public native GdhrGetAttributeChar getAttributeChar( String attributeName);

    /** 
	Get the flags of an attribute, given
	its name and the class it belongs to. 
    */
    public native GdhrGetAttributeFlags getAttributeFlags( String attributeName);

    /**
       Get information of all attributes in a class.
    */
    public native CdhrObjAttr getClassAttribute( int classid, PwrtObjid objid_obj );

    /**
       Translate a file name containing enviroment variables.
    */
    public static native String translateFilename( String filename);

    /**
       Get cross references for a signal.
    */
    public native CdhrString crrSignal( String name);

    /**
       Get cross references for a signal.
    */
    public native CdhrString crrObject( String name);
    /**
       Get the message name for a status.
    */
    public native CdhrString getMsg( int sts);
    /**
       Get the message text for a status.
    */
    public native CdhrString getMsgText( int sts);
    /**
       Get the super class for a class.
       <p>If the class for a remote object is examined, the class might not be loded on the 
       local, and in this case the object itself has to supplied in the oid argument. For 
       local classes, this argument can be set to null.
    */
    public native CdhrClassId getSuperClass( int classid, PwrtObjid objid);
    /**
       Get information of all attributes in a class.
    */
    public native GdhrsAttrDef[] getObjectBodyDef(int classid, PwrtAttrRef aref);
    /**
       Get data from a circular buffer.
    */
    public native int getCircBuffInfo(CircBuffInfo info);
    /**
       Get update data from a circular buffer.
    */
    public native int updateCircBuffInfo(CircBuffInfo[] info, int info_size);
    //  public native GdhrGetXttObj[] getAllXttChildrenNative(PwrtObjid objid);
    /**
       Get data from a DsTrend.
    */
    public native GdhrGetDsTrend getDsTrend(String jstrend_object, int last_next_idx, 
					    int last_buffer, int max_size);
    /**
       Get info of a sevhist object.
    */
    public native GdhrSevItemInfo getSevItemInfo(String jsevhist_object);
    /**
       Get data from a sevhist item.
    */
    public native GdhrSevItemData getSevItemData(String jserver, PwrtObjid oid, 
						 String jattribute, float timerange, 
						 int max_size);
}












