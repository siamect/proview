/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GlowArrow extends GlowArrayElem {
    GrowCmn cmn;
    GlowPoint p1;
    GlowPoint p2;
    GlowPoint p_dest;
    int draw_type;
    int line_width;
    double arrow_width;
    double arrow_length;

    public GlowArrow(GrowCmn cmn) {
	this.cmn = cmn;
	p1 = new GlowPoint();
	p2 = new GlowPoint();
	p_dest = new GlowPoint();
    }

    public int type() {
	return Glow.eObjectType_Arrow;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GlowArrow : " + line);

		switch ( key) {

		case Glow.eSave_Arrow: 
		    break;
		case Glow.eSave_Arrow_draw_type: 
		    draw_type = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Arrow_line_width:
		    line_width = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Arrow_arrow_width:
		    arrow_width = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_Arrow_arrow_length:
		    arrow_length = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_Arrow_p1:
		    p1.open( reader);
		    break;
		case Glow.eSave_Arrow_p2:
		    p2.open( reader);
		    break;
		case Glow.eSave_Arrow_p_dest:
		    p_dest.open( reader);
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GlowArrow");
		    break;
		}
		if ( end_found)
		    break;

	    }

	} catch ( Exception e) {
	    System.out.println( "IOException GlowArrow");
	}
    }

    public void draw(GlowTransform t, int highlight, int hot, Object node, Object colornode) {
    }


    public void draw( int hightlight, int hot) {
    }

}
