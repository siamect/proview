/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;


public class GrowCmn {

    public GlowDrawIfc gdraw;
    public class GrowWindow {
	public double zoom_factor_x;
	public double zoom_factor_y;
	public double base_zoom_factor;
	public int offset_x;
	public int offset_y;
	public int window_width;
	public int window_height;
	public int subwindow_x;
	public int subwindow_y;
	public double subwindow_scale = 1;
    }

    public GrowApplIfc appl;
    boolean debug;
    boolean antiAliasing;
    public GrowCtxIfc ctx;

    public GrowWindow mw = new GrowWindow();
    double x_right;
    double x_left;
    double y_high;
    double y_low;
    String name;
    int version;
    public int background_color;
    int dynamicsize;
    int arg_cnt;
    String argname[] = new String[20];
    int argtype[] = new int[20];
    double x0;
    double y0;
    double x1;
    double y1;
    int path_cnt;
    String path[] = new String[10];
    int dyn_type1;
    int dyn_type2;
    int dyn_action_type1;
    int dyn_action_type2;
    int[] dyn_color = new int[4];
    int[] dyn_attr = new int[4];
    int slider;
    int subgraph;
    double scantime;
    double fast_scantime;
    double animation_scantime;
    int java_width;
    String background_image;
    int background_tiled;
    int double_buffered;
    int cycle;
    int mb3_action;
    int translate_on;
    int input_focus_mark;
    int hot_indication;
    int app_motion = Glow.eAppMotion_Both;
    String color_theme = new String();
    Object userdata;
    GlowArrayElem callback_object;
    int callback_object_type;
    int hot_mode;
    int hot_found;
    GlowArrayElem restriction_object;
    int move_restriction;
    double restriction_max_limit;
    double restriction_min_limit;
    int recursive_trace;
    public int nodraw;
    public String owner = new String();
    public GlowCustomColors customcolors = new GlowCustomColors();
    
    Vector<GlowArrayElem> a = new Vector<GlowArrayElem>();
    Vector<GlowArrayElem> a_nc = new Vector<GlowArrayElem>();
    Vector<GlowArrayElem> a_cc = new Vector<GlowArrayElem>();

    public GrowCmn( GrowCtxIfc ctx, GrowApplIfc appl) {
	this.ctx = ctx;
	this.appl = appl;
	this.debug = false;
	this.antiAliasing = true;
	mw.window_width = getWidth();
	mw.window_height = getHeight();
    }

    public int getWidth() {
	return appl.getWidth();
    }
    public int getHeight() {
	return appl.getHeight();
    }
    public void setGdraw(GlowDrawIfc gdraw) {
	this.gdraw = gdraw;
	if ( customcolors != null)
	    gdraw.push_customcolors( customcolors);
    }
    public void setNodraw() {
    	nodraw++;
    }
    public void resetNodraw() {
    	if ( nodraw > 0)
    		nodraw--;
    }
    public int getNodraw() {
    	return nodraw;
    }

    public void setOwner( String owner) {
	this.owner = owner;
    }
    public String getOwner() {
	return owner;
    }
    public int getAppMotion() {
	return app_motion;
    }

}
