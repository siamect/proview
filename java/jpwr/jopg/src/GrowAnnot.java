/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GrowAnnot extends GlowArrayElem implements GrowAnnotIfc {
    GrowCmn cmn;
    GlowPoint p;
    int adjustment;
    GlowTransform trf;

    int number;
    int draw_type;
    int color_drawtype;
    int text_size;
    int display_level;
    int annot_type;
    int font;
    int protect;

    public GrowAnnot(GrowCmn cmn) {
	this.cmn = cmn;
	p = new GlowPoint();
	trf = new GlowTransform();
    }

    public int type() {
	return Glow.eObjectType_GrowAnnot;
    }

    public int getNumber() {
	return number;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GrowAnnot : " + line);

		switch ( key) {
		case Glow.eSave_GrowAnnot: 
		    break;
		case Glow.eSave_GrowAnnot_adjustment:
		    adjustment = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_GrowAnnot_annot_part:
		    glowannot_open(reader);
		    break;
		case Glow.eSave_GrowAnnot_trf:
		    trf.open(reader);
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GrowAnnot");
		    break;
		}
		if ( end_found)
		    break;
	    }
		
	} catch ( Exception e) {
	    System.out.println( "IOException GrowAnnot");
	}

    }

    public void glowannot_open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GlowAnnot : " + line);

		switch ( key) {

		case Glow.eSave_Annot: 
		    break;
		case Glow.eSave_Annot_number: 
		    number = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Annot_draw_type: 
		    draw_type = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Annot_color_drawtype:
		    color_drawtype = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Annot_text_size:
		    text_size = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Annot_display_level:
		    display_level = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Annot_p:
		    p.open( reader);
		    break;
		case Glow.eSave_Annot_annot_type:
		    annot_type = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Annot_font:
		    font = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Annot_protect:
		    protect = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GlowAnnot");
		    break;
		}
		if ( end_found)
		    break;

	    }

	} catch ( Exception e) {
	    System.out.println( "IOException GlowAnnot");
	}
    }


    public void draw(GlowTransform t, int highlight, int hot, Object node, Object colornode) {
	int x1, y1;
	if ( cmn.nodraw != 0)
	    return;

	if ( ((GrowNode)node).annotv[number] ==  null)
	    return;

        int color;
	int rot;
	double offset_x = 0;
	double offset_y = 0;
	double trf_scale = trf.vertical_scale( t);
	int idx = (int)( trf_scale * cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * (text_size +4) - 3);
	double tsize = trf_scale * cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * (8+2*text_size);
	if ( idx < 0)
	    return;
	idx = Math.min( idx, Glow.DRAW_TYPE_SIZE-1);

	int lfont;
	int ldraw_type;

	if ( node != null && ((GrowNode)node).annot_scrollingtext == number) {
	    offset_x = ((GrowNode)node).annot_offset_x;
	    offset_y = ((GrowNode)node).annot_offset_y;
	}

	if ( node != null && ((GrowNode)node).text_font != Glow.eFont_No) {
	    lfont = ((GrowNode)node).text_font;
	    ldraw_type = ((GrowNode)node).text_type;
	}
	else {
	    lfont = font;
	    ldraw_type = draw_type;
	}

	if ( t == null) {
	    x1 = (int)( (trf.x( p.x, p.y) + offset_x) * cmn.mw.zoom_factor_x) - cmn.mw.offset_x;
	    y1 = (int)( (trf.y( p.x, p.y) + offset_y) * cmn.mw.zoom_factor_y) - cmn.mw.offset_y;
	    rot = (int) trf.rot();
	}
	else {
	    x1 = (int)( (trf.x( t, p.x, p.y) + offset_x) * cmn.mw.zoom_factor_x) - cmn.mw.offset_x;
	    y1 = (int)( (trf.y( t, p.x, p.y) + offset_y) * cmn.mw.zoom_factor_y) - cmn.mw.offset_y;
	    rot = (int) trf.rot( t);
	}
	rot = rot < 0 ? rot % 360 + 360 : rot % 360;

	switch ( annot_type) {
	case Glow.eAnnotType_OneLine: {
	    int width = 0;
	    int height = 0;
	    int descent = 0;

	    color = GlowColor.get_drawtype( color_drawtype, Glow.eDrawType_LineHighlight,
					    highlight, colornode, 2, 0);

    
	    if ( ((rot < 45 || rot >= 315) &&
		  ( ((GrowNode)node).annotv_inputmode[number] != 0 &&
		    ((GrowNode)node).input_selected != 0)) ||
		 ( !(rot < 45 || rot >= 315)) ||
		 adjustment == Glow.eAdjustment_Right ||
		 adjustment == Glow.eAdjustment_Center) {
		GlowDimension d = cmn.gdraw.getTextExtent( ((GrowNode)node).annotv[number], idx, 
							   lfont, ldraw_type);
		width = d.width;
		height = d.height;
		descent = height/4;
	    }	    

	    switch ( adjustment) {
	    case Glow.eAdjustment_Left:
		break;
	    case Glow.eAdjustment_Right:
		x1 -= width;
		break;
	    case Glow.eAdjustment_Center:
		x1 -= width /2;
		break;
	    }
	 

	    if ( rot < 45 || rot >= 315) {
		if ( ((GrowNode)node).annotv_inputmode[number] != 0 &&
		     ((GrowNode)node).input_selected != 0) {
		    cmn.gdraw.fill_rect( x1, y1 - height + descent, width, height, 
					 Glow.eDrawType_MediumGray);
		}
	    }
	    else {
		// Text is rotated, adjust the coordinates
		if ( adjustment == Glow.eAdjustment_Center) {
		    // Only center adjustment supports text rotation
		    if ( 45 <= rot && rot < 135) {
			x1 += width/2;
			y1 += width/2;
		    }
		    else if ( 135 <= rot && rot < 225) {
			y1 += height - descent;
		    }
		    else if ( 225 <= rot && rot < 315) {
			x1 += width/2 - height + descent;
			y1 -= width/2 - height + descent;
		    }
		    else {
			x1 -= width;
		    }
		}
		else {
		    if ( 45 <= rot && rot < 135) {
			y1 += height - descent;
		    }
		    else if ( 135 <= rot && rot < 225) {
			x1 -= width;
			y1 += height - descent;
		    }
		    else {
			x1 -= width;
		    }
		    rot = 0;
		}
	    } 

	    cmn.gdraw.text( x1, y1,
			    ((GrowNode)node).annotv[number], 
			    ldraw_type, color, idx, 
			    highlight, 0, lfont, tsize, rot);
	    if ( ((GrowNode)node).annotv_inputmode[number] != 0) {
		/*
		ctx->gdraw->text_cursor( w, x1, y1,
					 ((GlowNode *) node)->annotv[number],
					 strlen(((GlowNode *) node)->annotv[number]),
					 ldraw_type, color, idx, highlight, 
					 ((GrowNode *)node)->input_position, lfont, tsize);
		*/
	    }
	    break;
	}
	case Glow.eAnnotType_MultiLine: {
	    /*
	    int z_width, z_height, z_descent;
	    int len = 0;
	    int line_cnt = 0;
	    String line = new String(((GrowNode)node).annotv[number]);
	    char *s;
	    color = GlowColor.get_drawtype( color_drawtype, Glow.eDrawType_LineHighlight,
					    highlight, colornode, 2, 0);

	    GlowDimension d = cmn.gdraw.getTextExtent( "", 0, idx, lfont, ldraw_type);
	    z_width = d.width;
	    z_height = d.height;
	    x_descent = z_height/4;

	    for ( s = ((GlowNode *) ((GrowNode)node).annotv[number]; *s; s++) {
		if ( *s == 10) {
		    if ( len) {
			*s = 0;
			ctx->gdraw->text( w, x1, y1 + line_cnt * z_height, line, 
					  len, ldraw_type, color, idx, highlight, 0, lfont, tsize, 0);
			*s = 10;
		    }
		    len = 0;
		    line = s+1;
		    line_cnt++;
		}
		else
		    len++;
	    }
	    if ( len)
		ctx->gdraw->text( w, x1, y1 + line_cnt * z_height, line, 
				  len, ldraw_type, color, idx, highlight, 0, lfont, tsize, 0);
	    */
	    break;
	}
	}
    }

    public GlowDimensionD getTextExtent( GlowTransform t, Object node) {
	GlowDimensionD dim = new GlowDimensionD();

	if ( ((GrowNode)node).annotv[number] == null || ((GrowNode)node).annotv[number].isEmpty()) {
	    dim.width = 0;
	    dim.height = 0;
	    return dim;
	}

	int z_width, z_height, descent;
	double trf_scale = trf.vertical_scale( t);
	int idx = (int)( trf_scale * cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * 
		 (text_size +4) - 4);
	double tsize = trf_scale * cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * (8+2*text_size);
	if ( idx < 0) {
	    dim.width = 0;
	    dim.height = 0;
	    return dim;
	}
	idx = Math.min( idx, Glow.DRAW_TYPE_SIZE-1);
  
	GlowDimension d = cmn.gdraw.getTextExtent( ((GrowNode)node).annotv[number], idx, 
						   font, draw_type);
	
	dim.width = (double)d.width / cmn.mw.zoom_factor_x;
	dim.height = (double)d.height / cmn.mw.zoom_factor_y;
	return dim;
    }

}
