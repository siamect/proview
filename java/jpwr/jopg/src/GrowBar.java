/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GrowBar extends GrowRect {

    class TraceData{
	String[] data = new String[10];
	int color;
	int attr_type;
	int access;
	int cycle;
	String ref_object;
    }

    double max_value;
    double min_value;
    double bar_value;
    int bar_bordercolor;
    int bar_borderwidth;
    int bar_drawtype;
    TraceData trace = new TraceData();
    Object userdata;

    public GrowBar(GrowCmn cmn) {
	super(cmn);
    }

    public GrowBar( GrowCmn cmn, String n_name, double x, double y, 
		    double w, double h, int draw_type, int line_width, 
		    int fill, int border, int shadow,
		    int fill_drawtype) {
	super(cmn, n_name, x, y, w, h, draw_type, line_width, fill, border, shadow, fill_drawtype);
    }

    public int type() {
	return Glow.eObjectType_GrowBar;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GrowBar : " + line);

		switch ( key) {

		case Glow.eSave_GrowBar: 
		    break;
		case Glow.eSave_GrowBar_max_value: 
		    max_value = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowBar_min_value: 
		    min_value = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowBar_bar_value: 
		    bar_value = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowBar_bar_bordercolor: 
		    bar_bordercolor = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBar_bar_borderwidth: 
		    bar_borderwidth = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBar_bar_drawtype: 
		    bar_drawtype = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBar_rect_part: 
		    super.open( reader);
		    break;
		case Glow.eSave_GrowBar_trace_data1:
		    if ( token.hasMoreTokens())
			trace.data[0] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowBar_trace_data2:
		    if ( token.hasMoreTokens())
			trace.data[1] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowBar_trace_data3:
		    if ( token.hasMoreTokens())
			trace.data[2] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowBar_trace_data4:
		    if ( token.hasMoreTokens())
			trace.data[3] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowBar_trace_data5:
		    if ( token.hasMoreTokens())
			trace.data[4] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowBar_trace_data6:
		    if ( token.hasMoreTokens())
			trace.data[5] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowBar_trace_data7:
		    if ( token.hasMoreTokens())
			trace.data[6] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowBar_trace_data8:
		    if ( token.hasMoreTokens())
			trace.data[7] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowBar_trace_data9:
		    if ( token.hasMoreTokens())
			trace.data[8] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowBar_trace_data10:
		    if ( token.hasMoreTokens())
			trace.data[9] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowBar_trace_attr_type: 
		    trace.attr_type = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBar_trace_color: 
		    trace.color = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBar_access:
		    trace.access = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_GrowBar_cycle:
		    trace.cycle = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_GrowBar_ref_object:
		    if ( token.hasMoreTokens())
			trace.ref_object = token.nextToken();			 
		    break;
		case Glow.eSave_GrowBar_userdata_cb:
		    if ( cmn.appl != null)
			userdata = cmn.appl.growUserdataOpen( reader, this, Glow.eUserdataCbType_Node);
		    break;

		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GrowBar");
		    break;
		}
		if ( end_found)
		    break;
	    }
		
	} catch ( Exception e) {
	    System.out.println( "IOException GrowBar");
	}
    }    

    public void draw(GlowTransform t, int highlight, int hot, Object node, Object colornode) {
	if ( cmn.nodraw != 0)
	    return;

	int idx;
	int drawtype;
	double rotation;
	int grad = gradient;
	if ( gradient == Glow.eGradient_No && 
	     (node != null && ((GrowNode)node).gradient != Glow.eGradient_No) && disable_gradient == 0)
	    grad = ((GrowNode)node).gradient;

	int bar_border_idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * 
				  bar_borderwidth - 1);
	bar_border_idx = Math.min( Glow.DRAW_TYPE_SIZE - 1, Math.max( 0, bar_border_idx));

	if ( node != null && ((GrowNode)node).line_width != 0)
	    idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * 
			 ((GrowNode)node).line_width - 1);
	else
	    idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * line_width - 1);
	idx += hot;

	idx = Math.max( 0, idx);
	idx = Math.min( idx, Glow.DRAW_TYPE_SIZE-1);
	int x1, y1, x2, y2, ll_x, ll_y, ur_x, ur_y;

	if ( t == null) {
	    x1 = (int)( trf.x( ll.x, ll.y) * cmn.mw.zoom_factor_x) - cmn.mw.offset_x;
	    y1 = (int)( trf.y( ll.x, ll.y) * cmn.mw.zoom_factor_y) - cmn.mw.offset_y;
	    x2 = (int)( trf.x( ur.x, ur.y) * cmn.mw.zoom_factor_x) - cmn.mw.offset_x;
	    y2 = (int)( trf.y( ur.x, ur.y) * cmn.mw.zoom_factor_y) - cmn.mw.offset_y;
	}
	else {
	    x1 = (int)( trf.x( t, ll.x, ll.y) * cmn.mw.zoom_factor_x) - cmn.mw.offset_x;
	    y1 = (int)( trf.y( t, ll.x, ll.y) * cmn.mw.zoom_factor_y) - cmn.mw.offset_y;
	    x2 = (int)( trf.x( t, ur.x, ur.y) * cmn.mw.zoom_factor_x) - cmn.mw.offset_x;
	    y2 = (int)( trf.y( t, ur.x, ur.y) * cmn.mw.zoom_factor_y) - cmn.mw.offset_y;
	}

	ll_x = Math.min( x1, x2);
	ur_x = Math.max( x1, x2);
	ll_y = Math.min( y1, y2);
	ur_y = Math.max( y1, y2);
	if ( fill != 0) {
	    drawtype = GlowColor.get_drawtype( fill_drawtype, Glow.eDrawType_FillHighlight,
					       highlight, colornode, 1, 0);
    
	    if ( grad == Glow.eGradient_No)
		cmn.gdraw.fill_rect( ll_x, ll_y, ur_x - ll_x, ur_y - ll_y, drawtype);
	    else {
		int f1, f2;

		if ( t != null)
		    rotation = trf.rot( t);
		else
		    rotation = trf.rot();
		if ( gradient_contrast >= 0) {
		    f2 = GlowColor.shift_drawtype( drawtype, -gradient_contrast/2, null);
		    f1 = GlowColor.shift_drawtype( drawtype, (int)((float)(gradient_contrast)/2+0.6), null);
		}
		else {
		    f2 = GlowColor.shift_drawtype( drawtype, -(int)((float)(gradient_contrast)/2-0.6), null);
		    f1 = GlowColor.shift_drawtype( drawtype, gradient_contrast/2, null);
		}
		cmn.gdraw.gradient_fill_rect( ll_x, ll_y, ur_x - ll_x, ur_y - ll_y, drawtype, f1, f2, cmn.gdraw.gradient_rotate( rotation, grad));
	    }
	}
	drawtype = GlowColor.get_drawtype( draw_type, Glow.eDrawType_LineHighlight,
					   highlight, (GrowNode)colornode, 0, 0);

	if ( max_value != min_value) {
	    int x0, y0, width, height, l_x0, l_y0, l_x1, l_y1;

	    if ( t != null)
		rotation = (trf.rot( t) / 360 - Math.floor( trf.rot( t) / 360)) * 360;
	    else
		rotation = (trf.rot() / 360 - Math.floor( trf.rot() / 360)) * 360;
	    if ( 45 >= rotation || rotation > 315) {
		height = (int)( (bar_value - min_value) / (max_value - min_value) 
			      * (ur_y - ll_y));
		height = Math.max( 0, Math.min( height, ur_y - ll_y));
		width = ur_x - ll_x;
		x0 = ll_x;
		y0 = ur_y - height;
		l_x0 = ll_x;
		l_y0 = ur_y - height;
		l_x1 = ur_x;
		l_y1 = ur_y - height;
	    }
	    else if ( 45 < rotation && rotation <= 135) {
		width = (int)( (bar_value - min_value) / (max_value - min_value) * 
			     (ur_x - ll_x));
		width = Math.max( 0, Math.min( width, ur_x - ll_x));
		height = ur_y - ll_y;
		x0 = ll_x;
		y0 = ll_y;
		l_x0 = ll_x + width;
		l_y0 = ll_y;
		l_x1 = ll_x + width;
		l_y1 = ur_y;
	    }
	    else if ( 135 < rotation && rotation <= 225) {
		height = (int)( (bar_value - min_value) / (max_value - min_value) * 
			      (ur_y - ll_y));
		height = Math.max( 0, Math.min( height, ur_y - ll_y));
		width = ur_x - ll_x;
		x0 = ll_x;
		y0 = ll_y;
		l_x0 = ll_x;
		l_y0 = ll_y + height;
		l_x1 = ur_x;
		l_y1 = ll_y + height;
	    }
	    else { // if ( 225 < rotation && rotation <= 315)
		width = (int)( (bar_value - min_value) / (max_value - min_value) * 
			     (ur_x - ll_x));
		width = Math.max( 0, Math.min( width, ur_x - ll_x));
		height = ur_y - ll_y;
		x0 = ur_x - width;
		y0 = ll_y;
		l_x0 = ur_x - width;
		l_y0 = ll_y;
		l_x1 = ur_x - width;
		l_y1 = ur_y;
	    }

	    int dt = drawtype;
	    if ( bar_drawtype != Glow.eDrawType_Inherit)
		dt = bar_drawtype;

	    if ( grad == Glow.eGradient_No)
		cmn.gdraw.fill_rect( x0, y0, width, height, dt);
	    else {
		int f1, f2;

		if ( t != null)
		    rotation = trf.rot( t);
		else
		    rotation = trf.rot();
		if ( gradient_contrast >= 0) {
		    f2 = GlowColor.shift_drawtype( dt, -gradient_contrast/2, null);
		    f1 = GlowColor.shift_drawtype( dt, (int)((float)(gradient_contrast)/2+0.6), null);
		}
		else {
		    f2 = GlowColor.shift_drawtype( dt, -(int)((float)(gradient_contrast)/2-0.6), null);
		    f1 = GlowColor.shift_drawtype( dt, gradient_contrast/2, null);
		}
		cmn.gdraw.gradient_fill_rect( x0, y0, width, height, dt, f1, f2, cmn.gdraw.gradient_rotate( rotation, grad));
	    }

	    dt = drawtype;
	    if ( bar_bordercolor != Glow.eDrawType_Inherit)
		dt = bar_bordercolor;
	    cmn.gdraw.line( l_x0, l_y0, l_x1, l_y1, dt, bar_border_idx, 0);
	}

	if ( border != 0) {
	    cmn.gdraw.rect( ll_x, ll_y, ur_x - ll_x, ur_y - ll_y, drawtype, idx, 0);
	}
    }

    public void set_range( double min, double max) { 
	max_value = max;
	min_value = min;
	draw();
    }

    public void set_value( double value) { 
	bar_value = value; 
	draw();
    }

    public Object getUserData() {
	return userdata;
    }

}
