 /* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GlowArc extends GlowArrayElem {
    GrowCmn cmn;
    GlowPoint ll;
    GlowPoint ur;
    int draw_type;
    int angle1;
    int angle2;
    int line_width;
    int display_level;
    int fill;

    public GlowArc(GrowCmn cmn) {
	this.cmn = cmn;
	ll = new GlowPoint();
	ur = new GlowPoint();
    }

    public int type() {
	return Glow.eObjectType_Arc;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GlowArc : " + line);

		switch ( key) {

		case Glow.eSave_Arc: 
		    break;
		case Glow.eSave_Arc_draw_type: 
		    draw_type = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Arc_angle1: 
		    angle1 = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Arc_angle2: 
		    angle2 = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Arc_line_width:
		    line_width = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Arc_fill:
		    fill = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Arc_ll:
		    ll.open( reader);
		    break;
		case Glow.eSave_Arc_ur:
		    ur.open( reader);
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GlowArc");
		    break;
		}
		if ( end_found)
		    break;

	    }

	} catch ( Exception e) {
	    System.out.println( "IOException GlowArc");
	}
    }

    public void draw( int hightlight, int hot) {
	if ( cmn.nodraw != 0)
	    return;

	int ll_x, ll_y, ur_x, ur_y;
	ll_x = (int)(ll.x * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	ll_y = (int)(ll.y * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	ur_x = (int)(ur.x * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	ur_y = (int)(ur.y * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	
	if ( ll_x == ur_x && ll_y == ur_y)
	    return;
	int idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * line_width - 1);
	idx += hot;
	idx = Math.max( 0, idx);
	idx = Math.min( idx, Glow.DRAW_TYPE_SIZE-1);
	cmn.gdraw.arc( ll_x, ll_y, ur_x - ll_x, ur_y - ll_y, angle1, angle2, draw_type, idx, hightlight);
    }

    public void draw_shadow( int border, int shadow, int highlight, int hot) {
	if ( cmn.nodraw != 0)
	    return;

	int ll_x, ll_y, ur_x, ur_y;
	ll_x = (int)(ll.x * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	ll_y = (int)(ll.y * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	ur_x = (int)(ur.x * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	ur_y = (int)(ur.y * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	int idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * line_width - 1);
	idx += hot;
	idx = Math.max( 0, idx);
	idx = Math.min( idx, Glow.DRAW_TYPE_SIZE-1);
	int ish = 1;
	int offs = border;

	if ( shadow != 0 && idx > 2) {
	    if ( angle1 == 0) {
		cmn.gdraw.arc( ll_x + idx/2 - idx + offs,
			       ll_y + idx/2 - idx + offs, 
			       ur_x - ll_x + idx - offs*2, ur_y - ll_y + idx - offs*2, angle1 + 45, angle2 - 45,
			       GlowColor.shift_drawtype( draw_type, -2, null), ish-1, highlight);
		cmn.gdraw.arc( ll_x + idx/2 - idx + offs, 
			       ll_y + idx/2 - idx + offs, 
			       ur_x - ll_x + idx - offs*2, ur_y - ll_y + idx - offs*2, angle1, angle2 - 45,
			       GlowColor.shift_drawtype( draw_type, 2, null), ish-1, highlight);
		cmn.gdraw.arc( ll_x + idx/2 - offs, 
			       ll_y + idx/2 - offs, 
			       Math.max( 0, ur_x - ll_x - idx + offs*2), Math.max( 0,  ur_y - ll_y - idx + offs*2), angle1 + 45, angle2 - 45,
			       GlowColor.shift_drawtype( draw_type, 2, null), ish-1, highlight);
		cmn.gdraw.arc( ll_x + idx/2 - offs, 
			       ll_y + idx/2 - offs, 
			       Math.max( 0, ur_x - ll_x - idx + offs*2), Math.max( 0,  ur_y - ll_y - idx + offs*2), angle1, angle2 - 45,
			       GlowColor.shift_drawtype( draw_type, -2, null), ish-1, highlight);
	    }
	    else if ( angle1 == 90) {
		cmn.gdraw.arc( ll_x + idx/2 - idx + offs, 
			       ll_y + idx/2 - idx + offs, 
			       ur_x - ll_x + idx - offs*2, ur_y - ll_y + idx - offs*2, angle1, angle2,
			       GlowColor.shift_drawtype( draw_type, -2, null), ish-1, highlight);
		cmn.gdraw.arc( ll_x + idx/2 - offs, 
			       ll_y + idx/2 - offs, 
			       Math.max( 0, ur_x - ll_x - idx + offs*2), Math.max( 0,  ur_y - ll_y - idx + offs*2), angle1, angle2,
			       GlowColor.shift_drawtype( draw_type, 2, null), ish-1, highlight);
	    }
	    else if ( angle1 == 180) {
		cmn.gdraw.arc( ll_x + idx/2 - idx + offs, 
			       ll_y + idx/2 - idx + offs, 
			       ur_x - ll_x + idx - offs*2, ur_y - ll_y + idx - offs*2, angle1 + 45, angle2 - 45,
			       GlowColor.shift_drawtype( draw_type, 2, null), ish-1, highlight);
		cmn.gdraw.arc( ll_x + idx/2 - idx + offs, 
			       ll_y + idx/2 - idx + offs, 
			       ur_x - ll_x + idx - offs*2, ur_y - ll_y + idx - offs*2, angle1, angle2 - 45,
			       GlowColor.shift_drawtype( draw_type, -2, null), ish-1, highlight);
		cmn.gdraw.arc( ll_x + idx/2 - offs, 
			       ll_y + idx/2 - offs, 
			       Math.max( 0, ur_x - ll_x - idx + offs*2), Math.max( 0,  ur_y - ll_y - idx + offs*2), angle1 + 45, angle2 - 45,
			       GlowColor.shift_drawtype( draw_type, -2, null), ish-1, highlight);
		cmn.gdraw.arc( ll_x + idx/2 - offs, 
			       ll_y + idx/2 - offs, 
			       Math.max( 0, ur_x - ll_x - idx + offs*2), Math.max( 0,  ur_y - ll_y - idx + offs*2), angle1, angle2 - 45,
			       GlowColor.shift_drawtype( draw_type, 2, null), ish-1, highlight);
	    }
	    else if ( angle1 == 270) {
		cmn.gdraw.arc( ll_x + idx/2 - idx + offs, 
			       ll_y + idx/2 - idx + offs, 
			       ur_x - ll_x + idx - offs*2, ur_y - ll_y + idx - offs*2, angle1, angle2,
			       GlowColor.shift_drawtype( draw_type, 2, null), ish-1, highlight);
		cmn.gdraw.arc( ll_x + idx/2 - offs, 
			       ll_y + idx/2 - offs, 
			       Math.max( 0, ur_x - ll_x - idx + offs*2), Math.max( 0,  ur_y - ll_y - idx + offs*2), angle1, angle2,
			       GlowColor.shift_drawtype( draw_type, -2, null), ish-1, highlight);
	    }
	}
	if ( border != 0) {
	    cmn.gdraw.arc( ll_x + idx/2 - idx, 
			   ll_y + idx/2 - idx, 
			   ur_x - ll_x + idx, ur_y - ll_y + idx, angle1, angle2,
			   Glow.eDrawType_Line, 0, highlight);
	    if ( idx > 0)
		cmn.gdraw.arc( ll_x + idx/2, 
			       ll_y + idx/2, 
			       Math.max( 0, ur_x - ll_x - idx), Math.max( 0,  ur_y - ll_y - idx), angle1, angle2,
			       Glow.eDrawType_Line, 0, highlight);
	}
    }
}
