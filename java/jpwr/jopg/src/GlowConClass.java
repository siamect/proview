/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GlowConClass extends GlowArrayElem {
    GrowCmn cmn;
    String cc_name;
    int con_type;
    int corner;
    int draw_type;
    int	 line_width;
    double arrow_width;
    double arrow_length;
    double round_corner_amount;
    int group;

    public GlowConClass(GrowCmn cmn) {
	this.cmn = cmn;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;
	String name;
	int i;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GlowConClass : " + line);

		switch ( key) {
		case Glow.eSave_ConClass: 
		    break;

		case Glow.eSave_ConClass_cc_name: 
		    if ( token.hasMoreTokens())
			cc_name = token.nextToken();
		    break;
		case Glow.eSave_ConClass_con_type: 
		    con_type = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_ConClass_corner: 
		    corner = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_ConClass_draw_type: 
		    draw_type = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_ConClass_line_width: 
		    line_width = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_ConClass_arrow_width: 
		    arrow_width = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_ConClass_arrow_length: 
		    arrow_length = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_ConClass_round_corner_amount: 
		    round_corner_amount = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_ConClass_group: 
		    group = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GlowConClass");
		    break;
		}
		if ( end_found)
		    break;
	    }
		
	} catch ( Exception e) {
	    System.out.println( "IOException GlowConClass");
	}
    }
}
