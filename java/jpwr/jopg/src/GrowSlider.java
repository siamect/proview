/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GrowSlider extends GrowNode {

    int direction;
    double max_value;
    double min_value;
    double max_pos;
    double min_pos;
    
    public GrowSlider(GrowCmn cmn) {
	super(cmn);
    }

    public int type() {
	return Glow.eObjectType_GrowSlider;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GrowSlider : " + line);

		switch ( key) {
		case Glow.eSave_GrowSlider: 
		    break;
		case Glow.eSave_GrowSlider_direction: 
		    direction = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowSlider_max_value: 
		    max_value = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowSlider_min_value: 
		    min_value = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowSlider_max_pos: 
		    max_pos = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowSlider_min_pos: 
		    min_pos = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowSlider_grownode_part: 
		    super.open(reader); 
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GrowSlider");
		    break;
		}
		if ( end_found)
		    break;
	    }
		
	} catch ( Exception e) {
	    System.out.println( "IOException GrowSlider");
	}
    }

    public void draw() {
	super.draw();
    }

    public double get_origo( int direction) {
	GlowTransform t = new GlowTransform();
	GlowGeometry g = new GlowGeometry();

	g.ur_x = 10e-37;
	g.ll_x = 10e37;
	g.ur_y = 10e-37;
	g.ll_y = 10e37;
	double pos;

	// Get borders in the nodeclass coordinates
	nc.get_borders( t, g);
	switch ( direction) {
	case Glow.eDirection_Down:
	case Glow.eDirection_Up:
	    if ( Math.abs(g.ur_y - g.ll_y) < Double.MIN_VALUE)
		pos = y_low;
	    else
		pos = (nc.y0 - g.ll_y) * (y_high - y_low) / (g.ur_y - g.ll_y);
	    break;
	case Glow.eDirection_Left:
	case Glow.eDirection_Right:
	    if ( Math.abs(g.ur_y - g.ll_y) < Double.MIN_VALUE)
		pos = y_low;
	    else
		pos = (nc.y0 - g.ll_y) * (x_right - x_left) / (g.ur_y - g.ll_y);
	    break;     
	default:
	    pos = 0;
	}
	return pos;
    }    

    public GlowSliderInfo get_info() {
	GlowSliderInfo info = new GlowSliderInfo();

	info.direction = direction;
	info.max_value = max_value;
	info.min_value = min_value;
	info.max_position = max_pos;
	info.min_position = min_pos;

	return info;
    }

    public void set_info(GlowSliderInfo info) {
	direction = info.direction;
	max_value = info.max_value;
	min_value = info.min_value;
	max_pos = info.max_position;
	min_pos = info.min_position;
    }

}
