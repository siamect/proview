/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GrowFolder extends GrowWindow {

    public static final int MAX_FOLDERS = 12;
    int folders;
    int text_size;
    int text_drawtype;
    int text_color_drawtype;
    double header_height;
    String[] folder_file_names = new String[MAX_FOLDERS];
    String[] folder_text = new String[MAX_FOLDERS];
    double[] folder_scale = new double[MAX_FOLDERS];
    int[] folder_v_scrollbar = new int[MAX_FOLDERS];
    int[] folder_h_scrollbar = new int[MAX_FOLDERS];
    String[] folder_owner = new String[MAX_FOLDERS];
    int current_folder;
    int color_selected;
    int color_unselected;
    
    public GrowFolder(GrowCmn cmn) {
	super(cmn);
    }

    public int type() {
	return Glow.eObjectType_GrowFolder;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GrowFolder : " + line);

		switch ( key) {

		case Glow.eSave_GrowFolder: 
		    break;
		case Glow.eSave_GrowFolder_folders: 
		    folders = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_text_size: 
		    text_size = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_text_drawtype: 
		    text_drawtype = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_text_color_drawtype: 
		    text_color_drawtype = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_header_height: 
		    header_height = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_color_selected: 
		    color_selected = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_color_unselected: 
		    color_unselected = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names1:
		    if ( token.hasMoreTokens())
			folder_file_names[0] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text1:
		    if ( token.hasMoreTokens())
			folder_text[0] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale1: 
		    folder_scale[0] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar1: 
		    folder_v_scrollbar[0] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar1: 
		    folder_h_scrollbar[0] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names2:
		    if ( token.hasMoreTokens())
			folder_file_names[1] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text2:
		    if ( token.hasMoreTokens())
			folder_text[1] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale2: 
		    folder_scale[1] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar2: 
		    folder_v_scrollbar[1] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar2: 
		    folder_h_scrollbar[1] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names3:
		    if ( token.hasMoreTokens())
			folder_file_names[2] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text3:
		    if ( token.hasMoreTokens())
			folder_text[2] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale3: 
		    folder_scale[2] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar3: 
		    folder_v_scrollbar[2] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar3: 
		    folder_h_scrollbar[2] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names4:
		    if ( token.hasMoreTokens())
			folder_file_names[3] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text4:
		    if ( token.hasMoreTokens())
			folder_text[3] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale4: 
		    folder_scale[3] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar4: 
		    folder_v_scrollbar[3] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar4: 
		    folder_h_scrollbar[3] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names5:
		    if ( token.hasMoreTokens())
			folder_file_names[4] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text5:
		    if ( token.hasMoreTokens())
			folder_text[4] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale5: 
		    folder_scale[4] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar5: 
		    folder_v_scrollbar[4] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar5: 
		    folder_h_scrollbar[4] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names6:
		    if ( token.hasMoreTokens())
			folder_file_names[5] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text6:
		    if ( token.hasMoreTokens())
			folder_text[5] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale6: 
		    folder_scale[5] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar6: 
		    folder_v_scrollbar[5] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar6: 
		    folder_h_scrollbar[5] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names7:
		    if ( token.hasMoreTokens())
			folder_file_names[6] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text7:
		    if ( token.hasMoreTokens())
			folder_text[6] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale7: 
		    folder_scale[6] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar7: 
		    folder_v_scrollbar[6] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar7: 
		    folder_h_scrollbar[6] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names8:
		    if ( token.hasMoreTokens())
			folder_file_names[7] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text8:
		    if ( token.hasMoreTokens())
			folder_text[7] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale8: 
		    folder_scale[7] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar8: 
		    folder_v_scrollbar[7] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar8: 
		    folder_h_scrollbar[7] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names9:
		    if ( token.hasMoreTokens())
			folder_file_names[8] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text9:
		    if ( token.hasMoreTokens())
			folder_text[8] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale9: 
		    folder_scale[8] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar9: 
		    folder_v_scrollbar[8] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar9: 
		    folder_h_scrollbar[8] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names10:
		    if ( token.hasMoreTokens())
			folder_file_names[9] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text10:
		    if ( token.hasMoreTokens())
			folder_text[9] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale10: 
		    folder_scale[9] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar10: 
		    folder_v_scrollbar[9] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar10: 
		    folder_h_scrollbar[9] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names11:
		    if ( token.hasMoreTokens())
			folder_file_names[10] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text11:
		    if ( token.hasMoreTokens())
			folder_text[10] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale11: 
		    folder_scale[10] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar11: 
		    folder_v_scrollbar[10] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar11: 
		    folder_h_scrollbar[10] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_file_names12:
		    if ( token.hasMoreTokens())
			folder_file_names[11] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_text12:
		    if ( token.hasMoreTokens())
			folder_text[11] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_scale12: 
		    folder_scale[11] = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowFolder_folder_v_scrollbar12: 
		    folder_v_scrollbar[11] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_h_scrollbar12: 
		    folder_h_scrollbar[11] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowFolder_folder_owner1:
		    if ( token.hasMoreTokens())
			folder_owner[0] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_owner2:
		    if ( token.hasMoreTokens())
			folder_owner[1] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_owner3:
		    if ( token.hasMoreTokens())
			folder_owner[2] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_owner4:
		    if ( token.hasMoreTokens())
			folder_owner[3] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_owner5:
		    if ( token.hasMoreTokens())
			folder_owner[4] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_owner6:
		    if ( token.hasMoreTokens())
			folder_owner[5] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_owner7:
		    if ( token.hasMoreTokens())
			folder_owner[6] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_owner8:
		    if ( token.hasMoreTokens())
			folder_owner[7] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_owner9:
		    if ( token.hasMoreTokens())
			folder_owner[8] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_owner10:
		    if ( token.hasMoreTokens())
			folder_owner[9] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_owner11:
		    if ( token.hasMoreTokens())
			folder_owner[10] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_folder_owner12:
		    if ( token.hasMoreTokens())
			folder_owner[11] = token.nextToken();			 
		    break;
		case Glow.eSave_GrowFolder_window_part: 
		    super.open( reader);
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GrowFolder");
		    break;
		}
		if ( end_found)
		    break;
	    }
		
	    y_low_offs = header_height;
	    input_file_name = folder_file_names[0];
	    window_scale = folder_scale[0];
	    vertical_scrollbar = folder_v_scrollbar[0];
	    horizontal_scrollbar = folder_h_scrollbar[0];
	    owner = folder_owner[0];
	    super.update_attributes();

	} catch ( Exception e) {
	    System.out.println( "IOException GrowFolder");
	}
    }    

    public void draw(GlowTransform t, int highlight, int hot, Object node, Object colornode) {
	if ( cmn.nodraw != 0)
	    return;

	int idx;
	int drawtype;

	idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * line_width - 1);
	idx += hot;
	idx = Math.max( 0, idx);
	idx = Math.min( idx, Glow.DRAW_TYPE_SIZE-1);

	int text_idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * (text_size +4) - 4);
	double tsize = cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * (8+2*text_size);
	text_idx = Math.min( text_idx, Glow.DRAW_TYPE_SIZE-1);

	int ll_x, ll_y, ur_x, ur_y;
	double dx1, dy1, dx2, dy2;

	if ( t == null) {
	    dx1 = trf.x( ll.x, ll.y);
	    dy1 = trf.y( ll.x, ll.y);
	    dx2 = trf.x( ur.x, ur.y);
	    dy2 = trf.y( ur.x, ur.y);
	}
	else {
	    dx1 = trf.x( t, ll.x, ll.y);
	    dy1 = trf.y( t, ll.x, ll.y);
	    dx2 = trf.x( t, ur.x, ur.y);
	    dy2 = trf.y( t, ur.x, ur.y);
	}
	dx1 = Math.min( dx1, dx2);
	dx2 = Math.max( dx1, dx2);
	dy1 = Math.min( dy1, dy2);
	dy2 = Math.max( dy1, dy2);

	ll_x = (int)( dx1 * cmn.mw.zoom_factor_x) - cmn.mw.offset_x;
	ur_x = (int)( dx2 * cmn.mw.zoom_factor_x) - cmn.mw.offset_x;
	ur_y = (int)( (dy1 + y_low_offs) * cmn.mw.zoom_factor_y) - cmn.mw.offset_y;
	ll_y = (int)( dy1 * cmn.mw.zoom_factor_y) - cmn.mw.offset_y;

	drawtype = GlowColor.get_drawtype( draw_type, Glow.eDrawType_LineHighlight,
					   highlight, (GrowNode)colornode, 0, 0);
	int drawtype_light = GlowColor.shift_drawtype( color_unselected, -2, 
						       (GrowNode)colornode);
	int drawtype_dark = GlowColor.shift_drawtype( color_unselected, 2, 
						      (GrowNode)colornode);
	int x;
	int width = (ur_x - ll_x) / folders;
	int h = ur_y - ll_y;
	GlowPointX[] p = new GlowPointX[4];
	for ( int j = 0; j < 4; j++)
	    p[j] = new GlowPointX();
	for ( int i = folders - 1; i >= -1; i--) {
	    if ( i == current_folder)
		// Draw this last
		continue;
	
	    if ( i == -1)
		i = current_folder;

	    x = ll_x + i * width;
	    if ( i == 0)
		p[0].x = ll_x;
	    else
		p[0].x = x - h/4;
	    p[0].y = ll_y + h;
	    p[1].x = x + h/4;
	    p[1].y = ll_y;
	    p[2].x = x + width - h/4;
	    p[2].y = ll_y;
	    if ( i == folders - 1) 
		p[3].x = ur_x;
	    else
		p[3].x = x + width + h/4;
	    p[3].y = ll_y + h;

	    if ( i == current_folder)
		cmn.gdraw.fill_polyline( p, 4, color_selected, 0);
	    else {
		cmn.gdraw.fill_polyline( p, 4, color_unselected, 0);	
		if ( shadow != 0) {
		    cmn.gdraw.line( p[0].x+1, p[0].y, p[1].x+1, p[1].y, drawtype_light, 0, 0);
		    if ( i != 0) {
			GlowPointX[] ps = new GlowPointX[4];
			for ( int j = 0; j < 4; j++)
			    ps[j] = new GlowPointX();

			ps[0].x = x + h/4;
			ps[0].y = ll_y + h;
			ps[1].x = x;
			ps[1].y = ll_y + h/2;
			ps[2].x = x + h/8;
			ps[2].y = ll_y + h/4;
			ps[3].x = x + h/2;
			ps[3].y = ll_y + h;

			cmn.gdraw.fill_polyline( ps, 4, drawtype_dark, 0);	
		    }
		}
	    }

	    if ( shadow != 0) {
		if ( i == current_folder) {
		    drawtype_light = GlowColor.shift_drawtype( color_selected, -2, 
							       (GrowNode)colornode);
		    cmn.gdraw.line( p[0].x+1, p[0].y, p[1].x+1, p[1].y, drawtype_light, 0, 0);
		}
		cmn.gdraw.line( p[1].x, p[1].y+1, p[2].x, p[2].y+1, drawtype_light, 0, 0);
	    }
	    cmn.gdraw.polyline( p, 4, drawtype, idx, 0);
      
	    if ( text_idx >= 0 && folder_text[i] != null) {
		cmn.gdraw.text( x + h/2, ll_y + h - 2,
				folder_text[i], text_drawtype, text_color_drawtype, 
				text_idx, highlight, 0, Glow.eFont_Helvetica, tsize, 0);
	    }
	    if ( i == current_folder)
		break;
	}
	super.draw( t, highlight, hot, node, colornode);
	cmn.gdraw.line( p[0].x+1, p[0].y, p[3].x-1, p[3].y, color_selected, idx, 0);

    }

    public int eventHandler( GlowEvent event, double fx, double fy) {
	int sts;

	if ( event.event == Glow.eEvent_MB1Click) {
	    if ( x_left <= fx && fx <= x_right &&
		 y_low <= fy && fy <= y_low + header_height) {
		double w = (x_right - x_left) / folders;
		double x = x_left + w;
		for ( int i = 0; i < folders; i++) {
		    if ( fx <= x) {
			// Change file
			input_file_name = folder_file_names[i];
			window_scale = folder_scale[i];
			vertical_scrollbar = folder_v_scrollbar[i];
			horizontal_scrollbar = folder_h_scrollbar[i];
			owner = folder_owner[i];
			current_folder = i;

			System.out.println("New folder owner: " + owner);
			super.update_attributes();
			draw();
			break;
		    }
		    x += w;
		}
		return 1;
	    }
	}

	GlowEvent e = new GlowEvent();
	e.event = event.event;
	e.type = event.type;

	e.x = event.x;
	e.y = event.y - header_height;
	e.object = event.object;
	e.object_type = event.object_type;
	sts = super.eventHandler( e, fx, fy);
	return sts;
    }
}
