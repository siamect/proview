/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GrowBarChart extends GrowRect {

    public static final int BARCHART_MAX_BARSEGMENTS = 12;
    public static final int BARCHART_MAX_BARS = 200;
    
    int			bars;
    int			barsegments;
    double		min_value;
    double		max_value;
    int			vertical_lines;
    int			horizontal_lines;
    int			line_color;
    int[]   	  	bar_color = new int[BARCHART_MAX_BARSEGMENTS];
    float[]		bar_values = new float[BARCHART_MAX_BARSEGMENTS * BARCHART_MAX_BARS];
    Object		userdata;

    public GrowBarChart(GrowCmn cmn) {
	super(cmn);
    }

    public int type() {
	return Glow.eObjectType_GrowBarChart;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GrowBarChart : " + line);

		switch ( key) {

		case Glow.eSave_GrowBarChart: 
		    break;
		case Glow.eSave_GrowBarChart_rect_part: 
		    super.open( reader);
		    break;
		case Glow.eSave_GrowBarChart_bars: 
		    bars = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_barsegments: 
		    barsegments = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_max_value: 
		    max_value = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowBarChart_min_value: 
		    min_value = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowBarChart_horizontal_lines: 
		    horizontal_lines = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_vertical_lines: 
		    vertical_lines = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_line_color: 
		    line_color = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color1: 
		    bar_color[0] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color2: 
		    bar_color[1] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color3: 
		    bar_color[2] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color4: 
		    bar_color[3] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color5: 
		    bar_color[4] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color6: 
		    bar_color[5] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color7: 
		    bar_color[6] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color8: 
		    bar_color[7] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color9: 
		    bar_color[8] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color10: 
		    bar_color[9] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color11: 
		    bar_color[10] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_bar_color12: 
		    bar_color[11] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowBarChart_userdata_cb:
		    if ( cmn.appl != null)
			userdata = cmn.appl.growUserdataOpen( reader, this, Glow.eUserdataCbType_Node);
		    break;

		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GrowBarChart");
		    break;
		}
		if ( end_found)
		    break;
	    }
		
	} catch ( Exception e) {
	    System.out.println( "IOException GrowBarChart");
	}
    }    

    public void draw(GlowTransform t, int highlight, int hot, Object node, Object colornode) {
	if ( cmn.nodraw != 0)
	    return;

	int drawtype;
	int idx;
	int chot = 0;
	
	if ( cmn.hot_indication == Glow.eHotIndication_No)
	    hot = 0;
	else if ( cmn.hot_indication == Glow.eHotIndication_DarkColor) {
	    chot = hot;
	    hot = 0;
	}
	else if ( cmn.hot_indication == Glow.eHotIndication_LightColor) {
	    chot = -hot;
	    hot = 0;
	}

	if ( node != null && ((GrowNode)node).line_width != 0)
	    idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * 
		       ((GrowNode)node).line_width - 1);
	else
	    idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * line_width - 1);
	idx += hot;
	idx = Math.max( 0, idx);
	idx = Math.min( idx, Glow.DRAW_TYPE_SIZE-1);
	int x1, y1, x2, y2, ll_x, ll_y, ur_x, ur_y, rot;

	if ( t == null) {
	    x1 = (int)( trf.x( ll.x, ll.y) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	    y1 = (int)( trf.y( ll.x, ll.y) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    x2 = (int)( trf.x( ur.x, ur.y) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	    y2 = (int)( trf.y( ur.x, ur.y) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    rot = (int)( trf.rot());
	}
	else {
	    x1 = (int)( trf.x( t, ll.x, ll.y) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	    y1 = (int)( trf.y( t, ll.x, ll.y) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    x2 = (int)( trf.x( t, ur.x, ur.y) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	    y2 = (int)( trf.y( t, ur.x, ur.y) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    rot = (int)( trf.rot( t));
	}

	ll_x = Math.min( x1, x2);
	ur_x = Math.max( x1, x2);
	ll_y = Math.min( y1, y2);
	ur_y = Math.max( y1, y2);

	int grad = gradient;
	if ( gradient == Glow.eGradient_No && 
	     (node != null && ((GrowNode)node).gradient != Glow.eGradient_No) && disable_gradient == 0)
	    grad = ((GrowNode)node).gradient;
  
	int skip;
	int bar_ll_x, bar_ur_x;
	int bar_ll_y, bar_ur_y;
	double f_bar_ll_y;
	double width;
	int brect_ll_x = 0;
	int brect_ll_y = 0;
	int brect_width = 0;
	int brect_height = 0;

	width = (double)(ur_x - ll_x) / bars;
	bar_ur_x = ll_x;
	for ( int j = 0; j < bars; j++) {
	    bar_ll_x = bar_ur_x;

	    if ( j == bars - 1)
		bar_ur_x = ur_x;
	    else
		bar_ur_x = ll_x + (int)((j + 1) * width);    
    
	    bar_ll_y = ur_y;
	    f_bar_ll_y = ur_y;
	    for ( int i = 0; i < barsegments + 1; i++) {
		int fillcolor = 0;

		skip = 0;
		bar_ur_y = bar_ll_y;

		if ( i == barsegments) {
		    if ( bar_ll_y <= ll_y)
			skip = 1;
		    else
			bar_ll_y = ll_y;
		    fillcolor = GlowColor.get_drawtype( fill_drawtype, Glow.eDrawType_FillHighlight,
							highlight, colornode, 1, 0 );
		}
		else {
		    if ( bar_values[i * bars + j] <= min_value)
			skip = 1;
		    else if ( bar_ur_y <= ll_y)
			skip = 1;
		    else {
			f_bar_ll_y -= bar_values[i*bars+j] * (ur_y - ll_y) / (max_value - min_value);
			bar_ll_y = (int)f_bar_ll_y;
			if ( bar_ll_y < ll_y)
			    bar_ll_y = ll_y;

			fillcolor = GlowColor.get_drawtype( bar_color[i], Glow.eDrawType_FillHighlight,
							    highlight, colornode, 1, 0);
		    }
		}
    
		if ( skip == 0) {
		    if ( grad == Glow.eGradient_No || fillcolor == Glow.eDrawType_ColorRed || i == barsegments) {
			if ( chot != 0)
			    drawtype = GlowColor.shift_drawtype( fillcolor, chot, null);
			else
			    drawtype = fillcolor;
			cmn.gdraw.fill_rect( bar_ll_x, bar_ll_y, bar_ur_x - bar_ll_x, bar_ur_y - bar_ll_y, drawtype);
		    }
		    else {
			int f1, f2;
			if ( gradient_contrast >= 0) {
			    f2 = GlowColor.shift_drawtype( fillcolor, -gradient_contrast/2 + chot, null);
			    f1 = GlowColor.shift_drawtype( fillcolor, (int)((float)(gradient_contrast)/2+0.6) + chot, null);
			}
			else {
			    f2 = GlowColor.shift_drawtype( fillcolor, -(int)((float)(gradient_contrast)/2-0.6) + chot, null);
			    f1 = GlowColor.shift_drawtype( fillcolor, gradient_contrast/2 + chot, null);
			}
			cmn.gdraw.gradient_fill_rect( bar_ll_x, bar_ll_y, bar_ur_x - bar_ll_x, 
						      bar_ur_y - bar_ll_y, fillcolor, f1, f2, grad);
		    }
		}
		if ( border != 0 && i == barsegments) {
		    // Draw previous bar border
		    if ( j > 0) {
			drawtype = GlowColor.get_drawtype( draw_type, Glow.eDrawType_LineHighlight,
							   highlight, colornode, 0, 0);

			cmn.gdraw.rect( brect_ll_x, brect_ll_y, brect_width, brect_height, 
					drawtype, idx, 0);
		    }
		    if ( skip == 0) {
			brect_ll_x = bar_ll_x;
			brect_ll_y = bar_ur_y;
			brect_width = bar_ur_x - bar_ll_x;
			brect_height = ur_y - bar_ur_y;
		    }
		    else {
			brect_ll_x = bar_ll_x;
			brect_ll_y = ll_y;
			brect_width = bar_ur_x - bar_ll_x;
			brect_height = ur_y - ll_y;
		    }
		    if ( j == bars - 1) {
			// Draw last bar border
			drawtype = GlowColor.get_drawtype( draw_type, Glow.eDrawType_LineHighlight,
							   highlight, colornode, 0, 0);

			cmn.gdraw.rect( brect_ll_x, brect_ll_y, brect_width, brect_height, 
					drawtype, idx, 0);
		    }
		}
	    }
	}

	drawtype = GlowColor.get_drawtype( line_color, Glow.eDrawType_LineHighlight,
					   highlight, colornode, 0, 0);

	for ( int i = 0; i < vertical_lines; i++) {
	    int x = (int)( ll_x + (double)(ur_x - ll_x) / (vertical_lines + 1) * (i + 1)); 
	    cmn.gdraw.line( x, ll_y, x, ur_y, drawtype, 0, 0);
	}

	for ( int i = 0; i < horizontal_lines; i++) {
	    int y = (int)( ll_y + (double)(ur_y - ll_y) / (horizontal_lines + 1) * (i + 1)); 
	    cmn.gdraw.line( ll_x, y, ur_x, y, drawtype, 0, 0);
	}

	if ( border != 0) {
	    drawtype = GlowColor.get_drawtype( draw_type, Glow.eDrawType_LineHighlight,
					       highlight, colornode, 0, 0);

	    // printf( "draw: %d %d\n", ll_x, ll_y);
	    cmn.gdraw.rect( ll_x, ll_y, ur_x - ll_x, ur_y - ll_y, 
			    drawtype, idx, 0);
	}

    }

    public void set_conf( int bar_num, int barsegment_num, double min_val, double max_val, 
			  int vert_lines, int horiz_lines, int lcolor, int[] color) {
	bars = bar_num;
	barsegments = barsegment_num;
	min_value = min_val;
	max_value = max_val;
	vertical_lines = vert_lines;
	horizontal_lines = horiz_lines;
	line_color = lcolor;
	for ( int i = 0; i < bars; i++)
	    bar_color[i] = color[i];
	draw();
    }


    public GlowBarChartInfo get_conf() {
	GlowBarChartInfo info = new GlowBarChartInfo();

	info.bars = bars;
	info.barsegments = barsegments;
        info.max_value = max_value;
	info.min_value = min_value;
	return info;
    }

    public void set_values( float[] values1, float[] values2, float[] values3, float[] values4, 
			    float[] values5, float[] values6, float[] values7, float[] values8, 
			    float[] values9, float[] values10, float[] values11, float[] values12) {
	int j = 0;
	if ( j < barsegments && values1 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values1[i];
	}
	j++;
	if ( j < barsegments && values2 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values2[i];
	}
	j++;
	if ( j < barsegments && values3 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values3[i];
	}
	j++;
	if ( j < barsegments && values4 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values4[i];
	}
	j++;
	if ( j < barsegments && values5 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values5[i];
	}
	j++;
	if ( j < barsegments && values6 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values6[i];
	}
	j++;
	if ( j < barsegments && values7 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values7[i];
	}
	j++;
	if ( j < barsegments && values8 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values8[i];
	}
	j++;
	if ( j < barsegments && values9 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values9[i];
	}
	j++;
	if ( j < barsegments && values10 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values10[i];
	}
	j++;
	if ( j < barsegments && values11 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values11[i];
	}
	j++;
	if ( j < barsegments && values12 != null) {
	    for ( int i = 0; i < bars; i++)
		bar_values[j*bars + i] = values12[i];
	}
    }

    public Object getUserData() { 
	return userdata;
    }
}
