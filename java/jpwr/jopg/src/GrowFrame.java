/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.awt.font.*;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.event.*;
import java.net.*;
import java.applet.*;

public class GrowFrame extends JFrame implements GraphApplIfc, ActionListener {
    static final long serialVersionUID = 5542805623122782462L;
    static final int BORDER_WIDTH = 5;
    static final int BORDER_HEIGHT = 40; 
    JScrollPane scrollPane;
    JPanel contentPane;
    LocalPanel localPanel = new LocalPanel();
    BorderLayout borderLayout1 = new BorderLayout();
    Dimension size;
    Object root;
    Graph graph;
    Timer timer;
    int scanTime = 1000;
    int scanCount = 0;
    JDialog confirmDia = null;
    JLabel confirmLabel;
    Object confirmDyn;
    Object confirmObject;
    JDialog valueInputDia = null;
    JLabel valueInputLabel;
    JLabel valueInputMessage;
    Object valueInputDyn;
    Object valueInputObject;
    JTextField valueInputText;
    String instance;
    GrowFrameApplIfc appl;
    GrowFrame frame;
    boolean drawn = false;
    double baseZoomFactor = 0;
    int defaultWidth = 0;
    int defaultHeight = 0;
    double aspectRatio = 0;
    Dimension prevSize;
    int skipResize = 0;

    public GrowFrame( String file, Gdh gdh, String instance, GrowFrameApplIfc appl, Object root) throws FileNotFoundException {
	this.root = root;
	this.instance = instance;
	this.appl = appl;
	this.frame = this;
	init( file, gdh);
    }

    private void init( String file, Gdh gdh) throws FileNotFoundException {
	contentPane = (JPanel) this.getContentPane();
	contentPane.setLayout(borderLayout1);
	contentPane.add(localPanel, BorderLayout.CENTER);
	contentPane.setOpaque(true);
	localPanel.setLayout(null);
	localPanel.setOpaque(true);
	localPanel.setBackground( Color.white);
	setTitle( file, instance);
	size = new Dimension( 1100, 900);
	setSize( size);

	String filename;
	BufferedReader reader = null;
	String fname = file;

	System.out.println("GrowFrame root: " + root); 
	if ( root != null && root instanceof JApplet) {
	    try {
		URL current = ((JApplet) root).getCodeBase();
		String current_str = current.toString();
		int idx1 = current_str.lastIndexOf('/');
		int idx2 = current_str.lastIndexOf(':');
		int idx = idx1;
		if ( idx2 > idx)
		    idx = idx2;
		String path = current_str.substring(0,idx + 1);
		filename = path + fname;
		System.out.println( "Opening file " + filename);
		URL fileURL = new URL( filename);
		InputStream in = fileURL.openStream();
		// in = new BufferedInputStream(in);
		InputStreamReader r2 = new InputStreamReader(in, "ISO-8859-1");
		reader = new BufferedReader( r2);

		// Read size info
		reader.mark(1000);
		String line;
	    
		try {
		    for ( int i = 0; i < 2; i++) {
			line = reader.readLine();
			if ( line == null || !line.startsWith("0! "))
			    break;
			if ( line.substring(3, 15).equals("DefaultWidth"))
			    defaultWidth = new Integer(line.substring(16)).intValue();
			else if ( line.substring(3, 16).equals("DefaultHeight"))
			    defaultHeight = new Integer(line.substring(17)).intValue();
		    }
		} catch ( Exception e) {
		    System.out.println( "IOException GlowFrame");
		}
		System.out.println("GraphFrame size " + defaultWidth + "  " + defaultHeight);
		if ( defaultWidth != 0 && defaultHeight != 0) {
		    size = new Dimension( defaultWidth + BORDER_WIDTH, defaultHeight + BORDER_HEIGHT);
		    System.out.println("defaultWidth: " + defaultWidth + " defaultHeight " + defaultHeight);
		    setSize( size);
		    aspectRatio = (double)defaultWidth/defaultHeight;
		    prevSize = new Dimension(defaultWidth, defaultHeight);
		}		
		else {
		    reader.reset();
		    /*	    reader.close();
		    InputStream in3 = fileURL.openStream();
		    InputStreamReader r3 = new InputStreamReader(in, "ISO-8859-1");
		    reader = new BufferedReader( r3);		    
		    */
		}
	    }
	    catch ( Exception e) {		
		System.out.println( "Unable to open file");
		throw new FileNotFoundException( "File not found: " + file);
	    }
	}
	else {
	    // Not applet
	    if ( fname.lastIndexOf('/') == -1) {
		if ( fname.startsWith("pwr_c_"))
		    filename = "$pwr_exe/" + fname;
		else
		    filename = "$pwrp_exe/" + fname;
	    }
	    else
		filename = fname;
	    filename = Gdh.translateFilename( filename);

	    System.out.println( "Fname: " + filename);
	    try {
		reader = new BufferedReader( new InputStreamReader(new FileInputStream(filename), "ISO-8859-1"));
	    }
	    catch ( Exception e) {
		System.out.println( "Unable to open file " + filename);
		throw new FileNotFoundException( "Unable to open file " + filename);
	    }
	    // Read size info
	    String line;
	    
	    try {
		reader.mark(1000);
		for ( int i = 0; i < 2; i++) {
		    line = reader.readLine();
		    if ( line == null || !line.startsWith("0! "))
			break;
		    if ( line.substring(3, 15).equals("DefaultWidth"))
			defaultWidth = new Integer(line.substring(16)).intValue();
		    else if ( line.substring(3, 16).equals("DefaultHeight"))
			defaultHeight = new Integer(line.substring(17)).intValue();
		}
	    } catch ( Exception e) {
		System.out.println( "IOException GlowFrame");
	    }
	    System.out.println("GraphFrame size " + defaultWidth + "  " + defaultHeight);
	    if ( defaultWidth != 0 && defaultHeight != 0) {
		size = new Dimension( defaultWidth + 5, defaultHeight + 40);
		setSize( size);
		aspectRatio = (double)defaultWidth/defaultHeight;
		prevSize = new Dimension(defaultWidth, defaultHeight);
	    }
	    else {
		try {
		    reader.reset();
		    /*
		    reader.close();
		    reader = new BufferedReader( new InputStreamReader(new FileInputStream(filename), "ISO-8859-1"));
		    */
		}
		catch ( Exception e) {
		    System.out.println( "Unable to open file " + filename);
		    return;
		}

	    }
	}

	// if ( gdh == null)
	//    gdh = new Gdh(this);
	graph = new Graph(this, gdh);
	if ( instance != null)
	    graph.setOwner( instance);
	graph.open(reader);

	if ( defaultWidth == 0 || defaultHeight == 0)
	    setSize();

	enableEvents(AWTEvent.WINDOW_EVENT_MASK);
	setDefaultCloseOperation( DISPOSE_ON_CLOSE);
	
	MouseAdapter adapter = new MouseAdapter() {
		public void mouseClicked(MouseEvent e) {
		    if ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0) {
			GlowEvent event = new GlowEvent();
			event.x = (e.getX() + graph.ctx.cmn.mw.offset_x) / graph.ctx.cmn.mw.zoom_factor_x;
			event.y = (e.getY() + graph.ctx.cmn.mw.offset_y) / graph.ctx.cmn.mw.zoom_factor_y;
			event.event = Glow.eEvent_MB1Click;
			graph.ctx.eventHandler( event);
		    }
		    else if ((e.getModifiers() & MouseEvent.BUTTON3_MASK) != 0) {
			GlowEvent event = new GlowEvent();
			event.x = (e.getX() + graph.ctx.cmn.mw.offset_x) / graph.ctx.cmn.mw.zoom_factor_x;
			event.y = (e.getY() + graph.ctx.cmn.mw.offset_y) / graph.ctx.cmn.mw.zoom_factor_y;
			event.event = Glow.eEvent_MB3Press;
			graph.ctx.eventHandler( event);
		    }
		}
		public void mousePressed(MouseEvent e) {
		    /*
		    if ( e.isPopupTrigger()) {
			System.out.println("GrowFrame MB3");
			GlowEvent event = new GlowEvent();
			event.x = (e.getX() + graph.ctx.cmn.mw.offset_x) / graph.ctx.cmn.mw.zoom_factor_x;
			event.y = (e.getY() + graph.ctx.cmn.mw.offset_y) / graph.ctx.cmn.mw.zoom_factor_y;
			event.event = Glow.eEvent_MB3Press;
			graph.ctx.eventHandler( event);
		    }
		    else */ if ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0) {
			GlowEvent event = new GlowEvent();
			event.x = (e.getX() + graph.ctx.cmn.mw.offset_x) / graph.ctx.cmn.mw.zoom_factor_x;
			event.y = (e.getY() + graph.ctx.cmn.mw.offset_y) / graph.ctx.cmn.mw.zoom_factor_y;
			event.event = Glow.eEvent_MB1Down;
			graph.ctx.eventHandler( event);
		    }
		}
		public void mouseReleased(MouseEvent e) {
		    if ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0) {
			GlowEvent event = new GlowEvent();
			event.x = (e.getX() + graph.ctx.cmn.mw.offset_x) / graph.ctx.cmn.mw.zoom_factor_x;
			event.y = (e.getY() + graph.ctx.cmn.mw.offset_y) / graph.ctx.cmn.mw.zoom_factor_y;
			event.event = Glow.eEvent_MB1Up;
			graph.ctx.eventHandler( event);
		    }
 		}
		public void mouseMoved(MouseEvent e) {
		    GlowEvent event = new GlowEvent();
		    event.x = (e.getX() + graph.ctx.cmn.mw.offset_x) / graph.ctx.cmn.mw.zoom_factor_x;
		    event.y = (e.getY() + graph.ctx.cmn.mw.offset_y) / graph.ctx.cmn.mw.zoom_factor_y;
		    event.event = Glow.eEvent_CursorMotion;
		    graph.ctx.eventHandler( event);
		}
		public void mouseDragged(MouseEvent e) {
		    GlowEvent event = new GlowEvent();
		    event.x = (e.getX() + graph.ctx.cmn.mw.offset_x) / graph.ctx.cmn.mw.zoom_factor_x;
		    event.y = (e.getY() + graph.ctx.cmn.mw.offset_y) / graph.ctx.cmn.mw.zoom_factor_y;
		    event.event = Glow.eEvent_ButtonMotion;
		    graph.ctx.eventHandler( event);
		}
	    };
 
	this.addComponentListener(new ComponentAdapter() {
		public void componentResized(ComponentEvent e) {
		    if ( drawn && aspectRatio != 0) {
			int w = getWidth() - BORDER_WIDTH;
			int h = getHeight() - BORDER_HEIGHT;
			
			if ( skipResize > 0) {
			    skipResize--;
			    prevSize = new Dimension(w,h);
			    graph.ctx.setDefaultLayout( w, h);
			    return;
			}

			double ratio = (double)w/h;

			if ( (w > 400 && Math.abs(ratio - aspectRatio) > 0.05) ||
			     (w > 200 && w <= 400 && Math.abs(ratio - aspectRatio) > 0.10) ||
			     (w <= 200 && Math.abs(ratio - aspectRatio) > 0.15)) {
			    h = (int) ((double)w/aspectRatio);

			    prevSize = new Dimension(w,h);
			    setSize(w + BORDER_WIDTH,h + BORDER_HEIGHT);
			    skipResize = 1;
			}
			graph.ctx.setDefaultLayout( w, h);
		    }
		}
	    });

        localPanel.addMouseListener(adapter);
        localPanel.addMouseMotionListener(adapter);

	scanTime = (int) (1000 * graph.getAnimationScanTime()); 
	System.out.println( "scanTime: " + scanTime);

	timer = new Timer( scanTime, this); 
	timer.start();
    }

    public int getWidth() {
	if ( localPanel.getWidth() == 0 && defaultWidth != 0)
	    return defaultWidth;
	return localPanel.getWidth() + 5;
    }
    public int getHeight() {
	if ( localPanel.getHeight() == 0 && defaultHeight != 0)
	    return defaultHeight;
	return localPanel.getHeight() + 40;
    }

    public void actionPerformed( ActionEvent e) {
	scanCount++;
	if ( scanCount == 1)
	    graph.gdh.getObjectRefInfoAll();

	graph.traceScan();
	localPanel.repaint();
    }

    void setSize() {
	size = new Dimension( (int)((graph.ctx.cmn.x_right - graph.ctx.cmn.x_left) * graph.ctx.cmn.mw.zoom_factor_x) + Glow.DRAWOFFSET * 2,
			      (int)((graph.ctx.cmn.y_high - graph.ctx.cmn.y_low) * graph.ctx.cmn.mw.zoom_factor_y) + Glow.DRAWOFFSET * 2);
	localPanel.setPreferredSize( size);
	localPanel.revalidate();
    }

    class LocalPanel extends JPanel {
	static final long serialVersionUID = 4836507228045982216L;
	public LocalPanel() {}
	public Dimension getPreferredSize() { return size;}
	public Dimension getMinimumSize() { return size;}
	public void paint(Graphics g) {
	    Graphics2D g2 = (Graphics2D)g;

	    g2.setPaint(graph.ctx.cmn.gdraw.getColor(graph.ctx.cmn.background_color));
	    g2.fill(new Rectangle2D.Double(0,0,getWidth(),getHeight()));

	    graph.gdraw.setGraphics(g2);
	    graph.ctx.draw();

	    drawn = true;
	}
    }

    public void closeGrow() {
	timer.stop();
    }

    // Exit when window is closed
    protected void processWindowEvent(WindowEvent e) {
	super.processWindowEvent(e);
	if (e.getID() == WindowEvent.WINDOW_CLOSING) {
	    closeGrow();
	}
    }

    public int command(String cmd) {
	System.out.println("Ge command : " + cmd);
	if ( appl != null)
 	    return appl.command(cmd, this);
	return 0;
    }

    public int script(String script) {
	if ( appl != null)
 	    return appl.script(script);
	return 0;
    }

    public void closeGraph() {
	dispatchEvent(new WindowEvent( this, WindowEvent.WINDOW_CLOSING));
    }

    public void confirmNo() {}
    public void confirmYes() {
	((Dyn)confirmDyn).confirmedAction( Glow.eEvent_MB1Click, confirmObject);
    }
    public void openConfirmDialog( Object dyn, String text, Object object) {
	JLabel label = null;

	confirmDyn = dyn;
	confirmObject = object;
	if ( confirmDia == null) {
	    confirmDia = new JDialog(frame);
	    confirmDia.setTitle("Confirm");
	    confirmDia.setResizable(false);
	    confirmDia.setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE);
	    confirmDia.setSize( 400, 150);
	    confirmLabel = new JLabel( text, JLabel.CENTER);
	    confirmDia.getContentPane().setLayout( new BorderLayout());
	    confirmDia.getContentPane().add( confirmLabel, BorderLayout.CENTER);
	    JButton buttonYes = new JButton("Yes");
	    buttonYes.addActionListener( new ActionListener() {
		    public void actionPerformed( ActionEvent ev) {
			confirmYes();
			confirmDia.dispose();
		    }
		});
	    JButton buttonNo = new JButton("No");
	    buttonNo.addActionListener( new ActionListener() {
		    public void actionPerformed( ActionEvent ev) {
			confirmNo();
			confirmDia.dispose();
		    }
		});
	    JButton buttonCancel = new JButton("Cancel");
	    buttonCancel.addActionListener( new ActionListener() {
		    public void actionPerformed( ActionEvent ev) {
			confirmNo();
			confirmDia.dispose();
		    }
		});
	    JPanel panel = new JPanel();
	    panel.add( buttonYes);
	    panel.add( buttonNo);
	    panel.add( buttonCancel);
	    confirmDia.getContentPane().add( panel, BorderLayout.SOUTH);
	    confirmDia.setLocationRelativeTo(frame);
	    confirmDia.setVisible( true);

	    confirmDia.addWindowListener(new WindowAdapter() {
		    public void windowClosing(WindowEvent e) {
			confirmDia.dispose();
		    }
		});
	}
	else {
	    // confirmDia.setLocationRelativeTo( par);
	    confirmLabel.setText( text);
	    confirmDia.setLocationRelativeTo(frame);
	    confirmDia.setVisible( true);
	}
    }

    public void valueInputCancel() {
	valueInputDia.dispose();
    }
    public void valueInputOk() {
	String value = valueInputText.getText();
	int sts = ((Dyn)valueInputDyn).valueInputAction( valueInputObject, value);
	switch ( sts) {
	case Dyn.eValueInput_Success:
	    valueInputDia.dispose();
	    break;
	case Dyn.eValueInput_Error:
	    valueInputMessage.setText("Unable to set value");
	    break;
	case Dyn.eValueInput_SyntaxError:
	    valueInputMessage.setText("Syntax error");
	    break;
	case Dyn.eValueInput_MinValueExceeded:
	    valueInputMessage.setText("Minimum value exceeded");
	    break;
	case Dyn.eValueInput_MaxValueExceeded:
	    valueInputMessage.setText("Maximum value exceeded");
	    break;
	}
    }
    public void openValueInputDialog( Object dyn, String text, Object object) {
	JLabel label = null;

	valueInputDyn = dyn;
	valueInputObject = object;
	if ( valueInputDia == null) {
	    valueInputDia = new JDialog(frame);
	    valueInputDia.setTitle("Value Input");
	    valueInputDia.setResizable(false);
	    valueInputDia.setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE);
	    valueInputDia.setSize( 400, 150);
	    valueInputLabel = new JLabel( text, JLabel.CENTER);
	    valueInputText = new JTextField(5);
	    valueInputText.addKeyListener(new java.awt.event.KeyAdapter() {
		    public void keyPressed(KeyEvent e) {
			if ( e.getKeyCode() == KeyEvent.VK_ESCAPE ) {
			    // keyPressedEvent(e);
			}
			else if ( e.getKeyCode() == KeyEvent.VK_ENTER ) {
			    System.out.println("Enter key");
			    valueInputOk();
			}
		    }
		});
	    valueInputText.addActionListener( new ActionListener() {
		    public void actionPerformed( ActionEvent ev) {
			valueInputOk();
		    }
		});

	    JButton buttonOk = new JButton("Ok");
	    buttonOk.addActionListener( new ActionListener() {
		    public void actionPerformed( ActionEvent ev) {
			valueInputOk();
		    }
		});
	    JButton buttonCancel = new JButton("Cancel");
	    buttonCancel.addActionListener( new ActionListener() {
		    public void actionPerformed( ActionEvent ev) {
			valueInputCancel();
		    }
		});

	    valueInputDia.getContentPane().setLayout( new BoxLayout(valueInputDia.getContentPane(), 
								    BoxLayout.Y_AXIS));

	    JPanel panel = new JPanel();
	    panel.add( valueInputLabel);
	    panel.add( valueInputText);
	    valueInputDia.getContentPane().add( panel);

	    valueInputMessage = new JLabel( "", JLabel.CENTER);
	    valueInputDia.getContentPane().add( valueInputMessage);

	    JPanel panel2 = new JPanel();
	    panel2.add( buttonOk);
	    panel2.add( buttonCancel);
	    valueInputDia.getContentPane().add( panel2);
	    valueInputDia.setLocationRelativeTo(frame);
	    valueInputDia.setVisible( true);
	    valueInputDia.addWindowListener(new WindowAdapter() {
		    public void windowClosing(WindowEvent e) {
			valueInputDia.dispose();
		    }
		});
	}
	else {
	    if ( valueInputDia.isVisible())
		valueInputDia.dispose();
	    else {
		valueInputLabel.setText(text);
		valueInputText.setText("");
		valueInputMessage.setText("");
		valueInputDia.setLocationRelativeTo(frame);
		valueInputDia.setVisible(true);
	    }
	}
    }

    public void openPopupMenu( String object, double x, double y) {
	if ( appl != null) {
 	    appl.openPopupMenu( object, this,
				(int)(x * graph.ctx.cmn.mw.zoom_factor_x - graph.ctx.cmn.mw.offset_x), 
				(int)(y * graph.ctx.cmn.mw.zoom_factor_y - graph.ctx.cmn.mw.offset_y)); 
	}
    }

    public String getObject() {
	return instance;
    }

    public Object loadGrowCtx( String fname, String owner) {
	String filename;
	BufferedReader reader = null;

	if ( root != null && root instanceof JApplet) {
	    try {
		URL current = ((JApplet) root).getCodeBase();
		String current_str = current.toString();
		int idx1 = current_str.lastIndexOf('/');
		int idx2 = current_str.lastIndexOf(':');
		int idx = idx1;
		if ( idx2 > idx)
		    idx = idx2;
		String path = current_str.substring(0,idx + 1);

		idx = fname.indexOf('/');
		if ( idx != -1)
		    fname = fname.substring(idx);
		
		filename = path + fname;
		System.out.println( "Opening file " + filename);
		URL fileURL = new URL( filename);
		InputStream in = fileURL.openStream();
		// in = new BufferedInputStream(in);
		InputStreamReader r2 = new InputStreamReader(in, "ISO-8859-1");
		reader = new BufferedReader( r2);
	    }
	    catch ( Exception e) {
		System.out.println( "Unable to open file");
	    }
	}
	else {
	    if ( fname.lastIndexOf('/') == -1) {
		if ( fname.startsWith("pwr_c_"))
		    filename = "$pwr_exe/" + fname;
		else
		    filename = "$pwrp_exe/" + fname;
	    }
	    else
		filename = fname;
	    filename = Gdh.translateFilename( filename);

	    System.out.println( "Fname: " + filename);
	    try {
		//reader = new BufferedReader(new FileReader(filename));
		reader = new BufferedReader( new InputStreamReader(new FileInputStream(filename), "ISO-8859-1"));
	    }
	    catch ( Exception e) {
		System.out.println( "Unable to open file " + filename);
		return null;
	    }
	}
	return graph.loadGrowCtx( reader, owner);
    }

    public int loadSubgraph( String fname) {
	String filename;
	BufferedReader reader = null;

	if ( root != null && root instanceof JApplet) {
	    try {
		URL current = ((JApplet) root).getCodeBase();
		String current_str = current.toString();
		int idx1 = current_str.lastIndexOf('/');
		int idx2 = current_str.lastIndexOf(':');
		int idx = idx1;
		if ( idx2 > idx)
		    idx = idx2;
		String path = current_str.substring(0,idx + 1);

		idx = fname.indexOf('/');
		if ( idx != -1)
		    fname = fname.substring(idx);
		
		filename = path + fname;
		System.out.println( "Opening file " + filename);
		URL fileURL = new URL( filename);
		InputStream in = fileURL.openStream();
		// in = new BufferedInputStream(in);
		InputStreamReader r2 = new InputStreamReader(in, "ISO-8859-1");
		reader = new BufferedReader( r2);
	    }
	    catch ( Exception e) {
		System.out.println( "Unable to open file");
	    }
	}
	else {
	    if ( fname.lastIndexOf('/') == -1) {
		if ( fname.startsWith("pwr_"))
		    filename = "$pwr_exe/" + fname;
		else
		    filename = "$pwrp_exe/" + fname;
	    }
	    else
		filename = fname;
	    filename = Gdh.translateFilename( filename);

	    System.out.println( "Fname: " + filename);
	    try {
		//reader = new BufferedReader(new FileReader(filename));
		reader = new BufferedReader( new InputStreamReader(new FileInputStream(filename), "ISO-8859-1"));
	    }
	    catch ( Exception e) {
		System.out.println( "Unable to open file " + filename);
		return 0;
	    }
	}
	int sts = graph.loadSubgraph( reader);
	try {
	    reader.close();
	}
	catch ( IOException e) {
	    System.out.println( "Subgraph close file error " + fname);
	}
	return sts;
    }

    public void setTitle( String file, String instance) {
	if ( instance != null)
	    super.setTitle( instance);
	else {
	    String name;

	    int idx = file.lastIndexOf('/');
	    if ( idx == -1)
		name = file;
	    else
		name = file.substring(idx+1);
	    idx = name.lastIndexOf('.');
	    if ( idx != -1)
		name = name.substring(0, idx);
	    super.setTitle(name);
	}
    }

    public void setSubwindowSource( String name, String source, String object) {
	graph.setSubwindowSource( name, source, object);
    }

    public GrowFrameApplIfc getAppl() {
	return appl;
    }

    public boolean isAuthorized(int access) {
	return graph.gdh.isAuthorized(access);
    }

    public void signalSend( String signalName) {
	graph.signalSend( signalName);
    }
}





