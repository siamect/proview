/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GrowPie extends GrowArc {

    public static final int PIE_MAX_SECTORS = 12;
    
    int	sectors;
    double min_value;
    double max_value;
    int[] sector_color = new int[PIE_MAX_SECTORS];
    double[] sector_size = new double[PIE_MAX_SECTORS];
    Object userdata;


    public GrowPie(GrowCmn cmn) {
	super(cmn);
    }

    public int type() {
	return Glow.eObjectType_GrowPie;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GrowPie : " + line);

		switch ( key) {

		case Glow.eSave_GrowPie: 
		    break;
		case Glow.eSave_GrowPie_arc_part: 
		    super.open( reader);
		    break;
		case Glow.eSave_GrowPie_sectors: 
		    sectors = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_max_value: 
		    max_value = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowPie_min_value: 
		    min_value = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowPie_sector_color1: 
		    sector_color[0] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_color2: 
		    sector_color[1] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_color3: 
		    sector_color[2] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_color4: 
		    sector_color[3] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_color5: 
		    sector_color[4] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_color6: 
		    sector_color[5] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_color7: 
		    sector_color[6] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_color8: 
		    sector_color[7] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_color9: 
		    sector_color[8] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_color10: 
		    sector_color[9] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_color11: 
		    sector_color[10] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_color12: 
		    sector_color[11] = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size1: 
		    sector_size[0] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size2: 
		    sector_size[1] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size3: 
		    sector_size[2] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size4: 
		    sector_size[3] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size5: 
		    sector_size[4] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size6: 
		    sector_size[5] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size7: 
		    sector_size[6] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size8: 
		    sector_size[7] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size9: 
		    sector_size[8] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size10: 
		    sector_size[9] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size11: 
		    sector_size[10] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_sector_size12: 
		    sector_size[11] = Double.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowPie_userdata_cb:
		    if ( cmn.appl != null)
			userdata = cmn.appl.growUserdataOpen( reader, this, Glow.eUserdataCbType_Node);
		    break;

		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GrowPie");
		    break;
		}
		if ( end_found)
		    break;
	    }
		
	} catch ( Exception e) {
	    System.out.println( "IOException GrowPie");
	}
    }    

    public void draw(GlowTransform t, int highlight, int hot, Object node, Object colornode) {
	if ( cmn.nodraw != 0)
	    return;

	int drawtype;
	int idx;
	int chot = 0;
	
	if ( cmn.hot_indication == Glow.eHotIndication_No)
	    hot = 0;
	else if ( cmn.hot_indication == Glow.eHotIndication_DarkColor) {
	    chot = hot;
	    hot = 0;
	}
	else if ( cmn.hot_indication == Glow.eHotIndication_LightColor) {
	    chot = -hot;
	    hot = 0;
	}

	if ( fixcolor != 0)
	    colornode = null;

	if ( node != null && ((GrowNode)node).line_width != 0)
	    idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * 
		       ((GrowNode)node).line_width - 1);
	else
	    idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * line_width - 1);
	idx += hot;
	idx = Math.max( 0, idx);
	idx = Math.min( idx, Glow.DRAW_TYPE_SIZE-1);
	int x1, y1, x2, y2, ll_x, ll_y, ur_x, ur_y, rot;

	if ( t == null) {
	    x1 = (int)( trf.x( ll.x, ll.y) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	    y1 = (int)( trf.y( ll.x, ll.y) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    x2 = (int)( trf.x( ur.x, ur.y) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	    y2 = (int)( trf.y( ur.x, ur.y) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    rot = (int)( trf.rot());
	}
	else {
	    x1 = (int)( trf.x( t, ll.x, ll.y) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	    y1 = (int)( trf.y( t, ll.x, ll.y) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    x2 = (int)( trf.x( t, ur.x, ur.y) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	    y2 = (int)( trf.y( t, ur.x, ur.y) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    rot = (int)( trf.rot( t));
	}

	ll_x = Math.min( x1, x2);
	ur_x = Math.max( x1, x2);
	ll_y = Math.min( y1, y2);
	ur_y = Math.max( y1, y2);

	boolean display_shadow = ((node != null && ((GrowNode)node).shadow != 0) || shadow != 0) && disable_shadow == 0;
	int grad = gradient;
	if ( gradient == Glow.eGradient_No && 
	     (node != null && ((GrowNode)node).gradient != Glow.eGradient_No) && disable_gradient == 0)
	    grad = ((GrowNode)node).gradient;
  
	double a1 = angle1;
	double a2 = 0;
	int ia1 = angle1;
	int ia2;
	for ( int i = 0; i < sectors + 1; i++) {
	    int fillcolor;

	    if ( i == sectors) {
		if ( ia1 >= angle1 + angle2)
		    break;
		ia2 = angle1 + angle2 - ia1;
		fillcolor = GlowColor.get_drawtype( fill_drawtype, Glow.eDrawType_FillHighlight,
						    highlight, colornode, 1, 0);
	    }
	    else {
		if ( sector_size[i] <= min_value)
		    continue;
		if ( a1 >= angle2 + angle1)
		    break;
		a2 = sector_size[i] / (max_value - min_value) * angle2;
		if ( a1 + a2 > angle1 + angle2)
		    a2 = angle1 + angle2 - a1;
		ia2 = (int)(a2 + a1 - ia1 + 0.5);
		
		fillcolor = GlowColor.get_drawtype( sector_color[i], Glow.eDrawType_FillHighlight,
						    highlight, colornode, 1, 0);
	    }
    
	    
	    if ( grad == Glow.eGradient_No || fillcolor == Glow.eDrawType_ColorRed) {
		if ( chot != 0)
		    drawtype = GlowColor.shift_drawtype( fillcolor, chot, null);
		else
		    drawtype = fillcolor;
		cmn.gdraw.fill_arc( ll_x, ll_y, ur_x - ll_x, ur_y - ll_y,
				    ia1 - rot, ia2, drawtype);
	    }
	    else if ( !display_shadow || shadow_width == 0) {
		int f1, f2;
		if ( gradient_contrast >= 0) {
		    f2 = GlowColor.shift_drawtype( fillcolor, -gradient_contrast/2 + chot, null);
		    f1 = GlowColor.shift_drawtype( fillcolor, (int)((float)(gradient_contrast)/2+0.6) + chot, null);
		}
		else {
		    f2 = GlowColor.shift_drawtype( fillcolor, -(int)((float)(gradient_contrast)/2-0.6) + chot, null);
		    f1 = GlowColor.shift_drawtype( fillcolor, gradient_contrast/2 + chot, 0);
		}
		cmn.gdraw.gradient_fill_arc( ll_x, ll_y, ur_x - ll_x, ur_y - ll_y, ia1 - rot, 
					     ia2, fillcolor, f1, f2, grad);
	    }
	    else {
		int ish = (int)( shadow_width / 100 * Math.min(ur_x - ll_x, ur_y - ll_y) + 0.5);
		int drawtype_incr = shadow_contrast;
		if ( relief == Glow.eRelief_Down)
		    drawtype_incr = -shadow_contrast;
		
		int f1, f2;
		
		// Draw shadow
		f1 = GlowColor.shift_drawtype( fillcolor, -drawtype_incr + chot, colornode);
		f2 = GlowColor.shift_drawtype( fillcolor, drawtype_incr + chot, colornode);
		
		cmn.gdraw.gradient_fill_arc( ll_x, ll_y, ur_x - ll_x, ur_y - ll_y,
					     ia1 - rot, ia2, fillcolor, f2, f1, Glow.eGradient_DiagonalUpperLeft);
		
		// Draw circle
		if ( gradient_contrast >= 0) {
		    f2 = GlowColor.shift_drawtype( fillcolor, -gradient_contrast/2 + chot, null);
		    f1 = GlowColor.shift_drawtype( fillcolor, (int)((float)(gradient_contrast)/2+0.6) + chot, null);
		}
		else {
		    f2 = GlowColor.shift_drawtype( fillcolor, -(int)((float)(gradient_contrast)/2-0.6) + chot, null);
		    f1 = GlowColor.shift_drawtype( fillcolor, gradient_contrast/2 + chot, null);
		}
		cmn.gdraw.gradient_fill_arc( ll_x + ish, ll_y + ish, ur_x - ll_x - 2*ish, ur_y - ll_y - 2*ish,
					     ia1 - rot, ia2, fillcolor, f1, f2, grad);
	    }
	    a1 += a2;
	    ia1 += ia2;
	}
	
	if ( border != 0) {
	    drawtype = GlowColor.get_drawtype( draw_type, Glow.eDrawType_LineHighlight,
					       highlight, colornode, 0, 0);

	    cmn.gdraw.arc( ll_x, ll_y, ur_x - ll_x, ur_y - ll_y, 
			   angle1 - rot, angle2, drawtype, idx, 0);
	}
    }

    public void set_conf( int sector_num, double min_val, double max_val, int[] color) {
	sectors = sector_num;
	min_value = min_val;
	max_value = max_val;
	for ( int i = 0; i < sectors; i++)
	    sector_color[i] = color[i];
	draw();
    }

    public GlowPieInfo get_conf() {
	GlowPieInfo info = new GlowPieInfo();
	info.sector_num = sectors;
	info.min_val = min_value;
	info.max_val = max_value;
	return info;
    }

    public void set_values( double[] values) {
	for ( int i = 0; i < sectors; i++)
	    sector_size[i] = values[i];
	draw();
    }

    public Object getUserData() { 
	return userdata;
    }
}
