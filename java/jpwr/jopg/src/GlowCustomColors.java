/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GlowCustomColors {
    static final int colors_size = Glow.eDrawType_CustomColor__-Glow.eDrawType_CustomColor1;
    double colors[][] = new double[colors_size][3];
    int colortheme_lightness = 0;
    int is_default_colortheme;

    public GlowCustomColors() {
	for ( int i = 0; i < colors_size; i++) {
	    colors[i][0] = 1;
	    colors[i][1] = 1;
	    colors[i][2] = 1;
	}
    }

    public GlowColorRgb get_color( int dtype) {
	if ( dtype < Glow.eDrawType_CustomColor1 || dtype >= Glow.eDrawType_CustomColor__)
	    return null;

	int idx = dtype - Glow.eDrawType_CustomColor1;
	return new GlowColorRgb( colors[idx][0], colors[idx][1], colors[idx][2]);
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;
	int csize = 0;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
	        // System.out.println( "GlowCustomColors : " + line);

		switch ( key) {
		case Glow.eSave_CustomColors: 
		    break;
		case Glow.eSave_CustomColors_colors_size:
		    csize = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_CustomColors_colortheme_lightness:
		    colortheme_lightness = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_CustomColors_is_default_colortheme:
		    is_default_colortheme = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_CustomColors_colors:
		    for ( int i = 0; i < csize; i++) {
		        line = reader.readLine();
			token = new StringTokenizer(line);
			colors[i][0] = new Double(token.nextToken()).doubleValue(); 
			colors[i][1] = new Double(token.nextToken()).doubleValue(); 
			colors[i][2] = new Double(token.nextToken()).doubleValue(); 
		    }
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GlowCustomColors");
		    break;
		}
		if ( end_found)
		    break;
	    }
		
	} catch ( Exception e) {
	    System.out.println( "IOException GlowCustomColors");
	}
    }

}
