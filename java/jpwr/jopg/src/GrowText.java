/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GrowText extends GlowArrayElem {
    GrowCmn cmn;
    String n_name;
    double x_right;
    double x_left;
    double y_high;
    double y_low;
    int original_color_drawtype;
    int font;
    int adjustment = Glow.eAdjustment_Left;
    int dynamicsize;
    GlowTransform trf;

    GlowPoint p;
    String text;
    int draw_type;
    int text_size;
    int display_level;
    int color_drawtype;

    public GrowText(GrowCmn cmn) {
	this.cmn = cmn;
	trf = new GlowTransform();
	p = new GlowPoint();
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GrowText : " + line);

		switch ( key) {
		case Glow.eSave_GrowText: 
		    break;
		case Glow.eSave_GrowText_n_name:
		    if ( token.hasMoreTokens())
			n_name = token.nextToken();
		    break;
		case Glow.eSave_GrowText_x_right: 
		    x_right = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowText_x_left: 
		    x_left = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowText_y_high: 
		    y_high = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowText_y_low: 
		    y_low = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowText_original_color_drawtype: 
		    original_color_drawtype = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowText_font: 
		    font = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowText_adjustment: 
		    adjustment = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowText_dynamicsize:
		    dynamicsize = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_GrowText_dynamic:
		    if ( cmn.dynamicsize > 0) {
			for ( int j = 0; j < cmn.dynamicsize; j++) 
			    line = reader.readLine();  // TODO handle backslash and citationmarks
		    }
		    break;
		case Glow.eSave_GrowText_text_part: 
		    glowtext_open( reader);
		    break;
		case Glow.eSave_GrowText_trf: 
		    trf.open( reader);
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GrowText");
		    break;
		}
		if ( end_found)
		    break;
	    }
		
	} catch ( Exception e) {
	    System.out.println( "IOException GrowText");
	}
    }

    public void glowtext_open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GlowText : " + line);

		switch ( key) {

		case Glow.eSave_Text: 
		    break;
		case Glow.eSave_Text_draw_type: 
		    draw_type = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Text_text_size:
		    text_size = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Text_color_drawtype:
		    color_drawtype = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Text_text:
		    text = line.substring(4);
		    break;
		case Glow.eSave_Text_p:
		    p.open( reader);
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GrowText");
		    break;
		}
		if ( end_found)
		    break;

	    }

	} catch ( Exception e) {
	    System.out.println( "IOException GlowText");
	}
    }

    public int eventHandler( GlowEvent event, double fx, double fy) {
	/*
	GlowPointDX rp;

	switch ( event.event) {
	case Glow.eEvent_CursorMotion:		
	    return 0;
	default: ;
	}

	rp = trf.reverse( fx, fy);

	if ( ll.x <= rp.x && rp.x <= ur.x &&
	     ll.y <= rp.y && rp.y <= ur.y) {
	    System.out.println( "Event handler: Hit in text");
	    return 1;
	}  
	else
	*/
	    return 0;
    }

    public void draw() {
	draw( null, 0, 0, null, null);
    }


    public void draw(GlowTransform t, int highlight, int hot, Object node, Object colornode) {
	if ( cmn.nodraw != 0 || text == null)
	    return;

	int x1, y1, rx1, ry1;
	int z_width, z_height, z_descent;
	int rot;
	double trf_scale = trf.vertical_scale( t);
	int idx = (int)( trf_scale * cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * (text_size +4) - 3);
	double tsize = trf_scale * cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * (8+2*text_size);
	idx = Math.min( idx, Glow.DRAW_TYPE_SIZE-1);
	int highl = highlight;
	if ( node != null)
	    highl = ((GrowNode)node).highlight; 

	int lfont;
	int ldraw_type;

	if ( node != null && ((GrowNode)node).text_font != Glow.eFont_No) {
	    lfont = ((GrowNode)node).text_font;
	    ldraw_type = ((GrowNode)node).text_type;
	}
	else {
	    lfont = font;
	    ldraw_type = draw_type;
	}

	rx1 = ry1 = z_width = z_height = 0;
	if ( t == null) {
	    x1 = (int)( trf.x( p.x, p.y) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	    y1 = (int)( trf.y( p.x, p.y) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    rot = (int) trf.rot();
	}
	else {
	    x1 = (int)( trf.x( t, p.x, p.y) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	    y1 = (int)( trf.y( t, p.x, p.y) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    rot = (int) trf.rot( t);
	}
	if ( adjustment ==  Glow.eAdjustment_Center)
	    rot = rot < 0 ? rot % 360 + 360 : rot % 360;
	else
	    rot = 0;

	if ( !text.equals("")) {
	    if ( highl != 0 || (hot != 0 && node == null) || adjustment != Glow.eAdjustment_Left) {
		GlowDimension dim = cmn.gdraw.getTextExtent( text, Math.max( 0, idx), lfont, ldraw_type);
		z_width = dim.width;
		z_height = dim.height;
		z_descent = z_height/4;
		switch ( adjustment) {
		case Glow.eAdjustment_Left:
		    rx1 = x1;
		    ry1 = y1 - (z_height-z_descent);
		    break;
		case Glow.eAdjustment_Right:
		    x1 -= z_width;
		    rx1 = x1;
		    ry1 = y1 - (z_height-z_descent);
		    break;
		case Glow.eAdjustment_Center:
		    switch ( rot) {
		    case 90:
			rx1 = x1 - z_width / 2;
			ry1 = y1 - z_height / 2;
			x1 -= z_width / 2;
			y1 += z_height / 2;
			break;
		    case 270:
			rx1 = x1 - z_width / 2;
			ry1 = y1 - z_height / 2;
			x1 -= z_width / 2;
			y1 -= z_height / 2 - z_width /2 ;
			break;
		    default:
			rx1 = x1 - z_width / 2;
			ry1 = y1 - z_height / 2;
			x1 -= z_width / 2;
			y1 += z_height / 2 - z_descent;
		    }
		    break;
		}      
	    }

	    if ( highl != 0) {
		cmn.gdraw.rect( rx1, ry1, z_width, z_height, 
				Glow.eDrawType_FillHighlight, Math.max( 1, Math.min( idx + hot, 2)), 0);
	    }
	    else if ( hot != 0 && node == null) {
		cmn.gdraw.rect( rx1, ry1, z_width, z_height,
				Glow.eDrawType_LineGray, Math.max( Math.min(idx,2), 1), 0);
	    }
	    if ( idx >= 0) {
		int color = GlowColor.get_drawtype( color_drawtype, Glow.eDrawType_LineHighlight,
						    highlight, colornode, 2, 0);
		cmn.gdraw.text( x1, y1, text, ldraw_type, color, idx, highlight, 
				0, lfont, tsize, rot);
	    }
	}
	else if ( idx >= 0) {
	    GlowDimension dim = cmn.gdraw.getTextExtent( "A", Math.max( 0, idx), lfont, ldraw_type);
	    z_width = dim.width;
	    z_height = dim.height;
	    z_descent = z_height/4;
	    cmn.gdraw.rect( x1, y1 - (z_height-z_descent), z_width, z_height, 
			    Glow.eDrawType_LineGray, idx, 0);
	}

    }

    public String getName() {
	return n_name;
    }

}
