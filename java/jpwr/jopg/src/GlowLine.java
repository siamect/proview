/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GlowLine extends GlowArrayElem {
    GrowCmn cmn;
    GlowPoint p1;
    GlowPoint p2;
    int draw_type;
    int line_width;

    public GlowLine(GrowCmn cmn) {
	this.cmn = cmn;
	p1 = new GlowPoint();
	p2 = new GlowPoint();
    }

    public int type() {
	return Glow.eObjectType_Line;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GlowRect : " + line);

		switch ( key) {

		case Glow.eSave_Line: 
		    break;
		case Glow.eSave_Line_draw_type: 
		    draw_type = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Line_line_width:
		    line_width = Integer.valueOf(token.nextToken());
		    break;
		case Glow.eSave_Line_p1:
		    p1.open( reader);
		    break;
		case Glow.eSave_Line_p2:
		    p2.open( reader);
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GlowLine");
		    break;
		}
		if ( end_found)
		    break;

	    }

	} catch ( Exception e) {
	    System.out.println( "IOException GlowLine");
	}
    }

    public void draw(GlowTransform t, int highlight, int hot, Object node, Object colornode) {
    }


    public void draw( int hightlight, int hot) {
	if ( cmn.nodraw != 0)
	    return;

	int p1_x, p1_y, p2_x, p2_y;
	p1_x = (int)(p1.x * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	p1_y = (int)(p1.y * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	p2_x = (int)(p2.x * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	p2_y = (int)(p2.y * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;

	if ( p1_x == p2_x && p1_y == p2_y)
	    return;
	int idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * line_width - 1);
	idx += hot;
	idx = Math.max( 0, idx);
	idx = Math.min( idx, Glow.DRAW_TYPE_SIZE-1);
	cmn.gdraw.line( p1_x, p1_y, p2_x, p2_y, draw_type, idx, hightlight);
    }

    public void draw_shadow( int border, int shadow, int hightlight, int hot) {
	if ( cmn.nodraw != 0)
	    return;

	int p1_x, p1_y, p2_x, p2_y;
	p1_x = (int)(p1.x * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	p1_y = (int)(p1.y * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	p2_x = (int)(p2.x * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
	p2_y = (int)(p2.y * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;

	if ( p1_x == p2_x && p1_y == p2_y)
	    return;
	int idx = (int)( cmn.mw.zoom_factor_y / cmn.mw.base_zoom_factor * line_width - 1);
	idx += hot;
	idx = Math.max( 0, idx);
	idx = Math.min( idx, Glow.DRAW_TYPE_SIZE-1);
	int ish = 1;
	int offs = border;

	if ( shadow != 0 && idx > 2) {
	    if ( p1_x == p2_x) {
		// Vertical line
		cmn.gdraw.line( p1_x + idx/2 - idx + offs, 
				p1_y, 
				p2_x + idx/2 - idx + offs, 
				p2_y,
				GlowColor.shift_drawtype( draw_type, -2, null), ish-1, hightlight);
		cmn.gdraw.line( p1_x + idx/2 - offs, 
				p1_y, 
				p2_x + idx/2 - offs, 
				  p2_y,
				GlowColor.shift_drawtype( draw_type, 2, null), ish-1, hightlight);
	    }
	    else {
		// Horizontal line
		cmn.gdraw.line( p1_x, 
				p1_y + idx/2 - idx + offs, 
				p2_x, 
				p2_y + idx/2 - idx + offs,
				GlowColor.shift_drawtype( draw_type, -2, null), ish-1, hightlight);
		cmn.gdraw.line( p1_x, 
				p1_y + idx/2 - offs,
				p2_x,
				p2_y + idx/2 - offs,
				GlowColor.shift_drawtype( draw_type, 2, null), ish-1, hightlight);
	    }
	}
	if ( border != 0) {
	    if ( p1_x == p2_x) {
		// Vertical line
		cmn.gdraw.line( p1_x + idx/2 - idx, 
				p1_y, 
				p2_x + idx/2 - idx, 
				p2_y,
				Glow.eDrawType_Line, 0, hightlight);
		if ( idx > 0)
		    cmn.gdraw.line( p1_x + idx/2, 
				    p1_y, 
				    p2_x + idx/2, 
				    p2_y,
				    Glow.eDrawType_Line, 0, hightlight);
	    }
	    else {
		// Horizontal line
		cmn.gdraw.line( p1_x, 
				p1_y+ idx/2 - idx, 
				p2_x, 
				p2_y + idx/2 - idx,
				Glow.eDrawType_Line, 0, hightlight);
		if ( idx > 0)
		    cmn.gdraw.line( p1_x, 
				    p1_y + idx/2, 
				    p2_x, 
				    p2_y + idx/2,
				    Glow.eDrawType_Line, 0, hightlight);
	    }
	}
    }
}
