/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopc;
import jpwr.rt.*;
import jpwr.jop.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.awt.font.*;
import javax.swing.*;
import java.awt.event.*;

public class JopcIi extends JopcIiGen implements JopDynamic {
  boolean slider = false;
  int pSlider;
  boolean hold = false;
  int pHold;
  float scanTimeOld = -1F;
  int pScanTime;
  float presMaxLimitOld = 0;
  float presMinLimitOld = 0;
  int pPresMaxLimit;
  int pPresMinLimit;
  PwrtRefId presMaxLimitSubid;
  PwrtRefId presMinLimitSubid;
  LocalDb ldb;
  public JopcIi( JopSession session, String instance, boolean scrollbar) {
    super( session, instance, scrollbar, true);

    // engine = new JopEngine( 1000, session.getRoot());
    // ldb = new LocalDb();
    // engine.setLocalDb(ldb);
    geInit();

    engine.add(this);

  }
  public Object dynamicGetRoot() {
    return this;
  }
  GeDyn dd;
  public void dynamicOpen() {
    GdhrRefObjectInfo ret;
    ret = engine.ldb.refObjectInfo( this, "$local.SliderDisable##Boolean");
    if ( ret.oddSts())
      pSlider = ret.id;
    else
      System.out.println("$local.Slider not found");

    ret = engine.ldb.refObjectInfo( this, "$local.TrendHold##Boolean");
    if ( ret.oddSts())
      pHold = ret.id;
    else
      System.out.println("$local.Hold not found");

    ret = engine.ldb.refObjectInfo( this, "$local.ScanTime##Float32");
    if ( ret.oddSts())
      pScanTime = ret.id;
    else
      System.out.println("$local.ScanTime not found");

    dd = new GeDyn( null);
    dd.setSession( session);
    dd.setInstance( engine.getInstance()); 

    String attrName = dd.getAttrName( "$object.PresMinLimit##Float32");
    ret = engine.gdh.refObjectInfo( attrName);
    if ( ret.evenSts())
      System.out.println( "JopcAv: " + attrName);
    else {
      presMinLimitSubid = ret.refid;
      pPresMinLimit = ret.id;
    }

    attrName = dd.getAttrName( "$object.PresMaxLimit##Float32");
    ret = engine.gdh.refObjectInfo( attrName);
    if ( ret.evenSts())
      System.out.println( "JopcAv: " + attrName);
    else {
      presMaxLimitSubid = ret.refid;
      pPresMaxLimit = ret.id;
    }
  }
  public void dynamicClose() {
    engine.gdh.unrefObjectInfo( presMaxLimitSubid);
    engine.gdh.unrefObjectInfo( presMinLimitSubid);
    engine.ldb.unrefObjectInfo( pSlider);
    engine.ldb.unrefObjectInfo( pHold);
    engine.ldb.unrefObjectInfo( pScanTime);
  }
  public void dynamicUpdate( boolean animationOnly) {
    if ( animationOnly)
      return;

    boolean sliderValue = engine.ldb.getObjectRefInfoBoolean( pSlider);
    boolean holdValue = engine.ldb.getObjectRefInfoBoolean( pHold);
    float scanTime = engine.ldb.getObjectRefInfoFloat( pScanTime);
    float presMinLimit = engine.gdh.getObjectRefInfoFloat( pPresMinLimit);
    float presMaxLimit = engine.gdh.getObjectRefInfoFloat( pPresMaxLimit);
    if ( engine.gdh.isAuthorized( jopButtontoggle16.dd.access) ) {
      if ( sliderValue) {
	engine.ldb.setObjectInfo( this, "$local.SliderDisable##Boolean", false);
	slider = !slider;
	pwr_slider115.setActionDisabled(!slider);
	if ( slider)
	  jopButtontoggle16.tsetFillColor( GeColor.COLOR_115);
	else
	  jopButtontoggle16.resetFillColor();
	jopButtontoggle16.repaintForeground();
      }
    }
    if ( holdValue) {
      engine.ldb.setObjectInfo( this, "$local.TrendHold##Boolean", false);
      hold = !hold;
      jopTrend6.setHold(hold);
      if ( hold)
	jopButtontoggle12.tsetFillColor( GeColor.COLOR_115);
      else
	jopButtontoggle12.resetFillColor();
      jopButtontoggle12.repaintForeground();
    }
    if ( presMaxLimit != presMaxLimitOld || presMinLimit != presMinLimitOld) {
      jopTrend6.setMinValue1(presMinLimit);
      jopTrend6.setMaxValue1(presMaxLimit);
      jopTrend6.reset();
      jopBar5.setMinValue(presMinLimit);
      jopBar5.setMaxValue(presMaxLimit);
      jopBar5.update();

      GeDyn dyn = pwr_slider115.dd;
      for ( int i = 0; i < dyn.elements.length; i++) {
	if ( dyn.elements[i].getActionType() == GeDyn.mActionType_Slider) {
	  GeDynSlider elem = (GeDynSlider)dyn.elements[i];
	  elem.setMinValue( presMinLimit);
	  elem.setMaxValue( presMaxLimit);
	  elem.update();
	}
      }

      presMaxLimitOld = presMaxLimit;
      presMinLimitOld = presMinLimit;
    }
    if ( scanTime != scanTimeOld) {
      // TODO
      engine.ldb.setObjectInfo( this, "$local.ScanTime##Float32", 100.0F);
      scanTimeOld = scanTime;
    }
    
  }
}







