/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import java.awt.*;
import java.net.*;
import java.io.*;
import javax.swing.*;
import java.util.Vector;
import jpwr.rt.*;

/**
 *  Event log communcation.
 *  The HistSender initiates a socket to the server and can then perform a
 *  SearchRequest given a HistQuery using an ObjectInput- and an 
 *  ObjectOutputStream.
 */

public class HistSender {
    
    private Socket socket;
    private ObjectInputStream in; 
    private ObjectOutputStream out;
    Object root;
    final static int PORT = 4447;
    
    public HistSender(Object r){
	root=r;
	setup();
    }
    
    // initiate the socket to the server
    private void setup() {
    
    
	try {
	    URL url;
            String urlString = "192.168.60.16";
	    try {
		url = ((JApplet)root).getCodeBase();
		if(url != null)
		    urlString = url.getHost();
	    }
	    catch( Exception e) {
		System.out.println("Program not run from applet..."+e);
	    }
        
        
	    socket = new Socket(urlString, PORT);
        }
    
	catch( UnknownHostException e) {
	    System.err.println("Don't know about host: taranis.");
	    
	    //System.exit(1);
	}
	catch( IOException e) {
	    JOptionPane.showMessageDialog(null,"Couldn't get contact with the server (HistServer).","I/O Error",JOptionPane.ERROR_MESSAGE);
	    
        }
        
    }
    
    public MhData SearchRequest(HistQuery search){
    
    
        
	// Open output and input streams.
	try { 
	    out = new ObjectOutputStream( socket.getOutputStream() );
	    out.flush();
	    //why???
	    in = new ObjectInputStream( socket.getInputStream() );
        }
        catch(Exception e) {
	    System.out.println("IOException at server stream creation");
	    //errh.error("DataStream failed");
	    return new MhData(100,100);
        }
    
	//Send search request
    
	try {
	    out.writeObject(search);
	    out.flush();
        }
	catch(Exception e) {
	    System.out.println("Search send Exception");
        }
    
    
	// Start receiving data
	MhData answer = new MhData(0,0);
    
	try {
	    MhrEvent[] result = (MhrEvent[])in.readObject();
	    int i = 0;
	    while(i < result.length) {
		answer.addMessToVectorInSortedOrder(answer.eventVec, result[i++]);
            }
        }
	catch(Exception e) {
	    System.out.println("#"+e.toString());
	}
    
	//Close input and output streams
	try {
	    in.close();
	    out.close();
        }
	catch(Exception e) {
	    System.out.println("Error while closing streams: " + e);
        }
    
	return answer;    
    }    
}
