/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import java.awt.*;
import javax.swing.*;
import java.util.*;
import jpwr.jop.*;
import java.beans.Beans;

/** 
    Layout manager for curve chart.
 */
public class JopCurveChartLayout implements LayoutManager2 {
    
    // track the ratios for each object of form "xratio,yratio;wratio,hratio"
    Vector<Proportion> ratios = new Vector<Proportion>(1);
    //Vector ratios = new Vector(1);
    // track the components also so we can remove associated modifier
    // if necessary.
    Vector<Component> components = new Vector<Component>(1);
    //Vector components = new Vector(1);
    
    public static final int AXIS_HEIGHT = 28;

    public void addLayoutComponent(String r, Component comp) {
    }
    
    // The used method for adding components.
    public void addLayoutComponent(Component comp, Object o){
	Proportion r = (Proportion) o;
        ratios.addElement(r);
        components.addElement(comp);
    }
    //Maximum layout size depends on the target (as opposed to the normal case)
    public Dimension maximumLayoutSize(Container target){

	return  target.getSize();

    }
    
    public float getLayoutAlignmentX(Container target){
	//The layout is left aligned
	return (float) 0.0;
    }
 
    public float getLayoutAlignmentY(Container target){
	//the layout is top aligned
	return (float) 0.0;
    }
    //Reset the Layout
    public void invalidateLayout(Container target){
	// This is called more frequently in 1.5...
	// ratios = new Vector(1);
	//components = new Vector(1);
    }

    
    // Remove component from Layout
    public void removeLayoutComponent(Component comp) {
        int i = components.indexOf(comp);
        if ( i!=-1 ) {
            ratios.removeElementAt(i);
            components.removeElementAt(i);
        }
    }

    public Dimension preferredLayoutSize(Container target) {
        return target.getSize();
    }

    public Dimension minimumLayoutSize(Container target) {
        return target.getSize();
    }

    int origHeight = 0;

    public void layoutContainer(Container target) {

	Insets insets = target.getInsets();
        int ncomponents = target.getComponentCount();
        Dimension d = target.getSize();
	//make sure to not draw over the insets.(Java standard)
	d.width -=  insets.left+insets.right;
        d.height -= insets.top+insets.bottom;
	//System.out.println( "ChartLayout: width " + d.width + " height " + d.height + " origH " + origHeight);
	if ( origHeight == 0)
	    origHeight = d.height;

	//Layout each component
        for (int i = 0 ; i < ncomponents ; i++) {
            Component comp = target.getComponent(i);
            Proportion compProp;
	    try {
		compProp = ratios.elementAt(i);
	    } 
	    catch (ArrayIndexOutOfBoundsException e){
		break;
	    }
	    //Set the width and height according to the ratio specified when
	    //the component was added.
	    int w = comp.getWidth();
	    int h;
	    int y;
	    if ( i == 0) {
		h = d.height - AXIS_HEIGHT;
		y = 0;
	    }
	    else {
		h = AXIS_HEIGHT;
		y = d.height - AXIS_HEIGHT;
	    }

	    // set x & y to the ratio specified when the component was added.
	    //These values will be changed if the comonent is a slider or
	    //a moving GeComponent.
	    int x = comp.getX();
	    // int y = (int) (comp.getY() * (double)d.height / origHeight);
	    //System.out.println( "CompChart: w " + w + " h " + h + " x " + x + " y " + y);

	    //Place the component.
            comp.setBounds(x+insets.left,y+insets.top,w,h);

	    //Resize the font of JTextFields.
	    if (comp instanceof JTextField){
		comp.setFont(comp.getFont().deriveFont((float)(1.0*h*6/10)));
	       
	    }
        }
    }
    
    public String toString() {
        return getClass().getName();
    }
}













