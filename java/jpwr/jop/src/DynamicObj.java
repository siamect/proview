/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import javax.swing.tree.DefaultMutableTreeNode;
import jpwr.jop.JopDynamic;
import jpwr.jop.JopEngine;
import jpwr.rt.*;
/**
 *  Xtt class for object attribute subscriptions.
 *
 *  @author     JN
 */
public class DynamicObj extends TreeObj
{
  public XttObjAttr objAttr;
  int classid;
//  String fullName;
  static JopEngine en;
  
  static boolean initDone = false;


  /**
   *  Sets the objectAttributeValue attribute of the DynamicObj object
   *
   *  @param  obj  The new objectAttributeValue value
   */
  public void setObjectAttributeValue(AttrObj obj)
  {
    if ( obj.refObj.id == 0)
      return;

    switch (obj.type)
    {
      case Pwr.eType_Float32:
      case Pwr.eType_Float64:
        Logg.logg("getObjectRefInfoFloat(" + obj.refObj.id + ")", 6);
        obj.setValue(en.gdh.getObjectRefInfoFloat(obj.refObj.id));
        break;
      case Pwr.eType_Int8:
      case Pwr.eType_Int16:
      case Pwr.eType_Int32:
      case Pwr.eType_Int64:
      case Pwr.eType_UInt8:
      case Pwr.eType_UInt16:
      case Pwr.eType_UInt32:
      case Pwr.eType_UInt64:
      case Pwr.eType_Status:
      case Pwr.eType_NetStatus:
      case Pwr.eType_Enum:
      case Pwr.eType_Mask:
        Logg.logg("getObjectRefInfoInt(" + obj.refObj.id + ")", 6);
        obj.setValue(en.gdh.getObjectRefInfoInt(obj.refObj.id));
        break;
      case Pwr.eType_Boolean:
        Logg.logg("getObjectRefInfoBoolean(" + obj.refObj.id + ")", 6);
        obj.setValue(en.gdh.getObjectRefInfoBoolean(obj.refObj.id));
        break;
      default:
	  //	  Logg.logg(obj.name + " getObjectRefInfoString(" + obj.refObj.id + /*" " + obj.type +*/ ")", 1);
	  //        Logg.logg("getObjectRefInfoString: " + en.gdh.getObjectRefInfoString(obj.refObj.id, obj.type), 1);

        obj.setValue(en.gdh.getObjectRefInfoString(obj.refObj.id, obj.type));
        break;
    }
  }



  /**
   *  Sets the typeIdString attribute of the DynamicObj object
   *
   *  @param  type  The new typeIdString value
   *  @param  size  The new typeIdString size
   *  @return       The typeId suffix
   */
  public String setTypeIdString(int type, int size)
  {
    String suffix = "##";
    switch (type)
    {
      case Pwr.eType_Boolean:
        suffix += "BOOLEAN";
        break;
      case Pwr.eType_Float32:
        suffix += "FLOAT32";
        break;
      case Pwr.eType_Int32:
        suffix += "INT32";
        break;
      case Pwr.eType_UInt32:
        suffix += "UINT32";
        break;
      case Pwr.eType_Int16:
        suffix += "INT16";
        break;
      case Pwr.eType_UInt16:
        suffix += "UINT16";
        break;
      case Pwr.eType_Int8:
        suffix += "INT8";
        break;
      case Pwr.eType_UInt8:
        suffix += "UINT8";
        break;
      case Pwr.eType_Status:
        suffix += "STATUS";
        break;
      case Pwr.eType_NetStatus:
        suffix += "NETSTATUS";
        break;
      case Pwr.eType_Enum:
        suffix += "ENUM";
        break;
      case Pwr.eType_Mask:
        suffix += "MASK";
        break;
      case Pwr.eType_Char:
        suffix += "CHAR";
        break;
      case Pwr.eType_Float64:
        suffix += "FLOAT64";
        break;
      case Pwr.eType_Objid:
        suffix += "OBJID";
        break;
      case Pwr.eType_String:
        suffix += "STRING" + size;
        break;
      case Pwr.eType_Time:
        suffix += "TIME";
        break;
      case Pwr.eType_DeltaTime:
        suffix += "DELTATIME";
        break;
      case Pwr.eType_AttrRef:
        suffix += "ATTRREF";
        break;
      default:
        suffix += "STRING" + size;
        break;
    }
    return suffix;
  }
  static void init(JopEngine en)
  {
    if(!DynamicObj.initDone)
    {
      DynamicObj.initDone = true;
      DynamicObj.en = en;
    }
  }
}


