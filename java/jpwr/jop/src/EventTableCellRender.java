/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import jpwr.rt.Mh;
import jpwr.rt.MhrEvent;

/**
   Cell renderer class for event table.
   This class is used to make sure an EventTableModel in a JaTable is presented 
   in a graphically appealing manner. 
*/

public class EventTableCellRender extends DefaultTableCellRenderer {
    static final long serialVersionUID = 6266674185194732842L;     
    Color ALarmColor = new Color(255,100,100); // red;
    Color BLarmColor = Color.yellow;
    Color CLarmColor = new Color(135,206,235); // blue;
    Color DLarmColor = new Color(177,156,217); // purple;
    Color InfoColor = Color.green;

    /**
     *  Gets the tableCellRendererComponent attribute of the
     *  EventTableCellRender object
     *
     * @param  table       Description of the Parameter
     * @param  value       Description of the Parameter
     * @param  isSelected  Description of the Parameter
     * @param  hasFocus    Description of the Parameter
     * @param  row         Description of the Parameter
     * @param  column      Description of the Parameter
     * @return             The tableCellRendererComponent value
     */
    public Component getTableCellRendererComponent(JTable table, Object value,
                                                   boolean isSelected, boolean hasFocus, int row, int column) {
	String prio = (String)value;
	MhrEvent ev = ((EventTableModel)table.getModel()).getRowObject(row);

	this.setBackground(Color.white);
	
	if (ev == null) {
	    this.setText(" ");
	    return this;
	}

	boolean setColor = false;
	if( ev.eventType == Mh.mh_eEvent_Alarm || ev.eventType == Mh.mh_eEvent_Info ||
	    ev.eventType == Mh.mh_eEvent_MaintenanceAlarm || ev.eventType == Mh.mh_eEvent_SystemAlarm ||
	    ev.eventType == Mh.mh_eEvent_UserAlarm1 || ev.eventType == Mh.mh_eEvent_UserAlarm2 ||
	    ev.eventType == Mh.mh_eEvent_UserAlarm3 || ev.eventType == Mh.mh_eEvent_UserAlarm4)
	    setColor = true;

	// System.out.println("i eventTable.getTableCellRendererComponent(row " + row + " value " + value + ")");

	if ( setColor) {
	    if ( ev.eventType == Mh.mh_eEvent_Info) {
		this.setBackground(InfoColor);
		setText("");
	    }
	    else {
		setText( "  " + prio);
		switch ( ev.eventPrio) {
		case Mh.mh_eEventPrio_A:
		    this.setBackground(ALarmColor);
		    break;
		case Mh.mh_eEventPrio_B:
		    this.setBackground(BLarmColor);
		    break;
		case Mh.mh_eEventPrio_C:
		    this.setBackground(CLarmColor);
		    break;
		case Mh.mh_eEventPrio_D:
		    this.setBackground(DLarmColor);
		    break;
		}
	    }	
	}
	else
	    setText("");
	
	return this;
    }
}
