/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
//package navigator;
import jpwr.rt.*;

/**
 *  Xtt class for object attributes.
 *
 *  @author     JN
 */
public class AttrObj extends TreeObj
{
  int elements = 0;
  int flags;
//  String fullName = null;
  int lengthToSecondCol = 20;
//  String name = null;
  PwrtObjid objid;
  GdhrRefObjectInfo refObj;
  boolean showName = true;
  int size;
  DefaultMutableTreeNode treeNode;
  int type;
  boolean valueBoolean;
  float valueFloat;

  int valueInt;
  String valueString = " ";
  static DefaultTreeModel treeModel;


  /**
   *  Sets the value attribute of the AttrObj object
   *
   *  @param  value  The new value value
   */
  public void setValue(int value)
  {
    if(this.valueInt == value)
    {
      return;
    }
    this.valueInt = value;
    treeModel.nodeChanged(this.treeNode);
  }


  /**
   *  Sets the value attribute of the AttrObj object
   *
   *  @param  value  The new value value
   */
  public void setValue(float value)
  {
    if(this.valueFloat == value)
    {
      return;
    }
    this.valueFloat = value;
    treeModel.nodeChanged(this.treeNode);
  }


  /**
   *  Sets the value attribute of the AttrObj object
   *
   *  @param  value  The new value value
   */
  public void setValue(boolean value)
  {
    if(this.valueBoolean == value)
    {
      return;
    }
    this.valueBoolean = value;
    treeModel.nodeChanged(this.treeNode);
  }


  /**
   *  Sets the value attribute of the AttrObj object
   *
   *  @param  value  The new value value
   */
  public void setValue(String value)
  {
    if(this.valueString.compareTo(value) == 0)
    {
      return;
    }
    this.valueString = value;
    treeModel.nodeChanged(this.treeNode);
  }


  /**
   *  Description of the Method
   *
   *  @return    Description of the Return Value
   */
  public String toString()
  {
    int spaceLength = this.lengthToSecondCol - this.name.length();
    String space = " ";
    String n = " ";
    String s;
    if(showName)
    {
      n = this.name;
      while(spaceLength > 1)
      {
        spaceLength--;
        space += " ";
      }
    }

    switch (this.type)
    {
      case Pwr.eType_Float32:
      case Pwr.eType_Float64:
        s = n + space + this.valueFloat;
        break;
      case Pwr.eType_UInt32:
      case Pwr.eType_UInt64:
      case Pwr.eType_Int32:
      case Pwr.eType_Int64:
      case Pwr.eType_Enum:
      case Pwr.eType_Mask:

        //s = n + space + this.valueInt;
	s = n + space + (new Integer( (this.valueInt & 65535) )).intValue();
        break;

      case Pwr.eType_UInt16:
        s = n + space + (new Integer( (this.valueInt & 65535) )).intValue();
        break;
      case Pwr.eType_Int8:
      case Pwr.eType_UInt8:
        s = n + space + (new Integer(this.valueInt)).byteValue();
        break;
      case Pwr.eType_Int16:
        s = n + space + (new Integer(this.valueInt)).shortValue();
        break;
      case Pwr.eType_Boolean:
        if(this.valueBoolean)
        {
          s = n + space + "1";
        }
        else
        {
          s = n + space + "0";
        }
        break;
      default:
        s = n + space + this.valueString;
        break;
    }
    return s;
  }
}

