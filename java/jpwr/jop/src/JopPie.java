/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.awt.font.*;
import javax.swing.*;
import javax.swing.Timer;
import java.awt.event.*;
import jpwr.rt.*;

/**
   Ge pie component.
*/
public class JopPie extends JComponent implements GeComponentIfc, 
            JopDynamic, JopConfirm, ActionListener {
  static final long serialVersionUID = -6900897035341843727L;
  Dimension size;
  Timer timer = new Timer(500, this);
  Object root;
  JopSession session;
  JopEngine en;
  public GeDyn dd = new GeDyn( this);
  public JopPie( JopSession session)
  {
    this.session = session;
    dd.setSession( session);
    size = new Dimension( 102, 36);
    timer.start();

  }
  public void actionPerformed(ActionEvent e) {
    boolean engine_found = false;

    root = getTopLevelAncestor();
    if ( root != null) {
      if ( root instanceof JopApplet)
	session = ((JopApplet)root).session;
      else if ( root instanceof JopFrame)
	session = ((JopFrame) root).session;
      en = session.getEngine();

      if ( !en.isReady())
        return;
      en.add(this);
      engine_found = true;
    }

    if ( engine_found) {
      timer.stop();
      timer = null;
      if ( dd.actionType != 0 && en.gdh.isAuthorized( dd.access)) {
        this.addMouseListener(new MouseAdapter() {
          public void mouseReleased(MouseEvent e) {
	    if ( e.isPopupTrigger())
	      dd.action( GeDyn.eEvent_MB3Press, e);
	    else if ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0 &&
		     en.gdh.isAuthorized( dd.access))
	      dd.action( GeDyn.eEvent_MB1Up, e);
	  }

          public void mousePressed(MouseEvent e) {
	    if ( e.isPopupTrigger())
	      dd.action( GeDyn.eEvent_MB3Press, e);
	    else if ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0 &&
		     en.gdh.isAuthorized( dd.access))
	      dd.action( GeDyn.eEvent_MB1Down, e);
	  }
          public void mouseClicked(MouseEvent e) {
	    if ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0 &&
		en.gdh.isAuthorized( dd.access))
	      dd.action( GeDyn.eEvent_MB1Click, e);
	  }
        });
      }
    }
  }
  public void confirmNo() {}
  public void confirmYes() {
    PwrtStatus sts;
    String attrName;

    dd.confirmedAction( GeDyn.eEvent_MB1Click, null);
  }

  // GeComponents Ifc
  public void tsetFillColor( int fillColor) {}
  public void tsetColorTone( int colorTone) {}
  public void tsetBorderColor( int borderColor) {}
  public void tsetTextColor( int borderColor) {}
  public void setColorInverse( int colorInverse) {} 
  public void resetFillColor() {}
  public void resetColorTone() {}
  public void resetBorderColor() {}
  public void resetTextColor() {}
  public String getAnnot1() { return new String();}
  public void setVisibility( int visibility) {}
  public void setAnnot1( String s) {}
  public void setLastPage() {}
  public void setFirstPage() {}
  public void setPage( int page) {}
  public int setNextPage() { return 1;}
  public int setPreviousPage() { return 1;}
  public Object getDd() { return dd;}
  public void setFillLevel( float fillLevel) {}
  public void setLevelDirection( int levelDirection) {}
  public void setLevelColorTone( int levelColorTone) {}
  public void setLevelFillColor( int levelFillColor) {}

  public static final int PIE_MAX_SECTORS = 12;
  float angle1 = 0;
  float angle2 = 360;
  int fillColor = 9999;
  int borderColor = 9999;
  int sectors = 0;
  int[] sectorColors;
  int drawFill = 0;
  int drawBorder = 0;
  int lineWidth = 1;
  int barBorderWidth = 1;
  float[] sectorSize = new float[PIE_MAX_SECTORS+1];
  float[] oldValueF = new float[PIE_MAX_SECTORS];
  float minValue = 0;
  float maxValue = 100;
  public void setAngle1( float angle1) {
    this.angle1 = angle1;
  }
  public void setAngle2( float angle2) {
    this.angle2 = angle2;
  }
  public void setFillColor( int fillColor) {
    this.fillColor = fillColor;
  }
  public int getFillColor() {
    return fillColor;
  }
  public void setBorderColor( int borderColor) {
    this.borderColor = borderColor;
  }
  public int getBorderColor() {
    return borderColor;
  }
  public void setSectors( int sectors) {
    this.sectors = sectors;
  }
  public int getSectors() {
    return sectors;
  }
  public void setSectorColors( int[] sectorColors) {
    this.sectorColors = sectorColors;
  }
  public int[] getSectorColors() {
    return sectorColors;
  }
  public void setDrawFill( int drawFill) {
    this.drawFill = drawFill;
  }
  public int getDrawFill() {
    return drawFill;
  }
  public void setDrawBorder( int drawBorder) {
    this.drawBorder = drawBorder;
  }
  public int getDrawBorder() {
    return drawBorder;
  }
  public void setLineWidth( int lineWidth) {
    this.lineWidth = lineWidth;
  }
  public int getLineWidth() {
    return lineWidth;
  }
  public void setBarBorderWidth( int barBorderWidth) {
    this.barBorderWidth = barBorderWidth;
  }
  public int getBarBorderWidth() {
    return barBorderWidth;
  }
  public double rotate;
  public int shadow;
  public double shadowWidth;
  public int gradient;
  public int gc1;
  public int gc2;
  public void setRotate( double rotate) { this.rotate = rotate;}
  public double getRotate() { return rotate;}
  public void setShadow( int shadow) { this.shadow = shadow;}
  public void setShadowWidth( double shadowWidth) { this.shadowWidth = shadowWidth;}
  public void setGradient( int gradient) { this.gradient = gradient;}
  public void setGc1( int gc1) { this.gc1 = gc1;}
  public void setGc2( int gc2) { this.gc2 = gc2;}
  Shape[] shapes;
  public void paint(Graphics g1) {
    Graphics2D g = (Graphics2D) g1;
    Component c;
    Point p;
    paintComponent(g);
    for ( int i = 0; i < getComponentCount(); i++) {
      AffineTransform save = g.getTransform();
      c = getComponent(i);
      p = c.getLocation();
      g.translate((int)p.getX(), (int)p.getY());
      c.paint(g);
      g.setTransform(save);
    }
  }
  float original_width = 0;
  float original_height = 0;
  float oldWidth;
  float oldHeight;
  boolean update = true;
  public void paintComponent(Graphics g1) {
    
    Graphics2D g = (Graphics2D) g1;
    float width = getWidth();
    float height = getHeight();
    AffineTransform save = g.getTransform();
    float a1 = angle1;
    float a2;
    int i;
	
    if ( original_width == 0 && original_height == 0) {
      original_width = width;
      original_height = height;
      if ( shadow != 0)
	shapes = new Shape[2 * PIE_MAX_SECTORS + 2];
      else
	shapes = new Shape[PIE_MAX_SECTORS + 1];
    }

    if ( oldWidth != width || oldHeight != height) {
      oldWidth = width;
      oldHeight = height;
      update = true;
    }

    if ( update) {
      update = false;
      for ( i = 0; i <= sectors; i++) {
        if ( i == sectors) {
	  if ( a1 >= angle1 + angle2) {
	    if ( shadow != 0 && gradient != GeGradient.eGradient_No) {
	      shapes[2*i] = null;
	      shapes[2*i+1] = null;
	    }
	    else
	      shapes[i] = null;
	    break;
	  }
          a2 = angle1 + angle2 - a1;
        }
        else {
	  if ( sectorSize[i] <= minValue) {
	    if ( shadow != 0 && gradient != GeGradient.eGradient_No) {
	      shapes[2*i] = null;
	      shapes[2*i+1] = null;
	    }
	    else
	      shapes[i] = null;
 	    continue;
	  }
          if ( a1 >= angle2 + angle1) {
	    if ( shadow != 0 && gradient != GeGradient.eGradient_No) {
	      shapes[2*i] = null;
	      shapes[2*i+1] = null;
	    }
	    else
	      shapes[i] = null;
	    break;
	  }
          a2 = sectorSize[i] / (maxValue - minValue) * angle2;
          if ( a1 + a2 > angle1 + angle2)
	    a2 = angle1 + angle2 - a1;

        }
	if ( shadow != 0 && gradient != GeGradient.eGradient_No) {
	  shapes[2*i] = new Arc2D.Float( 0F, 0F, width, height, a1, a2, Arc2D.PIE);
	  shapes[2*i+1] = new Arc2D.Float( (float)shadowWidth, (float)shadowWidth, (float)(width - 2*shadowWidth), (float)(height - 2*shadowWidth), a1, a2, Arc2D.PIE);
	}
	else
	  shapes[i] = new Arc2D.Float( 0F, 0F, width, height, a1, a2, Arc2D.PIE);
	a1 += a2;
      }
      for ( i = i+1; i <= sectors; i++) {
	if ( shadow != 0 && gradient != GeGradient.eGradient_No) {
	  shapes[2*i] = null;
	  shapes[2*i+1] = null;
	}
	else
	  shapes[i] = null;
      }
    }
    //g.transform( AffineTransform.getScaleInstance( width/original_width,
    //						   height/original_height));
    for ( i = 0; i <= sectors; i++) {
      if ( shadow != 0 && gradient != GeGradient.eGradient_No) {
        if ( shapes[2*i] == null)
	  continue;

        g.setStroke( new BasicStroke((float)lineWidth));
        if ( i == sectors) {
	  GeGradient.paint( g, gradient, gc1, gc2, 0F, 0F, width, height, false, fillColor, 
			    0, 0, 0, 0, fillColor, false);
	  g.fill( shapes[2*i]);
	  GeGradient.paint( g, GeGradient.eGradient_DiagonalUpperLeft, gc1, gc2, 0F, 0F, width, height, false, fillColor, 
			    0, 0, 0, 0, fillColor, false);
	  g.fill( shapes[2*i+1]);
	  g.setColor(GeColor.getColor(0, borderColor));
	  g.draw( shapes[2*i]);
        }
        else {
	  GeGradient.paint( g, gradient, gc1, gc2, 0F, 0F, width, height, false, sectorColors[i], 
			    0, 0, 0, 0, sectorColors[i], false);
	  g.fill( shapes[2*i]);
	  GeGradient.paint( g, GeGradient.eGradient_DiagonalUpperLeft, gc1, gc2, 0F, 0F, width, height, false, sectorColors[i], 
			    0, 0, 0, 0, sectorColors[i], false);
	  g.fill( shapes[2*i+1]);
	  g.setColor(GeColor.getColor(0, borderColor));
	  g.draw( shapes[2*i]);
        }
      }
      else {
	if ( shapes[i] == null)
	  continue;

        g.setStroke( new BasicStroke((float)lineWidth));
	if ( gradient == GeGradient.eGradient_No) {
          if ( i == sectors) {
            g.setColor(GeColor.getColor( 0, fillColor)); 
	    g.fill( shapes[i]);
	    g.setColor(GeColor.getColor(0, borderColor));
	    g.draw( shapes[i]);
          }
          else {
            g.setColor(GeColor.getColor( 0, sectorColors[i]));
	    g.fill( shapes[i]);
	    g.setColor(GeColor.getColor(0, borderColor));
	    g.draw( shapes[i]);
          }
	}
	else {
          if ( i == sectors) {
	    GeGradient.paint( g, gradient, gc1, gc2, 0F, 0F, width, height, false, fillColor, 
			      0, 0, 0, 0, fillColor, false);
	    g.fill( shapes[i]);
	    g.setColor(GeColor.getColor(0, borderColor));
	    g.draw( shapes[i]);
          }
          else {
	    GeGradient.paint( g, gradient, gc1, gc2, 0F, 0F, width, height, false, sectorColors[i], 
			      0, 0, 0, 0, sectorColors[i], false);
	    g.fill( shapes[i]);
	    g.setColor(GeColor.getColor(0, borderColor));
	    g.draw( shapes[i]);
          }
	}
      }
    }
    //g.setTransform(save);
  }
  public Dimension getPreferredSize() { return size;}
  public Dimension getMinimumSize() { return size;}
  int lowColor = 0;
  public void setLowColor( int lowColor) { this.lowColor = lowColor;}
  public int getLowColor() { return lowColor;}
  String[] pwrAttribute = new String[PIE_MAX_SECTORS];
  public void setPwrAttribute( String[] pwrAttribute) { this.pwrAttribute = pwrAttribute;}
  public String[] getPwrAttribute() { return pwrAttribute;}
  int fixRange = 0;
  float valueColor;
  float valueColorOld;
  boolean firstScan = true;
  GdhrRefObjectInfo[] retAttr = new GdhrRefObjectInfo[PIE_MAX_SECTORS];
  public void setFixRange( int fixRange) {
    this.fixRange = fixRange;
  }
  public void setMinValue( float minValue) {
    this.minValue = minValue;
  }
  public float getMinValue() {
    return minValue;
  }
  public void setMaxValue( float maxValue) {
    this.maxValue = maxValue;
  }
  public float getMaxValue() {
    return maxValue;
  }
  public Object dynamicGetRoot() {
    return root;
  }
  public void update() {
    valueColorOld = -10000;
    dynamicUpdate( false);
  }
  public void dynamicOpen() {

    if ( en.isInstance())
      dd.setInstance( en.getInstance());
    for ( int i = 0; i < PIE_MAX_SECTORS; i++) {
      if ( pwrAttribute[i] != null) {
	String attrName = dd.getAttrName(pwrAttribute[i]);
	retAttr[i] = en.gdh.refObjectInfo( attrName);
	if ( retAttr[i].evenSts()) {
	  System.out.println( "refObjectInfoError attribute[" + i + "]");
	  pwrAttribute[i] = null;
	}
      }
    }
  }
  public void dynamicClose() {
    for ( int i = 0; i < PIE_MAX_SECTORS; i++) {
      if ( pwrAttribute[i] != null)
        en.gdh.unrefObjectInfo( retAttr[i].refid);
    }
  }
  public void dynamicUpdate( boolean animationOnly) {
    if ( maxValue == minValue) 
      return;
    if ( animationOnly)
      return;

    for ( int i = 0; i < PIE_MAX_SECTORS; i++) {
      if ( pwrAttribute[i] != null)
	sectorSize[i] = en.gdh.getObjectRefInfoFloat( retAttr[i].id);
      else
	sectorSize[i] = 0;
    }
    if ( fixRange != 1) {
      float sum = 0;
      for ( int i = 0; i < PIE_MAX_SECTORS; i++)
	sum += sectorSize[i];    
      
      if ( sum == 0) {
	for ( int i = 0; i < PIE_MAX_SECTORS; i++)
	  sectorSize[i] = 0;
      }
      else {
	for ( int i = 0; i < PIE_MAX_SECTORS; i++)
	  sectorSize[i] = sectorSize[i] / sum * ( maxValue - minValue);
      }
    }

    update = false;
    for ( int i = 0; i < sectors; i++) {
      if ( sectorSize[i] != oldValueF[i]) {
	oldValueF[i] = sectorSize[i];
	update = true;
      }
    }
    if ( update || firstScan)
      repaint();

    if ( firstScan)
      firstScan = false;
  }
  public void repaintForeground() {
    Graphics g = getGraphics();
    if ( g == null) {
      System.out.println("repaintForeground: can't get Graphic object");
      return;
    }
    paintComponent(g);
    paintChildren(g);
  }
}
