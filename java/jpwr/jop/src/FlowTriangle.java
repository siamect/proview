/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jop;
import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.geom.*;
import javax.swing.*;

/**
   Flow triangle element.
*/
public class FlowTriangle extends FlowRect {

  public FlowTriangle( FlowCmn cmn) {
    super(cmn);
  }

  public void open( BufferedReader reader) {
    String line;
    StringTokenizer token;
    boolean end = false;

    try {
      while( (line = reader.readLine()) != null) {
	token = new StringTokenizer(line);
	int key = new Integer(token.nextToken()).intValue();
	if ( cmn.debug) System.out.println( "line : " + key);

	switch ( key) {
	case Flow.eSave_Triangle_rect_part:
	  super.open(reader);
	  break;
	case Flow.eSave_End:
	  end = true;
	  break;
	default:
	  System.out.println( "Syntax error in FlowTriangle");
	  break;
	}
	if ( end)
	  break;
      }
    } catch ( Exception e) {
      System.out.println( "IOExeption FlowTriangle");
    }
  }

  public void draw( Graphics2D g, FlowPoint p, FlowNodeIfc node, boolean highlight) {
      if ( (display_level & FlowCmn.display_level) == 0)
	return;

      Polygon pol = new Polygon( new int[] {
	                           (int) ((ll.x + p.x) * cmn.zoom_factor),
	                           (int) (((ll.x + ur.x) / 2 + p.x) * cmn.zoom_factor),
	                           (int) ((ur.x + p.x) * cmn.zoom_factor),
	                           (int) ((ll.x + p.x) * cmn.zoom_factor)},
			       new int[] {
				   (int) ((ur.y + p.y) * cmn.zoom_factor),
				   (int) ((ll.y + p.y) * cmn.zoom_factor),
				   (int) ((ur.y + p.y) * cmn.zoom_factor),
				   (int) ((ur.y + p.y) * cmn.zoom_factor)},
			       4);

      g.setStroke( new BasicStroke( (float)(cmn.zoom_factor / cmn.base_zoom_factor * line_width)));
      if ( fill != 0) {
	  int dtype;
	  if ( node != null && node.getFillColor() != Flow.eDrawType_Inherit)
	      dtype = node.getFillColor();
	  else
	      dtype = draw_type;
	  switch ( dtype) {
	  case Flow.eDrawType_LineRed: 
	      g.setColor( Color.red);
	      break;
	  case Flow.eDrawType_Green: 
	      g.setColor( Color.green);
	      break;
	  case Flow.eDrawType_Yellow: 
	      g.setColor( Color.yellow);
	      break;
	  default:
	      g.setColor( Color.gray);	      
	  }
	  g.fill( pol);
      }
      g.setColor( Color.black);
      if ( highlight)
        g.setColor( Color.red);
      g.draw( pol);
  }
}













