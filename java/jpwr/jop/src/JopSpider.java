/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jop;
import java.awt.*;
import java.lang.*;
import java.lang.reflect.*;
import javax.swing.*;
import java.net.*;
import java.applet.*;
import java.util.*;
import java.io.*;
import jpwr.rt.*;
import java.awt.event.*;
import jpwr.jopg.*;

/**
   Command execution.
*/
public class JopSpider {
  int qcom_qix;
  int qcom_nid;
  JopSession session;
  JopEngine engine;

  static int op_qcom_qix;
  static int op_qcom_nid;
  static Qcom qcom;
  static String systemName;
  static String methObject;
  static PwrtAttrRef methAref;
  static int methClassId;
  static JopSpider spider;
  static JopGrowFrame currentGrowFrame;

  private static class GrowFrameCb implements GrowFrameApplIfc {
    JopSession session;

    GrowFrameCb( JopSession session) {
      this.session = session;
    }

    public int command( String cmd, Object caller) {
	System.out.println("JopSpider command callback : " + cmd);

	currentGrowFrame = (JopGrowFrame)caller;
	int sts = JopSpider.command( session, cmd);
	currentGrowFrame = null;
	return sts;
    }
    public int script( String script) {
	return JopSpider.script( session, script);
    }
    public void frameClosed( Object utility) {
	session.removeUtility( utility);
    }
    public void openPopupMenu( String object, Object invoker, int x, int y) {
	JopSpider.openPopupMenu( session, object, invoker, x, y);
    }
  }    

  private static class JopgCcmCb implements CcmApplIfc {
    JopSession session;

    JopgCcmCb( JopSession session) {
      this.session = session;
    }

    public int externCmd( String cmd) {
	return JopSpider.command( session, cmd);
    }

    public String defFilename( String filename) {
	String str;

	if ( session.getRoot() instanceof JopApplet) {
	    URL current = ((JApplet) session.getRoot()).getCodeBase();
	    String current_str = current.toString();

	    str = current_str + filename;
	    if ( !str.endsWith(".rtt_com"))
		str += ".rtt_com";
	}
	else {
	    if ( filename.indexOf('/') == -1)
		str = "$pwrp_exe/" + filename;
	    else
		str = filename;
	    if ( !str.endsWith(".rtt_com"))
		str += ".rtt_com";
	    str = Gdh.translateFilename( str);
	}
	return str;
    }
    
    public void errorMessage( String msg, int severity) {
	System.out.println( "Error message:" + msg);
    }

    public int confirmDialog( String title, String text) {
	System.out.println( "Confirm dialoga: " + title + ", " + text);
	return 1;
    }
    public int getRootType() {
	if ( session.getRoot() instanceof JopApplet)
	    return Ccm.ROOT_APPLET;
	else
	    return Ccm.ROOT_FRAME;
    }
  }

  public JopSpider( int op_qcom_qix) {
    JopSpider.op_qcom_qix = op_qcom_qix;

    engine = new JopEngine( 1000, (GdhApplIfc)null);
    session = new JopSession( engine, (Object)this);

    // Attatch to qcom
    qcom = new Qcom();
    QcomrCreateQ ret = qcom.createQ( 0, 0, "jop_spider");
    if ( ret.evenSts())
      System.out.println( "Unable to open que: " + ret.getSts());
    else {
      qcom_qix = ret.qix;
      qcom_nid = ret.nid;
      op_qcom_nid = ret.nid;
    }

    // Send qcom qix to jop
    String set_cmd = "set jop_queid " + qcom_qix;
    PwrtStatus sts = qcom.put( op_qcom_qix, op_qcom_nid, set_cmd);
    if ( sts.evenSts())
      System.out.println( "Qcom put error: " + sts.getSts());

    new JopSpiderCmd( session);

  }  
  
  static public void setSystemName( String systemName) {
    JopSpider.systemName = systemName;
  }
  static public String getSystemName() {
    return systemName;
  }

  static void openPopupMenu( JopSession session, String object, Object invoker, int x, int y) {
      new JopMethodsMenu( session, object, JopUtility.GRAPH, (Component)invoker, x, y);

  }

  static CliTable[] cliTable = new CliTable[] { 
    new CliTable( "OPEN", new String[] {"cli_arg1", "cli_arg2", "/NAME", 
	"/FILE", "/SCROLLBAR", "/WIDTH", "/HEIGHT", "/MENU", "/NAVIGATOR", 
	"/CENTER", "/OBJECT", "/INSTANCE", "/NEW", "/CLASSGRAPH", "/ACCESS", "/PARENT",
	"/ACCESS"}),
    new CliTable( "EXIT", null),
    new CliTable( "HELP", new String[] {"cli_arg1", "cli_arg2", "cli_arg3",
	"cli_arg4", "/HELPFILE", "/POPNAVIGATOR", "/BOOKMARK", "/INDEX",
        "/BASE", "/RETURNCOMMAND", "/WIDTH", "/HEIGHT", "/VERSION"}),
    new CliTable( "SET", new String[] {"cli_arg1", "cli_arg2", "/NAME", 
	"/SOURCE", "/OBJECT", "/VALUE", "/BYPASS", "/PUBLICWRITE"}), 
    new CliTable( "EXAMPLE", new String[] {"/NAME", "/HIERARCHY"}),
    new CliTable( "CHECK", new String[] {"cli_arg1", "/METHOD", "/OBJECT"}),
    new CliTable( "CALL", new String[] {"cli_arg1", "/METHOD", "/OBJECT"}),
    new CliTable( "LOGIN", new String[] {"cli_arg1", "cli_arg2"}),
    new CliTable( "LOGOUT", null),
    new CliTable( "SHOW", new String[] {"cli_arg1"}),
    new CliTable( "EMIT", new String[] {"cli_arg1", "/SIGNALNAME", "/GRAPH", "/INSTANCE"}),
  };


  static int script( JopSession session, String script) {
      // Execute a script
      Gdh gdh = session.getEngine().gdh;

      new JopgCcm( new JopgCcmCb(session), gdh, null, script);
      return 1;
  }

  static int command( JopSession session, String cmd) {
    boolean local_cmd = false;
    Object root = session.getRoot();
    Gdh gdh = session.getEngine().gdh;

    cmd = cmd.trim();
    System.out.println("JopSpider command : " + cmd);
    if ( cmd.length() == 0 )
       return 1;

    if ( root instanceof JopApplet) {
      if ( ((JopApplet)root).engine.isInstance())
	cmd = RtUtilities.strReplace( cmd, "$object", 
			  ((JopApplet)root).engine.getInstance());
    }

    if ( cmd.charAt(0) == '@') {
	// Execute a script
	new JopgCcm( new JopgCcmCb(session), gdh, cmd.substring(1),  null);
	return 1;
    }

    Cli cli = new Cli( cliTable);
    String command = cli.parse( cmd);
    if (cli.oddSts()) {
      if ( command.equals("OPEN")) {
        if ( cli.qualifierFound("cli_arg1")) {

          String jgraph = "JGRAPH";
          String graph = "GRAPH";
          String url = "URL";
          String trend = "TREND";
          String fast = "FAST";
          String cli_arg1 = cli.getQualValue("cli_arg1").toUpperCase();
          if ( jgraph.length() >= cli_arg1.length() &&
               jgraph.substring(0,cli_arg1.length()).equals(cli_arg1)) {
            // Command is "OPEN JGRAPH"

            boolean newFrame = cli.qualifierFound("/NEW");
            boolean scrollbar = cli.qualifierFound("/SCROLLBAR");

            if ( ! cli.qualifierFound("cli_arg2")) {
	      System.out.println("Syntax error");
              return 0;
            }
	    String frameName = cli.getQualValue("cli_arg2");
	    String instance = cli.getQualValue("/INSTANCE");

	    if ( session.isOpWindowApplet()) {
	      frameName = frameName.substring(0,1).toUpperCase() +
		    frameName.substring(1);
	      System.out.println( "Open frame " + frameName);
	      session.openGraphFrame( frameName, instance, scrollbar, false);
	    }
            else if ( session.isApplet()) {
              System.out.println( "Loading applet \"" + frameName + "\"");
	      openURL( session, frameName, newFrame, null, null);
              local_cmd = true;
            }
            else {
              System.out.println( "Loading frame \"" + frameName + "\"");
	      try {
		loadFrame( session, frameName, instance, scrollbar);
	      }
	      catch ( ClassNotFoundException e) {
	      }
	      catch ( FileNotFoundException e) {
	      }
              local_cmd = true;
            }
          }
          else if ( graph.length() >= cli_arg1.length() &&
               graph.substring(0,cli_arg1.length()).equals(cli_arg1)) {
            // Command is "OPEN GRAPH"
            if ( root instanceof JopApplet) {
	      System.out.println( "open graph for JopApplet");

              boolean newFrame = cli.qualifierFound("/NEW");
              boolean scrollbar = cli.qualifierFound("/SCROLLBAR");

              if ( cli.qualifierFound("/OBJECT")) {
		// XttGraph object
	        String objectValue = cli.getQualValue("/OBJECT");
                String objectName;
                String appletName;
		String instance = null;

                // Replace * by node object
                if ( objectValue.charAt(0) == '*') {
                  CdhrObjid cdhr_node = gdh.getNodeObject(0);
                  if ( cdhr_node.evenSts())
                    return 0;
                  CdhrString cdhr_nodestr = gdh.objidToName( cdhr_node.objid, Cdh.mName_volumeStrict);
                  objectName = cdhr_nodestr.str + objectValue.substring(1);
                }
                else
                  objectName = objectValue;

                String attrName = objectName + ".Action";
                CdhrString cdhr = gdh.getObjectInfoString( attrName);
                if ( cdhr.evenSts()) {
	          System.out.println("Object name error");
                  return 0;
                }
                int idx = cdhr.str.lastIndexOf( ".pwg");
                if ( idx != -1) {
		    // appletName = cdhr.str.substring(0, idx);
		    appletName = cdhr.str;  // atest
		}
                else {
                  idx = cdhr.str.lastIndexOf( ".class");
		  if ( idx != -1)
                    appletName = cdhr.str.substring(0, idx);
		  else {
		    // This is a command
		    return command( session, cdhr.str);
		  }
		}

		attrName = objectName + ".Object";
		cdhr = gdh.getObjectInfoString( attrName);
		if ( cdhr.oddSts() && !cdhr.str.equals(""))
		  instance = cdhr.str;

                if ( session.isOpWindowApplet()) {
		  // atest  appletName = appletName.substring(0,1).toUpperCase() +
		  //       appletName.substring(1);
	          System.out.println( "Open frame " + appletName);
		  session.openGraphFrame( appletName, instance, false, false);
		}
		else {
                  System.out.println( "Loading applet \"" + appletName + "\"");
		  openURL( session, appletName, newFrame, null, null);
		}
                local_cmd = true;
              }
              else {
		// No XttGraph
		String frameName = null;
		String instanceValue = null;
		boolean classGraph = false;

		if ( cli.qualifierFound("/INSTANCE")) {
	            instanceValue = cli.getQualValue("/INSTANCE");
		    classGraph = cli.qualifierFound("/CLASSGRAPH");		      
		    boolean parent = cli.qualifierFound("/PARENT");
		    if ( parent) {
			int idx = instanceValue.lastIndexOf( '.');
			if ( idx != -1 && idx != 0)
			    instanceValue = instanceValue.substring( 0, idx);
			System.out.println( "open graph /parent: " + instanceValue);
		    }
		}
		if ( !classGraph) {
		    if ( ! cli.qualifierFound("cli_arg2")) {
			System.out.println("Syntax error");
			return 0;
		    }

		    frameName = cli.getQualValue("cli_arg2");
		    
		    if ( Character.isUpperCase(frameName.charAt(0))) {
			// If first char is upper, open as java class
			frameName = frameName.toLowerCase();
		      
			frameName = frameName.substring(0,1).toUpperCase() +
			    frameName.substring(1);

		    }
		    else {
			// If first char is lower, open as pwg-file
			if ( frameName.indexOf(".pwg") == -1)
			    frameName = frameName + ".pwg";
		    }
		    System.out.println( "Open frame " + frameName);
		}
		session.openGraphFrame( frameName, instanceValue, scrollbar, classGraph);
	      }
            }
            else {
	      // Application
              boolean newFrame = cli.qualifierFound("/NEW");
              boolean scrollbar = cli.qualifierFound("/SCROLLBAR");
	      String frameName = null;
	      String instanceValue = null;
	      boolean classGraph = false;
	      if ( cli.qualifierFound("/INSTANCE")) {
	        instanceValue = cli.getQualValue("/INSTANCE");
		classGraph = cli.qualifierFound("/CLASSGRAPH");		      

		boolean parent = cli.qualifierFound("/PARENT");
		if ( parent) {
		  int idx = instanceValue.lastIndexOf( '.');
		  if ( idx != -1 && idx != 0)
		    instanceValue = instanceValue.substring( 0, idx);
		  System.out.println( "open graph /parent: " + instanceValue);
		}
	      }
              if ( cli.qualifierFound("/OBJECT")) {
		// XttGraph object
	        String objectValue = cli.getQualValue("/OBJECT");
                String objectName;
                String appletName;
		String instance = null;

                // Replace * by node object
                if ( objectValue.charAt(0) == '*') {
                  CdhrObjid cdhr_node = gdh.getNodeObject(0);
                  if ( cdhr_node.evenSts())
                    return 0;
                  CdhrString cdhr_nodestr = gdh.objidToName( cdhr_node.objid, Cdh.mName_volumeStrict);
                  objectName = cdhr_nodestr.str + objectValue.substring(1);
                }
                else
                  objectName = objectValue;

                String attrName = objectName + ".Action";
                CdhrString cdhr = gdh.getObjectInfoString( attrName);
                if ( cdhr.evenSts()) {
	          System.out.println("Object name error");
                  return 0;
                }
                int idx = cdhr.str.lastIndexOf( ".pwg");
                if ( idx != -1) {
		    // appletName = cdhr.str.substring(0, idx);
		    appletName = cdhr.str;  // atest
		}
                else {
                  idx = cdhr.str.lastIndexOf( ".class");
		  if ( idx != -1)
                    appletName = cdhr.str.substring(0, idx);
		  else {
		    // This is a command
		    return command( session, cdhr.str);
		  }
		}

		attrName = objectName + ".Object";
		cdhr = gdh.getObjectInfoString( attrName);
		if ( cdhr.oddSts() && !cdhr.str.equals(""))
		    instance = cdhr.str;

		System.out.println( "Open frame " + appletName);
		session.openGraphFrame( appletName, instance, false, false);
                local_cmd = true;
	      }
	      if ( !classGraph) {
		if ( cli.qualifierFound("/FILE")) {
		  frameName = cli.getQualValue("/FILE");
		  if ( frameName.indexOf(".pwg") == -1)
		      frameName = frameName + ".pwg";
		}
		else if ( cli.qualifierFound("cli_arg2")) {
		  frameName = cli.getQualValue("cli_arg2");
		  if ( Character.isUpperCase(frameName.charAt(0))) {
		      // If first char is upper, open as java class
		      frameName = frameName.toLowerCase();
		      
		      frameName = frameName.substring(0,1).toUpperCase() +
			  frameName.substring(1);

		  }
		  else {
		      // If first char is lower, open as pwg-file
		      if ( frameName.indexOf(".pwg") == -1)
			  frameName = frameName + ".pwg";
		  }
		}
		else {
		  System.out.println("Syntax error");
		  return 0;
		}
	      
	        System.out.println( "Open frame " + frameName);
	      }
	      session.openGraphFrame( frameName, instanceValue, scrollbar, classGraph);
	    }
          }
          else if ( url.length() >= cli_arg1.length() &&
               url.substring(0,cli_arg1.length()).equals(cli_arg1)) {
            // Command is "OPEN URL"
            if ( root instanceof JopApplet) {
              if ( cli.qualifierFound("cli_arg2")) {
		Boolean newFrame = true;
		String frameName = null;
		String urlValue = cli.getQualValue("cli_arg2");
    System.out.println("open url " + urlValue);
                if ( urlValue.startsWith("pwrb_") ||
		     urlValue.startsWith("pwrs_") ||
		     urlValue.startsWith("nmps_") ||
		     urlValue.startsWith("profibus_") ||
		     urlValue.startsWith("otherio_") ||
		     urlValue.startsWith("opc_") ||
		     urlValue.startsWith("basecomponent_") ||
		     urlValue.startsWith("abb_") ||
		     urlValue.startsWith("siemens_") ||
		     urlValue.startsWith("ssabox_"))
	          // Object reference manual
		  urlValue = "$pwr_doc/" + session.getLang() + "/orm/" + urlValue;

		if ( cli.qualifierFound("/NAME")) {
		  frameName = cli.getQualValue("/NAME");
		  newFrame = false;
		}
		
	        openURL( session, urlValue, newFrame, frameName, null);
	      }
	    } 
	  }
          else if ( trend.length() >= cli_arg1.length() &&
		    trend.substring(0,cli_arg1.length()).equals(cli_arg1)) {
	    // Command is "OPEN TREND"
	    String name;

	    if ( cli.qualifierFound("cli_arg2"))
	      name = cli.getQualValue("cli_arg2");
	    else
	      name = cli.getQualValue("/NAME");

	    StringTokenizer tokens = new StringTokenizer( name, ",");
	    int cnt = tokens.countTokens();
	    String[] trendList = new String[cnt];
	      
	    for ( int i = 0; i < cnt; i++)
	      trendList[i] = tokens.nextToken();
	      
	    session.openTrend( trendList);
	  }
          else if ( fast.length() >= cli_arg1.length() &&
		    fast.substring(0,cli_arg1.length()).equals(cli_arg1)) {
	    // Command is "OPEN FAST"
	    String name;

	    if ( cli.qualifierFound("cli_arg2"))
	      name = cli.getQualValue("cli_arg2");
	    else
	      name = cli.getQualValue("/NAME");

	    session.openFast( name);
	  }
	  else {
	    System.out.println( "Unknown command");
	  }
	}
      }
      else if ( command.equals("HELP")) {
        if ( root instanceof JopApplet) {
          String fileName = "xtt_help_";
          String bookmarkValue = null;

          if ( cli.qualifierFound("/VERSION")) {
	    openURL( session, "$pwr_doc/xtt_version_help_version.html", true, null, null);
	  }
	  else {
            if ( cli.qualifierFound("/BASE"))
	      // Not language dependent !! TODO
	      fileName = "$pwr_doc/help/xtt_help_";
	    
            if ( cli.qualifierFound("cli_arg1"))
	      fileName += cli.getQualValue("cli_arg1").toLowerCase();
            if ( cli.qualifierFound("cli_arg2"))
	      fileName += "_" + cli.getQualValue("cli_arg2").toLowerCase();
            if ( cli.qualifierFound("cli_arg3"))
	      fileName += "_" + cli.getQualValue("cli_arg3").toLowerCase();
            if ( cli.qualifierFound("cli_arg4"))
	      fileName += "_" + cli.getQualValue("cli_arg4").toLowerCase();

	    if ( fileName.startsWith("pwrb_") ||
		 fileName.startsWith("pwrs_") ||
		 fileName.startsWith("nmps_") ||
		 fileName.startsWith("profibus_") ||
		 fileName.startsWith("otherio_") ||
		 fileName.startsWith("opc_") ||
		 fileName.startsWith("basecomponent_") ||
		 fileName.startsWith("abb_") ||
		 fileName.startsWith("siemens_") ||
		 fileName.startsWith("ssabox_"))
	      // Object reference manual
	      fileName = "$pwr_doc/orm/" + fileName;

            if ( cli.qualifierFound("/BOOKMARK"))
	      bookmarkValue = cli.getQualValue("/BOOKMARK");

            System.out.println( "Loading helpfile \"" + fileName + "\"");
	    openURL( session, fileName, true, null, bookmarkValue);
	  }
          local_cmd = true;
        }
      }
      else if ( command.equals("SET")) {
        if ( cli.qualifierFound("cli_arg1")) {

          String parameter = "PARAMETER";
          String cli_arg1 = cli.getQualValue("cli_arg1").toUpperCase();
          if ( parameter.length() >= cli_arg1.length() &&
               parameter.substring(0,cli_arg1.length()).equals(cli_arg1)) {
	      // Command is "SET PARAMETER"
	      String name;
	      String value;
	      PwrtStatus sts;

	      local_cmd = true;
              if ( cli.qualifierFound("/NAME"))
	        name = cli.getQualValue("/NAME");
              else {
                System.out.println( "Cmd: name is missing\n");
                return 0;
              }
              if ( cli.qualifierFound("/VALUE"))
	        value = cli.getQualValue("/VALUE");
              else {
                System.out.println( "Cmd: value is missing\n");
                return 0;
              }
              boolean bypass = cli.qualifierFound("/BYPASS");
	      if ( bypass) {
		  System.out.println( "Bypass is obsolete");
	      }
	      boolean publicwrite = cli.qualifierFound("/PUBLICWRITE");
	      if ( publicwrite ) {
		 GdhrGetAttributeFlags retf = gdh.getAttributeFlags( name);
		 if ( retf.evenSts()) return 0;

		 if ( (retf.flags & Pwr.mAdef_publicwrite) == 0) {
		     System.out.println( "Not authorized");
		     return 0;
		 }
		 
		 if ( ! gdh.isAuthorized( Pwr.mPrv_RtRead | Pwr.mPrv_RtWrite |
					  Pwr.mPrv_System | Pwr.mPrv_Maintenance |
					  Pwr.mPrv_Process | Pwr.mPrv_Instrument |
					  Pwr.mPrv_Operator1 | Pwr.mPrv_Operator2 |
					  Pwr.mPrv_Operator3 | Pwr.mPrv_Operator4 |
					  Pwr.mPrv_Operator5 | Pwr.mPrv_Operator6 |
					  Pwr.mPrv_Operator7 | Pwr.mPrv_Operator8 |
					  Pwr.mPrv_Operator9 | Pwr.mPrv_Operator10)) {
		     System.out.println( "Not authorized");
		     return 0;
		 }
		 
	      }
	      else {
                // Need RtWrite or System to set attribute
                if ( ! gdh.isAuthorized( Pwr.mPrv_RtWrite | Pwr.mPrv_System)) {
                  System.out.println( "Not authorized");
                  return 0;
                }
              }

              // Get type of attribute
              GdhrGetAttributeChar ret = gdh.getAttributeChar( name);
              if ( ret.evenSts()) return 0;
	      System.out.println( "Char sts " + ret.sts);

              if ( ret.typeId == Pwr.eType_Float32) {
                float setValue = Float.parseFloat( value);
                sts = gdh.setObjectInfo( name, setValue);
              }
              else if ( ret.typeId == Pwr.eType_Boolean) {
                boolean setValue = (Integer.parseInt( value, 10) != 0);
                sts = gdh.setObjectInfo( name, setValue);
              }
              else if ( ret.typeId == Pwr.eType_Int32 ||
		        ret.typeId == Pwr.eType_UInt32 ||
                        ret.typeId == Pwr.eType_Int16 ||
		        ret.typeId == Pwr.eType_UInt16 ||
                        ret.typeId == Pwr.eType_Int8 ||
		        ret.typeId == Pwr.eType_UInt8 ||
		        ret.typeId == Pwr.eType_Mask ||
		        ret.typeId == Pwr.eType_Enum) {
                int setValue = Integer.parseInt( value, 10);
                sts = gdh.setObjectInfo( name, setValue);
              }
              else if ( ret.typeId == Pwr.eType_String) {
                sts = gdh.setObjectInfo( name, value);
              }
              else
                return 0;

              if ( sts.evenSts())
                 System.out.println( "setObjectInfoError " + sts);
          }

          String subwindow = "SUBWINDOW";
          if ( subwindow.length() >= cli_arg1.length() &&
               subwindow.substring(0,cli_arg1.length()).equals(cli_arg1)) {
	    // Command is "SET SUBWINDOW"

            String name;
	    String graphstr;
	    String source;
	    String object;
	    PwrtStatus sts;

	    System.out.println("Command: set subwindow");
	    local_cmd = true;
	    if ( cli.qualifierFound("/NAME"))
	      name = cli.getQualValue("/NAME");
	    else {
              System.out.println( "Cmd: name is missing\n");
	      return 0;
	    }
	    if ( cli.qualifierFound("/SOURCE"))
	      source = cli.getQualValue("/SOURCE");
	    else {
              System.out.println( "Cmd: source is missing\n");
	      return 0;
	    }
	    if ( cli.qualifierFound("/OBJECT"))
	      object = cli.getQualValue("/OBJECT");
	    else
	      object = null;
            if ( cli.qualifierFound("cli_arg2"))
	      graphstr = cli.getQualValue("cli_arg2").toLowerCase();
	    else {
	      System.out.println("Syntax error");
              return 0;
            }

	    if ( source.indexOf('.') == -1)
		source = source + ".pwg";

	    Object graph;
	    if ( graphstr.equals("$current") && currentGrowFrame != null)
		graph = currentGrowFrame;
	    else
	      graph = session.getUtility( JopUtility.GRAPH, (PwrtObjid)null, JopUtility.fileToName(graphstr));
	    if ( graph != null) {
	      System.out.println("JopSpider, " + graphstr + " found");
	      ((JopGrowFrame)graph).setSubwindowSource( name, source, object);
	    }
	    else {
	      System.out.println("Graph " + graphstr + " is not opened");
	      return 0;
	    }
          }
        }
      }
      else if ( command.equals("CHECK")) {
        if ( cli.qualifierFound("cli_arg1")) {

          String methodstr = "METHOD";
          String isattributestr = "ISATTRIBUTE";
          String cli_arg1 = cli.getQualValue("cli_arg1").toUpperCase();
          if ( methodstr.length() >= cli_arg1.length() &&
               methodstr.substring(0,cli_arg1.length()).equals(cli_arg1)) {
            // Command is "CHECK METHOD"
	    String method;
	    String object;

            if ( cli.qualifierFound("/METHOD"))
	      method = cli.getQualValue("/METHOD");
	    else {
              System.out.println( "Cmd: Method is missing\n");
              return 0;
            }

            if ( cli.qualifierFound("/OBJECT"))
	      object = cli.getQualValue("/OBJECT");
	    else {
              System.out.println( "Cmd: Object is missing\n");
              return 0;
	    }

	    if ( methObject == null || object.compareToIgnoreCase( methObject) != 0) {
	      CdhrAttrRef oret = gdh.nameToAttrRef( object);
	      if ( oret.evenSts()) return 0;

	      CdhrTypeId cret = gdh.getAttrRefTid( oret.aref);
	      if ( cret.evenSts()) return 0;

	      methObject = object;
	      methAref = oret.aref;
	      methClassId = cret.typeId;
	    }

	    JopMethods methods = new JopMethods( session, methAref, methObject, methClassId, JopUtility.NO);

	    boolean b = methods.callFilterMethod( method);
	    System.out.println( "Cmd check method: " + method + " , Object: " + object + ", value: " + b);
	    if ( b)
	      return 1;
	    else 
	      return 0;
	  }	
          else if ( isattributestr.length() >= cli_arg1.length() &&
		    isattributestr.substring(0,cli_arg1.length()).equals(cli_arg1)) {
            // Command is "CHECK ISATTRIBUTE"
	    String method;
	    String object;

            if ( cli.qualifierFound("/OBJECT"))
	      object = cli.getQualValue("/OBJECT");
	    else {
              System.out.println( "Cmd: Object is missing\n");
              return 0;
	    }

	    if ( methObject == null || object.compareToIgnoreCase( methObject) != 0) {
	      CdhrAttrRef oret = gdh.nameToAttrRef( object);
	      if ( oret.evenSts()) return 0;

	      CdhrTypeId cret = gdh.getAttrRefTid( oret.aref);
	      if ( cret.evenSts()) return 0;

	      methObject = object;
	      methAref = oret.aref;
	      methClassId = cret.typeId;
	    }

	    if ( (methAref.flags & PwrtAttrRef.OBJECTATTR) != 0)
	      return 1;
	    else 
	      return 0;
	  }
	}
      }
      else if ( command.equals("CALL")) {
        if ( cli.qualifierFound("cli_arg1")) {

          String parameter = "METHOD";
          String cli_arg1 = cli.getQualValue("cli_arg1").toUpperCase();
          if ( parameter.length() >= cli_arg1.length() &&
               parameter.substring(0,cli_arg1.length()).equals(cli_arg1)) {
            // Command is "CHECK METHOD"
	    String method;
	    String object;

            if ( cli.qualifierFound("/METHOD"))
	      method = cli.getQualValue("/METHOD");
	    else {
              System.out.println( "Cmd: Method is missing\n");
              return 0;
            }

            if ( cli.qualifierFound("/OBJECT"))
	      object = cli.getQualValue("/OBJECT");
	    else {
              System.out.println( "Cmd: Object is missing\n");
              return 0;
	    }

	    if ( methObject == null || object.compareToIgnoreCase( methObject) != 0) {
	      CdhrAttrRef oret = gdh.nameToAttrRef( object);
	      if ( oret.evenSts()) return 0;

	      CdhrTypeId cret = gdh.getAttrRefTid( oret.aref);
	      if ( cret.evenSts()) return 0;

	      methObject = object;
	      methAref = oret.aref;
	      methClassId = cret.typeId;
	    }

	    JopMethods methods = new JopMethods( session, methAref, methObject, methClassId, JopUtility.NO);


	    methods.callMethod( method);
	    System.out.println( "Cmd call method: " + method + " , Object: " + object);
	    return 1;
	  }

	}
      }
      else if ( command.equals("SET")) {
        if ( cli.qualifierFound("cli_arg1")) {

          String parameter = "LANGUAGE";
          String cli_arg1 = cli.getQualValue("cli_arg1").toUpperCase();
          if ( parameter.length() >= cli_arg1.length() &&
               parameter.substring(0,cli_arg1.length()).equals(cli_arg1)) {
            // Command is "SET LANGUAGE"
	    String cli_arg2;

            if ( cli.qualifierFound("cli_arg2"))
	      cli_arg2 = cli.getQualValue("cli_arg2");
	    else {
              System.out.println( "Cmd: Language is missing\n");
              return 0;
            }

	    JopLang lng = new JopLang(session);
	    lng.set( cli_arg2);
	    JopLang.setDefault( lng);
	    return 1;
	  }

	}
      }
      else if ( command.equals("LOGOUT")) {
	gdh.logout();
      }
      else if ( command.equals("LOGIN")) {
        if ( cli.qualifierFound("cli_arg1") && cli.qualifierFound("cli_arg2")) {
	  String username = cli.getQualValue("cli_arg1");
	  String passwd = cli.getQualValue("cli_arg2");
	  passwd = JopCrypt.crypt( "aa", passwd);
	  int sts = gdh.login( username, passwd);
	  if ( (sts & 1) == 1)
	    System.out.println( "User " + username + " logged in");
	  else
	    System.out.println( "User not authorized");
	}
	else {
	  System.out.println( "Cmd: Syntax error\n");
	  return 0;
	}
      }
      else if ( command.equals("SHOW")) {
        if ( cli.qualifierFound("cli_arg1")) {

          String parameter = "USER";
          String cli_arg1 = cli.getQualValue("cli_arg1").toUpperCase();
          if ( parameter.length() >= cli_arg1.length() &&
               parameter.substring(0,cli_arg1.length()).equals(cli_arg1)) {
            // Command is "SHOW USER"
	    String username = gdh.getUser();
	    if ( username == null)
	      username = "Not logged in";
	    int priv = gdh.getPrivilege();
            System.out.println( "User: " + username + " " + priv);
	  }
	}
      }
      else if ( command.equals("EMIT")) {
        if ( cli.qualifierFound("cli_arg1")) {

          String signalstr = "SIGNAL";
          String cli_arg1 = cli.getQualValue("cli_arg1").toUpperCase();
          if ( signalstr.length() >= cli_arg1.length() &&
               signalstr.substring(0,cli_arg1.length()).equals(cli_arg1)) {
            // Command is "EMIT SIGNAL"
	    String signalname;
	    String graph;
	    String instance;

            if ( cli.qualifierFound("/SIGNALNAME"))
	      signalname = cli.getQualValue("/SIGNALNAME");
	    else {
              System.out.println( "Cmd: Signalname is missing\n");
              return 0;
            }

            if ( cli.qualifierFound("/GRAPH"))
	      graph = cli.getQualValue("/GRAPH");
	    else
	      graph = null;

            if ( cli.qualifierFound("/INSTANCE"))
	      instance = cli.getQualValue("/INSTANCE");
	    else
	      instance = null;

	    if ( graph == null) {
	      for ( Object utility = session.getUtilityFirst( JopUtility.GRAPH);
		    utility != null;
		    utility = session.getUtilityNext( JopUtility.GRAPH, utility)) {
		  ((GrowFrame)utility).signalSend( signalname);
	      }
	    }
	  }	
	}
      }
    }
    else {
      System.out.println( "JopSpider: Parse error " + cli.getStsString());
      return 0;
    }

    if ( !local_cmd) {
      // Send to xtt
      if ( qcom != null) {
        PwrtStatus sts = qcom.put( op_qcom_qix, op_qcom_nid, cmd);
        System.out.println( "Send " + cmd + "  sts: " + sts.getSts());
        if ( sts.evenSts())
          System.out.println( "Qcom put error: " + sts.getSts());
      }
    }
    return 1;
  }
  private class JopSpiderCmd extends Thread {
    JopSession session;

    JopSpiderCmd( JopSession session) {
      this.session = session;
      start();
    }

    public void run() {
      CdhrString cret;

System.out.println( "JopSpiderCmd start");

      while ( true) {
        cret = qcom.getString( qcom_qix, qcom_nid);
//      System.out.println("awake : " + cret.getSts());
        if ( cret.oddSts()) {
          int idx;
          System.out.println( "Command received :" + cret.str);

          Cli cli = new Cli( cliTable);
          String command = cli.parse( cret.str);
          if (cli.oddSts()) {

            if ( command.equals("OPEN")) {

              if ( cli.qualifierFound("cli_arg1")) {

                String jgraph = "JGRAPH";
                String cli_arg1 = cli.getQualValue("cli_arg1").toUpperCase();
                if ( jgraph.length() >= cli_arg1.length() &&
                     jgraph.substring(0,cli_arg1.length()).equals(cli_arg1)) {
                  // Command is "OPEN JGRAPH"

                  boolean newFrame = cli.qualifierFound("/NEW");
                  boolean scrollbar = cli.qualifierFound("/SCROLLBAR");

                  if ( ! cli.qualifierFound("cli_arg2")) {
	            System.out.println("Syntax error");
                    return;
                  }
	          String frameName = cli.getQualValue("cli_arg2");

                  System.out.println( "Loading frame \"" + frameName + "\"");
		  try {
	            loadFrame( session, frameName, null, scrollbar);
		  }
		  catch ( ClassNotFoundException e) {
		  }
		  catch ( FileNotFoundException e) {
		  }
                }
              }
            }
            else if ( command.equals("EXIT")) {
	      System.out.println("Jop exiting");
              System.exit(0);
            }
          }   
        }
        try {
          sleep( 1000);
	}
	catch ( InterruptedException e) {
	}
      }
    }
  }

  @SuppressWarnings("unchecked")
  public static Object loadFrame( JopSession session, String className, 
				  String instance, boolean scrollbar) throws ClassNotFoundException, FileNotFoundException {
      System.out.println( "loadFrame " + className);
      if ( className.indexOf(".pwg") != -1) {
	  JopGrowFrame frame = new JopGrowFrame(className, session.getGdh(), instance, new GrowFrameCb(session),
						session.getRoot());
	  frame.validate();
	  frame.setVisible(true);
	  return frame;
      }
      else {
	  Object frame;
	  if ( instance == null)
	      instance = "";
    
	  JopLog.log("JopSpider.loadFrame: Loading frame \"" + className + "\" instance \"" + instance + "\"");
	  try {
	      Class clazz = Class.forName( className);
	      try {
		  Class argTypeList[] = new Class[] { session.getClass(), instance.getClass(),
						      boolean.class}; 
		  Object argList[] = new Object[] { session, instance, new Boolean(scrollbar)};
		  System.out.println( "JopSpider.loadFrame getConstructor");
		  Constructor constructor = clazz.getConstructor( argTypeList);
		  
		  try {
		      frame = constructor.newInstance( argList);
		  }
		  catch ( Exception e) {
		      System.out.println("Class instanciation error: " + className + " " + e.getMessage() + " " + constructor);
		      return null;
		  }
		  // frame = clazz.newInstance();
		  JopLog.log( "JopSpider.loadFrame openFrame");
		  openFrame( frame);
		  return frame;
	      }
	      catch ( NoSuchMethodException e) {
		  System.out.println("NoSuchMethodException: Unable to get frame constructor " + className);
	      }
	      catch ( Exception e) {
		  System.out.println("Exception: Unable to get frame class " + className + " " + e.getMessage());
	      }
	  }
	  catch (ClassNotFoundException e) {
	      System.out.println("Class not found: " + className);
	      throw new ClassNotFoundException();
	  }
	  return null;
      }
  }

  public static void openFrame( Object frame) {
    boolean packFrame = false;
    if (packFrame) {
      ((JFrame)frame).pack();
    }
    else {
      ((JFrame)frame).validate();
    }
    //Center the window
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    Dimension frameSize = ((JFrame)frame).getSize();
    if (frameSize.height > screenSize.height) {
      frameSize.height = screenSize.height;
    }
    if (frameSize.width > screenSize.width) {
      frameSize.width = screenSize.width;
    }
    ((JFrame)frame).setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
    ((JFrame)frame).setVisible(true);
  }

  static void openURL( JopSession session, String name, boolean newFrame, 
		       String frameName, String bookmark) {
    System.out.println("openURL " + name);
    Object root = session.getRoot();

    // Replace any URL symbol
    name = replaceUrlSymbol( session, name);
    try {
      String url_str = null;
      if ( name.substring(0,5).equals("http:")) {
	  url_str = name;
        if ( url_str.lastIndexOf(".html") == -1 &&
	     url_str.lastIndexOf(".shtml") == -1 &&
	     url_str.lastIndexOf(".htm") == -1 &&
	     url_str.lastIndexOf(".pdf") == -1)
          url_str = url_str + ".html";
      }
      else if ( name.startsWith("$pwr_doc/")) {
        URL current = ((JApplet) root).getDocumentBase();
        String current_str = current.toString();
        int idx1 = current_str.indexOf('/');
	if ( idx1 != -1 && current_str.length() > idx1 + 1) {
          idx1 = current_str.indexOf('/', idx1+1);
	  if ( idx1 != -1 && current_str.length() > idx1 + 1) {
	    idx1 = current_str.indexOf('/', idx1+1);
	    if ( idx1 != -1 && current_str.length() > idx1 + 1) {
	      url_str = current_str.substring(0,idx1 + 1) + "pwr_doc/" + name.substring(9);	      
	      if ( url_str.lastIndexOf(".html") == -1 &&
		   url_str.lastIndexOf(".shtml") == -1 &&
		   url_str.lastIndexOf(".htm") == -1 &&
		   url_str.lastIndexOf(".pdf") == -1)
		url_str = url_str + ".html";
	    }
	  }
	}
      }
      else {
        URL current = ((JApplet) root).getCodeBase();
        String current_str = current.toString();
        int idx1 = current_str.lastIndexOf('/');
        int idx2 = current_str.lastIndexOf(':');
        int idx = idx1;
        if ( idx2 > idx)
          idx = idx2;
        String path = current_str.substring(0,idx + 1);
        if ( name.lastIndexOf(".html") == -1 &&
	     name.lastIndexOf(".shtml") == -1 &&
	     name.lastIndexOf(".htm") == -1 &&
	     name.lastIndexOf(".pdf") == -1)
          url_str = new String( path + name + ".html");
        else
          url_str = new String( path + name);
        if ( bookmark != null)
	  url_str += "#" + bookmark;
      }
      System.out.println( "Opening URL: " + url_str);

      URL url = new URL( url_str);
      AppletContext appCtx = ((JApplet) root).getAppletContext();
      if ( newFrame)
        appCtx.showDocument( url, "_blank");
      else if ( frameName != null)
        appCtx.showDocument( url, frameName);
      else
        appCtx.showDocument( url, "_self");
    }
    catch ( MalformedURLException e) {
      System.out.println( "MalformedURL : " + name);
    }
  }

  static String replaceUrlSymbol( JopSession session, String url) {
    Gdh gdh = session.getGdh();

    CdhrObjid webConfig = gdh.getClassList( Pwrb.cClass_WebBrowserConfig);
    if ( webConfig.evenSts()) return url;

    CdhrString webName = gdh.objidToName( webConfig.objid, Cdh.mName_volumeStrict);
    if ( webConfig.evenSts()) return url;

    for ( int i = 0; i < 10; i++) {
      String attr = webName.str + ".URL_Symbols[" + i + "]";
      CdhrString attrValue = gdh.getObjectInfoString( attr);
      if ( attrValue.evenSts()) return url;

      if ( attrValue.str.equals(""))
	continue;

      StringTokenizer token = new StringTokenizer( attrValue.str);
      String symbol = "$" + token.nextToken();
      if ( !token.hasMoreTokens()) 
	continue;
  
      String value = token.nextToken();

      int idx = url.lastIndexOf( symbol);
      while ( idx != -1) {
	url = url.substring( 0, idx) + value + url.substring( idx + symbol.length());
        idx = url.lastIndexOf( symbol);
      }
    }
    return url;
  }

  //Main method
  public static void main(String[] args) {
    int qcom_qix = 0;
  
    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    }
    catch(Exception e) {
      e.printStackTrace();
    }
    if ( args.length > 0) {
      System.out.println("Queue : " + args[0]);
      try {
        qcom_qix = Integer.parseInt(args[0]);
      }
      catch ( NumberFormatException e) {
        System.out.println("Syntax error in que number");
	qcom_qix = 0;
      }
    }
    // new Gdh( (Object) null);
    new JopSpider(qcom_qix);
  }

  public static Image getImage( JopSession session, String image) {
    String fullName;
    if ( session.getRoot() instanceof JopApplet) {
      String name;
      try {
        URL current = ((JApplet) session.getRoot()).getCodeBase();
        String current_str = current.toString();
        int idx1 = current_str.lastIndexOf('/');
        int idx2 = current_str.lastIndexOf(':');
        int idx = idx1;
        if ( idx2 > idx)
          idx = idx2;
        String path = current_str.substring(0,idx + 1);
        String url_str;

	//        String url_str = new String( path + name);
        if ( image.substring(0,5).compareTo("jpwr/") == 0) {
          idx = image.lastIndexOf('/');
          name = image.substring(5, idx);

          url_str =  new String( "jar:" + path + "pwr_" + name + ".jar!/" + image);
	}
        else {
          idx = image.lastIndexOf('/');
          if ( idx == -1)
            name = new String(image);
          else
            name = image.substring(idx + 1);

          url_str = new String( "jar:" + path + "pwrp_" + systemName + "_web.jar!/" + name);
	}        
        System.out.println( "Opening URL: " + url_str);
        URL url = new URL( url_str);
        return Toolkit.getDefaultToolkit().getImage( url);
      }
      catch ( MalformedURLException e) {
      }
      return null;
    }
    else {
      // Add default directory /pwrp/img
      System.out.println( "Image: " + image);

      //      int idx = image.lastIndexOf('/');
      //      if ( idx == -1)
      //  fullName = new String("/pwrp/img/" + image);
      // else
        fullName = new String(image);
	//      return Toolkit.getDefaultToolkit().getImage( fullName);

      try {
        String name;
        String url_str;
        int idx;
        String path = new String("file://");
        if ( image.substring(0,5).compareTo("jpwr/") == 0) {
          idx = image.lastIndexOf('/');
          name = image.substring(5, idx);

          url_str = new String( "$pwr_lib/pwr_" + name + ".jar");
          url_str = Gdh.translateFilename( url_str);
          url_str =  new String( "jar:" + path + url_str + "!/" + image);
	}
        else {
          idx = image.lastIndexOf('/');
          if ( idx == -1)
            name = new String(image);
          else
            name = image.substring(idx + 1);

          url_str = new String( "$pwrp_lib/pwrp_" + systemName + ".jar");
	  System.out.println( "java: " + url_str);
          url_str = Gdh.translateFilename( url_str);
          url_str =  new String( "jar:" + path + url_str + "!/" + name);
	}        
        System.out.println( "Opening URL: " + url_str);
        URL url = new URL( url_str);
        return Toolkit.getDefaultToolkit().getImage( url);
      }
      catch ( MalformedURLException e) {
      }
    }
    return null;
  }

}




