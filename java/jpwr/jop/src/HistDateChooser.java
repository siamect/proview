/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;

/**
   Event log date chooser in serach dialog.
*/
public class HistDateChooser extends JPanel implements ActionListener{
    static final long serialVersionUID = 8759362387095354771L;      
    private Calendar date;
    SpinnerDateModel yearModel;
    private JComboBox month;
    private JSpinner year, hour, minute, second;
    private JPanel dayGrid = new JPanel();
    private JPanel timeGrid = new JPanel();
    private int selectedDay;
        
    private String[] months = {JopLang.transl("January"), 
			       JopLang.transl("February"), 
			       JopLang.transl("March"), 
			       JopLang.transl("April"), 
			       JopLang.transl("May"), 
			       JopLang.transl("June"), 
			       JopLang.transl("July"),
			       JopLang.transl("August"), 
			       JopLang.transl("September"), 
			       JopLang.transl("October"),
			       JopLang.transl("November"), 
			       JopLang.transl("December")};
        
    private String[] days = {JopLang.transl("Mon"),
			     JopLang.transl("Tue"),
			     JopLang.transl("Wed"),
			     JopLang.transl("Thu"),
			     JopLang.transl("Fri"),
			     JopLang.transl("Sat"),
			     JopLang.transl("Sun")};
         
    private String[] time = {JopLang.transl("Hour"),
			     JopLang.transl("Minute"),
			     JopLang.transl("Second")};
        
    public HistDateChooser(){
	date = Calendar.getInstance();
	init();
    }
        
    public HistDateChooser(Calendar Cal){
        date = (Calendar) Cal.clone();
        init();
    }
        

    private void init(){
       selectedDay=date.get(Calendar.DAY_OF_MONTH); 
       month = new JComboBox(months);
       month.setSelectedIndex(date.get(Calendar.MONTH));
       yearModel = new SpinnerDateModel();
       yearModel.setValue(date.getTime());
       yearModel.setCalendarField(Calendar.YEAR);    
       year = new JSpinner(yearModel);
       year.setEditor(new JSpinner.DateEditor(year, "yyyy"));
       this.setLayout(new BorderLayout());
       this.add("North",year);
       dayGrid.setLayout(new GridLayout(7,7));
       month.addActionListener(this);
       yearModel.addChangeListener( new YearChangeListener());
       this.add("Center",dayGrid);
       this.add("West",month);
       hour=new JSpinner(new SpinnerNumberModel(date.get(Calendar.HOUR_OF_DAY),0,23,1));
       minute=new JSpinner(new SpinnerNumberModel(date.get(Calendar.MINUTE),0,59,1));
       second=new JSpinner(new SpinnerNumberModel(date.get(Calendar.SECOND),0,59,1));
       setupTimeGrid();
       this.add("South",timeGrid); 
       updateGrid();
    }
    
    public Calendar getDate(){
        
        updateDate();
        return date;
        }
        
    private void updateDate(){
        date.setTime(yearModel.getDate());
        date.set(Calendar.MONTH,month.getSelectedIndex());
        date.set(Calendar.DAY_OF_MONTH,selectedDay);
        date.set(Calendar.HOUR_OF_DAY,((Integer)hour.getValue()).intValue());
        date.set(Calendar.MINUTE,((Integer)minute.getValue()).intValue());
        date.set(Calendar.SECOND,((Integer)second.getValue()).intValue());     
    }
    
    private void updateGrid(){
        updateDate();
        dayGrid.removeAll();
        int i;
        for (i=0;i<7;i++) dayGrid.add(new JLabel(days[i],JLabel.CENTER));
        Calendar temp =(Calendar) date.clone();
        temp.set(Calendar.DAY_OF_MONTH,1);
        int startDay = temp.get(Calendar.DAY_OF_WEEK)-Calendar.MONDAY;
        if (startDay<0) startDay=6;
        for (i=0;i<startDay;i++) dayGrid.add(new JLabel(""));
        for (i=1;i<=date.getActualMaximum(Calendar.DAY_OF_MONTH);i++) {
            JButton day = new JButton(String.valueOf(i));
            day.addActionListener(this);
            if (i==selectedDay)
                day.setEnabled(false);
            dayGrid.add(day);                
        }
        for (i=startDay+date.getActualMaximum(Calendar.DAY_OF_MONTH)+1;i<42;i++) dayGrid.add(new Label(""));
       repaint();
       validate();     
     }
     
     private void setupTimeGrid(){
       timeGrid.setLayout(new GridLayout(3,3));
       for (int i=0; i<3; i++){
        timeGrid.add(new JLabel(""));
       }
       for (int i=0; i<3; i++){
        timeGrid.add(new JLabel(time[i],JLabel.CENTER));
       }
       timeGrid.add(hour);  
       timeGrid.add(minute);  
       timeGrid.add(second);
     }
     
     public void actionPerformed(ActionEvent e){
        
        if (e.getSource().getClass() == (new JButton()).getClass()){
            try{
                JButton pressed = (JButton) e.getSource();
                selectedDay =  (new Integer(pressed.getText())).intValue();
            }
            catch (Exception ex) {
                System.out.println("Error:" + ex);
            }
        }
        
        updateGrid();
            
        
     }
     
     
     private class YearChangeListener implements ChangeListener{
        
        
        
      public void stateChanged(ChangeEvent e){
            updateGrid();
        }
        
     }
    
}
