/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jop;
import jpwr.rt.*;
import java.io.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.awt.font.*;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.event.*;
import java.net.*;
import java.applet.*;

/**
   Frame for the Jop operator window.
*/
public class JopOpWindowFrame extends JFrame implements GdhApplIfc {
  static final long serialVersionUID = 4779081059941695829L;
  JScrollPane scrollPane;
  JPanel contentPane;
  BorderLayout borderLayout1 = new BorderLayout();
  JopOpWindow localPanel;
  Dimension size;
  JopEngine engine;
  JopSession session;
  Object root;
  PwrtObjid utilityObjid;

  public JopOpWindowFrame( String pwrPlace) {
    engine = new JopEngine( 1000, this);
    session = new JopSession( engine, (Object)this);
    root = (Object) this;
    localPanel = new JopOpWindow( session, (Object)this, pwrPlace);
    init();
    pack();
  }

  public void setLabelText( String text) {
    localPanel.setLabelText( text);
  }

  public void setLanguage( int language) {
    localPanel.setLanguage( language);
  }

  private void init() {
    contentPane = (JPanel) this.getContentPane();
    contentPane.setLayout(borderLayout1);
    scrollPane = new JScrollPane(localPanel);
    contentPane.add(scrollPane, BorderLayout.CENTER);
    contentPane.setOpaque(true);
    localPanel.setLayout( new BoxLayout( localPanel, BoxLayout.Y_AXIS));
    localPanel.setOpaque(true);
    localPanel.setBackground( Color.white);
    this.setTitle("Operator Window");
    size = new Dimension( 300, 900);
    setSize( size);
    engine.setFrameReady();
  }

  // Exit when window is closed
  protected void processWindowEvent(WindowEvent e) {
    super.processWindowEvent(e);
    if (e.getID() == WindowEvent.WINDOW_CLOSING) {
	//  System.exit(0);
    }
  }

  // GdhApplIfc function
  public String getPwrHost() {
    return (String)null;
  }
}


