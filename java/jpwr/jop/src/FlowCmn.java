/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import jpwr.rt.*;
import java.io.*;
import java.util.*;


/**
   Flow common data.
   Common data for a flow context.
*/
public class FlowCmn {
  static final int display_level = Flow.mDisplayLevel_1;
  boolean debug;
  boolean antiAliasing;
  Object ctx;
  Gdh gdh;
  JopSession session;
  double zoom_factor;
  double base_zoom_factor;
  int offset_x;
  int offset_y;
  double x_right;
  double x_left;
  double y_high;
  double y_low;

  Vector<Object> a = new Vector<Object>();
  //Vector a = new Vector();
  Vector<Object> a_nc = new Vector<Object>();
  //Vector a_nc = new Vector();
  Vector<Object> a_cc = new Vector<Object>();
  //Vector a_cc = new Vector();

  public FlowCmn( Object ctx, Gdh gdh, JopSession session) {
    this.ctx = ctx;
    this.gdh = gdh;
    this.session = session;
    this.debug = true;
    this.antiAliasing = true;
  }

  public void unselect() {
    ((FlowCtxInterface)ctx).unselect();
  }
}
