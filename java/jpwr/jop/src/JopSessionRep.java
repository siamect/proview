/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import jpwr.rt.*;
import java.lang.*;
import java.io.*;
import java.util.*;
import java.awt.*;
import javax.swing.*;

/**
   The session object from which all graphs, trends, alarm and event lists etc, are opened.
*/
public class JopSessionRep implements JopSessionIfc {
  JopEngine engine;
  Object root;
  JopSession session;
  XttTree navigator;
  MhFrame alarmList;
  HistSearch eventLog;
  JopLoginFrame login;
  String lang = "en_us";

  Vector<Object> frames = new Vector<Object>();
  //Vector frames = new Vector();

  public JopSessionRep() {
  }

  public void setSession( Object session) {
    this.session = (JopSession) session;
  }
  public void setRoot( Object root) {
    this.root = root;
  }
  public Object getRoot() {
    return root;
  }
  public void setEngine( JopEngine engine) {
    this.engine = engine;
  }
  public JopEngine getEngine() {
    return engine;
  }
  public void setLang( String lang) {
    this.lang = lang;
  }
  public String getLang() {
    return lang;
  }

  public void openNavigator( PwrtObjid oid) {
    if ( navigator == null) {
      JopXttFrame xtt = new JopXttFrame( session, oid);
      xtt.setVisible( true);
    }
    else {
      if ( oid != null)
	navigator.find( oid);
	JopXttFrame xtt = (JopXttFrame) navigator.getRoot();
        xtt.setVisible( true);
        xtt.setState(Frame.NORMAL);
        xtt.toFront();
        // xtt.requestFocus();      // Has no effect... 
    }
  }

  public void openAlarmList() {
    if ( alarmList == null) {
      alarmList = new MhFrame(session);
      alarmList.setVisible( true);
    }
    else {
      alarmList.setVisible( true);
      alarmList.setState(Frame.NORMAL);
      alarmList.toFront();
      // alarmList.requestFocus();      // Has no effect... 
    }
  }

  public void openEventLog() {
    if ( eventLog == null) {
      eventLog = new HistSearch("", session);
      eventLog.setVisible( true);
    }
    else {
      eventLog.setVisible( true);
      eventLog.setState(Frame.NORMAL);
      eventLog.toFront();
      // alarmList.requestFocus();      // Has no effect... 
    }
  }

  public void openLogin() {
    if ( login == null) {
      login = new JopLoginFrame( session);
      login.setVisible( true);
    }
    else {
      login.clear();
      login.setVisible( true);
      login.setState(Frame.NORMAL);
      login.toFront();
      // login.requestFocus();      // Has no effect... 
    }
  }

  public void openLanguage() {
    JopLanguageFrame lang = new JopLanguageFrame( session);
    lang.setVisible( true);
  }

  public void openFlowFrame( PwrtObjid oid, String center) {
    FlowFrame flow = (FlowFrame) getUtility( JopUtility.TRACE, oid, null);
    if ( flow != null) {
      flow.centerObject( center);
      flow.setState(Frame.NORMAL);
      flow.toFront();
      // flow.requestFocus();      // Has no effect... 
    }
    else {
      flow = new FlowFrame( session, oid, center);
      flow.setVisible( true);
      addUtility( flow);
      System.out.println( "Add utility flow: " + flow + " " + oid.oix + " " + oid.vid);
    }
  }

  public void openGraphFrame( String name, String instance, boolean scrollbar, boolean classGraph) {
    CdhrAttrRef aref = null;
    if ( instance != null && !instance.equals("")) {
      if ( instance.startsWith("&")) {
	// Objid pointer attribute
        CdhrString cstr = engine.gdh.getObjectInfoString( instance.substring(1));
        if ( cstr.evenSts()) return;	  

	instance = cstr.str;
      }

      JopLog.log("openGraphFrame " + name + " " + instance);
      aref = engine.gdh.nameToAttrRef( instance);
      if ( aref.evenSts()) return;
    }
    if ( classGraph) {
      int cid;

      if ( instance == null)
	return;

      CdhrTypeId tid = engine.gdh.getAttrRefTid( aref.aref);
      if ( tid.evenSts()) return;

      cid = tid.typeId;
      
      while ( true) {
	CdhrObjid coid = engine.gdh.classIdToObjid( cid);
	if ( coid.evenSts()) return;

	CdhrString sret = engine.gdh.objidToName( coid.objid, Cdh.mName_object);
	if ( sret.evenSts()) return;

	// Find any GraphConfiguration suffix
	String suffix = "";
	CdhrInt gcret = engine.gdh.getObjectInfoInt( instance + ".GraphConfiguration");
	if ( gcret.oddSts()) {
	  if ( gcret.value > 0)
	    suffix = Integer.toString(gcret.value);
	}
	if (sret.str.startsWith("$"))
	    name = "pwr_c_" + sret.str.toLowerCase().substring(1) + ".pwg";  // Pwg test
	else
	    name = "pwr_c_" + sret.str.toLowerCase() + ".pwg";  // Pwg test

	int pwgidx = name.lastIndexOf( ".pwg");
	if (  pwgidx == -1) {
	    if ( coid.objid.vid < Cdh.cUserClassVolMin ||
		 (coid.objid.vid >= Cdh.cManufactClassVolMin && 
		  coid.objid.vid <= Cdh.cManufactClassVolMax)) {
		// Class is a base class, java classname starts with JopC
		if ( coid.objid.vid == 1)
		    name = "jpwr.jopc.Jopc" + sret.str.substring(1,2).toUpperCase() + 
			sret.str.substring(2).toLowerCase() + suffix;
		else if ( coid.objid.vid == 64002)
		    name = "jpwr.abb.Jopc" + sret.str.substring(0,1).toUpperCase() + 
			sret.str.substring(1).toLowerCase() + suffix;
		else if ( coid.objid.vid == 10) {
		    if ( sret.str.startsWith( "BaseFcPPO"))
			name = "jpwr.bcompfc.Jopc" + sret.str.substring(0,1).toUpperCase() + 
			    sret.str.substring(1).toLowerCase() + suffix;
		    else
			name = "jpwr.bcomp.Jopc" + sret.str.substring(0,1).toUpperCase() + 
			    sret.str.substring(1).toLowerCase() + suffix;
		}
		else
		    name = "jpwr.jopc.Jopc" + sret.str.substring(0,1).toUpperCase() + 
			sret.str.substring(1).toLowerCase() + suffix;
	    }
	    else
		// Java name equals class name
		name = sret.str.substring(0,1).toUpperCase() + sret.str.substring(1).toLowerCase() +
		    suffix;
	}
	else {
	    if ( coid.objid.vid < Cdh.cUserClassVolMin ||
		 (coid.objid.vid >= Cdh.cManufactClassVolMin && 
		  coid.objid.vid <= Cdh.cManufactClassVolMax)) {
		if ( isApplication()) {
		    name = "$pwr_exe/" + name;
		    pwgidx = name.lastIndexOf( ".pwg");
		}
	    }
	    if ( suffix.length() > 0)
		name = name.substring(0, pwgidx) + suffix + name.substring(pwgidx);
	}
	JopLog.log("openGraphFrame classgraph " + name);

	Object graph;
	if ( aref == null)
          graph = getUtility( JopUtility.GRAPH, (PwrtObjid)null, name);
	else
          graph = getUtility( JopUtility.GRAPH, aref.aref, name);
	if ( graph != null) {
	  ((JFrame)graph).setState(Frame.NORMAL);
	  ((JFrame)graph).toFront();
	  break;
	}
	else {
	  try {
	    graph = JopSpider.loadFrame( session, name, instance, scrollbar);
	    if ( graph != null) {
	      addUtility( graph);
	    }
	    break;
	  }
 	  catch ( ClassNotFoundException e) {
	    if ( classGraph) {
	      CdhrClassId rcid = engine.gdh.getSuperClass( cid, null);
	      if ( rcid.evenSts())
		break;
	      cid = rcid.classId;
	    }
	  }
 	  catch ( FileNotFoundException e) {
	    if ( classGraph) {
	      CdhrClassId rcid = engine.gdh.getSuperClass( cid, null);
	      if ( rcid.evenSts())
		break;
	      cid = rcid.classId;
	    }
	  }
	}
      }
    }
    else {
      Object graph;
      if ( aref == null)
	  graph = getUtility( JopUtility.GRAPH, (PwrtObjid)null, JopUtility.fileToName(name));
      else
	  graph = getUtility( JopUtility.GRAPH, aref.aref, JopUtility.fileToName(name));
      if ( graph != null) {
	((JFrame)graph).setState(Frame.NORMAL);
	((JFrame)graph).toFront();
      }
      else {
        try {
          graph = JopSpider.loadFrame( session, name, instance, scrollbar);
	  System.out.println("openGraphFrame graph: " + graph);

	  if ( graph != null) {
            addUtility( graph);
	    System.out.println( "Add utility graph " + name);
	  }
	}
	catch ( ClassNotFoundException e) {
	}
	catch ( FileNotFoundException e) {
	}
      }
    }
  }

  public void openCrrFrame( String name) {
    CrrFrame crr = new CrrFrame( session, name);;
    crr.setVisible( true);
  }
  
  public void setNavigator( Object navigator) {
    this.navigator = (XttTree) navigator;
  }

  public void setAlarmList( Object alarmList) {
    this.alarmList = (MhFrame) alarmList;
  }

  public void addUtility( Object utility) {
    frames.add( utility);
  }

  public void removeUtility( Object utility) {
    frames.remove( utility);
  }

  public Object getUtility( int type, PwrtObjid objid, String name) {
    switch ( type) {
    case JopUtility.TRACE:
      for ( int i = 0; i < frames.size(); i++) {
	Object o = frames.get(i);
	PwrtObjid utilityObjid = ((JopUtilityIfc) o).getUtilityObjid();
	if ( ((JopUtilityIfc) o).getUtilityType() == type && 
	     utilityObjid != null &&
	     utilityObjid.oix == objid.oix && utilityObjid.vid == objid.vid) {
	  return o;
	}
      }
      return null;
    case JopUtility.GRAPH:
      for ( int i = 0; i < frames.size(); i++) {
	Object o = frames.get(i);
	String utilityName = ((JopUtilityIfc) o).getUtilityName();
        if ( objid != null) {
	  PwrtObjid utilityObjid = ((JopUtilityIfc) o).getUtilityObjid();
	  if ( ((JopUtilityIfc) o).getUtilityType() == type &&
	       utilityName.equals( name) &&
	       utilityObjid != null &&
	       utilityObjid.oix == objid.oix && utilityObjid.vid == objid.vid)
	    return o;    
        }
        else {
	    System.out.println( "Utility: " + utilityName);
	  if ( ((JopUtilityIfc) o).getUtilityType() == type &&
	       utilityName.equals( name))
	    return o;    
	}
      }
      return null;
    default:
      return null;
    }

  }

  public Object getUtility( int type, PwrtAttrRef aref, String name) {
    switch ( type) {
    case JopUtility.TRACE:
      return null;
    case JopUtility.GRAPH:
      for ( int i = 0; i < frames.size(); i++) {
	Object o = frames.get(i);
	String utilityName = ((JopUtilityIfc) o).getUtilityName();
        if ( aref != null) {
	  PwrtAttrRef utilityAref = ((JopUtilityIfc) o).getUtilityAttrRef();
	  if ( ((JopUtilityIfc) o).getUtilityType() == type &&
	       utilityName.equals( name) &&
	       utilityAref != null &&
	       utilityAref.isEqual( aref))
	    return o;    
        }
        else {
	  if ( ((JopUtilityIfc) o).getUtilityType() == type &&
	       utilityName.equals( name))
	    return o;    
	}
      }
      return null;
    default:
      return null;
    }

  }

  public Object getUtilityFirst( int type) {
    for ( int i = 0; i < frames.size(); i++) {
      Object o = frames.get(i);
      if ( ((JopUtilityIfc) o).getUtilityType() == type)
	return o;
    }
    return null;
  }

  public Object getUtilityNext( int type, Object previous) {
    boolean found = false;
    for ( int i = 0; i < frames.size(); i++) {
      Object o = frames.get(i);
      if ( found) {
        if ( ((JopUtilityIfc) o).getUtilityType() == type)
	  return o;
      }
      else {
        if ( ((JopUtilityIfc) o).getUtilityType() == type &&
	     o == previous)
	  found = true;
      }
    }
    return null;
  }

  public int executeCommand( String command) {
    return JopSpider.command( session, command);
  }

  public boolean isApplet() {
    return ( root instanceof JApplet);
  }
  public boolean isApplication() {
    return !( root instanceof JApplet);
  }
  public boolean isOpWindowApplet() {
    return ( root instanceof JopOpWindowApplet);
  }
  public boolean isOpWindowFrame() {
    return ( root instanceof JopOpWindowFrame);
  }

  public void openSearch(String object){
    HistSearch HSWindow = new HistSearch(object,session );
    HSWindow.pack();        
    HSWindow.setVisible(true);
  }

  public void setOpWindowLabelText( String text) {
    if ( isOpWindowApplet())
      ((JopOpWindowApplet)root).setLabelText( text);
    else if ( isOpWindowFrame())
      ((JopOpWindowFrame)root).setLabelText( text);
  }

  public void setOpWindowLanguage( int language) {
    if ( isOpWindowApplet())
      ((JopOpWindowApplet)root).setLanguage( language);
    else if ( isOpWindowFrame())
      ((JopOpWindowFrame)root).setLanguage( language);
  }

  public void openTrend( String[] trendList) {
    new JopXttTrend( session, trendList);
  }

  public void openFast( String fastObject) {
    new JopXttFast( session, fastObject);
  }
  
}




