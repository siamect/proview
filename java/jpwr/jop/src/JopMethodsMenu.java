/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jop;
import jpwr.rt.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.event.*;

/**
   Jop object methods menu.
 */
public class JopMethodsMenu implements ActionListener, PopupMenuListener,
       JopDynamic {

  JPopupMenu popup;
  JopSession session;
  Gdh gdh;
  JopMethods methods;
    //String object;
    //PwrtAttrRef aref;
    //int classid;
    //int utility;

  JopMethodsMenu( JopSession session, String object, int utility, 
		  Component invoker, int x, int y) {
    this.session = session;
    gdh = session.getEngine().gdh;

    if ( object == null)
      return;
    CdhrAttrRef oret = gdh.nameToAttrRef( object);
    if ( oret.evenSts()) return;

    CdhrTypeId cret = gdh.getAttrRefTid( oret.aref);
    if ( cret.evenSts()) return;

    System.out.println( "Menu object: " + object + " cid " + cret.typeId);

    methods = new JopMethods( session, oret.aref, object, cret.typeId, utility);

    popup = new JPopupMenu();

    JMenuItem item;

    if ( methods.openGraphFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("Graph")));
      item.addActionListener( this);
    }

    if ( methods.openObjectGraphFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("Object Graph")));
      item.addActionListener( this);
    }

    if ( methods.trendFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("Trend")));
      item.addActionListener( this);
    }

    if ( methods.fastFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("Fast")));
      item.addActionListener( this);
    }

    if ( methods.helpFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("Help")));
      item.addActionListener( this);
    }

    if ( methods.photoFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("Photo")));
      item.addActionListener( this);
    }
 
    if ( methods.dataSheetFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("DataSheet")));
      item.addActionListener( this);
    }

    if ( methods.rtNavigatorFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("Navigator")));
      item.addActionListener( this);
    }

    if ( methods.openTraceFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("Open Plc")));
      item.addActionListener( this);
    }

    if ( methods.openCrossrefFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("Crossreferences")));
      item.addActionListener( this);
    }

    if ( methods.helpClassFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("Help Class")));
      item.addActionListener( this);
    }
 
    if ( methods.circuitDiagramFilter()) {
      popup.add( item = new JMenuItem( JopLang.transl("CircuitDiagram")));
      item.addActionListener( this);
    }
 
    if ( methods.histEventFilter()){
      popup.add(item= new JMenuItem( JopLang.transl("Hist Event...")));
      item.addActionListener( this);
    }

    if ( methods.simulateFilter()){
      popup.add(item= new JMenuItem( JopLang.transl("Simulate")));
      item.addActionListener( this);
    }
    popup.addPopupMenuListener( this);
    popup.show( invoker, x,  y);
    session.getEngine().add(this);
  }

  public void popupMenuWillBecomeVisible( PopupMenuEvent e) {}
  public void popupMenuWillBecomeInvisible( PopupMenuEvent e) {}
  public void popupMenuCanceled( PopupMenuEvent e) {}

  public void actionPerformed( ActionEvent event) {

    if ( event.getActionCommand().equals(JopLang.transl("Navigator"))) {
      methods.rtNavigator();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("Open Plc"))) {
      methods.openTrace();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("Graph"))) {
      methods.openGraph();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("Trend"))) {
      methods.trend();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("Fast"))) {
      methods.fast();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("Help"))) {
      methods.help();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("Photo"))) {
      methods.photo();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("DataSheet"))) {
      methods.dataSheet();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("Crossreferences"))) {
      methods.openCrossref();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("Help Class"))) {
      methods.helpClass();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("CircuitDiagram"))) {
      methods.circuitDiagram();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("Object Graph"))) {
      methods.openObjectGraph();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("Hist Event..."))) {
      methods.histEvent();
    }
    else if ( event.getActionCommand().equals(JopLang.transl("Simulate"))) {
      methods.simulate();
    }
  }  

  public boolean isVisible() {
    return popup.isVisible();
  }
  public void repaint() {
    popup.repaint();
  }

  public void dynamicUpdate( boolean animationOnly) {
    if ( !isVisible())
      session.getEngine().remove(this);
    else
      repaint();
  }
  public void dynamicOpen() {}
  public void dynamicClose() {}
  public Object dynamicGetRoot() {
    return this;
  }

}











