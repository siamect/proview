/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jop;
import java.beans.*;

/**
   Deprecated. Should be removed.
 */

public class ClickActionEditor extends PropertyEditorSupport {

  public ClickActionEditor() {
  }
  private static String[] tagStrings = { "Set", "Reset", "Toggle", "Command", };
  public String[] getTags() {
    return tagStrings;
  }
  public String getJavaInitializationString() {
    switch (((Number)getValue()).intValue()) {
      default:
      case Jop.BUTTON_ACTION_SET:
        return "Jop.BUTTON_ACTION_SET";
      case Jop.BUTTON_ACTION_RESET:
       return "Jop.BUTTON_ACTION_RESET";
      case Jop.BUTTON_ACTION_TOGGLE:
        return "Jop.BUTTON_ACTION_TOGGLE";
      case Jop.BUTTON_ACTION_COMMAND:
        return "Jop.BUTTON_ACTION_COMMAND";
    }
  }
  public void setAsText(String s) throws IllegalArgumentException {
    if (s.equals("Set")) setValue( new Integer(Jop.BUTTON_ACTION_SET));
    else if (s.equals("Reset")) setValue( new Integer(Jop.BUTTON_ACTION_RESET));
    else if (s.equals("Toggle")) setValue( new Integer(Jop.BUTTON_ACTION_TOGGLE));
    else if (s.equals("Command")) setValue( new Integer(Jop.BUTTON_ACTION_COMMAND));
    else throw new IllegalArgumentException(s);
  }
}
