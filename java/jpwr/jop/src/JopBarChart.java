/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.awt.font.*;
import javax.swing.*;
import javax.swing.Timer;
import java.awt.event.*;
import jpwr.rt.*;

/**
   Jop bar chart component.
 */
public class JopBarChart extends JComponent implements GeComponentIfc, 
            JopDynamic, JopConfirm, ActionListener {
  static final long serialVersionUID = 4437919259567727078L;
  Dimension size;
  Timer timer = new Timer(500, this);
  Object root;
  JopSession session;
  JopEngine en;
  public GeDyn dd = new GeDyn( this);
  public JopBarChart( JopSession session)
  {
    this.session = session;
    dd.setSession( session);
    size = new Dimension( 102, 36);
    timer.start();
    oldValueF = new float[BARCHART_MAX_BARSEGMENTS][];

  }
  public void actionPerformed(ActionEvent e) {
    boolean engine_found = false;

    root = getTopLevelAncestor();
    if ( root != null) {
      if ( root instanceof JopApplet)
	session = ((JopApplet)root).session;
      else if ( root instanceof JopFrame)
	session = ((JopFrame) root).session;
      en = session.getEngine();

      if ( !en.isReady())
        return;
      en.add(this);
      engine_found = true;
    }

    if ( engine_found) {
      timer.stop();
      timer = null;
      if ( dd.actionType != 0 && en.gdh.isAuthorized( dd.access)) {
        this.addMouseListener(new MouseAdapter() {
          public void mouseReleased(MouseEvent e) {
	    if ( e.isPopupTrigger())
	      dd.action( GeDyn.eEvent_MB3Press, e);
	    else if ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0 &&
		     en.gdh.isAuthorized( dd.access))
	      dd.action( GeDyn.eEvent_MB1Up, e);
	  }

          public void mousePressed(MouseEvent e) {
	    if ( e.isPopupTrigger())
	      dd.action( GeDyn.eEvent_MB3Press, e);
	    else if ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0 &&
		     en.gdh.isAuthorized( dd.access))
	      dd.action( GeDyn.eEvent_MB1Down, e);
	  }
          public void mouseClicked(MouseEvent e) {
	    if ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0 &&
		en.gdh.isAuthorized( dd.access))
	      dd.action( GeDyn.eEvent_MB1Click, e);
	  }
        });
      }
    }
  }
  public void confirmNo() {}
  public void confirmYes() {
    PwrtStatus sts;
    String attrName;

    dd.confirmedAction( GeDyn.eEvent_MB1Click, null);
  }

  // GeComponents Ifc
  public void tsetFillColor( int fillColor) {}
  public void tsetColorTone( int colorTone) {}
  public void tsetBorderColor( int borderColor) {}
  public void tsetTextColor( int borderColor) {}
  public void setColorInverse( int colorInverse) {} 
  public void resetFillColor() {}
  public void resetColorTone() {}
  public void resetBorderColor() {}
  public void resetTextColor() {}
  public String getAnnot1() { return new String();}
  public void setVisibility( int visibility) {}
  public void setAnnot1( String s) {}
  public void setLastPage() {}
  public void setFirstPage() {}
  public void setPage( int page) {}
  public int setNextPage() { return 1;}
  public int setPreviousPage() { return 1;}
  public Object getDd() { return dd;}
  public void setFillLevel( float fillLevel) {}
  public void setLevelDirection( int levelDirection) {}
  public void setLevelColorTone( int levelColorTone) {}
  public void setLevelFillColor( int levelFillColor) {}

  public static final int BARCHART_MAX_BARSEGMENTS = 12;
  int verticalLines = 0;
  int horizontalLines = 0;
  int lineColor = 9999;
  int fillColor = 9999;
  int borderColor = 9999;
  int drawFill = 0;
  int drawBorder = 0;
  int lineWidth = 1;
  int barBorderWidth = 1;
  float[][] segmentSize = new float[BARCHART_MAX_BARSEGMENTS][];
  float minValue = 0;
  float maxValue = 100;
  float[][] oldValueF;
  public void setVerticalLines( int verticalLines) {
    this.verticalLines = verticalLines;
  }
  public void setHorizontalLines( int horizontalLines) {
    this.horizontalLines = horizontalLines;
  }
  public void setLineColor( int lineColor) {
    this.lineColor = lineColor;
  }
  public void setFillColor( int fillColor) {
    this.fillColor = fillColor;
  }
  public int getFillColor() {
    return fillColor;
  }
  public void setBorderColor( int borderColor) {
    this.borderColor = borderColor;
  }
  public int getBorderColor() {
    return borderColor;
  }
  public void setDrawFill( int drawFill) {
    this.drawFill = drawFill;
  }
  public int getDrawFill() {
    return drawFill;
  }
  public void setDrawBorder( int drawBorder) {
    this.drawBorder = drawBorder;
  }
  public int getDrawBorder() {
    return drawBorder;
  }
  public void setLineWidth( int lineWidth) {
    this.lineWidth = lineWidth;
  }
  public int getLineWidth() {
    return lineWidth;
  }
  public void setBarBorderWidth( int barBorderWidth) {
    this.barBorderWidth = barBorderWidth;
  }
  public int getBarBorderWidth() {
    return barBorderWidth;
  }
  public int bars;
  public int barSegments;
  public int[] barColors;
  public double rotate;
  public int shadow;
  public double shadowWidth;
  public int gradient;
  public int gc1;
  public int gc2;
  public void setBars( int bars) { this.bars = bars;}
  public void setBarSegments( int barSegments) { this.barSegments = barSegments;}
  public void setBarColors( int[] barColors) { this.barColors = barColors;}
  public void setRotate( double rotate) { this.rotate = rotate;}
  public double getRotate() { return rotate;}
  public void setShadow( int shadow) { this.shadow = shadow;}
  public void setShadowWidth( double shadowWidth) { this.shadowWidth = shadowWidth;}
  public void setGradient( int gradient) { this.gradient = gradient;}
  public void setGc1( int gc1) { this.gc1 = gc1;}
  public void setGc2( int gc2) { this.gc2 = gc2;}
  Shape[] shapes;
  Shape[] borderShapes;
  Shape[] lineShapes;
  public void paint(Graphics g1) {
    Graphics2D g = (Graphics2D) g1;
    Component c;
    Point p;
    paintComponent(g);
    for ( int i = 0; i < getComponentCount(); i++) {
      AffineTransform save = g.getTransform();
      c = getComponent(i);
      p = c.getLocation();
      g.translate((int)p.getX(), (int)p.getY());
      c.paint(g);
      g.setTransform(save);
    }
  }
  float original_width = 0;
  float original_height = 0;
  float oldWidth;
  float oldHeight;
  boolean update = true;
  public void paintComponent(Graphics g1) {
    
    Graphics2D g = (Graphics2D) g1;
    float width = getWidth();
    float height = getHeight();
    AffineTransform save = g.getTransform();
    float barWidth = width  / bars;
    int i;
    int j;
    boolean updateSize = false;
	
    if ( original_width == 0 && original_height == 0) {
      original_width = width;
      original_height = height;
      shapes = new Shape[bars * barSegments];
      borderShapes = new Shape[bars];
      lineShapes = new Shape[1 + horizontalLines + verticalLines];
    }

    if ( oldWidth != width || oldHeight != height) {
      oldWidth = width;
      oldHeight = height;
      updateSize = true;
    }

    if ( updateSize) {
      lineShapes[0] = new Rectangle2D.Float( 0F, 0F, width, height);
      for ( i = 0; i < verticalLines; i++)
	lineShapes[1+i] = new Line2D.Float( width / (verticalLines + 1) * (i+1), 0F, 
					   width / (verticalLines + 1) * (i+1), height);
      for ( i = 0; i < horizontalLines; i++)
	lineShapes[1+verticalLines+i] = new Line2D.Float( 0F, height / (horizontalLines + 1) * (i+1),
							 width, height / (horizontalLines + 1) * (i+1));
    }

    if ( update || updateSize) {
      update = false;
      float x1 = 0;
      float y1 = height;
      float x2 = barWidth;
      float y2 = height;
      for ( i = 0; i < bars; i++) {
	y1 = height;
	y2 = height;
	for ( j = 0; j < barSegments; j++) {
	  if ( segmentSize[j] == null)
	    continue;

	  if ( segmentSize[j][i] == 0 || y2 <= 0) {
	    shapes[i*barSegments + j] = null;
	    continue;
	  }
          y1 -= segmentSize[j][i] / (maxValue - minValue) * height;
	  if ( y1 < 0)
	    y1 = 0;

	  shapes[i*barSegments + j] = new Rectangle2D.Float( x1, y1, x2 - x1, y2 - y1);
	  y2 = y1;
        }
	borderShapes[i] = new Rectangle2D.Float( x1, y1, barWidth, height - y1);
	x1 = x2;
	x2 += barWidth;
      }
    }
    //g.transform( AffineTransform.getScaleInstance( width/original_width,
    //						   height/original_height));

    g.setColor(GeColor.getColor( 0, fillColor)); 
    g.fill( lineShapes[0]);

    for ( i = 0; i < bars; i++) {
      for ( j = 0; j < barSegments; j++) {
        if ( shapes[i * barSegments + j] == null)
	  continue;

        g.setStroke( new BasicStroke((float)lineWidth));
        if ( gradient == GeGradient.eGradient_No) {
          g.setColor(GeColor.getColor( 0, barColors[j]));
  	  g.fill( shapes[i * barSegments + j]);
        }
        else {
          GeGradient.paint( g, gradient, gc1, gc2, i * barWidth, 0F, barWidth, height, false, barColors[j], 
			    0, 0, 0, 0, barColors[j], false);
	  g.fill( shapes[i * barSegments + j]);
	}
      }
    }

    g.setColor(GeColor.getColor(0, lineColor));
    for ( i = 0; i < verticalLines; i++)
      g.draw( lineShapes[1+i]);
    for ( i = 0; i < horizontalLines; i++)
      g.draw( lineShapes[1+verticalLines+i]);

    g.setColor(GeColor.getColor(0, borderColor));
    for ( i = 0; i < bars; i++)
      g.draw( borderShapes[i]);
    g.draw( lineShapes[0]);
    
    //g.setTransform(save);
  }
  public Dimension getPreferredSize() { return size;}
  public Dimension getMinimumSize() { return size;}
  int lowColor = 0;
  public void setLowColor( int lowColor) { this.lowColor = lowColor;}
  public int getLowColor() { return lowColor;}
  String[] pwrAttribute = new String[BARCHART_MAX_BARSEGMENTS];
  public void setPwrAttribute( String[] pwrAttribute) { this.pwrAttribute = pwrAttribute;}
  public String[] getPwrAttribute() { return pwrAttribute;}
  float valueColor;
  float valueColorOld;
  boolean firstScan = true;
  GdhrRefObjectInfo[] retAttr = new GdhrRefObjectInfo[BARCHART_MAX_BARSEGMENTS];
  public void setMinValue( float minValue) {
    this.minValue = minValue;
  }
  public float getMinValue() {
    return minValue;
  }
  public void setMaxValue( float maxValue) {
    this.maxValue = maxValue;
  }
  public float getMaxValue() {
    return maxValue;
  }
  public Object dynamicGetRoot() {
    return root;
  }
  public void update() {
    valueColorOld = -10000;
    dynamicUpdate( false);
  }
  public void dynamicOpen() {

    if ( en.isInstance())
      dd.setInstance( en.getInstance());
    for ( int i = 0; i < barSegments; i++) {
      if ( pwrAttribute[i] != null) {
	String attrName = dd.getAttrName(pwrAttribute[i]);
	retAttr[i] = en.gdh.refObjectInfo( attrName);
	if ( retAttr[i].evenSts()) {
	  System.out.println( "refObjectInfoError attribute[" + i + "]");
	  pwrAttribute[i] = null;
	}
	if ( retAttr[i].typeId == Pwr.eType_Float32)
          oldValueF[i] = new float[bars];
	else
	  pwrAttribute[i] = null;
      }
    }
  }
  public void dynamicClose() {
    for ( int i = 0; i < BARCHART_MAX_BARSEGMENTS; i++) {
      if ( pwrAttribute[i] != null)
        en.gdh.unrefObjectInfo( retAttr[i].refid);
    }
  }
  public void dynamicUpdate( boolean animationOnly) {
    if ( maxValue == minValue) 
      return;
    if ( animationOnly)
      return;

    for ( int i = 0; i < barSegments; i++) {
      if ( pwrAttribute[i] != null)
	segmentSize[i] = en.gdh.getObjectRefInfoFloatArray( retAttr[i].id, retAttr[i].elements);
      else {
	if ( segmentSize[i] == null)
	  segmentSize[i] = new float[bars];
	else {
	  for ( int j = 0; j < bars; j++)
	    segmentSize[i][j] = 0;
	}
      }
    }

    update = false;
    for ( int i = 0; i < barSegments; i++) {
      if ( pwrAttribute[i] == null)
	continue;
      for ( int j = 0; j < bars; j++) {
	if ( segmentSize[i][j] != oldValueF[i][j]) {
	  oldValueF[i][j] = segmentSize[i][j];
	  update = true;
	}
      }
    }

    if ( update || firstScan)
      repaint();

    if ( firstScan)
      firstScan = false;
  }
  public void repaintForeground() {
    Graphics g = getGraphics();
    if ( g == null) {
      System.out.println("repaintForeground: can't get Graphic object");
      return;
    }
    paintComponent(g);
    paintChildren(g);
  }
}
