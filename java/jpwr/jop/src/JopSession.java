/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jop;
import jpwr.rt.*;
import java.lang.*;

/**
   Wrapper to the JopSessionRep class.
   @see JopSessionRep
   @see JopSessionIfc
 */
public class JopSession {
  public JopSession() {
  }

  Object sessionRep;

  // New implementation
  public JopSession( JopEngine engine, Object rootObject) {
    // Create a JopSessionRep object which class is not known by the compiler
    try {
      Class clazz = Class.forName( "jpwr.jop.JopSessionRep");
      try {
        sessionRep = clazz.newInstance();
      }
      catch ( InstantiationException e) {
        System.out.println("InstatiationException");
      }
      catch ( IllegalAccessException e) {
        System.out.println("IllegalAccessException");
      }
    }
    catch (ClassNotFoundException e) {
      System.out.println("Class not found");
    }

    ((JopSessionIfc) sessionRep).setSession(this);
    ((JopSessionIfc) sessionRep).setRoot(rootObject);
    ((JopSessionIfc) sessionRep).setEngine(engine);
  }

  public Object getRoot() {
    return ((JopSessionIfc) sessionRep).getRoot();
  }

  public JopEngine getEngine() {
    return ((JopSessionIfc) sessionRep).getEngine();
  }

  public void setLang( String lang) {
    ((JopSessionIfc) sessionRep).setLang( lang);
  }

  public String getLang() {
    return ((JopSessionIfc) sessionRep).getLang();
  }

  public Gdh getGdh() {
    return ((JopSessionIfc) sessionRep).getEngine().gdh;
  }

  public void addUtility( Object utility) {
    ((JopSessionIfc) sessionRep).addUtility( utility);
  }

  public void removeUtility( Object utility) {
    ((JopSessionIfc) sessionRep).removeUtility( utility);
  }

  public void setNavigator( Object navigator) {
    ((JopSessionIfc) sessionRep).setNavigator( navigator);
  }

  public void openNavigator( PwrtObjid oid) {
    ((JopSessionIfc) sessionRep).openNavigator( oid);
  }

  public void openAlarmList() {
    ((JopSessionIfc) sessionRep).openAlarmList();
  }

  public void openEventLog() {
    ((JopSessionIfc) sessionRep).openEventLog();
  }

  public void openLogin() {
    ((JopSessionIfc) sessionRep).openLogin();
  }

  public void openLanguage() {
    ((JopSessionIfc) sessionRep).openLanguage();
  }

  public void openGraphFrame( String name, String instance, boolean scrollbar, boolean classGraph) {
    ((JopSessionIfc) sessionRep).openGraphFrame( name, instance, scrollbar, classGraph);
  }

  public void openFlowFrame( PwrtObjid oid, String center) {
    ((JopSessionIfc) sessionRep).openFlowFrame( oid, center);
  }

  public void openCrrFrame( String name) {
    ((JopSessionIfc) sessionRep).openCrrFrame( name);
  }

  public void executeCommand( String command) {
    ((JopSessionIfc) sessionRep).executeCommand( command);
  }

  public boolean isApplet() {
    return ((JopSessionIfc) sessionRep).isApplet();
  }

  public boolean isApplication() {
    return ((JopSessionIfc) sessionRep).isApplication();
  }

  public boolean isOpWindowApplet() {
    return ((JopSessionIfc) sessionRep).isOpWindowApplet();
  }

  public void openSearch( String object ){
    ((JopSessionIfc) sessionRep).openSearch(object);
  }

  public void setOpWindowLabelText( String text ){
    ((JopSessionIfc) sessionRep).setOpWindowLabelText( text);
  }

  public void setOpWindowLanguage( int language ){
    ((JopSessionIfc) sessionRep).setOpWindowLanguage( language);
  }

  public void openTrend( String[] trendList) {
    ((JopSessionIfc) sessionRep).openTrend( trendList);
  }

  public void openFast( String fastObject) {
    ((JopSessionIfc) sessionRep).openFast( fastObject);
  }

  public Object getUtility( int type, PwrtObjid objid, String name) {
      return ((JopSessionIfc) sessionRep).getUtility( type, objid, name);
  }

  public Object getUtilityFirst( int type) {
      return ((JopSessionIfc) sessionRep).getUtilityFirst( type);
  }

  public Object getUtilityNext( int type, Object o) {
      return ((JopSessionIfc) sessionRep).getUtilityNext( type, o);
  }
}










