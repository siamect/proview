/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import jpwr.rt.*;
import java.awt.event.*;
import javax.swing.*;

/**
   Ge action type ValueInput.
*/
public class GeDynValueInput extends GeDynElem {
  double minValue;
  double maxValue;
  String minValueAttr;
  String maxValueAttr;

  boolean attrFound = false;
  int typeId;
  GeDynValue valueElement;

  public GeDynValueInput( GeDyn dyn, double minValue, double maxValue,
			  String minValueAttr, String maxValueAttr) {
    super( dyn, GeDyn.mDynType_No, GeDyn.mActionType_ValueInput);
    this.minValue = minValue;
    this.maxValue = maxValue;
    this.minValueAttr = minValueAttr;
    this.maxValueAttr = maxValueAttr;
  }
  public void connect() {
    // Find the value element
    if ( dyn.elements == null)
      return;

    for ( int i = 0; i < dyn.elements.length; i++) {
      if ( dyn.elements[i].getDynType() == GeDyn.mDynType_Value) {
	valueElement = (GeDynValue)dyn.elements[i];
	typeId = valueElement.typeId;
	attrFound = valueElement.attrFound;
	break;
      }
    }
    if ( !attrFound)
      System.out.println("ValueInput: attribute not found");
  }
  public void disconnect() {
  }
  public void action( int eventType, MouseEvent e) {
    switch ( eventType) {
    case GeDyn.eEvent_FocusLost: {
      if (!attrFound)
	break;

      valueElement.firstScan = true;
      break;
    }
    case GeDyn.eEvent_ValueChanged: {
      if (!attrFound)
	break;

      if ( (dyn.actionType & GeDyn.mActionType_Confirm) != 0)
	break;

      String text = ((JTextField)dyn.comp).getText();
      PwrtStatus sts;

      try {
	double minval = 0;
        double maxval = 0;
	if ( minValueAttr != null) {
	  String attrName = dyn.getAttrName( minValueAttr);
	  int tId = GeDyn.getTypeId( minValueAttr);
	  if ( tId < 0 || tId == Pwr.eType_Float32) {
	    CdhrFloat ret = dyn.en.gdh.getObjectInfoFloat( attrName);
	    if ( ret.evenSts()) {
	      System.out.println( "ValueInput " + attrName);
	      return;
	    }
	    minval = ret.value;
	  }
	}
	else
	  minval = minValue;

	if ( maxValueAttr != null) {
	  String attrName = dyn.getAttrName( maxValueAttr);
	  int tId = GeDyn.getTypeId( maxValueAttr);
	  if ( tId < 0 || tId == Pwr.eType_Float32) {
	    CdhrFloat ret = dyn.en.gdh.getObjectInfoFloat( attrName);
	    if ( ret.evenSts()) {
	      System.out.println( "ValueInput " + attrName);
	      return;
	    }
	    maxval = ret.value;
	  }
	}
	else
	  maxval = maxValue;

	if ( typeId == Pwr.eType_Float32) {
	  float inputValue = Float.parseFloat( text.trim());
	  valueElement.oldValueF = inputValue;
	  if ( minval == 0 && maxval == 0) {
	    String attrName = dyn.getAttrNameNoSuffix( valueElement.attribute);
	    if ( !valueElement.localDb)
	      sts = dyn.en.gdh.setObjectInfo( attrName, inputValue);
	    else
	      sts = dyn.en.ldb.setObjectInfo( dyn.comp.dynamicGetRoot(), attrName, inputValue);
	    if ( sts.evenSts())
	      System.out.println( "setObjectInfoError " + sts);
	  }
	  else {
	    if ( inputValue >= minval && inputValue <= maxval ) {
	      String attrName = dyn.getAttrNameNoSuffix( valueElement.attribute);
	      if ( !valueElement.localDb)
	        sts = dyn.en.gdh.setObjectInfo( attrName, inputValue);
	      else
	        sts = dyn.en.ldb.setObjectInfo( dyn.comp.dynamicGetRoot(), attrName, inputValue);
	      if ( sts.evenSts())
		System.out.println( "setObjectInfoError " + attrName + " " + sts);
	    }
	    else
	      valueElement.oldValueF = -10000;
	  }
	}
	else if ( typeId == Pwr.eType_Int32 ||
		  typeId == Pwr.eType_UInt32 ||
		  typeId == Pwr.eType_Int16 ||
		  typeId == Pwr.eType_UInt16 ||
		  typeId == Pwr.eType_Int8 ||
		  typeId == Pwr.eType_UInt8) {
	  int inputValue = Integer.parseInt( text.trim(), 10);
	  valueElement.oldValueI = inputValue;
	  if ( minval == 0 && maxval == 0) {
	    String attrName = dyn.getAttrNameNoSuffix( valueElement.attribute);        
	    if ( !valueElement.localDb)
	      sts = dyn.en.gdh.setObjectInfo( attrName, inputValue);
	    else
	      sts = dyn.en.ldb.setObjectInfo( dyn.comp.dynamicGetRoot(), attrName, inputValue);
	    if ( sts.evenSts())
	      System.out.println( "setObjectInfoError " + sts);
	  }
	  else {
	    if ( inputValue >= minval && inputValue <= maxval ) {
	      String attrName = dyn.getAttrNameNoSuffix( valueElement.attribute);        
	      if ( !valueElement.localDb)
	        sts = dyn.en.gdh.setObjectInfo( attrName, inputValue);
	      else
	        sts = dyn.en.ldb.setObjectInfo( dyn.comp.dynamicGetRoot(), attrName, inputValue);
	      if ( sts.evenSts())
		System.out.println( "setObjectInfoError " + sts);
	    }
	    else
	      valueElement.oldValueI = -10000;
	  }
	}
	else if ( typeId == Pwr.eType_Boolean) {
	  int inputValueInt = Integer.parseInt( text.trim(), 10);
	  boolean inputValue;
	  if ( inputValueInt == 0)
	    inputValue = false;
	  else if ( inputValueInt == 1)
	    inputValue = true;
          else
	    break;

	  valueElement.oldValueB = inputValue;
	  String attrName = dyn.getAttrNameNoSuffix( valueElement.attribute);
	  if ( !valueElement.localDb)
	    sts = dyn.en.gdh.setObjectInfo( attrName, inputValue);
	  else
	    sts = dyn.en.ldb.setObjectInfo( dyn.comp.dynamicGetRoot(), attrName, inputValue);
	  if ( sts.evenSts())
	    System.out.println( "setObjectInfoError " + sts);
	}
	else if ( typeId == Pwr.eType_String) {
	  valueElement.oldValueS = text;
	  String attrName = dyn.getAttrNameNoSuffix( valueElement.attribute);        
	  if ( !valueElement.localDb)
	    sts = dyn.en.gdh.setObjectInfo( attrName, text);
	  else
	    sts = dyn.en.gdh.setObjectInfo( attrName, text);
	  if ( sts.evenSts())
	    System.out.println( "setObjectInfoError " + sts);
	}
      }
      catch(NumberFormatException ex) {
	  System.out.println( ex.toString() );
      }
      break;
    }
    }
  }
}









