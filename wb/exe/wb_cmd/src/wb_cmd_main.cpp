/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_cmd.c -- command file processing
   The main program of pwrc.  */

#include <iostream>

#include "pwr.h"
#include "pwr_class.h"

#include "co_dcli.h"
#include "co_string.h"

#include "rt_load.h"

#include "cow_login.h"
#include "cow_msgwindow.h"

#include "ge.h"

#include "wb_cmdc.h"
#include "wb_env.h"
#include "wb_foe_msg.h"
#include "wb_lfu.h"
#include "wb_pal.h"
#include "wb_utl.h"
#include "wb_volume.h"
#include "wb_vrepmem.h"
#include "wb_watt.h"
#include "wb_wnav_item.h"
#include "wb_wnav_msg.h"

char Cmd::cmd_volume[80];
char* Cmd::cmd_volume_p = 0;
char Cmd::cmd_classvolume[80] = "";
unsigned int Cmd::cmd_options = 0;

void Cmd::usage()
{
  std::cout << "\n\n"
            << "pwrc        Proview workbench commands\n\n"
            << "Arguments:\n"
            << "  -a             Load all configured databases.\n"
            << "  -v 'volume'    Load volume 'volume'.\n"
            << "  -h             Print usage.\n\n"
            << "  Other arguments are treated as a command and passed to the "
               "command parser\n"
            << "  If a command is given as an argument, the command will be "
               "executed and the\n"
            << "  program is then terminated.\n"
            << "  If no command is given, pwrc will prompt for a command.\n\n"
            << "Examples:\n"
            << "  $ pwrc -v MyVolume\n"
            << "  pwrc>\n\n"
            << "  $ pwrc -a show volume\n"
            << "  directory     Attached Db  $DirectoryVolume 254.254.254.253\n"
            << "  MyVolume               Db  $RootVolume        0.1.99.20\n"
            << "  $\n";
}

int Cmd::get_wbctx(void* ctx, ldh_tWBContext* wbctx)
{
  Cmd* cmd = (Cmd*)ctx;
  int sts;

  if (cmd->wbctx) {
    *wbctx = cmd->wbctx;
    sts = 1;
  } else {
    sts = ldh_OpenWB(&cmd->wbctx, cmd_volume_p, cmd_options);
    if (ODD(sts))
      *wbctx = cmd->wbctx;
  }
  return sts;
}

int Cmd::attach_volume_cb(void* ctx, pwr_tVolumeId volid, int pop)
{
  Cmd* cmd = (Cmd*)ctx;
  int sts = 0;
  pwr_tVolumeId vid;
  pwr_tClassId classid;

  if (cmd->ldhses) {
    //    cmd->wnav->message( 'E', "Other volume is already attached");
    return WNAV__VOLATTACHED;
  }

  if (!cmd->wbctx) {
    sts = get_wbctx((void*)cmd, &cmd->wbctx);
    if (EVEN(sts))
      return sts;
  }

  if (volid == 0) {
    if (cmd_volume_p != 0) {
      // Attach argument volume
      sts = ldh_VolumeNameToId(cmd->wbctx, cmd_volume_p, &volid);
    }
    if (cmd_volume_p == 0 || EVEN(sts)) {
      // Attach first rootvolume, or if no rootvolume exist some other volume
      sts = ldh_GetVolumeList(cmd->wbctx, &vid);
      while (ODD(sts)) {
        volid = vid;
        sts = ldh_GetVolumeClass(cmd->wbctx, vid, &classid);
        if (EVEN(sts))
          return sts;

        if (classid == pwr_eClass_RootVolume)
          break;
        sts = ldh_GetNextVolume(cmd->wbctx, vid, &vid);
      }
      if (volid == 0)
        return sts;
    }
  }

  if (!streq(Cmd::cmd_classvolume, "")) {
    // Load volume as extern
    pwr_tFileName filename;
    wb_erep* erep = (wb_erep*)(*(wb_env*)cmd->wbctx);

    sprintf(filename, "$pwrp_db/%s.wb_load", Cmd::cmd_classvolume);
    dcli_translate_filename(filename, filename);

    wb_vrepmem* vrep = new wb_vrepmem(erep, 0);
    vrep->loadWbl(filename, &sts);
    if (EVEN(sts)) {
      delete vrep;
      return sts;
    }
    erep->addExtern(&sts, vrep);
    cmd->volid = vrep->vid();
    cmd->volctx = (ldh_tVolume*)new wb_volume(vrep);
  } else {
    cmd->volid = volid;

    // Open ldh session
    sts = ldh_AttachVolume(cmd->wbctx, cmd->volid, &cmd->volctx);
    if (EVEN(sts))
      return sts;
  }

  sts = ldh_OpenSession(
      &cmd->ldhses, cmd->volctx, ldh_eAccess_ReadWrite, ldh_eUtility_Pwr);
  if (EVEN(sts)) {
    // Try read access
    sts = ldh_OpenSession(
        &cmd->ldhses, cmd->volctx, ldh_eAccess_ReadOnly, ldh_eUtility_Pwr);
    if (EVEN(sts))
      return sts;
  }

  cmd->wnav->volume_attached(cmd->wbctx, cmd->ldhses, pop);

  return 1;
}

int Cmd::detach_volume()
{
  int sts;

  if (!ldhses)
    return WNAV__NOVOLATTACHED;

  sts = ldh_CloseSession(ldhses);
  if (EVEN(sts)) {
    wnav->message('E', wnav_get_message(sts));
    return 0;
  }

  sts = ldh_DetachVolume(wbctx, volctx);
  if (EVEN(sts)) {
    wnav->message('E', wnav_get_message(sts));
    return 0;
  }
  volid = 0;
  volctx = 0;
  ldhses = 0;

  wnav->volume_detached();
  return 1;
}

int Cmd::detach_volume_cb(void* ctx)
{
  Cmd* cmd = (Cmd*)ctx;

  return cmd->detach_volume();
}

void Cmd::save_cb(void* ctx, int quiet)
{
  Cmd* cmd = (Cmd*)ctx;
  int sts;

  if (!cmd->ldhses) {
    cmd->wnav->message('E', "Cmd is not attached to a volume");
    return;
  }
  sts = ldh_SaveSession(cmd->ldhses);
  if (EVEN(sts)) {
    cmd->wnav->message('E', wnav_get_message(sts));
    return;
  }

  ldh_sVolumeInfo info;
  pwr_tCid volcid;

  ldh_GetVolumeInfo(ldh_SessionToVol(cmd->ldhses), &info);
  ldh_GetVolumeClass(cmd->wbctx, info.Volume, &volcid);

  if (volcid == pwr_eClass_DirectoryVolume) {
    sts = lfu_SaveDirectoryVolume(cmd->ldhses, 0, quiet);
    if (EVEN(sts)) {
      cmd->wnav->message('E', "Syntax error");
      return;
    }
  }
  cmd->wnav->message('E', "Session saved");
}

void Cmd::revert_ok(Cmd* cmd)
{
  int sts;

  sts = ldh_RevertSession(cmd->ldhses);
  if (EVEN(sts))
    cmd->wnav->message('E', wnav_get_message(sts));
  else
    cmd->wnav->message('E', "Session reverted");
}

void Cmd::revert_cb(void* ctx, int confirm)
{
  Cmd* cmd = (Cmd*)ctx;

  if (!cmd->ldhses) {
    cmd->wnav->message('E', "Cmd is not attached to a volume");
    return;
  }
  revert_ok(cmd);
}

void Cmd::close_cb(void* ctx)
{
  Cmd* cmd = (Cmd*)ctx;

  dcli_input_end(&cmd->chn, cmd->recall_buf);
  exit(0);
}

int Cmd::utilities(char* str)
{
  pwr_tCmd cmd;

  if (str_NoCaseStrcmp(str, "ge") == 0
      || str_NoCaseStrncmp(str, "ge ", 3) == 0) {
    strcpy(cmd, "wb_ge");
    strcat(cmd, &str[2]);
    system(cmd);
    return 1;
  } else if (str_NoCaseStrcmp(str, "s") == 0
      || str_NoCaseStrncmp(str, "s ", 2) == 0) {
    strcpy(cmd, "pwrs");
    strcat(cmd, &str[1]);
    system(cmd);
    return 1;
  } else if (str_NoCaseStrcmp(str, "a") == 0) {
    strcpy(cmd, "pwra");
    system(cmd);
    return 1;
  } else if (str_NoCaseStrcmp(str, "xhelp") == 0
      || str_NoCaseStrncmp(str, "xhelp ", 6) == 0) {
    char cmd_array[3][40];
    int nr;

    nr = dcli_parse(str, " ", "", (char*)cmd_array,
        sizeof(cmd_array) / sizeof(cmd_array[0]), sizeof(cmd_array[0]), 1);

    if (nr == 1)
      strcpy(cmd, "co_help");
    else if (nr > 1) {
      if (str_NoCaseStrncmp(cmd_array[1], "configurator", strlen(cmd_array[1]))
          == 0)
        strcpy(cmd, "co_help -c");
      else if (str_NoCaseStrncmp(
                   cmd_array[1], "designer's", strlen(cmd_array[1]))
          == 0)
        strcpy(cmd, "co_help -d");
      else if (str_NoCaseStrncmp(cmd_array[1], "ge", strlen(cmd_array[1])) == 0)
        strcpy(cmd, "co_help -g");
      else if (str_NoCaseStrncmp(cmd_array[1], "operator", strlen(cmd_array[1]))
          == 0)
        strcpy(cmd, "co_help -o");
      else if (str_NoCaseStrncmp(cmd_array[1], "project", strlen(cmd_array[1]))
          == 0)
        strcpy(cmd, "co_help");
      else {
        printf("Syntax error\n");
        exit(0);
      }
    }
    system(cmd);
    return 1;
  } else if (str_NoCaseStrcmp(str, "rtmon") == 0) {
    strcpy(cmd, "pwr_rtmon");
    system(cmd);
    return 1;
  }
  return 0;
}

Cmd::Cmd()
    : ctx_type(wb_eUtility_Cmd), ldhses(0), wbctx(0), volctx(0), volid(0),
      wnav(0), wb_type(0), recall_buf(0)
{
}

void Cmd::parse(int argc, char* argv[])
{
  pwr_tStatus sts;
  int i;
  pwr_tCmd str;
  int quiet = 0;

  /* If arguments, treat them as a command and then exit */
  // Open directory volume as default
  strcpy(Cmd::cmd_volume, "directory");
  Cmd::cmd_volume_p = Cmd::cmd_volume;

  str[0] = 0;
  for (i = 1; i < argc; i++) {
    if (argv[i][0] == '-') {
      switch (argv[i][1]) {
      case 'h':
        Cmd::usage();
        exit(0);
      case 'a':
        // Load all volumes
        Cmd::cmd_volume_p = 0;
        break;
      case 'v':
        // Load specified volume
        if (argc >= i) {
          strcpy(Cmd::cmd_volume, argv[i + 1]);
          Cmd::cmd_volume_p = Cmd::cmd_volume;
          i++;
          continue;
        } else
          std::cout << "Syntax error, volume is missing\n";
        break;
      case 'c':
        // Load specified class volume
        if (argc >= i) {
          strcpy(Cmd::cmd_classvolume, argv[i + 1]);
          i++;
          continue;
        } else
          std::cout << "Syntax error, volume is missing\n";
        break;
      case 'q':
        // Quiet
        quiet = 1;
        break;
      case 'i':
        // Ignore errors for dbs files not yet created
        Cmd::cmd_options = ldh_mWbOption_IgnoreDLoadError;
        MsgWindow::hide_info_messages(1);
        break;
      default:
        std::cout << "Unknown argument: " << argv[i] << '\n';
      }
    } else {
      if (str[0] != 0)
        strcat(str, " ");
      if (strlen(str) + strlen(argv[i]) >= sizeof(str)) {
        std::cout << "Command string too long\n";
        exit(0);
      }
      strcat(str, argv[i]);
    }
  }

  if (!quiet)
    std::cout << "\n\
Proview is free software; covered by the GNU General Public License.\n\
You can redistribute it and/or modify it under the terms of this license.\n\
\n\
Proview is distributed in the hope that it will be useful \n\
but WITHOUT ANY WARRANTY; without even the implied warranty of \n\
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the \n\
GNU General Public License for more details.\n\n";

  if (str[0] != 0) {
    int nr;
    char cmd_array[10][400];

    str_trim(str, str);
    nr = dcli_parse(str, ";", "", (char*)cmd_array,
        sizeof(cmd_array) / sizeof(cmd_array[0]), sizeof(cmd_array[0]), 1);

    if (nr == 1) {
      sts = utilities(cmd_array[0]);
      if (ODD(sts))
        exit(0);
    }

    for (int i = 0; i < nr; i++) {
      str_trim(cmd_array[i], cmd_array[i]);
      // printf( "-- Executing \"%s\"\n", cmd_array[i]);

      sts = wnav->command(cmd_array[i]);
      if (ODD(sts)) {
        sts = wnav->get_command_sts();
        if (EVEN(sts))
          exit(sts);
      } else
        exit(sts);
    }
    exit(0);
  }
  sts = dcli_input_init(&chn, &recall_buf);
  if (EVEN(sts))
    exit(sts);

  // Init input

  while (1) {
    /* get and parse the command */

    /* get input */
    dcli_qio_set_attr(&chn, 10);
    sts = dcli_get_input_command(&chn, "pwr> ", str, sizeof(str), recall_buf);
    dcli_qio_reset(&chn);

    //    sts = scanf( "%s", str);

    if (streq(str, ""))
      continue;

    str_trim(str, str);
    sts = wnav->command(str);
  }
}
