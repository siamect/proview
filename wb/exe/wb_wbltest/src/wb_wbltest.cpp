/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <string.h>

#include "co_time.h"

#include "wb_env.h"
#include "wb_error.h"
#include "wb_merep.h"
#include "wb_orepdbs.h"
#include "wb_orepwbl.h"
#include "wb_session.h"
#include "wb_vrepdb.h"

static pwr_tStatus iterFunc(void* udata, pwr_tOid oid, pwr_tCid cid,
    pwr_tOid poid, pwr_tOid fwsoid, pwr_tOid bswoid, pwr_tOid fchoid,
    pwr_tOid lchoid, char* name, pwr_tTime time, int rsize, int dsize);

int main(int argc, char* argv[])
{
  char fname[200];
  pwr_tStatus sts;

  if (argc <= 1)
    exit(0);
  strncpy(fname, argv[1], sizeof(fname));

  try {
    // Create wb env
    wb_erep* erep = new wb_erep();

    wb_volume v2(erep->volume(&sts));
    while (v2.oddSts()) {
      std::cout << "Volume loaded: " << v2.vid() << '\n';
      v2 = v2.next();
    }

    wb_env* env = new wb_env(erep);

    // Load pwrs
    wb_vrepwbl* wbl = new wb_vrepwbl(erep);
    wbl->load((char*)fname);
    // wbl->info();

    // Add pwrs to env
    erep->addExtern(&sts, wbl);
    std::cout << "addExtern: " << sts << '\n';

    // Get pwrs
    // wb_volume vol = env->externVolume( 1);
    wb_volume vol = wb_volume(wbl); // Test

    std::cout << "Get pwrs: " << env->sts() << '\n';

    // wb_volume *vol = new wb_volume( wbl);
    wb_session* ses = new wb_session(vol);
    // ses->access( ldh_eAccess_ReadWrite);
    // ses->utility( ldh_eUtility_Configurator);

    wb_object ob = ses->object();
    wb_object ob2 = ob.first();
    wb_object ob3 = ob2.after();
    wb_object ob4 = ob.last();
    wb_object ob5 = ob4.before();
    wb_object ob6 = ob4.parent();
    std::cout << "ansc: " << ob.name() << "  " << ob.what() << '\n';
    std::cout << "first: " << ob2.name() << '\n';
    std::cout << "after: " << ob3.name() << '\n';
    std::cout << "last: " << ob4.name() << '\n';
    std::cout << "before: " << ob5.name() << '\n';
    std::cout << "parent: " << ob6.name() << '\n';

    wb_orep* o = wbl->object(&sts);
    wb_orep* o2 = o->first(&sts);
    wb_orep* o3 = o2->after(&sts);
    wb_orep* o4 = o->last(&sts);
    wb_orep* o5 = o4->before(&sts);
    wb_orep* o6 = o4->parent(&sts);
    std::cout << "ansc: " << o->name() << '\n';
    std::cout << "first: " << o2->name() << '\n';
    std::cout << "after: " << o3->name() << '\n';
    std::cout << "last: " << o4->name() << '\n';
    std::cout << "before: " << o5->name() << '\n';
    std::cout << "parent: " << o6->name() << '\n';

    // Print the resulting tree
    // std::cout << wbl->rootAST[0]->toStringTree() << '\n';

    // wbl->iterObject( (void *)22, iterFunc);

    erep->removeExtern(&sts, wbl);
    delete ses;
    // delete wbl;
  } catch (wb_error& e) {
    std::cout << "Exception: " << e.what() << '\n';
  }
}

static pwr_tStatus iterFunc(void* udata, pwr_tOid oid, pwr_tCid cid,
    pwr_tOid poid, pwr_tOid fwsoid, pwr_tOid bswoid, pwr_tOid fchoid,
    pwr_tOid lchoid, char* name, pwr_tTime time, int rsize, int dsize)
{
  char timstr[40];
  time_AtoAscii(&time, time_eFormat_DateAndTime, timstr, sizeof(timstr));
  if (cid == pwr_eClass_ClassDef) {
    // std::cout << "iterFunc : " << oid.oix << " " << name << " " << timstr <<
    // '\n';
  }
  return 1;
}
