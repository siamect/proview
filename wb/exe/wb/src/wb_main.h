/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <map>

#ifndef wb_main_h
#define wb_main_h

#include "wb_vsel.h"
#include "wb_wtt.h"

class Wb {
public:
  typedef std::map<pwr_tVid, Wtt*>::iterator wttlist_iterator;

  static Wb* main_wb;

  std::map<pwr_tVid, Wtt*> wttlist;
  ldh_tWBContext wbctx;
  int announce;
  int appl_count;

  Wb();
  virtual ~Wb();
  virtual Wtt* wtt_new(const char* name, const char* iconname,
      ldh_tWBContext wbctx, pwr_tVolumeId volid, ldh_tVolume volctx,
      wnav_sStartMenu* root_menu, pwr_tStatus* status);

  virtual WVsel* vsel_new(pwr_tStatus* status, const char* name,
      ldh_tWBContext wbctx, char* volumename,
      int (*bc_success)(void*, pwr_tVolumeId*, int), void (*bc_cancel)(),
      int (*bc_time_to_exit)(void*), int show_volumes, wb_eType wb_type);

  void wttlist_add(pwr_tStatus* sts, Wtt* wtt, pwr_tVid vid);
  void wttlist_remove(pwr_tStatus* sts, Wtt* wtt);
  void wttlist_find(pwr_tStatus* sts, pwr_tVid vid, Wtt** wtt);

  static void find_wnav_cb(void* ctx, pwr_tOid oid);
  static void find_plc_cb(void* ctx, pwr_tOid oid);
  static void find_ge_cb(void* ctx, char* object, void* utility);
  static void login_success(void* ctx);
  static void login_cancel(void* ctx);
  static void wtt_close(void* wttctx);
  static int time_to_exit(void* wttctx);
  static void wtt_open_volume(void* wttctx, wb_eType type, const char* filename,
      wow_eFileSelType file_type);
  static int vsel_success(
      void* vselctx, pwr_tVolumeId* volumelist, int volume_count);
  static void vsel_cancel();
  static void usage();
  static int psts(unsigned long int sts, FILE* logfile);
};

#endif
