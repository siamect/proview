/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_qt.cpp -- work bench */

#include <stdlib.h>

#include "co_login_msg.h"
#include "co_string.h"
#include "co_user.h"

#include "cow_login_qt.h"
#include "cow_msgwindow_qt.h"
#include "cow_qt_helpers.h"
#include "cow_style_qt.h"
#include "cow_xhelp_qt.h"

#include "wb_erep.h"
#include "wb_log_qt.h"
#include "wb_utl_api.h"
#include "wb_vsel_qt.h"
#include "wb_wtt_qt.h"

#include "wb_qt.h"

#include <QApplication>
#include <QTimer>

Wtt* WbQt::wtt_new(const char* name, const char* iconname,
    ldh_tWBContext ldhwbctx, pwr_tVolumeId volid, ldh_tVolume volctx,
    wnav_sStartMenu* root_menu, pwr_tStatus* status)
{
  return new WttQt(0, name, iconname, ldhwbctx, volid, volctx, root_menu,
      status);
}

WVsel* WbQt::vsel_new(pwr_tStatus* status, const char* name,
    ldh_tWBContext ldhwbctx, char* volumename,
    int (*bc_success)(void*, pwr_tVolumeId*, int), void (*bc_cancel)(),
    int (*bc_time_to_exit)(void*), int show_volumes, wb_eType wb_type)
{
  return new WVselQt(status, NULL, name, ldhwbctx, volumename,
      bc_success, bc_cancel, bc_time_to_exit, show_volumes, wb_type);
}

int main(int argc, char* argv[])
{
  log_setLevel(LOG_TRACE);
  if (argc >= 2 && streq(argv[1], "-m")) {
    wb_erep::printMethods();
    exit(0);
  }

  QApplication app(argc, argv);
  QApplication::setStyle(new PwrStyle());
  Wb::main_wb = new WbQt(argc, argv);
  return app.exec();
}

WbQt::WbQt(int argc, char* argv[])
{
  pwr_tStatus sts;
  int login_display = 0;
  int nav_display = 0;
  char systemname[80];
  char systemgroup[80];
  char password[40];
  char username[40];
  char volumename[40];
  char* volumename_p;
  int arg_cnt;
  char title[80];
  char backdoor[] = "aaY2CiHS.y4Wc";
  int sw_projectvolume = 0;
  int sw_classeditor = 0;
  int sw_projectlist = 0;
  char filename[200];
  int i;
  int quiet = 0;
  unsigned int options = 0;

  setlocale(LC_ALL, "en_US");
  setlocale(LC_NUMERIC, "POSIX");
  setlocale(LC_TIME, "en_US");

  Wb::main_wb = this;

  strcpy(username, "");
  strcpy(password, "");

  // Open directory volume as default
  volumename_p = volumename;
  strcpy(volumename, "directory");
  sw_projectvolume = 1;
  arg_cnt = 0;
  log_debug("%s ", argv[0]);
  for (i = 1; i < argc; i++) {
    fprintf(stderr, "%s ", argv[i]);
    if (argv[i][0] == '-') {
      switch (argv[i][1]) {
      case 'h':
        usage();
        exit(0);
      case 'a':
        // Load all volumes
        sw_projectvolume = 0;
        volumename_p = 0;
        break;
      case 'q':
        // Quiet
        quiet = 1;
        break;
      case 's':
        // Open dbs file
        options |= ldh_mWbOption_OpenDbs;
        break;
      case 'l':
        if (i + 1 >= argc) {
          usage();
          exit(0);
        }
        Lng::set(argv[i + 1]);
        i++;
        break;
      case 'f':
        if (i + 1 >= argc) {
          usage();
          exit(0);
        }
        i++;
        break;
      case 'c':
        if (i + 1 >= argc) {
          usage();
          exit(0);
        }
        sw_classeditor = 1;
        strcpy(filename, argv[i + 1]);
        sw_projectvolume = 0;
        i++;
        break;
      case 'p':
        sw_projectlist = 1;
        sw_projectvolume = 0;
        strcpy(volumename, "");
        break;
      default:
        printf("Unknown argument: %s\n", argv[i]);
      }
    } else {
      switch (arg_cnt) {
      case 0:
        strcpy(username, argv[i]);
        break;
      case 1:
        strcpy(password, argv[i]);
        break;
      case 2:
        strcpy(volumename, argv[i]);
        sw_projectvolume = 0;
        break;
      default:
        printf("Unknown argument: %s\n", argv[i]);
      }
      arg_cnt++;
    }
  }
  fprintf(stderr, "\n");

  toplevel = new QWidget();
  toplevel->setMinimumSize(100, 100);
  toplevel->setWindowTitle(fl("Pwr wb"));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  // Attach to history log
  new wb_log_qt(toplevel);

  // Create message window
  MsgWindowQt* msg_window
      = new MsgWindowQt(0, "Workbench messages", &sts);
  msg_window->find_wnav_cb = Wb::find_wnav_cb;
  msg_window->find_plc_cb = Wb::find_plc_cb;
  MsgWindow::set_default(msg_window);
  MsgWindow::message('I', "Development environment started");

  // Create help window
  CoXHelpQt* xhelp = new CoXHelpQt(0, xhelp_eUtility_Wtt, &sts);
  CoXHelp::set_default(xhelp);

  sts = ldh_OpenWB(&wbctx, volumename_p, options);
  psts(sts, NULL);
  if (EVEN(sts)) {
    exit(sts);
  }

  /* Get system name */
  sts = utl_get_systemname(systemname, systemgroup);
  if (EVEN(sts)) {
    /* No system object, login as system !! */
    CoLogin::insert_login_info(
        "SYSTEM", password, username, pwr_mAccess_AllPwr, 0);
    nav_display = 1;
  } else {
    if (arg_cnt >= 1 && streq(UserList::pwcrypt(argv[1]), backdoor)) {
      /* Login as system !! */
      CoLogin::insert_login_info("SYSTEM", "", "", pwr_mAccess_AllPwr, 0);
      nav_display = 1;
    } else if (arg_cnt >= 1) {
      /* Check username and password */
      sts = CoLogin::user_check(systemgroup, username, password);
      if (EVEN(sts)) {
        /* Login in is not ok, start login window */
        login_display = 1;
      } else {
        /* Login is ok, start navigator */
        nav_display = 1;
      }
    } else if (arg_cnt == 0) {
      /* No arguments, start login window */
      login_display = 1;
    }
  }
  if (!login_display) {
    char msg[80];

    sprintf(msg, "User %s logged in", CoLogin::username());
    MsgWindow::message('I', msg);

    wb_log::log(wlog_eCategory_WbLogin, CoLogin::username(), 0);

    strcpy(title, "PwR Development ");
    strcat(title, CoLogin::username());
    strcat(title, " on ");
    strcat(title, systemname);
    toplevel->setWindowTitle(fl(title));
  }

  if (sw_projectvolume && !login_display) {
    char projectname[80];
    pwr_tVolumeId volume = ldh_cDirectoryVolume;
    utl_get_projectname(projectname);
    strcpy(title, CoLogin::username());
    strcat(title, " on ");
    strcat(title, projectname);
    Wtt* wtt = wtt_new(title, "Navigator", wbctx, volume, 0, 0, &sts);
    if (ODD(sts)) {
      appl_count++;
      wtt->close_cb = Wb::wtt_close;
      wtt->open_volume_cb = Wb::wtt_open_volume;
      wtt->time_to_exit_cb = Wb::time_to_exit;
      wttlist_add(&sts, wtt, volume);
    } else {
      psts(sts, NULL);
    }
  } else if (sw_classeditor) {
    wtt_open_volume(
        0, wb_eType_ClassEditor, filename, wow_eFileSelType_WblClass);
  } else if (sw_projectlist) {
    wtt_open_volume(0, wb_eType_ExternVolume, "ProjectList", wow_eFileSelType_);
  } else if (nav_display && !login_display) {
    if (CoLogin::privilege() & pwr_mPrv_DevRead) {
      strcpy(title, "PwR Navigator: ");
      strcat(title, CoLogin::username());
      strcat(title, " on ");
      strcat(title, systemname);
      appl_count++;
      vsel_new(&sts, "PwR Volumes", wbctx, volumename, &Wb::vsel_success,
          &Wb::vsel_cancel, &Wb::time_to_exit, 0, wb_eType_Volume);
    } else {
      exit(LOGIN__NOPRIV);
    }
  } else if (login_display) {
    new CoLoginQt(NULL, NULL, "PwR Login", systemgroup,
        &Wb::login_success, &Wb::login_cancel, 0, &sts);
  }

  strcpy(title, "PwR Development ");
  strcat(title, CoLogin::username());
  strcat(title, " on ");
  strcat(title, systemname);

  toplevel->hide();

  if (!quiet) {
    CoWowQt* wow = new CoWowQt(toplevel);
    // Use timeout to get in on the top of the display
    QTimer::singleShot(100, wow->object, SLOT(DisplayWarranty()));
  }
}
