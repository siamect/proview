/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_ldlist.c --
   Lists load data files.  */

#include <string.h>
#include <iostream>

#include "co_time.h"
#include "co_dcli.h"
#include "wb_erep.h"
#include "wb_vrepdbs.h"

static void usage(const char* txt)
{
  std::cout << txt << '\n';
}

void ldlist_print(const char* text, pwr_tVid vid, pwr_tCid cid,
    const char* name, pwr_tTime* time)
{
  char timestr[40];

  time_AtoAscii(time, time_eFormat_DateAndTime, timestr, sizeof(timestr));

  std::cout << text;
  for (int i = 0; i < (int)(10 - strlen(text)); i++)
    std::cout << " ";
  std::cout << " ";

  std::cout << name;
  for (int i = 0; i < (int)(15 - strlen(name)); i++)
    std::cout << " ";
  std::cout << " ";

  std::cout << timestr << "  ";

  char vid_str[40];
  cdh_VolumeIdToString(vid_str, sizeof(vid_str), vid, 0, 0);
  std::cout << vid_str;
  for (int i = 0; i < (int)(15 - strlen(vid_str)); i++)
    std::cout << " ";
  std::cout << " ";

  if (cid) {
    pwr_tObjName cname;

    switch (cid) {
    case pwr_eClass_RootVolume:
      strcpy(cname, "RootVolume");
      break;
    case pwr_eClass_SubVolume:
      strcpy(cname, "SubVolume");
      break;
    case pwr_eClass_SharedVolume:
      strcpy(cname, "SharedVolume");
      break;
    case pwr_eClass_ClassVolume:
      strcpy(cname, "ClassVolume");
      break;
    case pwr_eClass_DetachedClassVolume:
      strcpy(cname, "DetachedVolume");
      break;
    case pwr_eClass_VolatileVolume:
      strcpy(cname, "RootVolume");
      break;
    default:
      strcpy(cname, "Unknown class");
    }
    std::cout << " " << cname << '\n';
  } else
    std::cout << '\n';
}

int main(int argc, char* argv[])
{
  int bflag = 0;
  int oflag = 0;
  char c;
  pwr_tTime time;
  pwr_tFileName fname;

  while (--argc > 0 && (*++argv)[0] == '-') {
    while ((c = *++argv[0])) {
      switch (c) {
      case 'o':
        ++oflag;
        break;
      case 'b':
        ++bflag;
        break;
      default:
        usage("Unknown flag");
      }
    }
  }

  if ((*argv)[0] == '?')
    usage(0);
  if (argc < 1)
    usage("No load file given!\n");

  wb_erep* erep = new wb_erep();
  dcli_translate_filename(fname, *argv);

  wb_vrepdbs* vrep = new wb_vrepdbs(erep, fname);

  vrep->load();
  vrep->time(&time);

  ldlist_print("Volume", vrep->vid(), vrep->cid(), vrep->name(), &time);

  for (int i = 0; i < (int)vrep->m_dbsmep->nVolRef + 1; i++) {
    time = vrep->m_dbsmep->venv[i].vp->time;
    ldlist_print("VolRef", vrep->m_dbsmep->venv[i].vp->vid,
        vrep->m_dbsmep->venv[i].vp->cid, vrep->m_dbsmep->venv[i].vp->name,
        &time);
  }
}
