/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_wrev_gtk.cpp -- package window */

#include <stdlib.h>
#include <string.h>

#include <typeinfo>

#include "co_cdh.h"
#include "co_time.h"

#include "cow_logw_gtk.h"
#include "cow_xhelp.h"

#include "wb_error.h"
#include "wb_pkg.h"
#include "wb_pkg_msg.h"
#include "wb_wrev_gtk.h"
#include "wb_wrevnav_gtk.h"
#include "wb_wtt.h"

void WRevGtk::message(char severity, const char* message)
{
  gtk_label_set_text(GTK_LABEL(msg_label), message);

  // Change the label now !!
  gdk_display_flush(gdk_display_get_default());
  while (gtk_events_pending())
    gtk_main_iteration();
}

//
//  Callbackfunctions from menu entries
//
void WRevGtk::activate_history(GtkWidget* w, gpointer data)
{
  WRev* wrev = (WRev*)data;
  pwr_tStatus sts;
  char categories[3][20];

  wb_log::category_to_string(wlog_eCategory_NewRevision, categories[0]);
  wb_log::category_to_string(wlog_eCategory_RevisionRestore, categories[1]);
  strcpy(categories[2], "");

  CoLogWGtk* logw = new CoLogWGtk(
      wrev, ((WRevGtk*)wrev)->parent_wid, "Revision History", 1, &sts);
  logw->show(categories, 0);
}

void WRevGtk::activate_store(GtkWidget* w, gpointer data)
{
  WRev* wrev = (WRev*)data;

  wrev->activate_store();
}

void WRevGtk::activate_restore(GtkWidget* w, gpointer data)
{
  WRev* wrev = (WRev*)data;

  wrev->activate_restore();
}

void WRevGtk::activate_delete(GtkWidget* w, gpointer data)
{
  WRev* wrev = (WRev*)data;

  wrev->activate_delete();
}

void WRevGtk::activate_build(GtkWidget* w, gpointer data)
{
  WRev* wrev = (WRev*)data;

  wrev->activate_build();
}

void WRevGtk::activate_zoom_in(GtkWidget* w, gpointer data)
{
  WRev* wrev = (WRev*)data;
  wrev->activate_zoom_in();
}

void WRevGtk::activate_zoom_out(GtkWidget* w, gpointer data)
{
  WRev* wrev = (WRev*)data;
  wrev->activate_zoom_out();
}

void WRevGtk::activate_zoom_reset(GtkWidget* w, gpointer data)
{
  WRev* wrev = (WRev*)data;
  wrev->activate_zoom_reset();
}

void WRevGtk::activate_exit(GtkWidget* w, gpointer data)
{
  WRev* wrev = (WRev*)data;

  if (wrev->dialog_count != 0)
    return;

  if (wrev->close_cb)
    (wrev->close_cb)(wrev->parent_ctx);
  else
    delete wrev;
}

void WRevGtk::activate_help(GtkWidget* w, gpointer data)
{
  CoXHelp::dhelp(
      "revisions", 0, navh_eHelpFile_Other, "$pwr_lang/man_dg.dat", true);
}

gboolean WRevGtk::action_inputfocus(
    GtkWidget* w, GdkEvent* event, gpointer data)
{
  WRevGtk* wrev = (WRevGtk*)data;

  if (wrev->focustimer.disabled())
    return FALSE;

  ((WRevNav*)wrev->wrevnav)->set_inputfocus();

  wrev->focustimer.disable(400);
  return FALSE;
}

void WRevGtk::pop()
{
  gtk_window_present(GTK_WINDOW(toplevel));
}

void WRevGtk::flush()
{
  gdk_display_flush(gtk_widget_get_display(toplevel));
}

void WRevGtk::set_clock_cursor()
{
  if (!clock_cursor)
    clock_cursor = gdk_cursor_new_for_display(
        gtk_widget_get_display(toplevel), GDK_WATCH);

  gdk_window_set_cursor(toplevel->window, clock_cursor);
  gdk_display_flush(gtk_widget_get_display(toplevel));
}

void WRevGtk::reset_cursor()
{
  gdk_window_set_cursor(toplevel->window, NULL);
  gdk_display_flush(gtk_widget_get_display(toplevel));
}

WRevGtk::~WRevGtk()
{
  delete wow;
  delete (WRevNav*)wrevnav;
  gtk_widget_destroy(toplevel);
}

static gint delete_event(GtkWidget* w, GdkEvent* event, gpointer wrev)
{
  WRevGtk::activate_exit(w, wrev);

  return TRUE;
}

static void destroy_event(GtkWidget* w, gpointer data)
{
}

WRevGtk::WRevGtk(
    GtkWidget* wa_parent_wid, void* wa_parent_ctx, ldh_tSession wa_ldhses)
    : WRev(wa_parent_ctx, wa_ldhses), parent_wid(wa_parent_wid),
      india_widget(0), clock_cursor(0)
{
  const int window_width = 700;
  const int window_height = 300;
  int sts;
  pwr_tFileName fname;

  toplevel = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height",
      window_height, "default-width", window_width, "title", "Revisions", NULL);

  g_signal_connect(toplevel, "delete_event", G_CALLBACK(delete_event), this);
  g_signal_connect(toplevel, "destroy", G_CALLBACK(destroy_event), this);
  g_signal_connect(
      toplevel, "focus-in-event", G_CALLBACK(action_inputfocus), this);

  CoWowGtk::SetWindowIcon(toplevel);

  GtkAccelGroup* accel_g
      = (GtkAccelGroup*)g_object_new(GTK_TYPE_ACCEL_GROUP, NULL);
  gtk_window_add_accel_group(GTK_WINDOW(toplevel), accel_g);

  GtkMenuBar* menu_bar = (GtkMenuBar*)g_object_new(GTK_TYPE_MENU_BAR, NULL);

  // File Entry
  GtkWidget* file_history = gtk_menu_item_new_with_mnemonic("_History");
  g_signal_connect(
      file_history, "activate", G_CALLBACK(WRevGtk::activate_history), this);

  GtkWidget* file_close
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_CLOSE, accel_g);
  g_signal_connect(
      file_close, "activate", G_CALLBACK(WRevGtk::activate_exit), this);

  GtkMenu* file_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_history);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_close);

  GtkWidget* file = gtk_menu_item_new_with_mnemonic("_File");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), file);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(file), GTK_WIDGET(file_menu));

  // Functions Entry
  GtkWidget* functions_store = gtk_menu_item_new_with_mnemonic("_New Revision");
  g_signal_connect(
      functions_store, "activate", G_CALLBACK(WRevGtk::activate_store), this);

  GtkWidget* functions_restore
      = gtk_menu_item_new_with_mnemonic("_Restore Revision");
  g_signal_connect(functions_restore, "activate",
      G_CALLBACK(WRevGtk::activate_restore), this);

  GtkWidget* functions_delete
      = gtk_menu_item_new_with_mnemonic("_Delete Revision");
  g_signal_connect(
      functions_delete, "activate", G_CALLBACK(WRevGtk::activate_delete), this);

  GtkWidget* functions_build = gtk_menu_item_new_with_mnemonic("_Build All");
  g_signal_connect(
      functions_build, "activate", G_CALLBACK(WRevGtk::activate_build), this);

  GtkMenu* functions_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(functions_menu), functions_store);
  gtk_menu_shell_append(GTK_MENU_SHELL(functions_menu), functions_restore);
  gtk_menu_shell_append(GTK_MENU_SHELL(functions_menu), functions_delete);
  gtk_menu_shell_append(GTK_MENU_SHELL(functions_menu), functions_build);

  GtkWidget* functions = gtk_menu_item_new_with_mnemonic("F_unctions");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), functions);
  gtk_menu_item_set_submenu(
      GTK_MENU_ITEM(functions), GTK_WIDGET(functions_menu));

  // View menu
  GtkWidget* view_zoom_in
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_IN, NULL);
  g_signal_connect(
      view_zoom_in, "activate", G_CALLBACK(WRevGtk::activate_zoom_in), this);
  gtk_widget_add_accelerator(view_zoom_in, "activate", accel_g, 'i',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_out
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_OUT, NULL);
  g_signal_connect(
      view_zoom_out, "activate", G_CALLBACK(WRevGtk::activate_zoom_out), this);
  gtk_widget_add_accelerator(view_zoom_out, "activate", accel_g, 'o',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_reset
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_100, NULL);
  g_signal_connect(view_zoom_reset, "activate",
      G_CALLBACK(WRevGtk::activate_zoom_reset), this);

  GtkMenu* view_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_in);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_out);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_reset);

  GtkWidget* view = gtk_menu_item_new_with_mnemonic("_View");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), view);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(view), GTK_WIDGET(view_menu));

  // Menu Help
  GtkWidget* help_help = gtk_image_menu_item_new_with_mnemonic("_Help");
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(help_help),
      gtk_image_new_from_stock("gtk-help", GTK_ICON_SIZE_MENU));
  g_signal_connect(
      help_help, "activate", G_CALLBACK(WRevGtk::activate_help), this);
  gtk_widget_add_accelerator(
      help_help, "activate", accel_g, 'h', GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkMenu* help_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_help);

  GtkWidget* help = gtk_menu_item_new_with_mnemonic("_Help");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), help);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(help), GTK_WIDGET(help_menu));

  // Toolbar
  GtkToolbar* tools = (GtkToolbar*)g_object_new(GTK_TYPE_TOOLBAR, NULL);

  GtkWidget* tools_zoom_in = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_in.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_in), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_zoom_in, "clicked", G_CALLBACK(WRevGtk::activate_zoom_in), this);
  g_object_set(tools_zoom_in, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(tools, tools_zoom_in, "Zoom in", "");

  GtkWidget* tools_zoom_out = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_out.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_out), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_zoom_out, "clicked", G_CALLBACK(WRevGtk::activate_zoom_out), this);
  g_object_set(tools_zoom_out, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(tools, tools_zoom_out, "Zoom out", "");

  GtkWidget* tools_zoom_reset = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_reset.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_reset), gtk_image_new_from_file(fname));
  g_signal_connect(tools_zoom_reset, "clicked",
      G_CALLBACK(WRevGtk::activate_zoom_reset), this);
  g_object_set(tools_zoom_reset, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(tools, tools_zoom_reset, "Zoom reset", "");

  GtkWidget* vbox = gtk_vbox_new(FALSE, 0);

  utility = ((WUtility*)parent_ctx)->utype;
  wrevnav = new WRevNavGtk(
      (void*)this, vbox, ldhses, "Packages", utility, &brow_widget, &sts);
  ((WRevNav*)wrevnav)->message_cb = message_cb;
  ((WRevNav*)wrevnav)->set_clock_cursor_cb = set_clock_cursor_cb;
  ((WRevNav*)wrevnav)->reset_cursor_cb = reset_cursor_cb;
  ((WRevNav*)wrevnav)->command_cb = rev_command_cb;

  GtkWidget* statusbar = gtk_hbox_new(FALSE, 0);
  msg_label = gtk_label_new("");

  gtk_box_pack_start(GTK_BOX(statusbar), msg_label, FALSE, FALSE, 20);
  gtk_widget_show_all(statusbar);

  gtk_box_pack_start(GTK_BOX(vbox), GTK_WIDGET(menu_bar), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), GTK_WIDGET(tools), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), GTK_WIDGET(brow_widget), TRUE, TRUE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), GTK_WIDGET(statusbar), FALSE, FALSE, 3);

  gtk_container_add(GTK_CONTAINER(toplevel), vbox);

  gtk_widget_show_all(toplevel);

  wow = new CoWowGtk(toplevel);
}

static gint india_delete_event(GtkWidget* w, GdkEvent* event, gpointer wrev)
{
  gtk_widget_destroy(((WRevGtk*)wrev)->india_widget);
  ((WRevGtk*)wrev)->dialog_count--;
  ((WRevGtk*)wrev)->india_widget = 0;
  // g_object_set( ((WRevGtk *)wrev)->india_widget, "visible", FALSE, NULL);
  return TRUE;
}

void WRevGtk::activate_india_ok(GtkWidget* w, gpointer data)
{
  WRevGtk* wrev = (WRevGtk*)data;
  char *text1, *text2, *textutf8;

  textutf8 = gtk_editable_get_chars(
      GTK_EDITABLE(((WRevGtk*)wrev)->india_text1), 0, -1);
  text1 = g_convert(textutf8, -1, "ISO8859-1", "UTF-8", NULL, NULL, NULL);
  g_free(textutf8);

  textutf8 = gtk_editable_get_chars(
      GTK_EDITABLE(((WRevGtk*)wrev)->india_text2), 0, -1);
  text2 = g_convert(textutf8, -1, "ISO8859-1", "UTF-8", NULL, NULL, NULL);
  g_free(textutf8);

  gtk_widget_destroy(wrev->india_widget);
  wrev->dialog_count--;
  wrev->india_widget = 0;
  // g_object_set( ((WRevGtk *)wrev)->india_widget, "visible", FALSE, NULL);

  (wrev->india_ok_cb)(wrev, text1, text2);
  g_free(text1);
}

void WRevGtk::activate_india_cancel(GtkWidget* w, gpointer data)
{
  WRevGtk* wrev = (WRevGtk*)data;

  gtk_widget_destroy(wrev->india_widget);
  wrev->dialog_count--;
  wrev->india_widget = 0;
  // g_object_set( ((WRevGtk *)wrev)->india_widget, "visible", FALSE, NULL);
}

void WRevGtk::open_input_dialog(const char* text1, const char* text2,
    const char* title, const char* init_text1, const char* init_text2,
    void (*ok_cb)(WRev*, char*, char*))
{
  create_input_dialog();

  gtk_label_set_text(GTK_LABEL(india_label1), text1);
  gtk_label_set_text(GTK_LABEL(india_label2), text2);

  gint pos = 0;
  gtk_editable_delete_text(GTK_EDITABLE(india_text1), 0, -1);
  gtk_editable_insert_text(
      GTK_EDITABLE(india_text1), init_text1, strlen(init_text1), &pos);

  gtk_editable_delete_text(GTK_EDITABLE(india_text2), 0, -1);
  gtk_editable_insert_text(
      GTK_EDITABLE(india_text2), init_text2, strlen(init_text2), &pos);

  india_ok_cb = ok_cb;
  dialog_count++;
}

void WRevGtk::create_input_dialog()
{
  // Create an input dialog
  india_widget = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height",
      150, "default-width", 350, "title", "New Revision", "window-position",
      GTK_WIN_POS_CENTER, NULL);
  g_signal_connect(
      india_widget, "delete_event", G_CALLBACK(india_delete_event), this);
  india_text1 = gtk_entry_new();
  india_text2 = gtk_entry_new();
  india_label1 = gtk_label_new("");
  india_label2 = gtk_label_new("");

  GtkWidget* india_ok = gtk_button_new_with_label("Ok");
  gtk_widget_set_size_request(india_ok, 70, 25);
  g_signal_connect(
      india_ok, "clicked", G_CALLBACK(WRevGtk::activate_india_ok), this);
  GtkWidget* india_cancel = gtk_button_new_with_label("Cancel");
  gtk_widget_set_size_request(india_cancel, 70, 25);
  g_signal_connect(india_cancel, "clicked",
      G_CALLBACK(WRevGtk::activate_india_cancel), this);

  GtkWidget* india_hboxtext1 = gtk_hbox_new(FALSE, 0);
  // gtk_box_pack_start( GTK_BOX(india_hboxtext1), india_image1, FALSE, FALSE,
  // 15);
  gtk_box_pack_start(GTK_BOX(india_hboxtext1), india_label1, FALSE, FALSE, 15);
  gtk_box_pack_end(GTK_BOX(india_hboxtext1), india_text1, TRUE, TRUE, 30);

  GtkWidget* india_hboxtext2 = gtk_hbox_new(FALSE, 0);
  // gtk_box_pack_start( GTK_BOX(india_hboxtext2), india_image2, FALSE, FALSE,
  // 15);
  gtk_box_pack_start(GTK_BOX(india_hboxtext2), india_label2, FALSE, FALSE, 15);
  gtk_box_pack_end(GTK_BOX(india_hboxtext2), india_text2, TRUE, TRUE, 30);

  GtkWidget* india_hboxbuttons = gtk_hbox_new(TRUE, 40);
  gtk_box_pack_start(GTK_BOX(india_hboxbuttons), india_ok, FALSE, FALSE, 0);
  gtk_box_pack_end(GTK_BOX(india_hboxbuttons), india_cancel, FALSE, FALSE, 0);

  GtkWidget* india_vbox = gtk_vbox_new(FALSE, 0);
  gtk_box_pack_start(GTK_BOX(india_vbox), india_hboxtext1, TRUE, TRUE, 30);
  gtk_box_pack_start(GTK_BOX(india_vbox), india_hboxtext2, TRUE, TRUE, 30);
  gtk_box_pack_start(
      GTK_BOX(india_vbox), gtk_hseparator_new(), FALSE, FALSE, 0);
  gtk_box_pack_end(GTK_BOX(india_vbox), india_hboxbuttons, FALSE, FALSE, 15);
  gtk_container_add(GTK_CONTAINER(india_widget), india_vbox);
  gtk_widget_show_all(india_widget);
  // g_object_set( india_widget, "visible", FALSE, NULL);
  gtk_window_set_transient_for(
      GTK_WINDOW(gtk_widget_get_toplevel(india_widget)),
      GTK_WINDOW(gtk_widget_get_toplevel(toplevel)));
}
