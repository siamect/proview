/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_expw_gtk.cpp -- Backupfile display window */

#include <stdlib.h>

#include "co_time.h"

#include "cow_xhelp.h"

#include "wb_expw_gtk.h"
#include "wb_expwnav_gtk.h"

static gint delete_event(GtkWidget* w, GdkEvent* event, gpointer expw)
{
  WbExpWGtk::activate_exit(w, expw);

  return TRUE;
}

static void destroy_event(GtkWidget* w, gpointer data)
{
}

WbExpWGtk::WbExpWGtk(void* expw_parent_ctx, GtkWidget* expw_parent_wid,
    ldh_tSession expw_ldhses, const char* expw_name, int l_type, int l_editmode,
    pwr_tStatus* status)
    : WbExpW(
          expw_parent_ctx, expw_ldhses, expw_name, l_type, l_editmode, status),
      parent_wid(expw_parent_wid)
{
  const int window_width = 1100;
  const int window_height = 600;

  toplevel = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height",
      window_height, "default-width", window_width, "title", expw_name, NULL);

  g_signal_connect(toplevel, "delete_event", G_CALLBACK(delete_event), this);
  g_signal_connect(toplevel, "destroy", G_CALLBACK(destroy_event), this);
  g_signal_connect(toplevel, "focus-in-event",
      G_CALLBACK(WbExpWGtk::action_inputfocus), this);

  CoWowGtk::SetWindowIcon(toplevel);

  GtkAccelGroup* accel_g
      = (GtkAccelGroup*)g_object_new(GTK_TYPE_ACCEL_GROUP, NULL);
  gtk_window_add_accel_group(GTK_WINDOW(toplevel), accel_g);

  GtkMenuBar* menu_bar = (GtkMenuBar*)g_object_new(GTK_TYPE_MENU_BAR, NULL);

  // File Entry
  GtkWidget* file_close
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_CLOSE, accel_g);
  g_signal_connect(
      file_close, "activate", G_CALLBACK(WbExpWGtk::activate_exit), this);

  file_export = gtk_menu_item_new_with_mnemonic(btext);
  g_signal_connect(
      file_export, "activate", G_CALLBACK(WbExpWGtk::activate_export), this);

  GtkMenu* file_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_export);

  GtkWidget* file = gtk_menu_item_new_with_mnemonic("_File");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), file);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(file), GTK_WIDGET(file_menu));

  // Edit menu
  GtkWidget* edit_update = gtk_menu_item_new_with_mnemonic("_Update");
  g_signal_connect(
      edit_update, "activate", G_CALLBACK(WbExpWGtk::activate_update), this);
  gtk_widget_add_accelerator(edit_update, "activate", accel_g, 'u',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  edit_check_all = gtk_menu_item_new_with_mnemonic("_Check all");
  g_signal_connect(edit_check_all, "activate",
      G_CALLBACK(WbExpWGtk::activate_check_all), this);

  edit_check_clear = gtk_menu_item_new_with_mnemonic("C_heck clear");
  g_signal_connect(edit_check_clear, "activate",
      G_CALLBACK(WbExpWGtk::activate_check_clear), this);

  edit_check_reset = gtk_menu_item_new_with_mnemonic("Check _reset");
  g_signal_connect(edit_check_reset, "activate",
      G_CALLBACK(WbExpWGtk::activate_check_reset), this);

  edit_show_all = gtk_check_menu_item_new_with_mnemonic("_Show all");
  g_signal_connect(
      edit_show_all, "activate", G_CALLBACK(activate_show_all), this);
  gtk_widget_add_accelerator(edit_show_all, "activate", accel_g, 'a',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkMenu* edit_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), edit_update);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), edit_check_all);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), edit_check_clear);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), edit_check_reset);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), edit_show_all);

  GtkWidget* edit = gtk_menu_item_new_with_mnemonic("_Edit");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), edit);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(edit), GTK_WIDGET(edit_menu));

  // View menu
  GtkWidget* view_zoom_in
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_IN, NULL);
  g_signal_connect(
      view_zoom_in, "activate", G_CALLBACK(WbExpWGtk::activate_zoom_in), this);
  gtk_widget_add_accelerator(view_zoom_in, "activate", accel_g, 'i',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_out
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_OUT, NULL);
  g_signal_connect(view_zoom_out, "activate",
      G_CALLBACK(WbExpWGtk::activate_zoom_out), this);
  gtk_widget_add_accelerator(view_zoom_out, "activate", accel_g, 'o',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_reset
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_100, NULL);
  g_signal_connect(view_zoom_reset, "activate",
      G_CALLBACK(WbExpWGtk::activate_zoom_reset), this);

  GtkMenu* view_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_in);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_out);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_reset);

  GtkWidget* view = gtk_menu_item_new_with_mnemonic("_View");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), view);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(view), GTK_WIDGET(view_menu));

  // Help Entry
  GtkWidget* help_help
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_HELP, accel_g);
  g_signal_connect(
      help_help, "activate", G_CALLBACK(WbExpWGtk::activate_help), this);

  GtkMenu* help_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_help);

  GtkWidget* help = gtk_menu_item_new_with_mnemonic("_Help");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), help);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(help), GTK_WIDGET(help_menu));

  // Toolbar
  GtkToolbar* tools = (GtkToolbar*)g_object_new(GTK_TYPE_TOOLBAR, NULL);

  pwr_tFileName fname;
  GtkWidget* tools_export = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/wb_export.png");
  gtk_container_add(
      GTK_CONTAINER(tools_export), gtk_image_new_from_file(fname));
  g_signal_connect(tools_export, "clicked", G_CALLBACK(activate_export), this);
  g_object_set(tools_export, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(tools, tools_export, action, "");

  GtkWidget* tools_update = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/ge_update.png");
  gtk_container_add(
      GTK_CONTAINER(tools_update), gtk_image_new_from_file(fname));
  g_signal_connect(tools_update, "clicked", G_CALLBACK(activate_update), this);
  g_object_set(tools_update, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(tools, tools_update, "Update", "");

  GtkWidget* tools_zoom_in = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_in.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_in), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_zoom_in, "clicked", G_CALLBACK(activate_zoom_in), this);
  g_object_set(tools_zoom_in, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(tools, tools_zoom_in, "Zoom in", "");

  GtkWidget* tools_zoom_out = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_out.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_out), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_zoom_out, "clicked", G_CALLBACK(activate_zoom_out), this);
  g_object_set(tools_zoom_out, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(tools, tools_zoom_out, "Zoom out", "");

  GtkWidget* tools_zoom_reset = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_reset.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_reset), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_zoom_reset, "clicked", G_CALLBACK(activate_zoom_reset), this);
  g_object_set(tools_zoom_reset, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(tools, tools_zoom_reset, "Zoom reset", "");

  form = gtk_vbox_new(FALSE, 0);

  // Create expwnav
  expwnav = new WbExpWNavGtk(
      this, form, expw_ldhses, l_type, l_editmode, &nav_widget);

  gtk_box_pack_start(GTK_BOX(form), GTK_WIDGET(menu_bar), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(form), GTK_WIDGET(tools), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(form), GTK_WIDGET(nav_widget), TRUE, TRUE, 0);

  gtk_container_add(GTK_CONTAINER(toplevel), form);

  gtk_widget_show_all(toplevel);

  wow = new CoWowGtk(toplevel);

  show();
  // expwnav->check_all();
}

//
//  Delete window
//
WbExpWGtk::~WbExpWGtk()
{
  if (expwnav)
    delete expwnav;
  if (toplevel)
    gtk_widget_destroy(toplevel);
}

void WbExpWGtk::print()
{
  pwr_tStatus sts;

  CoWowGtk::CreateBrowPrintDialogGtk(name, expwnav->brow->ctx,
      flow_eOrientation_Portrait, 1.0, (void*)toplevel, &sts);
}

gboolean WbExpWGtk::action_inputfocus(
    GtkWidget* w, GdkEvent* event, gpointer data)
{
  WbExpWGtk* expw = (WbExpWGtk*)data;

  if (expw) {
    if (expw->focustimer.disabled())
      return FALSE;

    expw->expwnav->set_input_focus();
    expw->focustimer.disable(400);
  }
  return FALSE;
}

void WbExpWGtk::set_title(char* title)
{
  char* titleutf8
      = g_convert(title, -1, "UTF-8", "ISO8859-1", NULL, NULL, NULL);
  gtk_window_set_title(GTK_WINDOW(toplevel), titleutf8);
  g_free(titleutf8);
}

void WbExpWGtk::activate_exit(GtkWidget* w, gpointer data)
{
  WbExpWGtk* expw = (WbExpWGtk*)data;

  delete expw;
}

void WbExpWGtk::activate_export(GtkWidget* w, gpointer data)
{
  WbExpW* expw = (WbExpW*)data;

  expw->activate_export();
}

void WbExpWGtk::activate_update(GtkWidget* w, gpointer data)
{
  WbExpW* expw = (WbExpW*)data;

  expw->activate_update();
}

void WbExpWGtk::activate_check_all(GtkWidget* w, gpointer data)
{
  WbExpW* expw = (WbExpW*)data;

  expw->activate_check_all();
}

void WbExpWGtk::activate_check_clear(GtkWidget* w, gpointer data)
{
  WbExpW* expw = (WbExpW*)data;

  expw->activate_check_clear();
}

void WbExpWGtk::activate_check_reset(GtkWidget* w, gpointer data)
{
  WbExpW* expw = (WbExpW*)data;

  expw->activate_check_reset();
}

void WbExpWGtk::activate_show_all(GtkWidget* w, gpointer data)
{
  WbExpW* expw = (WbExpW*)data;

  int set = (int)gtk_check_menu_item_get_active(
      GTK_CHECK_MENU_ITEM(((WbExpWGtk*)expw)->edit_show_all));
  expw->expwnav->set_show_all(set);
}

void WbExpWGtk::activate_zoom_in(GtkWidget* w, gpointer data)
{
  WbExpW* expw = (WbExpW*)data;

  expw->expwnav->zoom(1.2);
}

void WbExpWGtk::activate_zoom_out(GtkWidget* w, gpointer data)
{
  WbExpW* expw = (WbExpW*)data;

  expw->expwnav->zoom(5.0 / 6);
}

void WbExpWGtk::activate_zoom_reset(GtkWidget* w, gpointer data)
{
  WbExpW* expw = (WbExpW*)data;

  expw->expwnav->unzoom();
}

void WbExpWGtk::activate_help(GtkWidget* w, gpointer data)
{
  WbExpW* expw = (WbExpW*)data;

  if (expw->type == expw_eType_Export || expw->type == expw_eType_Import)
    CoXHelp::dhelp("exportimport_refman", 0, navh_eHelpFile_Other,
        "$pwr_lang/man_dg.dat", true);
  else if (expw->type == expw_eType_BuildDirectories)
    CoXHelp::dhelp("builddir_refman", 0, navh_eHelpFile_Other,
        "$pwr_lang/man_dg.dat", true);
}
