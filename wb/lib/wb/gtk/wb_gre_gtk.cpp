/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_gre_gtk.cpp
   This module creates the flow window and handles
   the flow callbacks.  */

#include <math.h>
#include <string.h>

#include "pwr_baseclasses.h"
#include "co_dcli.h"
#include "co_time.h"

#include "cow_wow_gtk.h"

#include "flow_widget_gtk.h"

#include "wb_foe.h"
#include "wb_foe_msg.h"
#include "wb_goec.h"
#include "wb_gre_gtk.h"
#include "wb_utl_api.h"
#include "wb_vldh_msg.h"

//
// Constructor
//
WGreGtk::WGreGtk(
    void* wg_parent_ctx, GtkWidget* wg_parent_wid, const char* name)
    : WGre(wg_parent_ctx, 0), parent_wid(wg_parent_wid), trace_timerid(0)
{
  ctx_init();

  form_widget = scrolledflowwidgetgtk_new(init_flow, this, &flow_widget);
  gtk_widget_show_all(flow_widget);
  popupmenu_mode = GRE_POPUPMENUMODE_OBJECT;
}

WGreGtk::~WGreGtk()
{
  gtk_widget_destroy(form_widget);
}

int WGreGtk::new_navigator(GtkWidget* parent)
{
  nav_widget = flownavwidgetgtk_new(flow_widget);
  return 1;
}

int WGreGtk::new_navigator_popup()
{
  return 1;
}

static gboolean wgregtk_trace_scan(void* data)
{
  WGreGtk::trace_scan((WGreGtk*)data);
  return FALSE;
}

void WGreGtk::trace_scan(WGreGtk* gre)
{
  if (gre->trace_started) {
    flow_TraceScan(gre->flow_ctx);

    gre->trace_timerid = g_timeout_add(500, wgregtk_trace_scan, gre);
  }
}

void WGreGtk::trace_start()
{
  trace_started = 1;
  trace_scan(this);
}

void WGreGtk::trace_stop()
{
  if (trace_started) {
    trace_started = 0;
    if (trace_timerid)
      g_source_remove(trace_timerid);
  }
}

void WGreGtk::get_popup_position(int* x, int* y)
{
  gint wind_x, wind_y;

  CoWowGtk::PopupPosition(form_widget, *x, *y, &wind_x, &wind_y);
  *x = wind_x;
  *y = wind_y;
}
