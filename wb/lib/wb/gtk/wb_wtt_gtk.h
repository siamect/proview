/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_wtt_gtk_h
#define wb_wtt_gtk_h

/* wb_wtt_gtk.h -- Simple navigator */

#include "cow_wow_gtk.h"

#include "wb_wtt.h"

class WttGtk : public Wtt {
public:
  WttGtk(void* wt_parent_ctx, GtkWidget* wt_parent_wid, const char* wt_name,
      const char* iconname, ldh_tWBContext wt_wbctx, pwr_tVolumeId wt_volid,
      ldh_tVolume wt_volctx, wnav_sStartMenu* root_menu, pwr_tStatus* status);
  WttGtk()
  {
  }

  GtkWidget* parent_wid;
  GtkWidget* wnav_brow_widget;
  GtkWidget* wnavnode_brow_widget;
  GtkWidget* wnav_paned;
  GtkWidget* palette_widget;
  GtkWidget* toplevel;
  GtkWidget* msg_label;
  GtkWidget* cmd_prompt;
  GtkWidget* cmd_input;
  GtkWidget* wnav_form;
  GtkWidget* palette_paned;
  GtkWidget* india_widget;
  GtkWidget* india_label;
  GtkWidget* india_text;
  GtkWidget* confirm_widget;
  GtkWidget* confirm_label;
  GtkWidget* boot_dia;
  GtkWidget* boot_list;
  GtkWidget* cm_normal_syntax;
  GtkWidget* cm_gms_syntax;
  GtkWidget* cm_extern_syntax;
  GtkWidget* cm_add_attribute;
  GtkWidget* cm_add_type;
  GtkWidget* cm_add_volume;
  GtkWidget* options_form;
  GtkWidget* enable_comment_w;
  GtkWidget* show_plant_w;
  GtkWidget* show_node_w;
  GtkWidget* show_class_w;
  GtkWidget* show_alias_w;
  GtkWidget* show_descrip_w;
  GtkWidget* show_objref_w;
  GtkWidget* show_objxref_w;
  GtkWidget* show_attrref_w;
  GtkWidget* show_attrxref_w;
  GtkWidget* build_force_w;
  GtkWidget* build_debug_w;
  GtkWidget* build_crossref_w;
  GtkWidget* build_crossrefsim_w;
  GtkWidget* build_crossrefgraph_w;
  GtkWidget* build_manual_w;
  GtkWidget* build_nocopy_w;
  GtkWidget* enable_revisions_w;
  GtkWidget* menu_save_w;
  GtkWidget* menu_revert_w;
  GtkWidget* menu_cut_w;
  GtkWidget* menu_copy_w;
  GtkWidget* menu_copykeep_w;
  GtkWidget* menu_paste_w;
  GtkWidget* menu_pasteinto_w;
  GtkWidget* menu_rename_w;
  GtkWidget* menu_utilities_w;
  GtkWidget* menu_openplc_w;
  GtkWidget* menu_buildobject_w;
  GtkWidget* menu_buildvolume_w;
  GtkWidget* menu_buildnode_w;
  GtkWidget* menu_buildproject_w;
  GtkWidget* menu_buildexport_w;
  GtkWidget* menu_buildimport_w;
  GtkWidget* menu_distribute_w;
  GtkWidget* menu_change_value_w;
  GtkWidget* menu_edit_w;
  GtkWidget* menu_classeditor_w;
  GtkWidget* menu_updateclasses_w;
  GtkWidget* menu_clonevolume_w;
  GtkWidget* menu_creaobjafter_w;
  GtkWidget* menu_creaobjfirst_w;
  GtkWidget* menu_deleteobj_w;
  GtkWidget* menu_moveobjup_w;
  GtkWidget* menu_moveobjdown_w;
  GtkWidget* menu_moveobjinto_w;
  GtkWidget* menu_moveobjontop_w;
  GtkWidget* tools_edit_w;
  GtkWidget* tools_buildnode_w;
  GtkWidget* tools_save_w;
  GtkWidget* view_alltoplevel_w;
  GtkAccelGroup* accel_g;
  int set_focus_disabled;
  gint disfocus_timerid;
  gint selection_timerid;
  int avoid_deadlock;
  gint deadlock_timerid;
  GdkCursor* clock_cursor;
  int popupmenu_x;
  int popupmenu_y;
  static CoWowRecall cmd_recall;
  static CoWowRecall value_recall;
  static CoWowRecall name_recall;
  CoWowEntryGtk* cmd_entry;
  CoWowFocusTimerGtk focustimer;
  int realized;

  GtkWidget* build_menu();
  GtkWidget* build_submenu(GtkWidget* Parent, int MenuType,
      const char* MenuTitle, void* MenuUserData,
      void (*Callback)(GtkWidget*, gpointer), void* CallbackData,
      ldh_sMenuItem* Items, int* idx);

  virtual void set_clock_cursor();
  virtual void reset_cursor();
  virtual void free_cursor();
  virtual void set_window_char(int width, int height);
  virtual void get_window_char(int* width, int* height);
  virtual void menu_setup();
  virtual void set_selection_owner();
  virtual void set_palette_selection_owner();
  virtual int create_popup_menu(pwr_sAttrRef attrref, int x, int y);
  virtual int create_pal_popup_menu(pwr_tCid cid, int x, int y);
  virtual void set_noedit_show();
  virtual void set_edit_show();
  virtual void set_twowindows(int two, int display_wnav, int display_wnavnode);
  virtual void message(char severity, const char* message);
  virtual void set_prompt(const char* prompt);
  virtual void open_change_value();
  virtual void close_change_value();
  virtual void open_change_name();
  virtual void watt_new(pwr_tAttrRef aref);
  virtual void wda_new(pwr_tOid oid);
  virtual Ge* ge_new(char* graphname);
  virtual void wcast_new(pwr_tAttrRef aref, pwr_tStatus* sts);
  virtual wb_build* build_new();
  virtual void wpkg_new();
  virtual int ute_new(char* title);
  virtual void open_input_dialog(const char* text, const char* title,
      const char* init_text, void (*ok_cb)(Wtt*, char*));
  virtual void open_confirm(const char* text, const char* title,
      void (*ok_cb)(Wtt*), void (*no_cb)(Wtt*));
  virtual void open_boot_window();
  virtual void update_options_form();
  virtual void set_options();
  virtual void pop();
  virtual void disable_focus();
  virtual void update_title();

  void create_options_dialog();
  void create_confirm_dialog();
  void create_input_dialog();

  static gboolean set_selection_owner_proc(void* data);
  static gboolean set_palette_selection_owner_proc(void* data);

  static void activate_change_value(GtkWidget* w, gpointer data);
  static void activate_command(GtkWidget* w, gpointer data);
  static void activate_exit(GtkWidget* w, gpointer data);
  static void activate_print(GtkWidget* w, gpointer data);
  static void activate_collapse(GtkWidget* w, gpointer data);
  static void activate_save(GtkWidget* w, gpointer data);
  static void activate_revert(GtkWidget* w, gpointer data);
  static void activate_syntax(GtkWidget* w, gpointer data);
  static void activate_history(GtkWidget* w, gpointer data);
  static void activate_revisions(GtkWidget* w, gpointer data);
  static void activate_find(GtkWidget* w, gpointer data);
  static void activate_findregex(GtkWidget* w, gpointer data);
  static void activate_findnext(GtkWidget* w, gpointer data);
  static void activate_copy(GtkWidget* w, gpointer data);
  static void activate_cut(GtkWidget* w, gpointer data);
  static void activate_paste(GtkWidget* w, gpointer data);
  static void activate_pasteinto(GtkWidget* w, gpointer data);
  static void activate_copykeep(GtkWidget* w, gpointer data);
  static void activate_rename(GtkWidget* w, gpointer data);
  static void activate_creaobjafter(GtkWidget* w, gpointer data);
  static void activate_creaobjfirst(GtkWidget* w, gpointer data);
  static void activate_moveobjup(GtkWidget* w, gpointer data);
  static void activate_moveobjdown(GtkWidget* w, gpointer data);
  static void activate_moveobjinto(GtkWidget* w, gpointer data);
  static void activate_moveobjontop(GtkWidget* w, gpointer data);
  static void activate_deleteobj(GtkWidget* w, gpointer data);
  static void activate_configure(GtkWidget* w, gpointer data);
  static void activate_utilities(GtkWidget* w, gpointer data);
  static void activate_openobject(GtkWidget* w, gpointer data);
  static void activate_openvolobject(GtkWidget* w, gpointer data);
  static void activate_openplc(GtkWidget* w, gpointer data);
  static void activate_buildobject(GtkWidget* w, gpointer data);
  static void activate_openvolume(GtkWidget* w, gpointer data);
  static void activate_openbuffer(GtkWidget* w, gpointer data);
  static void activate_confproject(GtkWidget* w, gpointer data);
  static void activate_openfile_dbs(GtkWidget* w, gpointer data);
  static void activate_openfile_wbl(GtkWidget* w, gpointer data);
  static void activate_openpl(GtkWidget* w, gpointer data);
  static void activate_opengvl(GtkWidget* w, gpointer data);
  static void activate_openudb(GtkWidget* w, gpointer data);
  static void activate_spreadsheet(GtkWidget* w, gpointer data);
  static void activate_openge(GtkWidget* w, gpointer data);
  static void activate_openclasseditor(GtkWidget* w, gpointer data);
  static void activate_buildvolume(GtkWidget* w, gpointer data);
  static void activate_buildnode(GtkWidget* w, gpointer data);
  static void activate_builddirectories(GtkWidget* w, gpointer data);
  static void activate_buildimport(GtkWidget* w, gpointer data);
  static void activate_buildexport(GtkWidget* w, gpointer data);
  static void activate_distribute(GtkWidget* w, gpointer data);
  static void activate_showcrossref(GtkWidget* w, gpointer data);
  static void activate_updateclasses(GtkWidget* w, gpointer data);
  static void activate_clonevolume(GtkWidget* w, gpointer data);
  static void activate_backupfile(GtkWidget* w, gpointer data);
  static void activate_zoom_in(GtkWidget* w, gpointer data);
  static void activate_zoom_out(GtkWidget* w, gpointer data);
  static void activate_zoom_reset(GtkWidget* w, gpointer data);
  static void activate_twowindows(GtkWidget* w, gpointer data);
  static void activate_set_alltoplevel(GtkWidget* w, gpointer data);
  static void activate_messages(GtkWidget* w, gpointer data);
  static void activate_view(GtkWidget* w, gpointer data);
  static void activate_savesettings(GtkWidget* w, gpointer data);
  static void activate_restoresettings(GtkWidget* w, gpointer data);
  static void activate_scriptproj(GtkWidget* w, gpointer data);
  static void activate_scriptbase(GtkWidget* w, gpointer data);
  static void activate_set_advuser(GtkWidget* w, gpointer data);
  static void activate_rtmon(GtkWidget* w, gpointer data);
  static void activate_statusmon(GtkWidget* w, gpointer data);
  static void activate_help(GtkWidget* w, gpointer data);
  static void activate_help_project(GtkWidget* w, gpointer data);
  static void activate_help_proview(GtkWidget* w, gpointer data);
  static void valchanged_cmd_input(GtkWidget* w, gpointer data);
  static void activate_india_ok(GtkWidget* w, gpointer data);
  static void activate_india_cancel(GtkWidget* w, gpointer data);
  static void activate_confirm_ok(GtkWidget* w, gpointer data);
  static void activate_confirm_no(GtkWidget* w, gpointer data);
  static void activate_confirm_cancel(GtkWidget* w, gpointer data);
  static void activate_selmode(GtkWidget* w, gpointer data);
  static void boot_list_cr(GtkWidget* w, gpointer data);
  static void boot_cancel_cb(GtkWidget* w, gpointer data);
  static void boot_destroy_cb(GtkWidget* w, gpointer data);
  static gint boot_delete_cb(GtkWidget* w, GdkEvent* event, gpointer data);
  static void boot_row_activated_cb(GtkTreeView* tree_view, GtkTreePath* path,
      GtkTreeViewColumn* column, gpointer data);
  static void boot_ok_cb(GtkWidget* w, gpointer data);
  static void activate_options_ok(GtkWidget* w, gpointer data);
  static void activate_options_apply(GtkWidget* w, gpointer data);
  static void activate_options_cancel(GtkWidget* w, gpointer data);

  static void enable_set_focus(Wtt* wtt);
  static void disable_set_focus(Wtt* wtt, int time);
  static void reset_avoid_deadlock(Wtt* wtt);
  static void set_avoid_deadlock(Wtt* wtt, int time);
  static gboolean action_inputfocus(
      GtkWidget* w, GdkEvent* event, gpointer data);
  static gboolean focused_cmd_input(
      GtkWidget* w, GdkEvent* event, gpointer data);
  static gboolean hide_cmd_input(GtkWidget* w, gpointer data);
  static void menu_position_func(
      GtkMenu* menu, gint* x, gint* y, gboolean* push_in, gpointer data);
  static void popup_button_cb(GtkWidget* w, gpointer data);

  ~WttGtk();
};

GtkWidget* wtt_create_popup_menu(Wtt* wtt, pwr_sAttrRef aref, pwr_tCid cid,
    void (*message_cb)(void*, char, char*));
#endif
