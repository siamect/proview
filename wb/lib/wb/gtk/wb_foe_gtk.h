/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_foe_gtk_h
#define wb_foe_gtk_h

/* wb_foe_gtk.h -- function block object editor */

#include "wb_foe.h"

#include "cow_wow_gtk.h"

struct s_widgets {
  GtkWidget* label;
  GtkWidget* textinput;
  GtkWidget* pane;
  GtkWidget* subpane;
  GtkWidget* caution;
  GtkWidget* caution_label;
  GtkWidget* adb;
  GtkWidget* msgbox;
  GtkWidget* foe_window;
  GtkWidget* popupmenu;
  GtkWidget* file_entry;
  GtkWidget* save;
  GtkWidget* exit;
  GtkWidget* savetrace;
  GtkWidget* restoretrace;
  GtkWidget* print;
  GtkWidget* syntax;
  GtkWidget* compile;
  GtkWidget* redraw;
  GtkWidget* plcattribute;
  GtkWidget* winddelete;
  GtkWidget* quit;
  GtkWidget* cut;
  GtkWidget* copy;
  GtkWidget* paste;
  GtkWidget* undelete;
  GtkWidget* unselect;
  GtkWidget* createnode;
  GtkWidget* createcon;
  GtkWidget* connect;
  GtkWidget* del;
  GtkWidget* changetext;
  GtkWidget* expand;
  GtkWidget* compress;
  GtkWidget* edit_entry; /* entry of the menu */
  GtkWidget* search_entry; /* entry of the menu */
  GtkWidget* customize_entry; /* entry of the menu */
  GtkWidget* trace_togg; /* togg under the function entry of the menu */
  GtkWidget* simulate_togg; /* togg under the function entry of the menu */
  GtkWidget* view_togg; /* togg under the function entry of the menu */
  GtkWidget* edit_togg; /* togg under the function entry of the menu */
  GtkWidget* con_palette;
  GtkWidget* node_palette;
  GtkWidget* nav_palette;
  GtkWidget* view_objectpal;
  GtkWidget* view_conpal;
  GtkWidget* view_plantpal;
  GtkWidget* tools_save;
  GtkWidget* tools_build;
  GtkWidget* tools_redraw;
  GtkWidget* tools_singlelinetext;
  GtkWidget* tools_bodytext;
  GtkWidget* tools_textheader;
  GtkWidget* tools_document;
  GtkWidget* tools_document_landscape;
  GtkWidget* tools_confeedback;
  GtkWidget* lockconpoint;
  GtkWidget* move_right;
  GtkWidget* move_left;
  GtkWidget* move_up;
  GtkWidget* move_down;
  GtkWidget* select_addnextright;
  GtkWidget* select_addnextleft;
  GtkWidget* select_addnextup;
  GtkWidget* select_addnextdown;
  GtkWidget* select_cp_nextright;
  GtkWidget* select_cp_nextleft;
  GtkWidget* select_cp_nextup;
  GtkWidget* select_cp_nextdown;
};

class WFoeGtk : public WFoe {
public:
  GtkWidget* parent_wid;
  GtkWidget* toplevel;
  struct s_widgets widgets;
  GdkAtom objid_atom;
  int popupmenu_x;
  int popupmenu_y;
  CoWowFocusTimerGtk focustimer;

  WFoeGtk(void* f_parent_ctx, GtkWidget* f_parent_wid, const char* f_name,
      pwr_tObjid plcprogram, ldh_tWBContext ldhwbctx, ldh_tSesContext ldhsesctx,
      int f_map_window, ldh_eAccess f_access, unsigned int f_options,
      pwr_tStatus* sts);
  WFoeGtk(void* f_parent_ctx, GtkWidget* f_parent_wid, const char* f_name,
      pwr_tObjid plcprogram, ldh_tWBContext ldhwbctx, ldh_tSesContext ldhsesctx,
      vldh_t_node nodeobject, unsigned long windowindex,
      unsigned long new_window, int f_map_window, ldh_eAccess f_access,
      foe_eFuncAccess function_access, unsigned int f_options,
      pwr_tStatus* sts);

  virtual void pop();
  virtual WAtt* watt_new(void* a_parent_ctx, ldh_tSesContext a_ldhses,
      pwr_sAttrRef a_aref, int a_editmode, int a_advanced_user,
      int a_display_objectname);
  virtual WAttText* watttext_new(void* a_parent_ctx, ldh_tSesContext a_ldhses,
      pwr_sAttrRef a_aref, int a_editmode, pwr_tStatus* status);
  virtual WFoe* subwindow_new(void* f_parent_ctx, char* f_name,
      pwr_tObjid plcprogram, ldh_tWBContext ldhwbctx, ldh_tSesContext ldhsesctx,
      vldh_t_node nodeobject, unsigned long windowindex,
      unsigned long new_window, int f_map_window, ldh_eAccess f_access,
      foe_eFuncAccess function_access, unsigned int f_options,
      pwr_tStatus* sts);
  virtual void destroy();
  virtual void set_title();
  virtual void message(const char* new_label);
  virtual void msgbox(const char* new_label);
  virtual int create_window(int x_top, int y_top, int width_adb, int height_adb,
      ldh_tSesContext ldhsession, foe_eFuncAccess function_access);
  virtual int get_textinput(const char* message, int (*function)(WFoe*, char*));
  virtual int edit_set_entries();
  virtual int view_set_entries();
  virtual void set_mode_button_state(int mode, int state);
  virtual int modify_popup(unsigned long popupmenu_mask, int x, int y);
  virtual int get_selection(char* str, int len);
  virtual void popupmsg(const char* new_label, void (*yes_procedure)(WFoe*),
      void (*no_procedure)(WFoe*), void (*cancel_procedure)(WFoe*));

  int register_callbacks();
  void create_confirm_dialog();

  static void reset_current_node(WFoe* foe);
  static gboolean action_inputfocus(
      GtkWidget* w, GdkEvent* event, gpointer data);

  static void activate_save(GtkWidget* w, gpointer data);
  static void activate_exit(GtkWidget* w, gpointer data);
  static void activate_winddelete(GtkWidget* w, gpointer data);
  static void activate_quit(GtkWidget* w, gpointer data);
  static void activate_savetrace(GtkWidget* w, gpointer data);
  static void activate_restoretrace(GtkWidget* w, gpointer data);
  static void activate_history(GtkWidget* w, gpointer data);
  static void activate_print(GtkWidget* w, gpointer data);
  static void activate_printdialog(GtkWidget* w, gpointer data);
  static void activate_printoverv(GtkWidget* w, gpointer data);
  static void activate_printselect(GtkWidget* w, gpointer data);
  static void activate_printpdf(GtkWidget* w, gpointer data);
  static void activate_syntax(GtkWidget* w, gpointer data);
  static void activate_compile(GtkWidget* w, gpointer data);
  static void delete_subwindow_ok_cb(void* ctx, void* data);
  static void activate_delete(GtkWidget* w, gpointer data);
  static void activate_delete_confirm(GtkWidget* w, gpointer data);
  static void activate_createobject(GtkWidget* w, gpointer data);
  static void activate_changetext(GtkWidget* w, gpointer data);
  static void activate_cut(GtkWidget* w, gpointer data);
  static void activate_copy(GtkWidget* w, gpointer data);
  static void activate_paste(GtkWidget* w, gpointer data);
  static void activate_select_nextright(GtkWidget* w, gpointer foe);
  static void activate_select_nextleft(GtkWidget* w, gpointer foe);
  static void activate_select_nextup(GtkWidget* w, gpointer foe);
  static void activate_select_nextdown(GtkWidget* w, gpointer foe);
  static void activate_select_addnextright(GtkWidget* w, gpointer foe);
  static void activate_select_addnextleft(GtkWidget* w, gpointer foe);
  static void activate_select_addnextup(GtkWidget* w, gpointer foe);
  static void activate_select_addnextdown(GtkWidget* w, gpointer foe);
  static void activate_select_cp_nextright(GtkWidget* w, gpointer foe);
  static void activate_select_cp_nextleft(GtkWidget* w, gpointer foe);
  static void activate_select_cp_nextup(GtkWidget* w, gpointer foe);
  static void activate_select_cp_nextdown(GtkWidget* w, gpointer foe);
  static void activate_scroll_right(GtkWidget* w, gpointer foe);
  static void activate_scroll_left(GtkWidget* w, gpointer foe);
  static void activate_scroll_up(GtkWidget* w, gpointer foe);
  static void activate_scroll_down(GtkWidget* w, gpointer foe);
  static void activate_move_right(GtkWidget* w, gpointer foe);
  static void activate_move_left(GtkWidget* w, gpointer foe);
  static void activate_move_up(GtkWidget* w, gpointer foe);
  static void activate_move_down(GtkWidget* w, gpointer foe);
  static void activate_attribute(GtkWidget* w, gpointer data);
  static void activate_editcode(GtkWidget* w, gpointer data);
  static void activate_subwindow(GtkWidget* w, gpointer data);
  static void activate_undelete(GtkWidget* w, gpointer data);
  static void activate_unselect(GtkWidget* w, gpointer data);
  static void activate_createnode(GtkWidget* w, gpointer data);
  static void activate_createcon(GtkWidget* w, gpointer data);
  static void activate_lockconpoint(GtkWidget* w, gpointer data);
  static void activate_gridsize1(GtkWidget* w, gpointer data);
  static void activate_gridsize2(GtkWidget* w, gpointer data);
  static void activate_gridsize3(GtkWidget* w, gpointer data);
  static void activate_gridsize4(GtkWidget* w, gpointer data);
  static void activate_gridsize5(GtkWidget* w, gpointer data);
  static void activate_showgrid(GtkWidget* w, gpointer data);
  static void activate_redraw(GtkWidget* w, gpointer data);
  static void activate_zoomin(GtkWidget* w, gpointer data);
  static void activate_zoomout(GtkWidget* w, gpointer data);
  static void activate_unzoom(GtkWidget* w, gpointer data);
  static void activate_palette_con(GtkWidget* w, gpointer data);
  static void activate_palette_object(GtkWidget* w, gpointer data);
  static void activate_palette_plant(GtkWidget* w, gpointer data);
  static void activate_confeedback(GtkWidget* w, gpointer data);
  static void activate_singlelinetext(GtkWidget* w, gpointer data);
  static void activate_bodytext(GtkWidget* w, gpointer data);
  static void activate_textheader(GtkWidget* w, gpointer data);
  static void activate_document(GtkWidget* w, gpointer data);
  static void activate_document_landscape(GtkWidget* w, gpointer data);
  static void activate_refcon(GtkWidget* w, gpointer data);
  static void activate_showexeord(GtkWidget* w, gpointer data);
  static void activate_plcattribute(GtkWidget* w, gpointer data);
  static void activate_search(GtkWidget* w, gpointer data);
  static void activate_searchobject(GtkWidget* w, gpointer data);
  static void activate_searchstring(GtkWidget* w, gpointer data);
  static void activate_searchnext(GtkWidget* w, gpointer data);
  static void activate_getobj(GtkWidget* w, gpointer data);
  static void activate_expand(GtkWidget* w, gpointer data);
  static void activate_compress(GtkWidget* w, gpointer data);
  static void activate_help(GtkWidget* w, gpointer data);
  static void activate_helpplc(GtkWidget* w, gpointer data);
  static void activate_helpplclist(GtkWidget* w, gpointer data);
  static void activate_helpclass(GtkWidget* w, gpointer data);
  static void activate_trace_togg(GtkWidget* w, gpointer data);
  static void activate_simulate_togg(GtkWidget* w, gpointer data);
  static void activate_view_togg(GtkWidget* w, gpointer data);
  static void activate_edit_togg(GtkWidget* w, gpointer data);
  static void create_label(GtkWidget* w, gpointer data);
  static void create_textinput(GtkWidget* w, gpointer data);
  static void create_widget_cb(GtkWidget* w, gpointer data);
  static void create_adb(GtkWidget* w, gpointer data);
  static void create_edit_form(GtkWidget* w, gpointer data);
  static void create_subpane(GtkWidget* w, gpointer data);
  static void create_palette_object(GtkWidget* w, gpointer data);
  static void popdown_pop(GtkWidget* w, gpointer data);
  static void valchanged_textinput(GtkWidget* w, gpointer data);
  static void yes_popupmsg(GtkWidget* w, gpointer data);
  static void no_popupmsg(GtkWidget* w, gpointer data);
  static void cancel_popupmsg(GtkWidget* w, gpointer data);
  static void popup_unmap_cb(GtkWidget* w, gpointer data);
};

#endif
