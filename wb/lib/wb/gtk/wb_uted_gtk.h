/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_uted_gtk_h
#define wb_uted_gtk_h

#include "wb_uted.h"

struct uted_s_widgets {
  GtkWidget* uted_window;
  GtkWidget* label;
  GtkWidget* adb;
  GtkWidget* file_entry;
  GtkWidget* quit;
  GtkWidget* batchoptmenu;
  GtkWidget* commandlabel;
  GtkWidget* batch;
  GtkWidget* currsess;
  GtkWidget* help;
  GtkWidget* timelabel;
  GtkWidget* timevalue;
  GtkWidget* qualifier[UTED_QUALS];
  GtkWidget* value[UTED_QUALS];
  GtkWidget* present[UTED_QUALS];
  GtkWidget* optmenubuttons[UTED_MAX_COMMANDS];
  GtkWidget* optmenubuttonslabel[UTED_MAX_COMMANDS];
  GtkWidget* command_window;
  GtkWidget* questionbox;
  GtkWidget* commandwind_button;
};

class WUtedGtk : public WUted {
public:
  GtkWidget* parent_wid;
  GtkWidget* toplevel;
  struct uted_s_widgets widgets;
  GdkCursor* cursor;

  WUtedGtk(void* wu_parent_ctx, GtkWidget* wu_parent_wid, const char* wu_name,
      const char* wu_iconname, ldh_tWBContext wu_ldhwb,
      ldh_tSesContext wu_ldhses, int wu_editmode, void (*wu_quit_cb)(void*),
      pwr_tStatus* status);
  ~WUtedGtk();
  void remove_command_window();
  void reset_qual();
  void message(const char* new_label);
  void set_command_window(char* cmd);
  void raise_window();
  void clock_cursor();
  void reset_cursor();
  void configure_quals(const char* label);
  void enable_entries(int enable);
  void get_value(int idx, char* str, int len);
  bool get_present(int idx);
  void questionbox(char* question_title, char* question_text,
      void (*yes_procedure)(WUted*), void (*no_procedure)(WUted*),
      void (*cancel_procedure)(WUted*), pwr_tBoolean cancel);
  void update_title(int editmode);

  static void activate_command(GtkWidget* w, gpointer data);
  static void create_command(GtkWidget* w, gpointer data);
  static void activate_helputils(GtkWidget* w, gpointer data);
  static void activate_helppwr_plc(GtkWidget* w, gpointer data);
  static void activate_batch(GtkWidget* w, gpointer data);
  static void activate_currsess(GtkWidget* w, gpointer data);
  static void activate_quit(GtkWidget* w, gpointer data);
  static void activate_ok(GtkWidget* w, gpointer data);
  static void activate_cancel(GtkWidget* w, gpointer data);
  static void activate_show_cmd(GtkWidget* w, gpointer data);
  static void activate_cmd_wind(GtkWidget* w, gpointer data);
  static void commandchanged(GtkWidget* w, gpointer data);
  static void activate_present(GtkWidget* w, gpointer data);
  static void qbox_cr(GtkWidget* w, gpointer data);
  static void qbox_yes_cb(GtkWidget* w, gpointer data);
  static void qbox_no_cb(GtkWidget* w, gpointer data);
  static void qbox_cancel_cb(GtkWidget* w, gpointer data);
};

#endif
