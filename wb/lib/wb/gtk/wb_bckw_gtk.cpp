/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_bckw_gtk.cpp -- Backupfile display window */

#include <stdlib.h>

#include "co_time.h"

#include "cow_xhelp.h"

#include "wb_bckw_gtk.h"
#include "wb_bckwnav_gtk.h"

static gint delete_event(GtkWidget* w, GdkEvent* event, gpointer bckw)
{
  WbBckWGtk::activate_exit(w, bckw);

  return TRUE;
}

static void destroy_event(GtkWidget* w, gpointer data)
{
}

WbBckWGtk::WbBckWGtk(void* bckw_parent_ctx, GtkWidget* bckw_parent_wid,
    ldh_tSession bckw_ldhses, const char* bckw_name, wb_bck_list* l_list,
    int l_editmode, pwr_tStatus* status)
    : WbBckW(
          bckw_parent_ctx, bckw_ldhses, bckw_name, l_list, l_editmode, status),
      parent_wid(bckw_parent_wid)
{
  const int window_width = 1100;
  const int window_height = 600;

  toplevel = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height",
      window_height, "default-width", window_width, "title", bckw_name, NULL);

  g_signal_connect(toplevel, "delete_event", G_CALLBACK(delete_event), this);
  g_signal_connect(toplevel, "destroy", G_CALLBACK(destroy_event), this);
  g_signal_connect(toplevel, "focus-in-event",
      G_CALLBACK(WbBckWGtk::action_inputfocus), this);

  CoWowGtk::SetWindowIcon(toplevel);

  GtkAccelGroup* accel_g
      = (GtkAccelGroup*)g_object_new(GTK_TYPE_ACCEL_GROUP, NULL);
  gtk_window_add_accel_group(GTK_WINDOW(toplevel), accel_g);

  GtkMenuBar* menu_bar = (GtkMenuBar*)g_object_new(GTK_TYPE_MENU_BAR, NULL);

  // File Entry
  GtkWidget* file_close
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_CLOSE, accel_g);
  g_signal_connect(
      file_close, "activate", G_CALLBACK(WbBckWGtk::activate_exit), this);

  GtkWidget* file_print
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_PRINT, accel_g);
  g_signal_connect(
      file_print, "activate", G_CALLBACK(WbBckWGtk::activate_print), this);

  file_transfer_wb = gtk_menu_item_new_with_mnemonic("_Transfer to database");
  g_signal_connect(file_transfer_wb, "activate",
      G_CALLBACK(WbBckWGtk::activate_transfer_wb), this);

  GtkWidget* file_filter = gtk_menu_item_new_with_mnemonic("_Filter");
  g_signal_connect(
      file_filter, "activate", G_CALLBACK(WbBckWGtk::activate_filter), this);

  GtkWidget* file_open = gtk_menu_item_new_with_mnemonic("_Open");
  g_signal_connect(
      file_open, "activate", G_CALLBACK(WbBckWGtk::activate_open), this);

  GtkWidget* file_diff
      = gtk_menu_item_new_with_mnemonic("_Compare Backup File");
  g_signal_connect(
      file_diff, "activate", G_CALLBACK(WbBckWGtk::activate_diff), this);

  GtkWidget* file_diff_wb
      = gtk_menu_item_new_with_mnemonic("C_ompare Database");
  g_signal_connect(
      file_diff_wb, "activate", G_CALLBACK(WbBckWGtk::activate_diff_wb), this);

  GtkMenu* file_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_open);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_diff);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_diff_wb);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_print);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_transfer_wb);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_filter);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_close);

  GtkWidget* file = gtk_menu_item_new_with_mnemonic("_File");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), file);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(file), GTK_WIDGET(file_menu));

  // Edit menu
  edit_check_all = gtk_menu_item_new_with_mnemonic("_Check all");
  g_signal_connect(edit_check_all, "activate",
      G_CALLBACK(WbBckWGtk::activate_check_all), this);

  edit_check_clear = gtk_menu_item_new_with_mnemonic("_Check clear");
  g_signal_connect(edit_check_clear, "activate",
      G_CALLBACK(WbBckWGtk::activate_check_clear), this);

  GtkMenu* edit_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), edit_check_all);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), edit_check_clear);

  GtkWidget* edit = gtk_menu_item_new_with_mnemonic("_Edit");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), edit);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(edit), GTK_WIDGET(edit_menu));

  // View menu
  GtkWidget* view_zoom_in
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_IN, NULL);
  g_signal_connect(
      view_zoom_in, "activate", G_CALLBACK(WbBckWGtk::activate_zoom_in), this);
  gtk_widget_add_accelerator(view_zoom_in, "activate", accel_g, 'i',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_out
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_OUT, NULL);
  g_signal_connect(view_zoom_out, "activate",
      G_CALLBACK(WbBckWGtk::activate_zoom_out), this);
  gtk_widget_add_accelerator(view_zoom_out, "activate", accel_g, 'o',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_reset
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_100, NULL);
  g_signal_connect(view_zoom_reset, "activate",
      G_CALLBACK(WbBckWGtk::activate_zoom_reset), this);

  GtkMenu* view_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_in);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_out);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_reset);

  GtkWidget* view = gtk_menu_item_new_with_mnemonic("_View");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), view);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(view), GTK_WIDGET(view_menu));

  // Help menu
  GtkWidget* help_backup
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_HELP, NULL);
  g_signal_connect(
      help_backup, "activate", G_CALLBACK(WbBckWGtk::activate_help), this);

  GtkMenu* help_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_backup);

  GtkWidget* help = gtk_menu_item_new_with_mnemonic("_Help");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), help);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(help), GTK_WIDGET(help_menu));

  form = gtk_vbox_new(FALSE, 0);

  // Create bckwnav
  bckwnav = new WbBckWNavGtk(
      this, form, bckw_ldhses, l_list, l_editmode, &nav_widget);

  gtk_box_pack_start(GTK_BOX(form), GTK_WIDGET(menu_bar), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(form), GTK_WIDGET(nav_widget), TRUE, TRUE, 0);

  gtk_container_add(GTK_CONTAINER(toplevel), form);

  gtk_widget_show_all(toplevel);

  wow = new CoWowGtk(toplevel);

  show();

  if (list && list->type() != bck_eType_WbDiff) {
    g_object_set(file_transfer_wb, "visible", FALSE, NULL);
    g_object_set(edit_check_all, "visible", FALSE, NULL);
    g_object_set(edit_check_clear, "visible", FALSE, NULL);
  }
}

//
//  Delete window
//
WbBckWGtk::~WbBckWGtk()
{
  if (bckwnav)
    delete bckwnav;
  if (toplevel)
    gtk_widget_destroy(toplevel);
}

void WbBckWGtk::print()
{
  pwr_tStatus sts;

  CoWowGtk::CreateBrowPrintDialogGtk(name, bckwnav->brow->ctx,
      flow_eOrientation_Portrait, 1.0, (void*)toplevel, &sts);
}

gboolean WbBckWGtk::action_inputfocus(
    GtkWidget* w, GdkEvent* event, gpointer data)
{
  WbBckWGtk* bckw = (WbBckWGtk*)data;

  if (bckw) {
    if (bckw->focustimer.disabled())
      return FALSE;

    bckw->bckwnav->set_input_focus();
    bckw->focustimer.disable(400);
  }
  return FALSE;
}

void WbBckWGtk::set_title(char* title)
{
  char* titleutf8
      = g_convert(title, -1, "UTF-8", "ISO8859-1", NULL, NULL, NULL);
  gtk_window_set_title(GTK_WINDOW(toplevel), titleutf8);
  g_free(titleutf8);
}

void WbBckWGtk::activate_exit(GtkWidget* w, gpointer data)
{
  WbBckWGtk* bckw = (WbBckWGtk*)data;

  delete bckw;
}

void WbBckWGtk::activate_print(GtkWidget* w, gpointer data)
{
  WbBckW* bckw = (WbBckW*)data;

  bckw->activate_print();
}

void WbBckWGtk::activate_open(GtkWidget* w, gpointer data)
{
  WbBckW* bckw = (WbBckW*)data;

  bckw->activate_open();
}

void WbBckWGtk::activate_diff(GtkWidget* w, gpointer data)
{
  WbBckW* bckw = (WbBckW*)data;

  bckw->activate_diff();
}

void WbBckWGtk::activate_diff_wb(GtkWidget* w, gpointer data)
{
  WbBckW* bckw = (WbBckW*)data;

  bckw->activate_diff_wb();
}

void WbBckWGtk::activate_transfer_wb(GtkWidget* w, gpointer data)
{
  WbBckW* bckw = (WbBckW*)data;

  bckw->activate_transfer_wb();
}

void WbBckWGtk::activate_filter(GtkWidget* w, gpointer data)
{
  WbBckW* bckw = (WbBckW*)data;

  bckw->activate_filter();
}

void WbBckWGtk::activate_check_all(GtkWidget* w, gpointer data)
{
  WbBckW* bckw = (WbBckW*)data;

  bckw->activate_check_all();
}

void WbBckWGtk::activate_check_clear(GtkWidget* w, gpointer data)
{
  WbBckW* bckw = (WbBckW*)data;

  bckw->activate_check_clear();
}

void WbBckWGtk::activate_zoom_in(GtkWidget* w, gpointer data)
{
  WbBckW* bckw = (WbBckW*)data;

  bckw->bckwnav->zoom(1.2);
}

void WbBckWGtk::activate_zoom_out(GtkWidget* w, gpointer data)
{
  WbBckW* bckw = (WbBckW*)data;

  bckw->bckwnav->zoom(5.0 / 6);
}

void WbBckWGtk::activate_zoom_reset(GtkWidget* w, gpointer data)
{
  WbBckW* bckw = (WbBckW*)data;

  bckw->bckwnav->unzoom();
}

void WbBckWGtk::activate_help(GtkWidget* w, gpointer data)
{
  CoXHelp::dhelp(
      "backup_refman", 0, navh_eHelpFile_Other, "$pwr_lang/man_dg.dat", true);
}
