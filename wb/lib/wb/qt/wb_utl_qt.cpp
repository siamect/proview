/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_utl.c
   Utilitys for getting information about the plcprogram structure.  */

#include <locale.h>
#include <string.h>

#include "cow_qt_helpers.h"
#include "cow_style_qt.h"

#include "wb_foe_msg.h"
#include "wb_foe_qt.h"
#include "wb_utl_qt.h"

#include <QApplication>

static int qt_initialized = 0;

int wb_utl_qt::utl_foe_new(const char* name, pwr_tOid plcpgm,
    ldh_tWBContext ldhwbctx, ldh_tSesContext ldhsesctx, WFoe** foe,
    int map_window, ldh_eAccess access)
{
  pwr_tStatus sts = 1;

  *foe = WFoe::get(plcpgm);
  if (!*foe) {
    *foe = new WFoeQt(0, name, plcpgm, ldhwbctx, ldhsesctx, map_window, access,
        0, &sts);
  }
  return sts;
}

int wb_utl_qt::utl_foe_new_local(WFoe* foe, const char* name, pwr_tOid plcpgm,
    ldh_tWBContext ldhwbctx, ldh_tSesContext ldhsesctx, vldh_t_node nodeobject,
    unsigned long windowindex, unsigned long new_window, WFoe** return_foe,
    int map_window, ldh_eAccess access, foe_eFuncAccess function_access)
{
  pwr_tStatus sts = 1;

  *return_foe = WFoe::get(plcpgm);
  if (!*return_foe) {
    *return_foe = new WFoeQt(foe, name, plcpgm, ldhwbctx, ldhsesctx, nodeobject,
        windowindex, new_window, map_window, access, function_access, 0, &sts);
  }
  return sts;
}

/*************************************************************************
*
* Name:		utl_create_mainwindow()
*
* Type		int
*
* Type		Parameter	IOGF	Description
*
* Description:
*
**************************************************************************/

int wb_utl_qt::create_mainwindow(int argc, char** argv)
{
  if (!qt_initialized) {
    setlocale(LC_ALL, "en_US");
    setlocale(LC_NUMERIC, "POSIX");
    setlocale(LC_TIME, "en_US");
  }

  widget = new QWidget();
  widget->setMinimumSize(100, 100);
  widget->setWindowTitle(fl("Pwr wb"));
  widget->setAttribute(Qt::WA_DeleteOnClose);
  widget->show();

  if (!qt_initialized) {
    QApplication app(argc, argv);
    QApplication::setStyle(new PwrStyle());
    qt_initialized = 1;
    app.exec();
  }

  return FOE__SUCCESS;
}

int wb_utl_qt::destroy_mainwindow()
{
  widget->close();
  return FOE__SUCCESS;
}
