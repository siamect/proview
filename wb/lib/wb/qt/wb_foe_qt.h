/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_foe_qt_h
#define wb_foe_qt_h

/* wb_foe_qt.h -- function block object editor */

#include "wb_foe.h"

#include "cow_wow_qt.h"

#include <QLabel>
#include <QSplitter>

class WFoeQtWidget;

class WFoeQt : public WFoe {
public:
  QLabel* label;
  QLineEdit* textinput;
  QSplitter* pane;
  QSplitter* subpane;
  QWidget* caution;
  QWidget* popupmenu;
  QAction* save;
  QAction* exit;
  QAction* savetrace;
  QAction* restoretrace;
  QWidget* print;
  QAction* syntax;
  QAction* compile;
  QAction* redraw;
  QAction* plcattribute;
  QAction* winddelete;
  QWidget* quit;
  QAction* cut;
  QAction* copy;
  QAction* paste;
  QAction* undelete;
  QAction* unselect;
  QAction* createnode;
  QAction* createcon;
  QAction* connectA;
  QAction* del;
  QAction* changetext;
  QAction* expand;
  QAction* compress;
  QMenu* edit; /* entry of the menu */
  QAction* trace_togg; /* togg under the function entry of the menu */
  QAction* simulate_togg; /* togg under the function entry of the menu */
  QAction* view_togg; /* togg under the function entry of the menu */
  QAction* edit_togg; /* togg under the function entry of the menu */
  QWidget* con_palette;
  QWidget* node_palette;
  QWidget* nav_palette;
  QAction* view_objectpal;
  QAction* view_conpal;
  QAction* view_plantpal;
  QAction* tools_save;
  QAction* tools_build;
  QAction* tools_redraw;
  QAction* tools_singlelinetext;
  QAction* tools_bodytext;
  QAction* tools_textheader;
  QAction* tools_document;
  QAction* tools_document_landscape;
  QAction* tools_confeedback;
  QAction* lockconpoint;
  QAction* move_right;
  QAction* move_left;
  QAction* move_up;
  QAction* move_down;
  QAction* select_addnextright;
  QAction* select_addnextleft;
  QAction* select_addnextup;
  QAction* select_addnextdown;
  QAction* select_cp_nextright;
  QAction* select_cp_nextleft;
  QAction* select_cp_nextup;
  QAction* select_cp_nextdown;
  CoWowFocusTimerQt focustimer;

  WFoeQt(void* f_parent_ctx, const char* f_name, pwr_tObjid plcprogram,
      ldh_tWBContext ldhwbctx, ldh_tSesContext ldhsesctx, int f_map_window,
      ldh_eAccess f_access, unsigned int f_options, pwr_tStatus* sts);
  WFoeQt(void* f_parent_ctx, const char* f_name, pwr_tObjid plcprogram,
      ldh_tWBContext ldhwbctx, ldh_tSesContext ldhsesctx,
      vldh_t_node nodeobject, unsigned long windowindex,
      unsigned long new_window, int f_map_window, ldh_eAccess f_access,
      foe_eFuncAccess function_access, unsigned int f_options,
      pwr_tStatus* sts);

  virtual void pop();
  virtual WAtt* watt_new(void* a_parent_ctx, ldh_tSesContext a_ldhses,
      pwr_sAttrRef a_aref, int a_editmode, int a_advanced_user,
      int a_display_objectname);
  virtual WAttText* watttext_new(void* a_parent_ctx, ldh_tSesContext a_ldhses,
      pwr_sAttrRef a_aref, int a_editmode, pwr_tStatus* status);
  virtual WFoe* subwindow_new(void* f_parent_ctx, char* f_name,
      pwr_tObjid plcprogram, ldh_tWBContext ldhwbctx, ldh_tSesContext ldhsesctx,
      vldh_t_node nodeobject, unsigned long windowindex,
      unsigned long new_window, int f_map_window, ldh_eAccess f_access,
      foe_eFuncAccess function_access, unsigned int f_options,
      pwr_tStatus* sts);
  virtual void destroy();
  virtual void set_title();
  virtual void message(const char* new_label);
  virtual void msgbox(const char* new_label);
  virtual int create_window(int x_top, int y_top, int width_adb, int height_adb,
      ldh_tSesContext ldhsession, foe_eFuncAccess function_access);
  virtual int get_textinput(const char* message, int (*function)(WFoe*, char*));
  virtual int edit_set_entries();
  virtual int view_set_entries();
  virtual void set_mode_button_state(int mode, int state);
  virtual int modify_popup(unsigned long popupmenu_mask, int x, int y);
  virtual int get_selection(char* str, int len);
  virtual void popupmsg(const char* new_label, void (*yes_procedure)(WFoe*),
      void (*no_procedure)(WFoe*), void (*cancel_procedure)(WFoe*));

private:
  WFoeQtWidget* toplevel;
};

class WFoeQtWidget : public QWidget {
  Q_OBJECT

public:
  WFoeQtWidget(WFoeQt* parent_ctx) : QWidget(), foe(parent_ctx) {}

protected:
  void focusInEvent(QFocusEvent* event);
  void closeEvent(QCloseEvent* event);

public slots:
  void activate_save();
  void activate_winddelete();
  void activate_quit();
  void activate_savetrace();
  void activate_restoretrace();
  void activate_history();
  void activate_print();
  void activate_printdialog();
  void activate_printoverv();
  void activate_printselect();
  void activate_printpdf();
  void activate_syntax();
  void activate_compile();
  void activate_delete();
  void activate_delete_confirm();
  void activate_createobject();
  void activate_changetext();
  void activate_cut();
  void activate_copy();
  void activate_paste();
  void activate_select_next();
  void activate_select_addnext();
  void activate_select_cp_next();
  void activate_scroll();
  void activate_move();
  void activate_attribute();
  void activate_editcode();
  void activate_subwindow();
  void activate_undelete();
  void activate_unselect();
  void activate_createnode();
  void activate_createcon();
  void activate_conpoint_lock();
  void activate_gridsize();
  void activate_showgrid();
  void activate_redraw();
  void activate_zoomin();
  void activate_zoomout();
  void activate_unzoom();
  void activate_palette_con();
  void activate_palette_object();
  void activate_palette_plant();
  void activate_confeedback(bool set);
  void activate_singlelinetext();
  void activate_bodytext();
  void activate_textheader();
  void activate_document();
  void activate_document_landscape();
  void activate_refcon(bool set);
  void activate_showexeord(bool set);
  void activate_plcattribute();
  void activate_search();
  void activate_searchobject();
  void activate_searchstring();
  void activate_searchnext();
  void activate_getobj();
  void activate_expand();
  void activate_compress();
  void activate_help();
  void activate_helpplc();
  void activate_helpplclist();
  void activate_helpclass();
  void activate_trace_togg(bool set);
  void activate_simulate_togg(bool set);
  void activate_view_togg(bool set);
  void activate_edit_togg(bool set);
  void valchanged_textinput();
  void popup_unmap_cb();

  void wfoeqt_reset_current_node();

private:
  WFoeQt* foe;
};

#endif
