/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "wb_orep.h"
#include "co_time.h"

wb_orep::wb_orep() : m_nRef(0)
{
  // printf( "orep C: %x %d\n", this, ++ocnt);
}

wb_orep::~wb_orep()
{
}

void wb_orep::unref()
{
  if (--m_nRef == 0) {
    // printf( "orep  : %x %d\n", this, --ocnt);
    delete this;
  }
}

wb_orep* wb_orep::ref()
{
  m_nRef++;
  return this;
}

bool wb_orep::docBlock(char** block, int* size) const
{
  return false;
}

bool wb_orep::docBlock(char* block)
{
  return false;
}

pwr_tTime wb_orep::modTime()
{
  pwr_tTime t = ohTime();
  pwr_tTime rbt = rbTime();
  pwr_tTime dbt = dbTime();

  if (time_Acomp(&rbt, &t) == 1)
    t = rbt;
  if (time_Acomp(&dbt, &rbt) == 1)
    t = dbt;
  return t;
}

pwr_tTime wb_orep::treeModTime()
{
  pwr_tStatus sts;
  pwr_tTime t = modTime();
  pwr_tTime tchild;
  wb_orep* after;

  for (wb_orep* child = first(&sts); ODD(sts); child = after) {
    child->ref();

    tchild = child->treeModTime();
    if (time_Acomp(&tchild, &t) == 1)
      t = tchild;

    after = child->after(&sts);
    child->unref();
  }
  return t;
}
