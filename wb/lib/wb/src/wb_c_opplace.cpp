/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_c_opplace.c -- work bench methods of the OpPlace class. */

#include "pwr_baseclasses.h"

#include "co_string.h"

#include "wb_pwrb_msg.h"
#include "wb_pwrs.h"
#include "wb_pwrs_msg.h"
#include "wb_session.h"
#include "wb_wsx.h"

static pwr_tStatus PostCreate(
    ldh_tSesContext Session, pwr_tOid Object, pwr_tOid Father, pwr_tCid Class)
{
  pwr_tStatus sts;
  pwr_tObjName name;
  pwr_tMask value = 1;
  pwr_tBoolean bvalue = 1;
  int size;

  sts = ldh_ObjidToName(
      Session, Object, ldh_eName_Object, name, sizeof(name), &size);
  if (EVEN(sts))
    return sts;

  if (streq(name, "OpDefault")) {
    // Set OpHide in OpWindLayout

    sts = ldh_SetObjectPar(Session, Object, "RtBody", "OpWindLayout",
        (char*)&value, sizeof(value));
    if (EVEN(sts))
      return sts;

    sts = ldh_SetObjectPar(Session, Object, "RtBody", "IsDefaultOp",
        (char*)&value, sizeof(bvalue));
    if (EVEN(sts))
      return sts;
  }

  return PWRS__SUCCESS;
}

//
// SyntaxCheck
//
static pwr_tStatus SyntaxCheck(ldh_tSesContext Session, pwr_tAttrRef Object,
    int* ErrorCount, int* WarningCount)
{
  wb_session* sp = (wb_session*)Session;
  pwr_tString80 selectlist[40];
  pwr_tString32 username;

  wb_attribute a = sp->attribute(&Object);
  if (!a)
    return a.sts();

  // Check EventSelectList
  wb_attribute selectlist_a(a, 0, "EventSelectList");
  if (!selectlist_a)
    return selectlist_a.sts();

  selectlist_a.value(selectlist);
  if (!selectlist_a)
    return selectlist_a.sts();

  bool empty = true;
  for (unsigned int i = 0; i < sizeof(selectlist) / sizeof(selectlist[0]);
       i++) {
    if (!streq(selectlist[i], "")) {
      empty = false;
      break;
    }
  }
  if (empty)
    wsx_error_msg_str(Session, "EventSelectList is empty", Object, 'W',
        ErrorCount, WarningCount);

  // Check UserName
  wb_attribute username_a(a, 0, "UserName");
  if (!username_a)
    return username_a.sts();

  username_a.value(username);
  if (!username_a)
    return username_a.sts();

  if (streq(username, ""))
    wsx_error_msg_str(
        Session, "UserName is empty", Object, 'W', ErrorCount, WarningCount);

  return PWRB__SUCCESS;
}

pwr_dExport pwr_BindMethods(OpPlace) = { pwr_BindMethod(PostCreate),
  pwr_BindMethod(SyntaxCheck), pwr_NullMethod };
