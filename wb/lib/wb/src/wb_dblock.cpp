/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <sys/stat.h>

#include <fstream>

#include "co_dcli.h"
#include "co_string.h"
#include "co_syi.h"

#include "wb_dblock.h"

std::vector<wb_lockfile> wb_dblock::m_lockfiles;

char* wb_dblock::lockname(char* name)
{
  static pwr_tFileName fname;

  strcpy(fname, name);
  strcat(fname, ".lock");
  dcli_translate_filename(fname, fname);
  return fname;
}

char* wb_dblock::lockvname(char* fname)
{
  static pwr_tFileName vname;
  char* s;

  strcpy(vname, fname);
  if ((s = strrchr(vname, '.')))
    *s = 0;
  return vname;
}

bool wb_dblock::is_locked(char* name, char* user)
{
  struct stat info;
  if (stat(lockname(name), &info) != -1) {
    if (user) {
      std::ifstream fp(lockname(name));
      fp.getline(user, 80);
      fp.close();
    }
    return true;
  }
  return false;
}

void wb_dblock::dblock(char* name)
{
  pwr_tStatus sts;
  char* value;
  char nodename[80];
  char username[80];

  std::ofstream fp(lockname(name));

  syi_NodeName(&sts, nodename, sizeof(nodename));
  if (EVEN(sts))
    strcpy(nodename, "Unknown");

  value = getenv("USER");
  if (value)
    strncpy(username, value, sizeof(username));
  else
    strcpy(username, "Unknown");

  fp << username << " on " << nodename << '\n';
  fp.close();
  wb_lockfile lf(lockname(name));

  dcli_file_time(lockname(name), &lf.date);

  m_lockfiles.push_back(lf);
}

bool wb_dblock::check(char* name)
{
  pwr_tTime t;

  for (int i = 0; i < (int)m_lockfiles.size(); i++) {
    if (streq(m_lockfiles[i].fname, lockname(name))) {
      if (EVEN(dcli_file_time(lockname(name), &t)))
        return false;

      if (m_lockfiles[i].date.tv_sec == t.tv_sec)
        return true;
    }
  }
  return false;
}

void wb_dblock::dbunlock(char* name)
{
  pwr_tCmd cmd;
  sprintf(cmd, "rm %s", lockname(name));

  for (int i = 0; i < (int)m_lockfiles.size(); i++) {
    if (streq(m_lockfiles[i].fname, lockname(name))) {
      if (check(name)) {
        system(cmd);
        m_lockfiles[i].removed = true;
      }
      break;
    }
  }
}

void wb_dblock::dbunlock_all()
{
  pwr_tCmd cmd;
  for (int i = 0; i < (int)m_lockfiles.size(); i++) {
    if (!m_lockfiles[i].removed) {
      if (check(lockvname(m_lockfiles[i].fname))) {
        sprintf(cmd, "rm %s", m_lockfiles[i].fname);
        system(cmd);
      }
    }
  }
  m_lockfiles.clear();
}
