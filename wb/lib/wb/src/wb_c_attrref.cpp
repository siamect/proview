/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_c_attrref.cpp -- work bench methods of the AttrRef type. */

#include "pwr_baseclasses.h"

#include "co_msg.h"
#include "co_string.h"

#include "wb_pwrs.h"
#include "wb_pwrs_msg.h"
#include "wb_wtt.h"

/*----------------------------------------------------------------------------*\
  Is it OK to connect an object ?
\*----------------------------------------------------------------------------*/

static int IsOkConnect(ldh_sMenuCall* ip, pwr_sMenuButton* mbp)
{
  pwr_tStatus sts;

  if (!streq(mbp->FilterArguments[1], "")) {
    char arg_cid_str[20][32];
    int arg_cid_cnt;
    int i;
    int cid_ok = 0;
    pwr_tCid cid;
    pwr_tCid arg_cid;

    // arg 1 holds the allowed class or classes to connect to
    arg_cid_cnt = dcli_parse(mbp->FilterArguments[1], ",", "",
        (char*)arg_cid_str, sizeof(arg_cid_str) / sizeof(arg_cid_str[0]),
        sizeof(arg_cid_str[0]), 0);

    sts = ldh_GetAttrRefTid(ip->PointedSession, &ip->Selected[0], &cid);
    if (EVEN(sts))
      return 0;

    for (i = 0; i < arg_cid_cnt; i++) {
      sts = ldh_ClassNameToId(ip->PointedSession, &arg_cid, arg_cid_str[i]);
      if (EVEN(sts))
        return 0;

      if (cid == arg_cid) {
        cid_ok = 1;
        break;
      }
    }
    if (!cid_ok)
      return 0;
  }

  return 1;
}

/*----------------------------------------------------------------------------*\
  To connect an object to AttrRef
\*----------------------------------------------------------------------------*/

static pwr_tStatus Connect(ldh_sMenuCall* ip)
{
  pwr_tStatus sts;
  pwr_sMenuButton mb;
  pwr_sAttrRef PattrRef;
  pwr_sAttrRef aref = ip->Selected[0];

  sts = ldh_ReadObjectBody(ip->PointedSession,
      ip->ItemList[ip->ChosenItem].MenuObject, "SysBody", &mb,
      sizeof(pwr_sMenuButton));
  if (EVEN(sts))
    return sts;

  if (!streq(mb.MethodArguments[1], "")) {
    char arg_cid_str[20][32];
    int arg_cid_cnt;
    int i;
    int cid_ok = 0;
    pwr_tCid cid;
    pwr_tCid arg_cid;

    // arg 1 holds the allowed class or classes to connect to
    arg_cid_cnt = dcli_parse(mb.MethodArguments[1], ",", "", (char*)arg_cid_str,
        sizeof(arg_cid_str) / sizeof(arg_cid_str[0]), sizeof(arg_cid_str[0]),
        0);

    sts = ldh_GetAttrRefTid(ip->PointedSession, &ip->Selected[0], &cid);
    if (EVEN(sts))
      return 0;

    for (i = 0; i < arg_cid_cnt; i++) {
      sts = ldh_ClassNameToId(ip->PointedSession, &arg_cid, arg_cid_str[i]);
      if (EVEN(sts))
        return 0;

      if (cid == arg_cid) {
        cid_ok = 1;
        break;
      }
    }
    if (!cid_ok)
      return 0;
  }

  if (!streq(mb.MethodArguments[2], ""))
    // Body in MethodArguments 2, probably DevBody
    sts = ldh_SetObjectPar(ip->PointedSession, ip->Pointed.Objid,
        mb.MethodArguments[2], mb.MethodArguments[0], (char*)&ip->Selected[0],
        sizeof(ip->Selected[0]));
  else {
    char* name_p;
    pwr_tAName name;
    int size;
    pwr_tCid cid;

    // If Selected is a Template object in a classvolume, replace with
    // symbol $IoConnect
    if (cdh_IsClassVolume(aref.Objid.vid)) {
      sts = ldh_ObjidToName(ip->PointedSession, aref.Objid, ldh_eName_Object,
          name, sizeof(name), &size);
      if (ODD(sts) && streq(name, "Template")) {
        sts = ldh_GetObjectClass(ip->PointedSession, aref.Objid, &cid);
        if (EVEN(sts))
          return sts;

        aref.Objid.vid = ldh_cIoConnectVolume;
        aref.Objid.oix = cid;
      }
    }

    // Assume RtBody or SysBody
    sts = ldh_AttrRefToName(
        ip->PointedSession, &ip->Pointed, ldh_eName_VolPath, &name_p, &size);
    if (ODD(sts)) {
      strncpy(name, name_p, sizeof(name));
      strncat(name, ".", sizeof(name) - strlen(name) - 1);
      strncat(name, mb.MethodArguments[0], sizeof(name) - strlen(name) - 1);

      sts = ldh_NameToAttrRef(ip->PointedSession, name, &PattrRef);
      if (ODD(sts))
        sts = ldh_WriteAttribute(
            ip->PointedSession, &PattrRef, &aref, sizeof(aref));
    }
  }

  char msg[500];
  if (ODD(sts)) {
    pwr_tAName name;
    char* name_p;
    int len;

    sts = ldh_AttrRefToName(
        ip->PointedSession, &aref, ldh_eName_Hierarchy, &name_p, &len);
    if (EVEN(sts))
      cdh_OidToString(name, sizeof(name), aref.Objid, 1);
    else
      strncpy(name, name_p, sizeof(name));
    snprintf(
        msg, sizeof(msg), "%s connected to:   %s", mb.MethodArguments[0], name);
    ip->wtt->message('I', msg);
  } else {
    msg_GetMsg(sts, msg, sizeof(msg));
    ip->wtt->message('E', msg);
  }
  return PWRS__SUCCESS;
}

static int IoConnectFilter(ldh_sMenuCall* ip, pwr_sMenuButton* mbp)
{
  pwr_tStatus sts;

  if (!streq(mbp->FilterArguments[0], "")) {
    char arg_cid_str[20][32];
    int arg_cid_cnt;
    int i;
    int cid_ok = 0;
    pwr_tCid cid;
    pwr_tCid arg_cid;

    // arg 0 holds the allowed class or classes to connect to
    arg_cid_cnt = dcli_parse(mbp->FilterArguments[0], ",", "",
        (char*)arg_cid_str, sizeof(arg_cid_str) / sizeof(arg_cid_str[0]),
        sizeof(arg_cid_str[0]), 0);

    sts = ldh_GetAttrRefTid(ip->PointedSession, &ip->Selected[0], &cid);
    if (EVEN(sts))
      return 0;

    for (i = 0; i < arg_cid_cnt; i++) {
      sts = ldh_ClassNameToId(ip->PointedSession, &arg_cid, arg_cid_str[i]);
      if (EVEN(sts))
        return 0;

      if (cid == arg_cid) {
        cid_ok = 1;
        break;
      }
    }
    if (!cid_ok)
      return 0;
  }

  return 1;
}

/*----------------------------------------------------------------------------*\
  To connect an object to AttrRef
\*----------------------------------------------------------------------------*/

static pwr_tStatus IoConnect(ldh_sMenuCall* ip)
{
  pwr_tStatus sts;
  pwr_sMenuButton mb;
  pwr_sAttrRef aref = ip->Selected[0];
  pwr_sAttrRef PattrRef;
  char* name_p;
  pwr_tAName name;
  int size;

  sts = ldh_ReadObjectBody(ip->PointedSession,
      ip->ItemList[ip->ChosenItem].MenuObject, "SysBody", &mb,
      sizeof(pwr_sMenuButton));
  if (EVEN(sts))
    return sts;

  if (!streq(mb.MethodArguments[0], "")) {
    char arg_cid_str[20][32];
    int arg_cid_cnt;
    int i;
    int cid_ok = 0;
    pwr_tCid cid;
    pwr_tCid arg_cid;

    // arg 0 holds the allowed class or classes to connect to
    arg_cid_cnt = dcli_parse(mb.MethodArguments[0], ",", "", (char*)arg_cid_str,
        sizeof(arg_cid_str) / sizeof(arg_cid_str[0]), sizeof(arg_cid_str[0]),
        0);

    sts = ldh_GetAttrRefTid(ip->PointedSession, &ip->Selected[0], &cid);
    if (EVEN(sts))
      return 0;

    for (i = 0; i < arg_cid_cnt; i++) {
      sts = ldh_ClassNameToId(ip->PointedSession, &arg_cid, arg_cid_str[i]);
      if (EVEN(sts))
        return 0;

      if (cid == arg_cid) {
        cid_ok = 1;
        break;
      }
    }
    if (!cid_ok)
      return 0;
  }

  sts = ldh_AttrRefToName(
      ip->PointedSession, &ip->Pointed, ldh_eName_VolPath, &name_p, &size);
  if (ODD(sts)) {
    strncpy(name, name_p, sizeof(name));
    strncat(name, ".IoConnect", sizeof(name) - strlen(name) - 1);

    sts = ldh_NameToAttrRef(ip->PointedSession, name, &PattrRef);
    if (ODD(sts))
      sts = ldh_WriteAttribute(
          ip->PointedSession, &PattrRef, &aref, sizeof(aref));
  }

  char msg[500];
  if (ODD(sts)) {
    pwr_tAName name;
    char* name_p;
    int len;

    sts = ldh_AttrRefToName(
        ip->PointedSession, &aref, ldh_eName_Hierarchy, &name_p, &len);
    if (EVEN(sts))
      cdh_OidToString(name, sizeof(name), aref.Objid, 1);
    else
      strncpy(name, name_p, sizeof(name));
    snprintf(msg, sizeof(msg), "Io connected to:   %s", name);
    ip->wtt->message('I', msg);
  } else {
    msg_GetMsg(sts, msg, sizeof(msg));
    ip->wtt->message('E', msg);
  }
  return PWRS__SUCCESS;
}

pwr_dExport pwr_BindMethods($AttrRef) = { pwr_BindMethod(Connect),
  pwr_BindMethod(IsOkConnect), pwr_BindMethod(IoConnect),
  pwr_BindMethod(IoConnectFilter), pwr_NullMethod };
