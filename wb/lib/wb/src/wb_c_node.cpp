/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_c_node.c -- work bench methods of the Node class. */

#include <stdio.h>

#include "pwr_baseclasses.h"

#include "co_cnf.h"
#include "co_string.h"

#include "wb_pwrs.h"
#include "wb_pwrs_msg.h"
#include "wb_session.h"
#include "wb_pwrb_msg.h"
#include "wb_wsx.h"

static pwr_tStatus PostCreate(ldh_tSesContext Session, pwr_tObjid Object,
    pwr_tObjid Father, pwr_tClassId Class)
{
  pwr_tObjid oid;
  pwr_tClassId cid;
  pwr_tStatus sts;
  pwr_tObjName name;
  pwr_tOid srv_oid, opp_oid;
  pwr_tBoolean bval;
  pwr_tUInt32 ival;

  cnf_get_value("defaultSecurity", name, sizeof(name));
  sts = ldh_CreateObject(
      Session, &oid, name, pwr_eClass_Security, Object, ldh_eDest_IntoLast);
  ival = 1;
  cnf_get_value("defaultXttPriv", name, sizeof(name));
  if (!streq(name, "")) {
    sts = sscanf(name, "%d", &ival);
    if (sts == 1) {
      sts = ldh_SetObjectPar(Session, oid, "SysBody", "DefaultXttPriv",
          (char*)&ival, sizeof(ival));
      if (EVEN(sts))
        return sts;
    }
  }
  cnf_get_value("defaultWebPriv", name, sizeof(name));
  if (!streq(name, "")) {
    sts = sscanf(name, "%d", &ival);
    if (sts == 1) {
      sts = ldh_SetObjectPar(Session, oid, "SysBody", "DefaultWebPriv",
          (char*)&ival, sizeof(ival));
      if (EVEN(sts))
        return sts;
    }
  }
  cnf_get_value("defaultWebSystemGroup", name, sizeof(name));
  if (!streq(name, "")) {
    sts = ldh_SetObjectPar(
        Session, oid, "SysBody", "WebSystemGroup", (char*)name, sizeof(name));
    if (EVEN(sts))
      return sts;
  }

  // OpPlace objects
  cnf_get_value("defaultOpPlaces", name, sizeof(name));
  sts = ldh_ClassNameToId(Session, &cid, "$NodeHier");
  sts = ldh_CreateObject(
      Session, &opp_oid, name, cid, Object, ldh_eDest_IntoLast);

  sts = ldh_ClassNameToId(Session, &cid, "OpPlace");
  cnf_get_value("defaultOpOp", name, sizeof(name));
  sts = ldh_CreateObject(Session, &oid, name, cid, opp_oid, ldh_eDest_IntoLast);
  cnf_get_value("defaultOpMaintenance", name, sizeof(name));
  sts = ldh_CreateObject(Session, &oid, name, cid, opp_oid, ldh_eDest_IntoLast);
  cnf_get_value("defaultOpSystemManager", name, sizeof(name));
  if (!streq(name, ""))
    sts = ldh_CreateObject(
        Session, &oid, name, cid, opp_oid, ldh_eDest_IntoLast);
  cnf_get_value("defaultOpDefault", name, sizeof(name));
  sts = ldh_CreateObject(Session, &oid, name, cid, opp_oid, ldh_eDest_IntoLast);
  bval = 1;
  sts = ldh_SetObjectPar(
      Session, oid, "RtBody", "IsDefaultOp", (char*)&bval, sizeof(bval));
  if (EVEN(sts))
    return sts;

  cnf_get_value("defaultWebBrowser", name, sizeof(name));
  sts = ldh_ClassNameToId(Session, &cid, "WebBrowserConfig");
  sts = ldh_CreateObject(Session, &oid, name, cid, opp_oid, ldh_eDest_IntoLast);

  sts = ldh_ClassNameToId(Session, &cid, "$NodeHier");
  cnf_get_value("defaultGraphHier", name, sizeof(name));
  if (!streq(name, ""))
    sts = ldh_CreateObject(
        Session, &oid, name, cid, opp_oid, ldh_eDest_IntoLast);

  // Server objects
  cnf_get_value("defaultServers", name, sizeof(name));
  sts = ldh_ClassNameToId(Session, &cid, "$NodeHier");
  sts = ldh_CreateObject(
      Session, &srv_oid, name, cid, Object, ldh_eDest_IntoLast);

  sts = ldh_ClassNameToId(Session, &cid, "MessageHandler");
  sts = ldh_CreateObject(
      Session, &oid, "MessageHandler", cid, srv_oid, ldh_eDest_IntoLast);

  sts = ldh_ClassNameToId(Session, &cid, "IOHandler");
  sts = ldh_CreateObject(
      Session, &oid, "IOHandler", cid, srv_oid, ldh_eDest_IntoLast);

  sts = ldh_ClassNameToId(Session, &cid, "Backup_Conf");
  sts = ldh_CreateObject(
      Session, &oid, "Backup", cid, srv_oid, ldh_eDest_IntoLast);

  sts = ldh_ClassNameToId(Session, &cid, "StatusServerConfig");
  sts = ldh_CreateObject(
      Session, &oid, "StatusServer", cid, srv_oid, ldh_eDest_IntoLast);
  // Plc process
  sts = ldh_ClassNameToId(Session, &cid, "PlcProcess");
  sts = ldh_CreateObject(Session, &oid, "Plc", cid, Object, ldh_eDest_IntoLast);

  // Web handler
  sts = ldh_ClassNameToId(Session, &cid, "WebHandler");
  sts = ldh_CreateObject(
      Session, &oid, "WebHandler", cid, Object, ldh_eDest_IntoLast);

  // IO
  cnf_get_value("defaultIO", name, sizeof(name));
  sts = ldh_ClassNameToId(Session, &cid, "$NodeHier");
  sts = ldh_CreateObject(Session, &oid, name, cid, Object, ldh_eDest_IntoLast);

  return PWRS__SUCCESS;
}

static pwr_tStatus SyntaxCheck(ldh_tSesContext Session, pwr_tAttrRef Object,
    int* ErrorCount, int* WarningCount)
{
  wb_session* sp = (wb_session*)Session;
  pwr_tAttrRef aref;
  wb_object o;

  // Check Server objects

  // Security object
  o = sp->object(pwr_eClass_Security);
  if (!o)
    wsx_error_msg_str(Session, "No Security object found", Object, 'W',
        ErrorCount, WarningCount);

  // DsTrend
  sp->aref(pwr_cClass_DsTrend, &aref);
  if (sp->oddSts()) {
    // Check DsTrendConf
    o = sp->object(pwr_cClass_DsTrendConf);
    if (!o)
      wsx_error_msg_str(Session, "No DsTrendConf object found", Object, 'W',
          ErrorCount, WarningCount);
  }

  // DsFast
  sp->aref(pwr_cClass_DsFast, &aref);
  if (sp->evenSts())
    sp->aref(pwr_cClass_DsFastCurve, &aref);

  if (sp->oddSts()) {
    // Check DsFastConf
    o = sp->object(pwr_cClass_DsFastConf);
    if (!o)
      wsx_error_msg_str(Session, "No DsFastConf object found", Object, 'W',
          ErrorCount, WarningCount);
  }

  // SevHistMonintor
  sp->aref(pwr_cClass_SevHist, &aref);
  if (sp->oddSts()) {
    // Check SevHistMonitor
    o = sp->object(pwr_cClass_SevHistMonitor);
    if (!o)
      wsx_error_msg_str(Session, "No SevHistMonitor object found", Object, 'W',
          ErrorCount, WarningCount);
  }

  // Backup_Conf
  sp->aref(pwr_cClass_Backup, &aref);
  if (sp->oddSts()) {
    // Check Backup_Conf
    o = sp->object(pwr_cClass_Backup_Conf);
    if (!o)
      wsx_error_msg_str(Session, "No Backup_Conf object found", Object, 'W',
          ErrorCount, WarningCount);
  }

  return PWRB__SUCCESS;
}

static pwr_tStatus AnteCreate(
    ldh_tSesContext Session, pwr_tObjid Father, pwr_tClassId Class)
{
  pwr_tStatus sts;
  pwr_tOid oid;

  // There should only be one node object
  sts = ldh_GetClassList(Session, pwr_eClass_Node, &oid);
  if (ODD(sts))
    return PWRS__NODEALREX;

  return PWRS__SUCCESS;
}

pwr_dExport pwr_BindMethods($Node) = { pwr_BindMethod(PostCreate),
  pwr_BindMethod(AnteCreate), pwr_BindMethod(SyntaxCheck), pwr_NullMethod };
