/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_wnav_brow_h
#define wb_wnav_brow_h

#include "flow_browapi.h"

typedef enum {
  wnav_eBrowType_Volume,
  wnav_eBrowType_Setup,
  wnav_eBrowType_Other
} wnav_eBrowType;

typedef enum {
  wnav_eMultiobject_Normal,
  wnav_eMultiobject_RedSquare,
  wnav_eMultiobject_YellowSquare,
  wnav_eMultiobject_GreenSquare,
  wnav_eMultiobject_RedTriangle,
  wnav_eMultiobject_RedSquare_RedTriangle,
  wnav_eMultiobject_YellowSquare_RedTriangle,
  wnav_eMultiobject_GreenSquare_RedTriangle,
  wnav_eMultiobject_YellowTriangle,
  wnav_eMultiobject_RedSquare_YellowTriangle,
  wnav_eMultiobject_YellowSquare_YellowTriangle,
  wnav_eMultiobject_GreenSquare_YellowTriangle,
  wnav_eMultiobject_
} wnav_eMultiobject;

class WNavBrow {
public:
  WNavBrow(BrowCtx* brow_ctx, void* brow_userdata)
      : type(wnav_eBrowType_Other), ldh_cb_used(1), ctx(brow_ctx),
        userdata(brow_userdata)
  {
  }

  wnav_eBrowType type;
  int ldh_cb_used;
  BrowCtx* ctx;
  void* userdata;
  brow_tNodeClass nc_object;
  brow_tNodeClass nc_multiobject[wnav_eMultiobject_];
  brow_tNodeClass nc_multiobject_red;
  brow_tNodeClass nc_multiobject_yellow;
  brow_tNodeClass nc_multiobject_green;
  brow_tNodeClass nc_multiobject_warn;
  brow_tNodeClass nc_multiobject_red_warn;
  brow_tNodeClass nc_multiobject_yellow_warn;
  brow_tNodeClass nc_multiobject_green_warn;
  brow_tNodeClass nc_attr;
  brow_tNodeClass nc_attr_full;
  brow_tNodeClass nc_attr_input;
  brow_tNodeClass nc_attr_inputinv;
  brow_tNodeClass nc_attr_output;
  brow_tNodeClass nc_attr_multiline;
  brow_tNodeClass nc_attr_multiline_full;
  brow_tNodeClass nc_enum;
  brow_tNodeClass nc_table;
  brow_tNodeClass nc_text;
  brow_tNodeClass nc_header;
  brow_tNodeClass nc_headerlarge;
  brow_tNodeClass nc_table_header;
  brow_tNodeClass nc_enumobject;
  flow_sAnnotPixmap* pixmap_leaf;
  flow_sAnnotPixmap* pixmap_map;
  flow_sAnnotPixmap* pixmap_openmap;
  flow_sAnnotPixmap* pixmap_ref;
  flow_sAnnotPixmap* pixmap_crossref;
  flow_sAnnotPixmap* pixmap_openattr;
  flow_sAnnotPixmap* pixmap_attr;
  flow_sAnnotPixmap* pixmap_attrarray;
  flow_sAnnotPixmap* pixmap_attrenum;
  flow_sAnnotPixmap* pixmap_attrmask;
  flow_sAnnotPixmap* pixmap_attrarrayelem;
  flow_sAnnotPixmap* pixmap_crrread;
  flow_sAnnotPixmap* pixmap_crrwrite;
  flow_sAnnotPixmap* pixmap_script;
  flow_sAnnotPixmap* pixmap_graph;
  flow_sAnnotPixmap* pixmap_file;
  flow_sAnnotPixmap* pixmap_symbol;
  flow_sAnnotPixmap* pixmap_morehelp;
  flow_sAnnotPixmap* pixmap_closehelp;
  flow_sAnnotPixmap* pixmap_objname;
  flow_sAnnotPixmap* pixmap_object;
  flow_sAnnotPixmap* pixmap_attrref;
  flow_sAnnotPixmap* pixmap_attrxref;
  flow_sAnnotPixmap* pixmap_ref_err;
  flow_sAnnotPixmap* pixmap_crossref_err;
  flow_sAnnotPixmap* pixmap_attrref_err;
  flow_sAnnotPixmap* pixmap_attrxref_err;
  flow_sAnnotPixmap* pixmap_project;
  flow_sAnnotPixmap* pixmap_database;
  flow_sAnnotPixmap* pixmap_volume;
  flow_sAnnotPixmap* pixmap_castattr;
  flow_sAnnotPixmap* pixmap_uncastattr;
  flow_sAnnotPixmap* pixmap_docblock;
  flow_sAnnotPixmap* pixmap_confcomp;

  void free_pixmaps();
  void allocate_pixmaps();
  void create_nodeclasses();
  void brow_setup();
};

#endif
