/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_vrepmem_h
#define wb_vrepmem_h

#include "wb_vrep.h"
#include "wb_erep.h"
#include "wb_attrname.h"
#include "wb_import.h"
#include "wb_recix.h"

class wb_vrepmem;

class mem_object {
  friend class wb_vrepmem;

public:
  mem_object();
  ~mem_object()
  {
    if (rbody_size)
      free(rbody);
    if (dbody_size)
      free(dbody);
    if (docblock_size)
      free(docblock);
  }
  char* name()
  {
    return m_name;
  }
  char* longName();
  mem_object* get_lch();

  bool exportHead(wb_import& i);
  bool exportDbody(wb_import& i);
  bool exportRbody(wb_import& i);
  bool exportDocBlock(wb_import& i);
  bool exportTree(wb_treeimport& i, bool isRoot);
  bool exportPaste(wb_treeimport& i, pwr_tOid destination, bool isRoot,
      ldh_eDest destcode, bool keepoid, wb_recix* recix, pwr_tOid* rootlist);

  mem_object* next(pwr_tCid cid, pwr_tOix* oix);
  mem_object* find(wb_name* oname, int level);
  bool docBlock(char** block, int* size) const;
  bool docBlock(char* block);

  size_t rbody_size;
  size_t dbody_size;
  size_t docblock_size;
  void* rbody;
  void* dbody;
  char* docblock;
  pwr_tCid m_cid;
  pwr_tTid m_tid;
  pwr_tOid m_oid;
  char cname[32];
  char m_name[32];
  pwr_mClassDef m_flags;
  mem_object* fth;
  mem_object* bws;
  mem_object* fws;
  mem_object* fch;
  pwr_tOid fthoid;
  pwr_tOid bwsoid;
  pwr_tOid fwsoid;
  pwr_tOid fchoid;
  int is_built;
  int m_created;
  pwr_tTime m_ohtime;
  pwr_tTime m_rbtime;
  pwr_tTime m_dbtime;
};

class wb_orepmem;

class wb_vrepmem : public wb_vrep, public wb_import {
  wb_erep* m_erep;
  wb_merep* m_merep;
  unsigned int m_nRef;
  mem_object* root_object;
  mem_object* volume_object;
  int m_cloned;
  int m_nextOix;
  pwr_tVid m_source_vid;
  char m_filename[200];
  bool m_classeditor;
  bool m_ignore;

  std::map<pwr_tOix, mem_object*> m_oix_list;

  typedef std::map<pwr_tOix, mem_object*>::iterator iterator_oix_list;

public:
  wb_vrepmem(wb_erep* erep);
  wb_vrepmem(wb_erep* erep, pwr_tVid vid);
  ~wb_vrepmem();

  virtual ldh_eVolRep type() const
  {
    return ldh_eVolRep_Mem;
  }
  pwr_tVid vid() const
  {
    return m_vid;
  }
  pwr_tCid cid() const
  {
    return m_cid;
  }

  wb_vrep* next();

  virtual bool createSnapshot(
      const char* fileName, const pwr_tTime* time, const int rtonly);
  virtual pwr_tStatus updateMeta()
  {
    return 0;
  }

  char volume_class[32];
  char volume_name[32];

  virtual void unref();
  virtual wb_vrep* ref();

  wb_erep* erep()
  {
    return m_erep;
  }
  wb_merep* merep() const
  {
    return m_merep;
  }

  int nextOix();
  mem_object* findObject(pwr_tOix oix);
  mem_object* find(const char* name);
  int nameToOid(const char* name, pwr_tOid* oid);
  bool registerObject(pwr_tOix oix, mem_object* node);
  bool unregisterObject(pwr_tOix oix);
  void registerVolume(
      const char* name, pwr_tCid cid, pwr_tVid vid, mem_object* node);
  void info();
  bool createVolumeObject(char* name);
  bool createClonedVolumeObject(wb_object vo, const char* vname);

  virtual pwr_tOid oid(pwr_tStatus* sts, const wb_orep* o)
  {
    return pwr_cNOid;
  }

  virtual pwr_tVid vid(pwr_tStatus* sts, const wb_orep* o)
  {
    return pwr_cNVid;
  }

  virtual pwr_tOix oix(pwr_tStatus* sts, const wb_orep* o)
  {
    return pwr_cNOix;
  }

  virtual pwr_tCid cid(pwr_tStatus* sts, const wb_orep* o)
  {
    return pwr_cNCid;
  }

  virtual pwr_tOid poid(pwr_tStatus* sts, const wb_orep* o)
  {
    return pwr_cNOid;
  }
  virtual pwr_tOid foid(pwr_tStatus* sts, const wb_orep* o)
  {
    return pwr_cNOid;
  }
  virtual pwr_tOid loid(pwr_tStatus* sts, const wb_orep* o)
  {
    return pwr_cNOid;
  }
  virtual pwr_tOid boid(pwr_tStatus* sts, const wb_orep* o)
  {
    return pwr_cNOid;
  }
  virtual pwr_tOid aoid(pwr_tStatus* sts, const wb_orep* o)
  {
    return pwr_cNOid;
  }

  virtual const char* objectName(pwr_tStatus* sts, const wb_orep* o)
  {
    return "";
  }

  virtual wb_name longName(pwr_tStatus* sts, const wb_orep* o)
  {
    return wb_name();
  }

  virtual pwr_tTime ohTime(pwr_tStatus* sts, const wb_orep* o)
  {
    return o->ohTime();
  }
  virtual pwr_tTime rbTime(pwr_tStatus* sts, const wb_orep* o)
  {
    return o->rbTime();
  }
  virtual pwr_tTime dbTime(pwr_tStatus* sts, const wb_orep* o)
  {
    return o->dbTime();
  }
  virtual pwr_mClassDef flags(pwr_tStatus* sts, const wb_orep* o)
  {
    pwr_mClassDef f;
    f.m = 0;
    return f;
  }

  virtual bool isOffspringOf(
      pwr_tStatus* sts, const wb_orep* child, const wb_orep* parent)
  {
    return false;
  }

  wb_orep* object(pwr_tStatus* sts);
  wb_orep* object(pwr_tStatus* sts, pwr_tOid oid);
  wb_orep* object(pwr_tStatus* sts, pwr_tCid cid);
  wb_orep* object(pwr_tStatus* sts, wb_name& name);
  wb_orep* object(pwr_tStatus* sts, const wb_orep* parent, wb_name& name)
  {
    return 0;
  }

  wb_orep* createObject(pwr_tStatus* sts, wb_cdef cdef, wb_destination& d,
      wb_name& name, pwr_tOix oix = 0);

  wb_orep* copyObject(pwr_tStatus* sts, const wb_orep* orep, wb_destination& d,
      wb_name& name, pwr_tOix oix = 0);
  bool copyOset(pwr_tStatus* sts, wb_oset* oset, wb_destination& d)
  {
    return false;
  }

  bool moveObject(pwr_tStatus* sts, wb_orep* orep, wb_destination& d);

  bool deleteObject(pwr_tStatus* sts, wb_orep* orep);
  bool deleteFamily(pwr_tStatus* sts, wb_orep* orep);
  bool deleteOset(pwr_tStatus* sts, wb_oset* oset)
  {
    return false;
  }

  bool renameObject(pwr_tStatus* sts, wb_orep* orep, wb_name& name);

  bool commit(pwr_tStatus* sts);
  bool abort(pwr_tStatus* sts);

  virtual bool writeAttribute(pwr_tStatus* sts, wb_orep* o, pwr_eBix bix,
      size_t offset, size_t size, void* p);

  virtual void* readAttribute(pwr_tStatus* sts, const wb_orep* o, pwr_eBix bix,
      size_t offset, size_t size, void* p);

  virtual void* readBody(
      pwr_tStatus* sts, const wb_orep* o, pwr_eBix bix, void* p);

  virtual bool writeBody(pwr_tStatus* sts, wb_orep* o, pwr_eBix bix, void* p);

  wb_orep* ancestor(pwr_tStatus* sts, const wb_orep* o);

  wb_orep* parent(pwr_tStatus* sts, const wb_orep* o);

  wb_orep* after(pwr_tStatus* sts, const wb_orep* o);

  wb_orep* before(pwr_tStatus* sts, const wb_orep* o);

  wb_orep* first(pwr_tStatus* sts, const wb_orep* o);

  wb_orep* child(pwr_tStatus* sts, const wb_orep* o, wb_name& name);

  wb_orep* last(pwr_tStatus* sts, const wb_orep* o);

  wb_orep* next(pwr_tStatus* sts, const wb_orep* o);

  wb_orep* previous(pwr_tStatus* sts, const wb_orep* o);

  wb_srep* newSession()
  {
    return 0;
  }

  bool isLocal(const wb_orep* o)
  {
    return o->oid().vid == vid();
  }

  void objectName(const wb_orep* o, char* str);

  virtual bool exportVolume(wb_import& i);
  virtual bool exportHead(wb_import& i);
  virtual bool exportRbody(wb_import& i);
  virtual bool exportDbody(wb_import& i);
  virtual bool exportDocBlock(wb_import& i);
  virtual bool exportMeta(wb_import& i);
  virtual bool exportTree(wb_treeimport& i, pwr_tOid oid);
  virtual bool exportTreeIsImplemented()
  {
    return true;
  }
  bool exportPaste(wb_treeimport& i, pwr_tOid destination, ldh_eDest destcode,
      bool keepoid, wb_recix* recix, pwr_tOid** rootlist);
  virtual bool importTreeObject(wb_merep* merep, pwr_tOid oid, pwr_tCid cid,
      pwr_tOid poid, pwr_tOid boid, const char* name, pwr_mClassDef flags,
      size_t rbSize, size_t dbSize, void* rbody, void* dbody);
  virtual bool importTree(bool keepref, bool keepsym);
  virtual bool importPasteObject(pwr_tOid destination, ldh_eDest destcode,
      bool keepoid, pwr_tOid oid, pwr_tCid cid, pwr_tOid poid, pwr_tOid boid,
      const char* name, pwr_mClassDef flags, size_t rbSize, size_t dbSize,
      void* rbody, void* dbody, pwr_tOid woid, pwr_tOid* roid);
  virtual bool importPaste();
  virtual void importIgnoreErrors()
  {
    m_ignore = true;
  }
  bool updateObject(wb_orep* o, bool keepref, bool keepsym);
  bool updateSubClass(
      wb_adrep* subattr, char* body, bool keepref, bool keepsym);
  virtual bool accessSupported(ldh_eAccess access)
  {
    return true;
  }
  virtual const char* fileName()
  {
    return "";
  }

  virtual bool importVolume(wb_export& e);
  virtual bool importHead(pwr_tOid oid, pwr_tCid cid, pwr_tOid poid,
      pwr_tOid boid, pwr_tOid aoid, pwr_tOid foid, pwr_tOid loid,
      const char* name, const char* normname, pwr_mClassDef flags,
      pwr_tTime ohTime, pwr_tTime rbTime, pwr_tTime dbTime, size_t rbSize,
      size_t dbSize);
  virtual bool importRbody(pwr_tOid oid, size_t size, void* body);
  virtual bool importDbody(pwr_tOid oid, size_t size, void* body);
  virtual bool importDocBlock(pwr_tOid oid, size_t size, char* block);
  virtual bool importMeta(dbs_sMenv* mep)
  {
    return true;
  }
  bool importBuildObject(mem_object* memo);
  void reloadWbl(pwr_tStatus* sts);
  void loadWbl(const char* filename, pwr_tStatus* sts, bool reload = false);
  void freeObject(mem_object* mem);
  void clear();
  bool classeditorCheck(
      ldh_eDest dest_code, mem_object* dest, pwr_tCid cid, pwr_tOix* oix,
      char* name, int name_size, pwr_tStatus* sts, bool import_paste);
  bool classeditorCheckMove(mem_object* memo, ldh_eDest dest_code,
      mem_object* dest, pwr_tStatus* sts);
  void classeditorCommit();
  void classeditorRenameObject(mem_object* memo, char* oldname, wb_name& name);
  void classeditorDeleteObject(mem_object* memo);
  void classeditorCheckCommit();

private:
  bool nameCheck(mem_object* memo);
  bool nameCheck(mem_object* parent, char* name, ldh_eDest code);
  void deleteChildren(mem_object* memo);
  void printPaletteFile();
};

#endif
