/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_wnav_crr.cpp
   This module contains routines for displaying crossreferences in wtt. */

/*_Include files_________________________________________________________*/

#include <string.h>
#include <stdlib.h>

#include "co_dcli_msg.h"
#include "co_nav_crr.h"

#include "wb_wnav_item.h"
#include "wb_wnav_msg.h"

class CrrCtx {
public:
  CrrCtx(WNavBrow* a_brow, ldh_tSesContext a_ldhses)
      : brow(a_brow), ldhses(a_ldhses)
  {
  }
  WNavBrow* brow;
  ldh_tSesContext ldhses;
};

static void wnav_crr_insert_cb(void* ctx, void* parent_node,
    navc_eItemType item_type, char* text1, char* text2, int write)
{
  // if (1) {
  CrrCtx* cctx = (CrrCtx*)ctx;

  switch (item_type) {
  case navc_eItemType_Crossref:
    new WItemCrossref(cctx->brow, cctx->ldhses, text1, text2, write,
        parent_node, flow_eDest_IntoLast);
    break;
  case navc_eItemType_Header:
    new WItemHeader(cctx->brow, "crr", text1, parent_node, flow_eDest_IntoLast);
    break;
  case navc_eItemType_Text:
    new WItemText(cctx->brow, "crr", text1, parent_node, flow_eDest_IntoLast);
    break;
  }
  /*
} else { // TODO from pwrc ???
  // Print out crossref info
  switch (item_type) {
  case navc_eItemType_Crossref:
    if (write)
      printf("# ");
    else
      printf("  ");
    printf("%s", text1);
    for (int i = 0; i < (int)(28 - strlen(text1)); i++)
      printf(" ");
    printf("  ");
    printf("%s\n", text2);
    break;
  case navc_eItemType_Header:
  case navc_eItemType_Text:
    printf("%s\n", text1);
    break;
  }
}
*/
}

int wnav_crr_name_to_objid_cb(void* ctx, char* name, pwr_tObjid* objid)
{
  CrrCtx* cctx = (CrrCtx*)ctx;

  return ldh_NameToObjid(cctx->ldhses, objid, name);
}

int wnav_crr_get_volume_cb(void* ctx, pwr_tVid* vid, pwr_tVid prev_vid)
{
  int sts;
  ldh_sVolumeInfo info;
  CrrCtx* cctx = (CrrCtx*)ctx;
  ldh_tVolContext volctx = ldh_SessionToVol(cctx->ldhses);
  sts = ldh_GetVolumeInfo(volctx, &info);

  if (prev_vid)
    return WNAV__NOSUCHVOLUME;

  *vid = info.Volume;
  return WNAV__SUCCESS;
}

int WNav::crr_signal(WNavBrow* brow, ldh_tSesContext ldhses, char* filename,
    char* signalname, brow_tNode parent_node)
{
  int sts;
  CrrCtx* ctx = new CrrCtx(brow, ldhses);
  NavCrr* navcrr = new NavCrr(ctx, parent_node);
  navcrr->insert_cb = wnav_crr_insert_cb;
  navcrr->name_to_objid_cb = wnav_crr_name_to_objid_cb;
  navcrr->get_volume_cb = wnav_crr_get_volume_cb;

  sts = navcrr->crr_signal(filename, signalname);

  delete navcrr;
  delete ctx;
  return sts;
}

int WNav::crr_object(WNavBrow* brow, ldh_tSesContext ldhses, char* filename,
    char* objectname, brow_tNode parent_node)
{
  int sts;
  CrrCtx* ctx = new CrrCtx(brow, ldhses);
  NavCrr* navcrr = new NavCrr(ctx, parent_node);
  navcrr->insert_cb = wnav_crr_insert_cb;
  navcrr->name_to_objid_cb = wnav_crr_name_to_objid_cb;
  navcrr->get_volume_cb = wnav_crr_get_volume_cb;

  sts = navcrr->crr_object(filename, objectname);

  delete navcrr;
  delete ctx;
  return sts;
}

int WNav::crr_code(WNavBrow* brow, ldh_tSesContext ldhses, char* filename,
    char* str, int brief, int func, int case_sensitive)
{
  int sts;
  CrrCtx* ctx = new CrrCtx(brow, ldhses);
  NavCrr* navcrr = new NavCrr(ctx, NULL);
  navcrr->insert_cb = wnav_crr_insert_cb;
  navcrr->name_to_objid_cb = wnav_crr_name_to_objid_cb;
  navcrr->get_volume_cb = wnav_crr_get_volume_cb;

  sts = navcrr->crr_code(filename, str, brief, func, case_sensitive);

  delete navcrr;
  delete ctx;
  return sts;
}
