/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_env_h
#define wb_env_h

#include "wb_erep.h"
#include "wb_status.h"

class wb_volume;

class wb_env : public wb_status {
protected:
  wb_erep* m_erep;

public:
  wb_env();

  wb_env(wb_erep*);
  wb_env(wb_env& e);

  virtual ~wb_env();

  wb_env& operator=(const wb_env& x);

  operator bool() const;
  operator wb_erep*() const;
  bool operator==(wb_env&);

  void load(char* db)
  {
    m_erep->load(&m_sts, db);
  }
  bool open();
  bool close();

  // Get first volume in list of db volumes.
  wb_volume volume();
  // Get db volume.
  wb_volume volume(pwr_tVid);

  wb_volume volume(const char* name);
  wb_volume externVolume(pwr_tVid);
  wb_volume bufferVolume();

  wb_volume snapshot(pwr_tVid);

  wb_volume createVolume(pwr_tVid vid, pwr_tCid cid, const char* name,
      ldh_eVolRep type, char* server, bool add = true);

  int nextVolatileVid(char* name)
  {
    return m_erep->nextVolatileVid(&m_sts, name);
  }
};

#endif
