/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "wb_adef.h"
#include "wb_tdef.h"
#include "wb_tdrep.h"

wb_tdef::wb_tdef() : wb_status(LDH__NOTYPE), m_tdrep(0)
{
}

wb_tdef::wb_tdef(wb_tdrep* tdrep) : wb_status(LDH__SUCCESS), m_tdrep(tdrep)
{
  if (tdrep == 0)
    m_sts = LDH__NOTYPE;
  else
    tdrep->ref();
}

wb_tdef::wb_tdef(wb_adef& a)
{
  const wb_adrep* adrep = a;
  try {
    m_tdrep = new wb_tdrep(*adrep);
    m_tdrep->ref();
    m_sts = m_tdrep->sts();
  } catch (wb_error& e) {
    m_sts = e.sts();
  }
}

wb_tdef::wb_tdef(wb_mvrep* mvrep, pwr_tTid tid)
{
  try {
    m_tdrep = new wb_tdrep(mvrep, tid);
    m_tdrep->ref();
    m_sts = m_tdrep->sts();
  } catch (wb_error& e) {
    m_sts = e.sts();
  }
}

wb_tdef::~wb_tdef()
{
  if (m_tdrep)
    m_tdrep->unref();
}

wb_tdef::wb_tdef(const wb_tdef& x) : wb_status(x.sts()), m_tdrep(x.m_tdrep)
{
  if (m_tdrep)
    m_tdrep->ref();
}

wb_tdef& wb_tdef::operator=(const wb_tdef& x)
{
  if (x.m_tdrep)
    x.m_tdrep->ref();
  if (m_tdrep)
    m_tdrep->unref();
  m_tdrep = x.m_tdrep;
  m_sts = x.m_sts;
  return *this;
}

void wb_tdef::check() const
{
  if (!m_tdrep)
    throw wb_error(m_sts);
}

size_t wb_tdef::size()
{
  check();
  return m_tdrep->size();
}

pwr_tTid wb_tdef::tid()
{
  check();
  return m_tdrep->tid();
}

const char* wb_tdef::name() const
{
  check();
  return m_tdrep->name();
}

wb_name wb_tdef::longName()
{
  check();
  return m_tdrep->longName();
}
