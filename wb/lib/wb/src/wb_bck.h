/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_bck_h
#define wb_bck_h

#include "co_dcli.h"

#include "wb_ldh.h"

typedef enum {
  bck_eType_,
  bck_eType_WbDiff,
  bck_eType_FileDiff,
  bck_eType_Wb,
  bck_eType_File
} bck_eType;

typedef struct sBckItem {
  pwr_tAttrRef aref;
  unsigned int size;
  void* valuep;
  void* value2p;
  int hide;
  struct sBckItem* next;
} bck_sItem;

class wb_bck_list {
private:
  bck_sItem* m_first;
  bck_sItem* m_last;
  pwr_tFileName m_filename;
  ldh_tSession m_ldhses;
  bck_eType m_type;

  void add(pwr_tAttrRef* arp, void* value, unsigned int size);
  void add(bck_sItem* xp, void* value2);
  bck_sItem* find(pwr_tAttrRef* arp);

public:
  wb_bck_list(ldh_tSession ldhses, char* filename)
      : m_first(0), m_last(0), m_ldhses(ldhses), m_type(bck_eType_)
  {
    dcli_translate_filename(m_filename, filename);
  }
  ~wb_bck_list();
  bck_eType type()
  {
    return m_type;
  }
  pwr_tStatus read();
  pwr_tStatus read_db(wb_bck_list* lp);
  pwr_tStatus print(char* outfile);
  pwr_tStatus diff(wb_bck_list* lp, char* outfile);
  pwr_tStatus diff(wb_bck_list* lp, wb_bck_list* outlp);
  bck_sItem* first()
  {
    return m_first;
  }
  bck_sItem* next(bck_sItem* item)
  {
    return item->next;
  }
};

pwr_tStatus bck_dump(ldh_tSession ldhses, char* filename, char* out);

#endif
