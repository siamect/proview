/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "wb_env.h"
#include "wb_volume.h"

wb_env::wb_env() : wb_status(LDH__SUCCESS)
{
  m_erep = new wb_erep();
  m_erep->ref();
}

wb_env::wb_env(wb_erep* e) : wb_status(LDH__SUCCESS), m_erep(e)
{
  m_erep->ref();
}

wb_env::wb_env(wb_env& e) : wb_status(e.sts()), m_erep(e.m_erep)
{
  if (m_erep)
    m_erep->ref();
}

wb_env::~wb_env()
{
}

wb_env& wb_env::operator=(const wb_env& x)
{
  // Note! first ref() then unref(), because if
  // m_erep == x.m_erep, erep could be deleted.
  if (x.m_erep)
    x.m_erep->ref();
  if (m_erep)
    m_erep->unref();
  m_erep = x.m_erep;
  m_sts = x.sts();

  return *this;
}

wb_env::operator bool() const
{
  if (!m_erep)
    return false;

  return true;
}

wb_env::operator wb_erep*() const
{
  return m_erep;
}

bool wb_env::open()
{
  return true;
}

bool wb_env::close()
{
  return true;
}

wb_volume wb_env::volume()
{
  wb_volume v(m_erep->volume(&m_sts));
  return v;
}

wb_volume wb_env::volume(pwr_tVid vid)
{
  wb_vrep* vrep = m_erep->volume(&m_sts, vid);
  wb_volume v(vrep);
  return v;
}

wb_volume wb_env::externVolume(pwr_tVid vid)
{
  wb_vrep* vrep = m_erep->externVolume(&m_sts, vid);
  wb_volume v(vrep);
  return v;
}

wb_volume wb_env::bufferVolume()
{
  wb_vrep* vrep = m_erep->bufferVolume(&m_sts);
  wb_volume v(vrep);
  return v;
}

wb_volume wb_env::volume(const char* name)
{
  wb_volume v(m_erep->volume(&m_sts, name));
  return v;
}

wb_volume wb_env::createVolume(pwr_tVid vid, pwr_tCid cid, const char* name,
    ldh_eVolRep type, char* server, bool add)
{
  wb_volume v(m_erep->createVolume(&m_sts, vid, cid, name, type, server, add));
  return v;
}

wb_volume wb_env::snapshot(pwr_tVid) // Fix
{
  wb_volume v;
  return v;
}
