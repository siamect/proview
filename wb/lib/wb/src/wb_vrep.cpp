/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <string.h>

#include "wb_vrep.h"

void wb_vrep::name(const char* n)
{
  strcpy(m_name, n);
}

void wb_vrep::addSrep(wb_srep* srep)
{
  m_srep.push_back(srep);
}

void wb_vrep::removeSrep(wb_srep* srep)
{
  for (srep_iterator it = m_srep.begin(); it != m_srep.end(); it++) {
    if (*it == srep) {
      m_srep.erase(it);
      return;
    }
  }
}

//
//  Get first srep
//
wb_srep* wb_vrep::srep(pwr_tStatus* sts)
{
  srep_iterator it = m_srep.begin();
  if (it == m_srep.end()) {
    *sts = LDH__NOSUCHSESS;
    return 0;
  }
  *sts = LDH__SUCCESS;
  return *it;
}

wb_srep* wb_vrep::nextSrep(pwr_tStatus* sts, wb_srep* srep)
{
  for (srep_iterator it = m_srep.begin(); it != m_srep.end(); it++) {
    if (*it == srep) {
      if (++it == m_srep.end()) {
        *sts = LDH__NOSUCHSESS;
        return 0;
      }
      *sts = LDH__SUCCESS;
      return *it;
    }
  }
  *sts = LDH__NOSUCHSESS;
  return 0;
}
