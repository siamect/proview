/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "wb_name.h"

const char* wb_name::m_emptyString = "";

wb_name::wb_name(const char* name)
{
  if (name == 0) {
    m_sts = LDH__NONAME;
    m_nrep = 0;
    return;
  }

  try {
    m_nrep = new wb_nrep(name);
    m_sts = LDH__SUCCESS;
    m_nrep->ref();
  } catch (wb_error& e) {
    m_sts = e.sts();
    m_nrep = 0;
  }
}

wb_name::wb_name(wb_nrep* nrep) : wb_status(LDH__SUCCESS), m_nrep(nrep)
{
  if (m_nrep)
    m_nrep->ref();
  else
    m_sts = LDH__NONAME;
}

wb_name::wb_name(const wb_name& n) : wb_status(n.sts()), m_nrep(n.m_nrep)
{
  if (oddSts())
    m_nrep->ref();
}

wb_name::~wb_name()
{
  if (oddSts())
    m_nrep->unref();
}

const char* wb_name::c_str() const
{
  if (m_nrep == 0)
    return m_emptyString;
  else
    return m_nrep->name();
}

wb_name& wb_name::operator=(const wb_name& n)
{
  if (n.m_nrep)
    n.m_nrep->ref();
  if (m_nrep)
    m_nrep->unref();
  m_nrep = n.m_nrep;
  m_sts = n.sts();
  return *this;
}

wb_name::operator bool() const
{
  return oddSts();
}

std::ostream& operator<<(std::ostream& os, const wb_name& name)
{
  os << (name.c_str());
  return os;
}

bool wb_name::hasVolume() const
{
  check();
  return m_nrep->hasVolume();
}

bool wb_name::hasPath() const
{
  check();
  return m_nrep->hasPath();
}

bool wb_name::hasObject() const
{
  check();
  return m_nrep->hasObject();
}

bool wb_name::hasSegment(int idx) const
{
  check();
  return m_nrep->hasSegment(idx);
}

bool wb_name::hasAttribute(int idx) const
{
  check();
  return m_nrep->hasAttribute(idx);
}

bool wb_name::hasAttrIndex(int idx) const
{
  check();
  return m_nrep->hasAttrIndex(idx);
}

int wb_name::attributes()
{
  check();
  return m_nrep->attributes();
}

int wb_name::segments()
{
  check();
  return m_nrep->segments();
}

int wb_name::attrIndex(int idx) const
{
  check();
  return m_nrep->attrIndex(idx);
}

char* wb_name::segment(int idx, char* res) const
{
  check();
  return m_nrep->segment(idx, res);
}

char* wb_name::path(char* res) const
{
  check();
  return m_nrep->path(res);
}

char* wb_name::volume(char* res) const
{
  check();
  return m_nrep->volume(res);
}

char* wb_name::object(char* res) const
{
  check();
  return m_nrep->object(res);
}

char* wb_name::attribute(int idx, char* res) const
{
  check();
  return m_nrep->attribute(idx, res);
}

char* wb_name::normSegment(int idx, char* res) const
{
  check();
  return m_nrep->normSegment(idx, res);
}

char* wb_name::normPath(char* res) const
{
  check();
  return m_nrep->normPath(res);
}

char* wb_name::normVolume(char* res) const
{
  check();
  return m_nrep->normVolume(res);
}

char* wb_name::normObject(char* res) const
{
  check();
  return m_nrep->normObject(res);
}

char* wb_name::normAttribute(int idx, char* res) const
{
  check();
  return m_nrep->normAttribute(idx, res);
}

char* wb_name::name() const
{
  check();
  return m_nrep->name();
}

char* wb_name::normName() const
{
  check();
  return m_nrep->normName();
}

char* wb_name::name(int ntype) const
{
  check();
  return m_nrep->name(ntype);
}

char* wb_name::normName(int ntype) const
{
  check();
  return m_nrep->normName(ntype);
}

bool wb_name::volumeIsEqual(const char* n) const
{
  check();
  return m_nrep->volumeIsEqual(n);
}

bool wb_name::objectIsEqual(const char* n) const
{
  check();
  return m_nrep->objectIsEqual(n);
}

bool wb_name::segmentIsEqual(const char* n, int idx) const
{
  check();
  return m_nrep->segmentIsEqual(n, idx);
}

bool wb_name::attributeIsEqual(const char* n, int idx) const
{
  check();
  return m_nrep->attributeIsEqual(n, idx);
}

char* wb_name::segmentsAll(int idx) const
{
  check();
  return m_nrep->segmentsAll(idx);
}

char* wb_name::attributesAll(int idx) const
{
  check();
  return m_nrep->attributesAll(idx);
}

char* wb_name::attributesAllTrue(int idx) const
{
  check();
  return m_nrep->attributesAll(idx, 0, true);
}

// Id representation
char* wb_name::vid(char* res) const
{
  check();
  return m_nrep->volume(res);
}

char* wb_name::oix(char* res) const
{
  check();
  return m_nrep->segment(1, res);
}

char* wb_name::bodyName(char* res) const
{
  check();
  return m_nrep->segment(2, res);
}

int wb_name::bodyOffset() const
{
  check();
  return m_nrep->bodyOffset();
}

int wb_name::bodySize() const
{
  check();
  return m_nrep->bodySize();
}

bool wb_name::hasSuper() const
{
  check();
  return m_nrep->hasSuper();
}

void wb_name::setShadowed(bool shadowed)
{
  check();
  m_nrep->setShadowed(shadowed);
}

char* wb_name::unatName(const char* name)
{
  return wb_nrep::unatName(name);
}

bool wb_name::checkObjectName(const char* name)
{
  return wb_nrep::checkObjectName(name);
}

void wb_name::check() const
{
  if (evenSts())
    throw wb_error(m_sts);
}
