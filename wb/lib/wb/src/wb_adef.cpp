/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "wb_adef.h"
#include "wb_adrep.h"

wb_adef::wb_adef() : wb_status(LDH__NOSUCHATTR), m_adrep(0)
{
}

wb_adef::wb_adef(wb_adrep* adrep) : wb_status(LDH__SUCCESS), m_adrep(adrep)
{
  if (adrep == 0)
    m_sts = LDH__NOSUCHATTR;
  else
    m_adrep->ref();
}

wb_adef::wb_adef(const wb_adef& x) : wb_status(x.m_sts), m_adrep(x.m_adrep)
{
  if (m_adrep)
    m_adrep->ref();
}

wb_adef& wb_adef::operator=(const wb_adef& x)
{
  if (x.m_adrep)
    x.m_adrep->ref();
  if (m_adrep)
    m_adrep->unref();

  m_adrep = x.m_adrep;
  m_sts = x.m_sts;
  return *this;
}

wb_adef::~wb_adef()
{
  if (m_adrep)
    m_adrep->unref();
}

void wb_adef::check()
{
  if (evenSts())
    throw wb_error(m_sts);
}

wb_adef wb_adef::next()
{
  pwr_tStatus sts;

  check();
  return wb_adef(m_adrep->next(&sts));
}

wb_adef wb_adef::prev()
{
  pwr_tStatus sts;

  check();
  return wb_adef(m_adrep->prev(&sts));
}

// get objects runtime body size
size_t wb_adef::size()
{
  check();
  return m_adrep->size();
}

int wb_adef::offset()
{
  check();
  return m_adrep->offset();
}

pwr_eType wb_adef::type()
{
  check();
  return m_adrep->type();
}

int wb_adef::nElement()
{
  check();
  return m_adrep->nElement();
}

int wb_adef::index()
{
  check();
  return m_adrep->index();
}

int wb_adef::flags()
{
  check();
  return m_adrep->flags();
}

pwr_tOid wb_adef::aoid()
{
  check();
  return m_adrep->aoid();
}

pwr_tAix wb_adef::aix()
{
  check();
  return m_adrep->aix();
}

pwr_tCid wb_adef::cid()
{
  check();
  return m_adrep->cid();
}

pwr_eBix wb_adef::bix()
{
  check();
  return m_adrep->bix();
}

pwr_tOid wb_adef::boid()
{
  check();
  return m_adrep->boid();
}

const char* wb_adef::name()
{
  check();
  return m_adrep->name();
}

const char* wb_adef::subName()
{
  check();
  return m_adrep->subName();
}

wb_name wb_adef::longName()
{
  check();
  return m_adrep->longName();
}

void* wb_adef::body(void* p)
{
  check();
  return m_adrep->body(p);
}

bool wb_adef::isClass()
{
  check();
  return m_adrep->isClass();
}

bool wb_adef::isSuperClass()
{
  check();
  return m_adrep->isSuperClass();
}

pwr_tCid wb_adef::subClass()
{
  check();
  return m_adrep->subClass();
}
