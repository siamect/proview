/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "wb_vrepdb.h"

wb_orepdb::wb_orepdb() : m_o(0), m_oid(pwr_cNOid)
{
}

wb_orepdb::wb_orepdb(pwr_tOid oid) : m_o(0), m_oid(oid)
{
}

wb_orepdb::wb_orepdb(db_sObject* o) : m_o(o), m_oid(o->oid)
{
}

wb_orepdb::~wb_orepdb()
{
}

void* wb_orepdb::operator new(size_t size, wb_vrepdb* v)
{
  return (void*)v->new_wb_orepdb(size);
}

void wb_orepdb::operator delete(void* p)
{
  wb_orepdb* o = (wb_orepdb*)p;

  ((wb_vrepdb*)o->m_vrep)->delete_wb_orepdb(p);
}

//
//  Operations declared in wb_orep
//

pwr_tOid wb_orepdb::oid() const
{
  return m_oid;
}

pwr_tVid wb_orepdb::cid() const
{
  pwr_tStatus sts;
  return m_vrep->cid(&sts, (wb_orep*)this);
}

pwr_tVid wb_orepdb::vid() const
{
  pwr_tStatus sts;
  return m_vrep->vid(&sts, (wb_orep*)this);
}

pwr_tOix wb_orepdb::oix() const
{
  pwr_tStatus sts;
  return m_vrep->oix(&sts, (wb_orep*)this);
}

pwr_tOid wb_orepdb::poid() const
{
  pwr_tStatus sts;
  return m_vrep->poid(&sts, (wb_orep*)this);
}

pwr_tOid wb_orepdb::foid() const
{
  pwr_tStatus sts;
  return m_vrep->foid(&sts, (wb_orep*)this);
}

pwr_tOid wb_orepdb::loid() const
{
  pwr_tStatus sts;
  return m_vrep->loid(&sts, (wb_orep*)this);
}

pwr_tOid wb_orepdb::boid() const
{
  pwr_tStatus sts;
  return m_vrep->boid(&sts, (wb_orep*)this);
}

pwr_tOid wb_orepdb::aoid() const
{
  pwr_tStatus sts;
  return m_vrep->aoid(&sts, (wb_orep*)this);
}

wb_name wb_orepdb::longName()
{
  pwr_tStatus sts;

  return m_vrep->longName(&sts, (wb_orep*)this);
}

const char* wb_orepdb::name() const
{
  pwr_tStatus sts;
  return m_vrep->objectName(&sts, (wb_orep*)this);
}

pwr_tTime wb_orepdb::ohTime() const
{
  pwr_tStatus sts;

  return m_vrep->ohTime(&sts, (wb_orep*)this);
}

pwr_tTime wb_orepdb::rbTime() const
{
  pwr_tStatus sts;

  return m_vrep->rbTime(&sts, (wb_orep*)this);
}

pwr_tTime wb_orepdb::dbTime() const
{
  pwr_tStatus sts;

  return m_vrep->dbTime(&sts, (wb_orep*)this);
}

pwr_mClassDef wb_orepdb::flags() const
{
  pwr_tStatus sts;

  return m_vrep->flags(&sts, (wb_orep*)this);
}

bool wb_orepdb::isOffspringOf(const wb_orep* o) const
{
  pwr_tStatus sts;
  return m_vrep->isOffspringOf(&sts, (wb_orep*)this, o);
}

wb_orep* wb_orepdb::ancestor(pwr_tStatus* sts)
{
  return m_vrep->ancestor(sts, (wb_orep*)this);
}

wb_orep* wb_orepdb::parent(pwr_tStatus* sts)
{
  return m_vrep->parent(sts, (wb_orep*)this);
}

wb_orep* wb_orepdb::after(pwr_tStatus* sts)
{
  return m_vrep->after(sts, (wb_orep*)this);
}

wb_orep* wb_orepdb::before(pwr_tStatus* sts)
{
  return m_vrep->before(sts, (wb_orep*)this);
}

wb_orep* wb_orepdb::first(pwr_tStatus* sts)
{
  return m_vrep->first(sts, (wb_orep*)this);
}

wb_orep* wb_orepdb::child(pwr_tStatus* sts, wb_name& name)
{
  return m_vrep->child(sts, (wb_orep*)this, name);
}

wb_orep* wb_orepdb::last(pwr_tStatus* sts)
{
  return m_vrep->last(sts, (wb_orep*)this);
}

wb_orep* wb_orepdb::next(pwr_tStatus* sts)
{
  return m_vrep->next(sts, (wb_orep*)this);
}

wb_orep* wb_orepdb::previous(pwr_tStatus* sts)
{
  return m_vrep->previous(sts, (wb_orep*)this);
}

wb_adrep* wb_orepdb::attribute(pwr_tStatus*, const char* aname)
{
  return 0;
}

wb_adrep* wb_orepdb::attribute(pwr_tStatus*)
{
  return 0;
}
