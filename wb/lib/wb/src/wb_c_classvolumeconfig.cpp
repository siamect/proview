/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_c_classvolumeconfig.c -- work bench methods of the ClassVolumeConfig
 * class. */

#include "pwr_baseclasses.h"

#include "co_string.h"

#include "cow_login.h"

#include "wb_pwrs.h"
#include "wb_wnav.h"

/*----------------------------------------------------------------------------*\
  Open a workbench from a RootVolumeConfig object.
\*----------------------------------------------------------------------------*/

static pwr_tStatus EditClassVolume(ldh_sMenuCall* ip)
{
  int size;
  int sts;
  char name[120];
  char fname[200];
  char cmd[510];
  pwr_eClassVolumeDatabaseEnum* dbenum;

  sts = ldh_ObjidToName(ip->PointedSession, ip->Pointed.Objid, ldh_eName_Object,
      name, sizeof(name), &size);
  if (EVEN(sts))
    return sts;

  sts = ldh_GetObjectPar(ip->PointedSession, ip->Pointed.Objid, "RtBody",
      "Database", (char**)&dbenum, &size);
  if (EVEN(sts))
    return sts;

  switch (*dbenum) {
  case pwr_eClassVolumeDatabaseEnum_WbLoad:
    str_ToLower(name, name);
    sprintf(fname, "$pwrp_db/%s.wb_load", name);
    dcli_translate_filename(fname, fname);

    sprintf(cmd, "open classeditor /file=\"%s\"/database=wbload", fname);
    ip->wnav->command(cmd);
    break;
  case pwr_eClassVolumeDatabaseEnum_BerkeleyDb:
  case pwr_eClassVolumeDatabaseEnum_MySql: {
    pwr_tFileName filename;

    str_ToLower(name, name);
    dcli_translate_filename(filename, "$pwr_exe/wb_open_db.sh");
    sprintf(cmd, "%s \"%s\" \"%s\" \"%s\" \"%s\" &", filename,
        CoLogin::username(), CoLogin::ucpassword(), name, name);

    sts = system(cmd);
    if (sts == -1 || sts == 127) {
      printf("-- Error when creating process.\n");
      return sts;
    }
    break;
  }
  default:
    return 1;
  }

  free(dbenum);
  return 1;
}

/*----------------------------------------------------------------------------*\
  Every method to be exported to the workbench should be registred here.
\*----------------------------------------------------------------------------*/

pwr_dExport pwr_BindMethods(ClassVolumeConfig)
    = { pwr_BindMethod(EditClassVolume), pwr_NullMethod };
