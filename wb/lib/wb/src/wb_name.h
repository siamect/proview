/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_name_h
#define wb_name_h

#include "wb_nrep.h"
#include "wb_ldh_msg.h"

/* Describe the format of a namestring.

   Let us assume we have an object of class Ai.
   The object has an attribute called FilterAttribute.

   Object name:	Eobj
   Object id  : 1234567890
   Class name :	pwrb:Class-Ai
   Class id   : 0.2:34
   Volume name:	Avol
   Volume id  : 0.123.34.63
   Parents    : Bobj, Cobj, Dobj
   Attribute  : FilterAttribute
   Index      : 2
   Offset     : 60
   Size	      : 4
   Body name  :	pwrb:Class-Ai-RtBody
   Body id    : 0.2:0.34.1

   The name of this object can be written in different ways.
   The type cdh_mName is used to define the way an object is named.

   V P O B B A I E S  I   Form  Fallback        String
   o a b o o t n s e  d
   l t j d d t d c p  T
   u h e y y r e a a  y
   m   c I N i x p r  p
   e   t d a b   e a  e
   m u   G t
   e t   M o
   e   S r

   1 * * * * * * * 0  1   Id    *               _V0.123.34.63
   1 * * * * * * * 1  1   Id    *               _V0.123.34.63:
   1 * * * * * * * 0  0   Id    *                 0.123.34.63
   1 * * * * * * * 1  0   Id    *                 0.123.34.63:

   0 * 1 * * * * * *  1   Id    *               _O0.123.34.63:1234567890
   0 * 1 * * * * * *  0   Id    *                 0.123.34.63:1234567890

   0 * 0 1 * 1 0 * *  *   Id    * _A0.123.34.63:1234567890(_T0.2:0.34.1)
   0 * 0 1 * 1 1 * *  *   Id    * _A0.123.34.63:1234567890(_T0.2:0.34.1)[60.4]

   1 * * * * * * * *  *   Std   Export          _V0.123.34.63:
   0 0 0 * * 1 * * *  *   Std   Export          _O0.123.34.63:1234567890
   0 0 0 0 1 1 * * *  *   Std   Export
   _A0.123.34.63:1234567890(pwrb:Class-Ai-RtBody)FilterAttribute[2]

   1 1 1 0 0 1 1 0 *  *   Std   Strict
   Avol:Bobj-Cobj-Dobj-Eobj.FilterAttribute[2]
   0 1 1 0 0 1 1 0 *  *   Std   Strict Bobj-Cobj-Dobj-Eobj.FilterAttribute[2]
   0 0 1 0 0 1 1 0 *  *   Std   Strict Eobj.FilterAttribute[2]
   0 0 0 0 0 1 1 0 0  *   Std   Strict FilterAttribute[2]
   0 0 0 0 0 1 1 0 1  *   Std   Strict .FilterAttribute[2]
   0 0 0 0 0 1 0 0 0  *   Std   Strict FilterAttribute
   0 0 0 0 0 1 0 0 1  *   Std   Strict .FilterAttribute
   1 1 1 0 0 1 0 0 *  *   Std   Strict Avol:Bobj-Cobj-Dobj-Eobj.FilterAttribute
   1 1 1 0 0 0 0 0 0  *   Std   Strict          Avol:Bobj-Cobj-Dobj-Eobj
   1 1 1 0 0 0 0 0 1  *   Std   Strict          Avol:Bobj-Cobj-Dobj-Eobj-
   1 1 0 0 0 0 0 0 0  *   Std   Strict          Avol:Bobj-Cobj-Dobj
   1 1 0 0 0 0 0 0 1  *   Std   Strict          Avol:Bobj-Cobj-Dobj-
   1 0 0 0 0 0 0 0 0  *   Std   Strict          Avol
   1 0 0 0 0 0 0 0 1  *   Std   Strict          Avol:

   1 1 1 0 0 1 1 1 0  *   Std   Strict
   Avol\:Bobj\-Cobj\-Dobj\-Eobj\.FilterAttribute[2]
   0 1 1 0 0 1 1 1 0  *   Std   Strict
   Bobj\-Cobj\-Dobj\-Eobj\.FilterAttribute[2]
   0 0 1 0 0 1 1 1 0  *   Std   Strict Eobj\.FilterAttribute[2]
   0 0 0 0 0 1 1 1 0  *   Std   Strict FilterAttribute[2]
   1 1 1 0 0 1 0 1 0  *   Std   Strict
   Avol\:Bobj\-Cobj\-Dobj\-Eobj\.FilterAttribute
   1 1 1 0 0 0 0 1 0  *   Std   Strict          Avol\:Bobj\-Cobj\-Dobj\-Eobj
   1 1 0 0 0 0 0 1 0  *   Std   Strict          Avol\:Bobj\-Cobj\-Dobj
   1 0 0 0 0 0 0 1 0  *   Std   Strict          Avol

   1 1 1 0 0 1 1 0 *  *   Root  Strict
   //Avol/Bobj/Cobj/Dobj/Eobj.FilterAttribute[2]
   0 1 1 0 0 1 1 0 *  *   Root  Strict /Bobj/Cobj/Dobj/Eobj.FilterAttribute[2]
   0 0 1 0 0 1 1 0 *  *   Root  Strict Eobj.FilterAttribute[2]
   0 0 0 0 0 1 1 0 0  *   Root  Strict FilterAttribute[2]
   1 1 1 0 0 1 0 0 0  *   Root  Strict
   //Avol/Bobj/Cobj/Dobj/Eobj.FilterAttribute
   1 1 1 0 0 0 0 0 0  *   Root  Strict          //Avol/Bobj/Cobj/Dobj/Eobj
   1 1 1 0 0 0 0 0 1  *   Root  Strict          //Avol/Bobj/Cobj/Dobj/Eobj/
   1 1 0 0 0 0 0 0 0  *   Root  Strict          //Avol/Bobj/Cobj/Dobj
   1 1 0 0 0 0 0 0 1  *   Root  Strict          //Avol/Bobj/Cobj/Dobj/
   1 0 0 0 0 0 0 0 0  *   Root  Strict          //Avol
   1 0 0 0 0 0 0 0 1  *   Root  Strict          //Avol/

*/

class wb_nrep;

class wb_name : public wb_status {
protected:
  wb_nrep* m_nrep;
  static const char* m_emptyString;

public:
  wb_name() : wb_status(LDH__NONAME), m_nrep(0)
  {
  }
  wb_name(const char*);
  wb_name(wb_nrep*);
  wb_name(const wb_name&);

  ~wb_name();

  const char* c_str() const;

  wb_name& operator=(const wb_name& n);

  operator bool() const;
  operator wb_nrep*() const;
  bool operator==(wb_name&);

  // Name representation
  bool hasVolume() const;
  bool hasPath() const;
  bool hasObject() const;
  bool hasSegment(int idx = 0) const;
  bool hasAttribute(int idx = 0) const;
  bool hasAttrIndex(int idx = 0) const;
  int attributes();
  int segments();
  int attrIndex(int idx = 0) const;
  char* segment(int idx = 0, char* res = 0) const;
  char* path(char* res = 0) const;
  char* volume(char* res = 0) const;
  char* object(char* res = 0) const;
  char* attribute(int idx = 0, char* res = 0) const;
  char* normSegment(int idx = 0, char* res = 0) const;
  char* normPath(char* res = 0) const;
  char* normVolume(char* res = 0) const;
  char* normObject(char* res = 0) const;
  char* normAttribute(int idx = 0, char* res = 0) const;
  char* name() const;
  char* normName() const;
  char* name(int ntype) const;
  char* normName(int ntype) const;
  bool volumeIsEqual(const char* n) const;
  bool objectIsEqual(const char* n) const;
  bool segmentIsEqual(const char* n, int idx = 0) const;
  bool attributeIsEqual(const char* n, int idx = 0) const;
  char* segmentsAll(int idx = 0) const;
  char* attributesAll(int idx = 0) const;
  char* attributesAllTrue(int idx = 0) const;

  // Id representation
  char* vid(char* res = 0) const;
  char* oix(char* res = 0) const;
  char* bodyName(char* res = 0) const;
  int bodyOffset() const;
  int bodySize() const;
  bool hasSuper() const;
  void setShadowed(bool shadowed);

  // bool bodyId();
  // bool bodyName();

  static char* unatName(const char* name);
  static bool checkObjectName(const char* name);

private:
  void check() const;
};

std::ostream& operator<<(std::ostream& os, const wb_name& name);

#endif
