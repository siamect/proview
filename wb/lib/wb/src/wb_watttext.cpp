/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_watttext.cpp -- Display object attributes */

#include "co_time.h"
#include "cow_xhelp.h"
#include "wb_watt_msg.h"
#include "wb_wtt.h"

void WAttText::message_cb(void* watttext, char severity, const char* message)
{
  ((WAttText*)watttext)->message(severity, message);
}

void WAttText::activate_exit()
{
  if (modified)
    wow->DisplayQuestion(this, "Close text editor",
        "Do you want to insert text", exit_ok, exit_cancel, this);
  else {
    if (close_cb)
      (close_cb)(this);
    else
      delete this;
  }
}

void WAttText::exit_ok(void* ctx, void* data)
{
  WAttText* watttext = (WAttText*)ctx;

  watttext->set_attr_value();

  if (watttext->close_cb)
    (watttext->close_cb)(watttext);
  else
    delete watttext;
}

void WAttText::exit_cancel(void* ctx, void* data)
{
  WAttText* watttext = (WAttText*)ctx;

  if (watttext->close_cb)
    (watttext->close_cb)(watttext);
  else
    delete watttext;
}

void WAttText::activate_print()
{
}

WAttText::~WAttText()
{
}

WAttText::WAttText(void* wa_parent_ctx, ldh_tSesContext wa_ldhses,
    pwr_sAttrRef wa_aref, int wa_editmode, pwr_tStatus* status)
    : parent_ctx(wa_parent_ctx), ldhses(wa_ldhses), aref(wa_aref),
      editmode(wa_editmode), modified(0), close_cb(0), wow(0)
{
  pwr_tStatus sts;

  *status = WATT__SUCCESS;

  ldh_sAttrRefInfo ainfo;

  sts = ldh_GetAttrRefInfo(ldhses, &aref, &ainfo);
  if (EVEN(sts)) {
    *status = sts;
    return;
  }

  switch (ainfo.type) {
  case pwr_eType_Text:
    break;
  default:
    *status = WATT__NOTEXT;
    return;
  }
}
