/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "co_string.h"
#include "co_time.h"

#include "wb_session.h"
#include "wb_utl_api.h"
#include "wb_log.h"
#include "wb_wnav_msg.h"

typedef struct {
  std::vector<VItem> v;
} log_sCbCtx;

void wb_log::log(wlog_eCategory category, const char* str, const char* comment,
    unsigned int opt)
{
  char category_str[40];

  category_to_string(category, category_str);

  CoLog::dlog(category_str, str, comment, opt);
}

void wb_log::log(wb_session* session, wlog_eCategory category, pwr_tVid vid,
    unsigned int opt)
{
  pwr_tOid oid;
  oid.oix = 0;
  oid.vid = vid;
  wb_object o = session->object(oid);

  log(category, o.name(), 0, opt);
}

void wb_log::log(wb_session* session, wlog_eCategory category, pwr_tOid oid,
    unsigned int opt)
{
  wb_object o = session->object(oid);

  log(category, o.longName().c_str(), 0, opt);
}

void wb_log::log(wb_session* session, wlog_eCategory category,
    pwr_tAttrRef aref, unsigned int opt)
{
}

void wb_log::category_to_string(wlog_eCategory category, char* str)
{
  switch (category) {
  case wlog_eCategory_WbLogin:
    strcpy(str, "WbLogin");
    break;
  case wlog_eCategory_ConfiguratorSave:
    strcpy(str, "ConfigSave");
    break;
  case wlog_eCategory_PlcSave:
    strcpy(str, "PlcSave");
    break;
  case wlog_eCategory_GeSave:
    strcpy(str, "GeSave");
    break;
  case wlog_eCategory_PlcBuild:
    strcpy(str, "PlcBuild");
    break;
  case wlog_eCategory_GeBuild:
    strcpy(str, "GeBuild");
    break;
  case wlog_eCategory_VolumeBuild:
    strcpy(str, "VolumeBuild");
    break;
  case wlog_eCategory_NodeBuild:
    strcpy(str, "NodeBuild");
    break;
  case wlog_eCategory_CreatePackage:
    strcpy(str, "CreatePackage");
    break;
  case wlog_eCategory_CopyPackage:
    strcpy(str, "CopyPackage");
    break;
  case wlog_eCategory_GeExport:
    strcpy(str, "GeExport");
    break;
  case wlog_eCategory_UpdateClasses:
    strcpy(str, "UpdateClasses");
    break;
  case wlog_eCategory_WbLoad:
    strcpy(str, "WbLoad");
    break;
  case wlog_eCategory_VolumeClone:
    strcpy(str, "VolumeClone");
    break;
  case wlog_eCategory_DirectoryBuild:
    strcpy(str, "DirectoryBuild");
    break;
  case wlog_eCategory_NewRevision:
    strcpy(str, "NewRevision");
    break;
  case wlog_eCategory_RevisionRestore:
    strcpy(str, "RevisionRestore");
    break;
  case wlog_eCategory_BuildAll:
    strcpy(str, "BuildAll");
    break;
  default:
    strcpy(str, "");
  }
}

void wb_log::string_to_category(char* str, wlog_eCategory* category)
{
  if (streq(str, "WbLogin"))
    *category = wlog_eCategory_WbLogin;
  else if (streq(str, "ConfigSave"))
    *category = wlog_eCategory_ConfiguratorSave;
  else if (streq(str, "PlcSave"))
    *category = wlog_eCategory_PlcSave;
  else if (streq(str, "GeSave"))
    *category = wlog_eCategory_GeSave;
  else if (streq(str, "PlcBuild"))
    *category = wlog_eCategory_PlcBuild;
  else if (streq(str, "GeBuild"))
    *category = wlog_eCategory_GeBuild;
  else if (streq(str, "VolumeBuild"))
    *category = wlog_eCategory_VolumeBuild;
  else if (streq(str, "NodeBuild"))
    *category = wlog_eCategory_NodeBuild;
  else if (streq(str, "CreatePackage"))
    *category = wlog_eCategory_CreatePackage;
  else if (streq(str, "CopyPackage"))
    *category = wlog_eCategory_CopyPackage;
  else if (streq(str, "GeExport"))
    *category = wlog_eCategory_GeExport;
  else if (streq(str, "UpdateClasses"))
    *category = wlog_eCategory_UpdateClasses;
  else if (streq(str, "WbLoad"))
    *category = wlog_eCategory_WbLoad;
  else if (streq(str, "VolumeClone"))
    *category = wlog_eCategory_VolumeClone;
  else if (streq(str, "DirectoryBuild"))
    *category = wlog_eCategory_DirectoryBuild;
  else if (streq(str, "NewRevision"))
    *category = wlog_eCategory_NewRevision;
  else if (streq(str, "RevisionRestore"))
    *category = wlog_eCategory_RevisionRestore;
  else if (streq(str, "BuildAll"))
    *category = wlog_eCategory_BuildAll;
  else
    *category = wlog_eCategory_;
}

void wb_log::generate_html(char* filename, pwr_tStatus* sts)
{
  log_sCbCtx cbctx;
  pwr_tFileName fname;
  FILE* fp;
  char timstr[24];
  char pname[80];
  pwr_tFileName help_fname, help_filename;
  unsigned int max_size = 1000;

  time_AtoAscii(0, time_eFormat_DateAndTime, timstr, sizeof(timstr));
  utl_get_projectname(pname);

  CoLog::dget(0, 0, gen_cb, &cbctx);

  filter(cbctx.v);

  dcli_translate_filename(fname, filename);

  strcpy(help_fname, fname);
  char* s = strchr(help_fname, '.');
  if (s) {
    *s = 0;
    strcat(help_fname, "_help.html");
    s = strrchr(help_fname, '/');
    if (s)
      strcpy(help_filename, s + 1);
    else
      strcpy(help_filename, "");
  } else
    strcpy(help_fname, "");

  fp = fopen(fname, "w");
  if (!fp) {
    *sts = WNAV__NOFILE;
    return;
  }
  fprintf(fp,
      "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\"http://www.w3.org/TR/REC-html40/loose.dtd>\n\
<!-- Generated by wb_log %s  -->\n",
      timstr);
  fprintf(fp,
      "<HTML>\n<HEAD>\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n\
<TITLE>\nWorkbench History\n</TITLE>\n</HEAD>\n<BODY BGCOLOR=\"white\">\n");

  fprintf(fp, "<h2>Workbench History</h2>\n<xmp> %s %s</xmp><br>\n<a "
              "href=\"%s\">Help</a>\n<XMP>\n\n",
      pname, timstr, help_filename);
  fprintf(fp, "%-20s  %-10s %-20s %-20s %s\n", "Date", "User", "Action", "Item",
      "Comment");
  fprintf(fp, "----------------------------------------------------------------"
              "------------------------------\n");

  unsigned int to = 0;
  if (cbctx.v.size() > max_size)
    to = cbctx.v.size() - max_size;

  for (int i = (int)cbctx.v.size() - 1; i >= (int)to; i--) {
    if (!cbctx.v[i].disable)
      fprintf(fp, "%s\n", cbctx.v[i].text.c_str());
  }
  fprintf(fp, "</XMP>\n</BODY>\n</HTML>\n");
  fclose(fp);

  if (!streq(help_fname, "")) {
    fp = fopen(help_fname, "w");
    if (!fp) {
      *sts = WNAV__NOFILE;
      return;
    }

    fprintf(fp, "\
<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n\
<html>\n\
  <head>\n\
    <title>Wb History Help</title>\n\
  </head>\n\
\n\
  <body>\n\
<XMP>\n\
The Wb History shows logged actions in the development environment.\n\
Each save action can be stored with a explanatory comment. This requires that comment is \n\
enabled in the configurator.\n\
\n\
Action		Description\n\
\n\
WbLogin   	A user logged in to Proview development environment. User displayed in item.\n\
ConfigSave	Configurator saved. Saved volume displayed in item.\n\
PlcSave		Plc window saved. Saved plc window diplayed in item.\n\
GeSave		Ge graph saved. Saved graphs displayed in item.\n\
VolumeBuild	Volume is built. Built volume displayed in item.\n\
NodeBuild	Node is built. Built node displayed in item.\n\
PlcBuild	Plc window compiled. Built window displayed in item.\n\
GeBuild		Ge graph built. Built graph displayed in item.\n\
GeExport	Ge graph exported to java. Exported graph displayed in item.\n\
DirectoryBuild	Directory built. Directory displayed in item.\n\
UpdateClasses	Classes updated.\n\
CreatePackage	Distribution package created. Created package displayed in item.\n\
CopyPackage	Package distributed to process or operator station. Package displayed in item.\n\
NewRevision	A new reivison is created. Revision displayed in item\n\
RevisionRestored A revision is restored. Revision displayed in item.\n\
</XMP>\n\
  </body>\n\
</html>\n");
    fclose(fp);
  }
  *sts = WNAV__SUCCESS;
}

void wb_log::filter(std::vector<VItem>& v)
{
}

void wb_log::gen_cb(
    void* ctx, pwr_tTime time, char* s1, char* s2, char* s3, char* s4)
{
  log_sCbCtx* cbctx = (log_sCbCtx*)ctx;
  char timstr[21];
  char str[200];

  time_AtoAscii(&time, time_eFormat_DateAndTime, timstr, sizeof(timstr));

  snprintf(str, sizeof(str), "%-20s  %-10s %-20s %-20s %s", timstr, s2, s1, s3,
      s4 ? s4 : "");

  VItem s(str);
  if (s4 && !streq(s4, ""))
    s.has_comment = true;
  cbctx->v.push_back(s);
}
