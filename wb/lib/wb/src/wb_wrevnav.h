/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_wrevnav_h
#define wb_wrevnav_h

#include "wb_revision.h"

#define WREVNAV_BROW_MAX 25

class WItemRev;
class WItemRevision;

class WRevNavBrow {
public:
  WRevNavBrow(BrowCtx* brow_ctx, void* lwnav) : ctx(brow_ctx), wrevnav(lwnav)
  {
  }

  BrowCtx* ctx;
  void* wrevnav;
  brow_tNodeClass nc_object;
  brow_tNodeClass nc_table;
  flow_sAnnotPixmap* pixmap_leaf;
  flow_sAnnotPixmap* pixmap_map;
  flow_sAnnotPixmap* pixmap_openmap;
  flow_sAnnotPixmap* pixmap_attr;
  flow_sAnnotPixmap* pixmap_warning;
  flow_sAnnotPixmap* pixmap_current;
  flow_sAnnotPixmap* pixmap_currentbranch;

  void free_pixmaps();
  void allocate_pixmaps();
  void create_nodeclasses();
  void brow_setup();
};

class WRevNav {
public:
  WRevNav(void* wa_parent_ctx, ldh_tSession wa_ldhses, const char* wa_name,
      wb_eUtility wa_utility, pwr_tStatus* status);
  virtual ~WRevNav();

  void* parent_ctx;
  ldh_tSession ldhses;
  char name[80];
  WRevNavBrow* brow;
  void (*message_cb)(void*, char, const char*);
  void (*set_clock_cursor_cb)(void*);
  void (*reset_cursor_cb)(void*);
  void (*change_value_cb)(void*);
  int (*command_cb)(void*, char*);
  wb_eUtility utility;
  int displayed;
  wb_revision* rev;

  virtual void set_inputfocus()
  {
  }

  void message(char sev, const char* text);
  int root_objects();
  void redraw();
  void enable_events();
  int get_select(WItemRev*** items, int* item_cnt);
  void refresh_node(WItemRev* item);
  WItemRev* get_parent(WItemRev* item);
  void get_zoom(double* zoom_factor);
  void zoom(double zoom_factor);
  void unzoom();

  static int brow_cb(FlowCtx* ctx, flow_tEvent event);
  static int init_brow_cb(FlowCtx* fctx, void* client_data);
  static int rev_command_cb(void* ctx, char* cmd);
};

class WItemRev {
public:
  WItemRev();
  virtual ~WItemRev();
  virtual int open_children(
      WRevNavBrow* brow, wb_revision* rev, double x, double y);
  virtual int open_attributes(WRevNavBrow* brow, double x, double y);
  virtual int close(WRevNavBrow* brow, double x, double y);

  brow_tNode node;
  char name[120];
  int children;
};

class WItemRevision : public WItemRev {
public:
  WItemRevision(WRevNavBrow* brow, char* item_name, char* item_description,
      pwr_tTime item_date, char* item_version, bool item_current,
      bool item_current_branch, bool item_in_manager, int item_children,
      brow_tNode dest, flow_eDest dest_code);
  int open_children(WRevNavBrow* brow, wb_revision* rev, double x, double y);
  int open_attributes(WRevNavBrow* brow, double x, double y);
  char description[80];
  char time[40];
  char version[40];
  bool current;
  bool current_branch;
  bool in_manager;
};

class WItemRevAttr : public WItemRev {
public:
  WItemRevAttr(WRevNavBrow* brow, const char* item_name, char* item_value,
      brow_tNode dest, flow_eDest dest_code);
  virtual ~WItemRevAttr();
  char value[120];
};

#endif
