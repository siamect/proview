/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_session.h -- work bench database session */

#ifndef wb_session_h
#define wb_session_h

#include "wb_volume.h"

class wb_object;
class wb_bdef;
class wb_cdef;
class wb_destination;
class wb_volume;
class wb_recix;
class wb_vrepmem;

class wb_session : public wb_volume {
protected:
  wb_srep* m_srep;

public:
  wb_session();
  wb_session(wb_volume& v);
  wb_session(wb_session& s);
  ~wb_session();
  wb_session& operator=(const wb_session& x);

  // Calls redirected to srep.

  ldh_eAccess access()
  {
    return m_srep->access(&m_sts);
  }
  bool access(ldh_eAccess access)
  {
    return m_srep->access(&m_sts, access);
  }
  ldh_eUtility utility()
  {
    return m_srep->utility(&m_sts);
  }
  bool utility(ldh_eUtility utility)
  {
    return m_srep->utility(&m_sts, utility);
  }

  //

  bool isReadonly();
  bool isEmpty();
  bool commit();
  bool abort();

  // Calls that need write privileges

  wb_object createObject(wb_cdef cdef, wb_destination d, wb_name name);
  wb_object copyObject(wb_object o, wb_destination d, wb_name name);

  bool moveObject(wb_object o, wb_destination d);
  bool renameObject(wb_object o, wb_name name);
  bool deleteObject(wb_object o);
  bool deleteFamily(wb_object o, bool storeix);

  bool writeAttribute(wb_attribute& a, void* p, size_t size);
  bool writeAttribute(wb_attribute& a, void* p);
  bool writeBody()
  {
    return false;
  } // Fix

  bool copyOset(pwr_sAttrRef* arp, bool keepref, bool keepsym,
      bool ignore_errors, pwr_tVid vid = 0, const char* vname = 0,
      wb_vrepmem** vmem = 0);
  bool cutOset(pwr_sAttrRef* arp, bool keepref);
  bool pasteOset(pwr_tOid doid, ldh_eDest dest, bool keepoid, bool recycleix,
      char* buffer);

  bool clone(const char* vname, pwr_tVid vid, wb_vrepmem** vmem);

  void getAllMenuItems(ldh_sMenuCall* ip, ldh_sMenuItem** Item, wb_cdrep* cdrep,
      wb_orep* o, void* o_body, pwr_tUInt32 Level, int* nItems,
      int AddSeparator);

  pwr_tStatus getMenu(ldh_sMenuCall* ip);
  pwr_tStatus callMenuMethod(ldh_sMenuCall* mcp, int Index);

  void editorContext(void* ctx)
  {
    m_srep->editorContext(ctx);
  }
  void sendThisSession(ldh_tSessionCb thisSessionCb)
  {
    m_srep->sendThisSession(thisSessionCb);
  }
  void sendOtherSession(ldh_tSessionCb otherSessionCb)
  {
    m_srep->sendOtherSession(otherSessionCb);
  }

  bool validateDestination(wb_destination d, pwr_tCid cid);
  bool castAttribute(pwr_sAttrRef* arp, pwr_tCid cid);
  bool disableAttribute(pwr_sAttrRef* arp, pwr_tDisableAttr disable);
  void recix_set_destination(const char* d)
  {
    m_srep->recix_set_destination(d);
  }
  void resetSts()
  {
    m_sts = LDH__SUCCESS;
  }
  static void import_cb(wb_orep *o, wb_orep *os, void *data);
};

inline bool wb_session::isEmpty()
{
  return m_srep->isEmpty(&m_sts);
}

inline bool wb_session::isReadonly()
{
  return m_srep->isReadonly(&m_sts);
}

// inline bool wb_session::commit()
// {
//   return m_srep->commit(&m_sts);
// }

inline bool wb_session::abort()
{
  return m_srep->abort(&m_sts);
}

#endif
