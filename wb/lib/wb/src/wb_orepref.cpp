/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "wb_orepref.h"
#include "wb_vrepref.h"

wb_orepref::wb_orepref(wb_vrepref* vrep, int oix) : m_vrep(vrep), m_cid(oix)
{
}

wb_orepref::~wb_orepref()
{
}

pwr_tOid wb_orepref::oid() const
{
  pwr_tOid oid = { m_cid, m_vrep->vid() };
  return oid;
}

pwr_tVid wb_orepref::vid() const
{
  return m_vrep->vid();
}

pwr_tOix wb_orepref::oix() const
{
  return m_cid;
}

pwr_tCid wb_orepref::cid() const
{
  return m_cid;
}

pwr_tOid wb_orepref::poid() const
{
  return pwr_cNObjid;
}

pwr_tOid wb_orepref::foid() const
{
  return pwr_cNObjid;
}

pwr_tOid wb_orepref::loid() const
{
  return pwr_cNObjid;
}

pwr_tOid wb_orepref::boid() const
{
  return pwr_cNObjid;
}

pwr_tOid wb_orepref::aoid() const
{
  return pwr_cNObjid;
}

const char* wb_orepref::name() const
{
  return m_vrep->name();
}

wb_name wb_orepref::longName()
{
  char str[200];

  m_vrep->objectName(this, str);
  return wb_name(str);
}

pwr_tTime wb_orepref::ohTime() const
{
  pwr_tTime t = { 0, 0 };
  return t;
}

pwr_tTime wb_orepref::rbTime() const
{
  pwr_tTime t = { 0, 0 };
  return t;
}

pwr_tTime wb_orepref::dbTime() const
{
  pwr_tTime t = { 0, 0 };
  return t;
}

pwr_mClassDef wb_orepref::flags() const
{
  pwr_mClassDef m;
  m.m = 0;
  return m;
}

bool wb_orepref::isOffspringOf(const wb_orep* o) const
{
  return false;
}

wb_orep* wb_orepref::ancestor(pwr_tStatus* sts)
{
  *sts = LDH__NOSUCHOBJ;
  return 0;
}

wb_orep* wb_orepref::parent(pwr_tStatus* sts)
{
  *sts = LDH__NOSUCHOBJ;
  return 0;
}

wb_orep* wb_orepref::after(pwr_tStatus* sts)
{
  *sts = LDH__NOSUCHOBJ;
  return 0;
}

wb_orep* wb_orepref::before(pwr_tStatus* sts)
{
  *sts = LDH__NOSUCHOBJ;
  return 0;
}

wb_orep* wb_orepref::first(pwr_tStatus* sts)
{
  *sts = LDH__NOSUCHOBJ;
  return 0;
}

wb_orep* wb_orepref::child(pwr_tStatus* sts, wb_name& name)
{
  *sts = LDH__NOSUCHOBJ;
  return 0;
}

wb_orep* wb_orepref::last(pwr_tStatus* sts)
{
  *sts = LDH__NOSUCHOBJ;
  return 0;
}

wb_orep* wb_orepref::next(pwr_tStatus* sts)
{
  *sts = LDH__NOSUCHOBJ;
  return 0;
}

wb_orep* wb_orepref::previous(pwr_tStatus* sts)
{
  *sts = LDH__NOSUCHOBJ;
  return 0;
}

wb_adrep* wb_orepref::attribute(pwr_tStatus* sts, const char* name)
{
  *sts = LDH__NOSUCHOBJ;
  return 0;
}

wb_adrep* wb_orepref::attribute(pwr_tStatus* sts)
{
  *sts = LDH__NOSUCHOBJ;
  return 0;
}

wb_erep* wb_orepref::erep() const
{
  return m_vrep->erep();
}

wb_vrep* wb_orepref::vrep() const
{
  return m_vrep;
}

ldh_eVolRep wb_orepref::vtype() const
{
  return ldh_eVolRep_Ref;
}

bool wb_orepref::docBlock(char** block, int* size) const
{
  return false;
}

bool wb_orepref::docBlock(char* block)
{
  return false;
}
