/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_wattnav_h
#define wb_wattnav_h

#include "wb_ldh.h"
#include "wb_wnav_brow.h"

#define wattnav_cVersion "X3.3b"
#define WATTNAV_BROW_MAX 25

typedef enum { wattnav_eType_Object, wattnav_eType_CrossRef } wattnav_eType;

class WAttNav {
public:
  WAttNav(void* wa_parent_ctx, wattnav_eType wa_type, const char* wa_name,
      ldh_tSesContext wa_ldhses, pwr_sAttrRef wa_aref, int wa_editmode,
      int wa_advanced_user, int wa_display_objectname, wb_eUtility wa_utility,
      pwr_tStatus* status);
  virtual ~WAttNav();

  void* parent_ctx;
  wattnav_eType type;
  char name[80];
  WNavBrow* brow;
  ldh_tSesContext ldhses;
  pwr_sAttrRef aref;
  int editmode;
  int advanced_user;
  int display_objectname;
  int bypass;
  int trace_started;
  void (*message_cb)(void*, char, const char*);
  void (*change_value_cb)(void*);
  wb_eUtility utility;
  int displayed;

  virtual void set_inputfocus()
  {
  }
  virtual pwr_tStatus get_selection(char* str, int size)
  {
    return 0;
  }

  void start_trace(pwr_tObjid Objid, char* object_str);
  int set_attr_value(brow_tObject node, char* name, char* value_str);
  int check_attr(int* multiline, brow_tObject* node, char* name,
      char** init_value, int* size);
  int get_select(pwr_sAttrRef* attrref, int* is_attr);
  void message(char sev, const char* text);
  void force_trace_scan();
  int object_attr();
  int crossref();
  int object_exist(brow_tObject object);
  void redraw();
  void enable_events();
  void set_editmode(int editmode, ldh_tSesContext ldhses)
  {
    this->editmode = editmode;
    if (ldhses != 0)
      this->ldhses = ldhses;
  }
  int select_by_name(const char* name);

  static int init_brow_cb(FlowCtx* fctx, void* client_data);
  static int brow_cb(FlowCtx* ctx, flow_tEvent event);
};

#endif
