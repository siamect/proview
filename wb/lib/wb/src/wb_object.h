/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_object_h
#define wb_object_h

#include "wb_ldh.h"
#include "wb_status.h"

class wb_attribute;
class wb_bdef;
class wb_destination;
class wb_name;
class wb_orep;

class wb_object : public wb_status {
public:
  wb_orep* m_orep;

  wb_object();
  wb_object(wb_orep*);
  wb_object(pwr_tStatus, wb_orep*);
  wb_object(const wb_object&);

  ~wb_object();

  wb_object& operator=(const wb_object&);

  operator bool() const;
  operator wb_orep*() const;
  bool operator==(wb_object&);

  void uniqueName(const char*)
  {
  } // Fix

  pwr_tStatus checkXref(const char* name);

  void user(void* p)
  {
  } // Fix  // set user data
  void* user()
  {
    return 0;
  } // Fix   // get user data

  ldh_sRefInfo* refinfo(ldh_sRefInfo* rp); // Fix

  pwr_tOid oid(); ///< Object identifier of this object
  pwr_tVid vid(); ///< Volume identifier of this object
  pwr_tOix oix(); ///< Object index of this object
  pwr_tCid
  cid(); ///< Class identifier of class that this object is an instance of

  pwr_tOid poid(); ///< Object identifier of parent of this object
  pwr_tOid foid(); ///< Object identifier of first child of this object
  pwr_tOid loid(); ///< Object identifier of last child of this object
  pwr_tOid boid(); ///< Object identifier of object before this object
  pwr_tOid aoid(); ///< Object identifier of object after this object

  pwr_tOix poix(); ///< Object index of parent of this object
  pwr_tOix foix(); ///< Object index of first child of this object
  pwr_tOix loix(); ///< Object index of last child of this object
  pwr_tOix boix(); ///< Object index of object before this object
  pwr_tOix aoix(); ///< Object index of object after this object

  const char* name();
  wb_name longName();

  pwr_tTime ohTime(); ///< time when header of this object was last changed
  pwr_tTime
  rbTime(); ///< time when run time body of this object was last changed
  pwr_tTime
  dbTime(); ///< time when development body of this object was last changed
  pwr_tTime modTime(); ///< time when this object was last changed
  pwr_tTime
  treeModTime(); ///< time when this object or any ancestor was last changed

  pwr_mClassDef flags();

  size_t rbSize(); ///< size of run time body
  size_t dbSize(); ///< size of development body

  wb_bdef bdef(const char* bname);
  wb_bdef bdef(pwr_eBix bix);

  wb_attribute attribute();
  wb_attribute attribute(const char* aname);
  wb_attribute attribute(const char* bname, const char* aname);

  /* Navigational operations */

  wb_object ancestor();
  wb_object parent();
  wb_object after(); ///< next sibling
  wb_object before(); ///< previous sibling
  wb_object first(); ///< first child
  wb_object child(wb_name& name);
  wb_object last(); ///< last child

  wb_object next(); ///< next in list of objects of same class in one volume
  wb_object
  previous(); ///< previous in list of objects of same class in one volume

  wb_destination destination(ldh_eDest dest);

  bool docBlock(char** block, int* size);
  bool docBlock(char* block);

private:
  bool check();
  bool check(std::string str);
};

#endif
