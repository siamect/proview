/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_c_plcembed.cpp -- work bench methods of the PlcEmbed class. */

#include "pwr_baseclasses.h"
#include "wb_pwrs.h"
#include "wb_pwrb_msg.h"
#include "wb_session.h"

static pwr_tStatus PostCreate(
    ldh_tSesContext Session, pwr_tOid Object, pwr_tOid Father, pwr_tCid Class)
{
  pwr_tOid oid;
  pwr_tOid toid;
  pwr_tStatus sts;
  int cnt = 0;

  ldh_sParDef* bodydef;
  int rows;
  pwr_tCid cid;

  // Find the top PlcEmbed and set the ThreadObject
  sts = ldh_GetObjectClass(Session, Object, &cid);
  if (EVEN(sts))
    return sts;

  sts = ldh_GetObjectBodyDef(Session, cid, "RtBody", 1, &bodydef, &rows);
  if (EVEN(sts))
    return sts;

  for (int i = 0; i < rows; i++) {
    if (bodydef[i].Par->Param.TypeRef == pwr_cClass_PlcEmbed) {
      sts = ldh_GetClassList(Session, pwr_cClass_PlcThread, &oid);
      while (ODD(sts)) {
        cnt++;
        toid = oid;
        sts = ldh_GetNextObject(Session, oid, &oid);
      }

      if (cnt > 0) {
        pwr_tAttrRef object_aref, plcembed_aref, threadobject_aref;

        object_aref = cdh_ObjidToAref(Object);
        sts = ldh_ArefANameToAref(
            Session, &object_aref, bodydef[i].ParName, &plcembed_aref);
        if (EVEN(sts))
          return sts;
        sts = ldh_ArefANameToAref(
            Session, &plcembed_aref, "ThreadObject", &threadobject_aref);
        if (EVEN(sts))
          return sts;

        sts = ldh_WriteAttribute(
            Session, &threadobject_aref, (void*)&toid, sizeof(toid));
      }
      break;
    }
  }

  return PWRB__SUCCESS;
}

/*----------------------------------------------------------------------------*\
  Every method to be exported to the workbench should be registred here.
\*----------------------------------------------------------------------------*/

pwr_dExport pwr_BindMethods(PlcEmbed)
    = { pwr_BindMethod(PostCreate), pwr_NullMethod };
