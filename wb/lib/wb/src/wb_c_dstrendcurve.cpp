/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_c_dstrendcurve.c -- work bench methods of the DsTrendCurve class. */

#include "pwr_baseclasses.h"
#include "wb_pwrs.h"
#include "wb_pwrb_msg.h"
#include "wb_session.h"
#include "wb_wsx.h"

//
//  Syntax check.
//
static pwr_tStatus SyntaxCheck(
    ldh_tSesContext Session, pwr_tAttrRef Object, /* current object */
    int* ErrorCount, /* accumulated error count */
    int* WarningCount /* accumulated waring count */
    )
{
  // Check DataName
  wb_session* sp = (wb_session*)Session;
  pwr_tAttrRef attribute_vect[10];
  pwr_tAttrRef buffers_vect[10];

  wb_attribute a = sp->attribute(&Object);
  if (!a)
    return a.sts();

  wb_attribute attribute_a(a, 0, "Attribute");
  if (!attribute_a)
    return attribute_a.sts();

  attribute_a.value(&attribute_vect);
  if (!attribute_a)
    return attribute_a.sts();

  wb_attribute attribute_b(a, 0, "Buffers");
  if (!attribute_b)
    return attribute_b.sts();

  attribute_b.value(&buffers_vect);
  if (!attribute_a)
    return attribute_a.sts();

  for (unsigned int i = 0;
       i < sizeof(attribute_vect) / sizeof(attribute_vect[0]); i++) {
    if (cdh_ObjidIsNotNull(attribute_vect[i].Objid)) {
      if (attribute_vect[i].Flags.b.Object
          || attribute_vect[i].Flags.b.ObjectAttr) {
        wsx_error_msg_str(Session, "Bad Attribute reference, invalid type",
            Object, 'E', ErrorCount, WarningCount);
        return PWRB__SUCCESS;
      }

      if (cdh_ObjidIsNull(buffers_vect[i].Objid))
        wsx_error_msg_str(Session, "Buffer object not specified", Object, 'E',
            ErrorCount, WarningCount);

      wb_attribute data_a = sp->attribute(&attribute_vect[i]);
      if (!data_a) {
        wsx_error_msg_str(Session, "Bad Attribute reference", Object, 'E',
            ErrorCount, WarningCount);
      } else {
        // Check DataName type
        switch (data_a.tid()) {
        case pwr_eType_Boolean:
        case pwr_eType_Float32:
        case pwr_eType_Float64:
        case pwr_eType_Int8:
        case pwr_eType_Int16:
        case pwr_eType_Int32:
        case pwr_eType_UInt8:
        case pwr_eType_UInt16:
        case pwr_eType_UInt32:
          break;
        default:
          wsx_error_msg_str(Session, "Attribute type not supported", Object,
              'E', ErrorCount, WarningCount);
        }
      }
    }
  }
  return PWRB__SUCCESS;
}

//  Every method to be exported to the workbench should be registred here.

pwr_dExport pwr_BindMethods(DsTrendCurve)
    = { pwr_BindMethod(SyntaxCheck), pwr_NullMethod };
