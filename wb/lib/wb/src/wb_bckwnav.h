/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_bckwnav_h
#define wb_bckwnav_h

/* wb_bckwnav.h -- Backupfile display window */

#include "flow_browapi.h"

#include "wb_bck.h"

typedef enum { bckwitem_eItemType_Bck } bckwitem_eItemType;

class WbBckWNavBrow {
public:
  WbBckWNavBrow(BrowCtx* brow_ctx, void* lwnav) : ctx(brow_ctx), bckwnav(lwnav)
  {
  }
  ~WbBckWNavBrow();

  BrowCtx* ctx;
  void* bckwnav;
  brow_tNodeClass nc_bck;
  brow_tNodeClass nc_wbbck;
  flow_sAnnotPixmap* pixmap_save;
  flow_sAnnotPixmap* pixmap_build;
  flow_sAnnotPixmap* pixmap_package;
  flow_sAnnotPixmap* pixmap_copy;
  flow_sAnnotPixmap* pixmap_export;
  flow_sAnnotPixmap* pixmap_clone;

  void free_pixmaps();
  void allocate_pixmaps();
  void create_nodeclasses();
  void brow_setup();
};

class WbBckWNav {
public:
  WbBckWNav(void* l_parent_ctx, ldh_tSesContext l_ldhses, wb_bck_list* l_list,
      int l_editmode);
  virtual ~WbBckWNav();

  void* parent_ctx;
  ldh_tSesContext ldhses;
  WbBckWNavBrow* brow;
  wb_bck_list* list;
  int editmode;

  virtual void set_input_focus()
  {
  }

  void show();
  void clear();
  void zoom(double zoom_factor);
  void unzoom();
  pwr_tStatus transfer_wb();
  pwr_tStatus filter(char* hierarchy);
  void check_all();
  void check_clear();

  static int init_brow_cb(FlowCtx* fctx, void* client_data);
  static int brow_cb(FlowCtx* ctx, flow_tEvent event);
};

class ItemBck {
public:
  ItemBck(WbBckWNav* bckwnav, bck_sItem* item_bck_item, brow_tNode dest,
      flow_eDest dest_code);
  virtual ~ItemBck();

  bckwitem_eItemType type;
  WbBckWNav* bckwnav;
  brow_tNode node;
  bck_sItem* bck_item;
  pwr_eType atype;

  void set(int value);
  void update();
};

#endif
