/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_build_h
#define wb_build_h

#include "wb_session.h"
#include "wb_wnav.h"

class Wtt;

typedef enum { bld_eType_Export, bld_eType_Import } bld_eType;

typedef enum {
  bld_ePass_None,
  bld_ePass_BeforeNode,
  bld_ePass_AfterNode
} bld_ePass;

typedef enum { bld_eNodeType_Node, bld_eNodeType_Sev } bld_eNodeType;

class wb_build : public wb_status {
public:
  wb_build(wb_session ses, WNav* wnav = 0);
  virtual ~wb_build();

  void classlist(pwr_tCid cid);
  void all(int no_export = 0, int no_classvolumes = 0, int no_flowfiles = 0);
  void node(char* nodename, int nodetype, void* volumelist, int volumecnt);
  void volume();
  void rootvolume(pwr_tVid vid);
  void classvolume(pwr_tVid vid);
  void planthier(pwr_tOid oid);
  void nodehier(pwr_tOid oid);
  void plcpgm(pwr_tOid oid);
  void xttgraph(pwr_tOid oid);
  void opplaceweb(pwr_tOid oid);
  void webbrowserconfig(pwr_tOid oid);
  void webgraph(pwr_tOid oid);
  void appgraph(pwr_tOid oid);
  void application(pwr_tOid oid);
  void classdef(pwr_tOid oid);
  void cnf(char* node, void* volumelist, int volumecnt);
  void directories(char* dir, bld_ePass pass);
  void export_import_files(int type, bld_ePass pass);
  void export_files(bld_ePass pass)
  {
    export_import_files(bld_eType_Export, pass);
  }
  void import_files(bld_ePass pass)
  {
    export_import_files(bld_eType_Import, pass);
  }
  void update_file(char* dest, char* src);

  wb_build_opt opt;
  wb_session m_session;
  WNav* m_wnav;
  pwr_tOid m_hierarchy;
};

#endif
