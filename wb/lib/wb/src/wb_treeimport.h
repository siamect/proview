/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_treeimport_h
#define wb_treeimport_h

#include <map>

#include "wb_ldh.h"

class wb_treeexport;
class wb_adrep;
class wb_vrep;
class wb_orep;

class wb_merep;

class wb_treeimport {
  std::map<pwr_tOix, pwr_tOix> m_translation_table;
  std::map<pwr_tCid, pwr_tCid> m_translation_table_cid;
  pwr_tVid m_import_source_vid;
  void (*m_object_import_cb)(wb_orep *, wb_orep *, void *);
  void *m_object_import_cb_data;

  typedef std::map<pwr_tOix, pwr_tOix>::iterator iterator_translation_table;
  typedef std::map<pwr_tCid, pwr_tCid>::iterator iterator_translation_table_cid;

  bool importUpdateSubClass(
      wb_adrep* subattr, char* body, wb_vrep* vrep, bool* modified);
  bool importUpdateObject(wb_orep* o, wb_vrep* vrep);

public:
  wb_treeimport() : m_object_import_cb(0) {}
  virtual ~wb_treeimport();
  virtual bool importTree(bool keepref, bool keepsym) = 0;
  virtual bool importTreeObject(wb_merep* merep, pwr_tOid oid, pwr_tCid cid,
      pwr_tOid poid, pwr_tOid boid, const char* name, pwr_mClassDef flags,
      size_t rbSize, size_t dbSize, void* rbody, void* dbody)
      = 0;
  virtual bool importPaste() = 0;
  virtual bool importPasteObject(pwr_tOid destination, ldh_eDest destcode,
      bool keepoid, pwr_tOid oid, pwr_tCid cid, pwr_tOid poid, pwr_tOid boid,
      const char* name, pwr_mClassDef flags, size_t rbSize, size_t dbSize,
      void* rbody, void* dbody, pwr_tOid woid, pwr_tOid* roid)
      = 0;
  virtual void importIgnoreErrors() = 0;
  bool importTranslationTableInsert(pwr_tOix from, pwr_tOix to);
  bool importTranslationTableCidInsert(pwr_tCid from, pwr_tCid to);
  void importTranslationTableClear();
  pwr_tOix importTranslate(pwr_tOix oix);
  pwr_tCid importTranslateCid(pwr_tCid cid);
  void importSetSourceVid(pwr_tVid vid);
  bool importUpdateTree(wb_vrep* vrep);
  void set_object_import_cb(void (*object_import_cb)(wb_orep *, wb_orep *, void *), void *data) {
    m_object_import_cb = object_import_cb;
    m_object_import_cb_data = data;
  }
};

#endif
