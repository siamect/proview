/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef pn_viewer_h
#define pn_viewer_h

/* pn_viewer.h -- Profinet viewer */

#include "pn_viewernav.h"

class CoWow;
class CoWowFocusTimer;
class PnViewerPNAC;

class PnViewer
{
public:
  PnViewer(void* v_parent_ctx, const char* v_name, const char* v_device,
           pwr_tStatus* status);
  virtual ~PnViewer();

  virtual void message(char severity, const char* msg) {}
  virtual void set_prompt(const char* prompt) {}
  virtual void open_change_value() {}

  void update_devices();
  void set_device_properties(unsigned char* macaddress,
                             unsigned char* ipaddress, char* devname);
  int fetch_config(std::vector<PnDevice>& vect);
  void filter(viewer_eFilterType filtertype);
  void activate_update();
  void activate_filter(viewer_eFilterType filtertype);
  void activate_setdevice();
  void activate_changevalue();
  void activate_close();
  void activate_help();

  static void change_value(void* ctx);
  static void message_cb(void* ctx, int severity, const char* msg);

  void* parent_ctx;
  char name[80];
  char device[20];
  PnViewerNav* viewernav;
  PnViewerNav* viewernavconf;
  CoWow* wow;
  int input_open;
  std::vector<PnDevice> dev_vect;
  std::vector<PnDevice> conf_vect;
  PnViewerPNAC* pnet;
  void (*close_cb)(void*);
};

#endif
