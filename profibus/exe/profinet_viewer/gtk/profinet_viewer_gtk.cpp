/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* profinet_viewer.cpp -- Profinet viewer */

#ifdef PWRE_CONF_PNAK

#include <locale.h>

#include <stdlib.h>

#include "co_error.h"
#include "co_string.h"

#include "cow_xhelp_gtk.h"

#include "pn_viewer_gtk.h"

typedef struct
{
  GtkWidget* toplevel;
  PnViewer* viewer;
} tViewer;

static void usage()
{
  printf("\nUsage: profinet_viewer [-l language] [device]\n");
}

static void viewer_close(void* c)
{
  delete ((tViewer*)c)->viewer;
  exit(0);
}

int main(int argc, char* argv[])
{
  int i;
  int sts;
  tViewer* ctx;
  char dev_name[20] = "eth1";

  ctx = (tViewer*)calloc(1, sizeof(tViewer));

  gtk_init(&argc, &argv);

  setlocale(LC_NUMERIC, "POSIX");
  setlocale(LC_TIME, "en_US");

  ctx->toplevel = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height",
                                           100, "default-width", 100, "title",
                                           "Profinet Viewer", NULL);

  // Create help window
  CoXHelpGtk* xhelp =
      new CoXHelpGtk(ctx->toplevel, 0, xhelp_eUtility_Wtt, (int*)&sts);
  CoXHelpGtk::set_default(xhelp);

  for (i = 1; i < argc; i++)
  {
    if (streq(argv[i], "-h"))
    {
      usage();
      exit(0);
    }
    else if (streq(argv[i], "-l"))
    {
      if (i + 1 >= argc)
      {
        usage();
        exit(0);
      }
      Lng::set(argv[i + 1]);
      i++;
    }
    else if (str_StartsWith(argv[i], "eth"))
    {
      snprintf(dev_name, sizeof(dev_name), "%s", argv[i]);
    }
  }

  // Open window
  try
  {
    ctx->viewer =
        new PnViewerGtk(ctx, ctx->toplevel, "Profinet Viewer", dev_name, &sts);
    ctx->viewer->close_cb = viewer_close;
  }
  catch (co_error& e)
  {
    printf("** Exception: %s\n", e.what().c_str());
    exit(0);
  }

  gtk_widget_show_all(ctx->toplevel);

  g_object_set(ctx->toplevel, "visible", FALSE, NULL);

  try
  {
    ctx->viewer->update_devices();
  }
  catch (co_error& e)
  {
    printf("** Exception: %s\n", e.what().c_str());
  }

  gtk_main();
  return (0);
}

#else
#include <stdio.h>

int main() { printf("Softing PNAK not built with this Proview release\n"); }
#endif
