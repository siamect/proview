/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#define IO_MAXCHAN 96

// These constants are obsolete from V4.1, except for the old style
// (Pb_Di, Pb_Do etc)

#define PB_MODULE_STATE_NOTINIT 0
#define PB_MODULE_STATE_OPERATE 1

//#define PB_SLAVE_STATE_NOTINIT 0
//#define PB_SLAVE_STATE_STOPPED 1
//#define PB_SLAVE_STATE_OPERATE 2

//#define PB_MASTER_STATE_NOTINIT 0
//#define PB_MASTER_STATE_STOPPED 1
//#define PB_MASTER_STATE_CLEARED 2
//#define PB_MASTER_STATE_OPERATE 3

//#define PB_STALLACTION_NONE	0
//#define PB_STALLACTION_RESET 	1
//#define PB_STALLACTION_BREAK 	2

#define PB_NUMREP_UNSIGNEDINT 0
#define PB_NUMREP_SIGNEDINT 1
#define PB_NUMREP_FLOATIEEE 2
#define PB_NUMREP_FLOATVAX 3
#define PB_NUMREP_FLOATINTEL 4

//#define PB_BYTEORDERING_LE	0
//#define PB_BYTEORDERING_BE	1

#define PB_ORIENTATION_BYTE 8
#define PB_ORIENTATION_WORD 16
#define PB_ORIENTATION_DWORD 32

#define PB_UDATA_DIAG 1

/* io_sAgentLocal now lives in the respective agent modules.  */

typedef struct _io_sRackLocal
{
  unsigned char fdl;
  unsigned char dp;
  unsigned int start_time;
  unsigned int start_cnt;
} io_sRackLocal;

typedef struct
{
  void* input_area;
  void* output_area;
  int scancount[IO_MAXCHAN];
} io_sCardLocal;

typedef struct
{
  unsigned short invoke_id;
  unsigned short input_area_size;
  unsigned short output_area_size;
  unsigned char* input_area;
  unsigned char* output_area;
  unsigned short byte_ordering;
  unsigned short float_representation;
} io_sFDLCardLocal;

typedef struct _agent_args
{
  void* local;
  io_sAgent* ap;
  io_tCtx ctx;
} agent_args;

typedef struct
{
  int hServiceReadDevice;   // Handle for Service device
  int hServiceWriteDevice;  // Handle for Service device
  int hDpDataDevice;        // Handle for DP-Data device
  int hDpsInputDataDevice;  // Handle for DP-Slave Input-Data device
  int hDpsOutputDataDevice; // Handle for DP-Slave Output-Data device
  unsigned char CurrentBoardNumber;
  int slave_diag_requested; // Slave diag requested
  int parallel_service;     // parallel activity
  int hDpsBoardDevice;      // Handle for DP-Slave Output-Data device
  pthread_t events;
  pthread_mutex_t mutex;
  agent_args args;
  unsigned char fdl;
  unsigned char dp;
  unsigned char invoke_id;
} io_sAgentLocal;
