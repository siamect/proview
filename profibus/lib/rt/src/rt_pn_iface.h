/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* rt_pn_iface.h -- Profinet driver interface routines  */

#ifndef rt_pn_iface_h
#define rt_pn_iface_h

#include "pwr.h"

#include "rt_pn_gsdml_data.h"

#include "rt_io_pn_locals.h"

#define PN_MAX_MANU_SPEC_DIAGS 200

void pack_set_ip_settings_req(T_PNAK_SERVICE_REQ_RES* ServiceReqRes,
                              PnDeviceInfo* dev_info);

void pack_set_device_name_req(T_PNAK_SERVICE_REQ_RES* ServiceReqRes,
                              PnDeviceInfo* dev_info);

void pack_set_identification_req(T_PNAK_SERVICE_REQ_RES* ServiceReqRes);

void pack_get_device_state_req(T_PNAK_SERVICE_REQ_RES* ServiceReqRes,
                               unsigned short device_ref);

void pack_write_req(T_PNAK_SERVICE_REQ_RES* ServiceReqRes,
                    unsigned short device_ref, pwr_sClass_PnWriteReq* wr_req);

void pack_get_los_req(T_PNAK_SERVICE_REQ_RES* ServiceReqRes);

void pack_get_alarm_req(T_PNAK_SERVICE_REQ_RES* ServiceReqRes,
                        unsigned short ref);

void pack_alarm_ack_req(T_PNAK_SERVICE_REQ_RES* ServiceReqRes,
                        unsigned short ref, unsigned short prio);

void pack_download_req(T_PNAK_SERVICE_REQ_RES* ServiceReqRes,
                       GsdmlDeviceData* dev_data, unsigned short device_ref);

int unpack_write_con(T_PNAK_SERVICE_DESCRIPTION* pSdb, io_sAgentLocal* local);

int unpack_get_los_con(T_PNAK_SERVICE_DESCRIPTION* pSdb, io_sAgentLocal* local);

int unpack_get_alarm_con(T_PNAK_SERVICE_DESCRIPTION* pSdb,
                         io_sAgentLocal* local, io_sAgent* ap);
int unpack_get_device_state_con(T_PNAK_SERVICE_DESCRIPTION* pSdb,
                                io_sAgentLocal* local, io_sAgent* ap);

int unpack_download_con(T_PNAK_SERVICE_DESCRIPTION* pSdb,
                        io_sAgentLocal* local);

int handle_service_con(io_sAgentLocal* local, io_sAgent* ap);

int wait_service_con(io_sAgentLocal* local, io_sAgent* ap);

void handle_exception(io_sAgentLocal* local);

void handle_state_changed(io_sAgentLocal* local);

void handle_device_state_changed(io_sAgentLocal* local, io_sAgent* ap);

void handle_alarm_indication(io_sAgentLocal* local, io_sAgent* ap);

void* handle_events(void* ptr);

#endif
