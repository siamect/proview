/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_c_pb_dp_slave_qt.c -- work bench methods of the Pb_DP_Slave class. */

#include "cow_xhelp_qt.h"

#include "wb_pwrs.h"
#include "wb_wsx.h"

#include "rt_pb_msg.h"

#include "cow_pb_gsd_attr_qt.h"

#include "wb_c_pb_dp_slave.h"

static pwr_tStatus Configure(ldh_sMenuCall* ip)
{
  pwr_tStatus sts;
  slave_sCtx* ctx;

  sts = pb_dp_slave_create_ctx(ip->PointedSession, ip->Pointed, ip->wnav, &ctx);
  if (sts != PB__USERPRMDATALEN && EVEN(sts))
  {
    return sts;
  }

  ctx->attr = new GsdAttrQt(ctx, 0, ctx->gsd, ctx->edit_mode);
  ctx->attr->close_cb = pb_dp_slave_close_cb;
  ctx->attr->save_cb = pb_dp_slave_save_cb;
  ctx->attr->help_cb = pb_dp_slave_help_cb;

  if (EVEN(sts))
  {
    ctx->attr->wow->DisplayError(
        "Configuration load error",
        "Configuration load error\nCheck configuration data");
  }

  return 1;
}

static pwr_tStatus ConfigureFilter(ldh_sMenuCall* ip) { return 1; }

//
//  Syntax check.
//
static pwr_tStatus SyntaxCheck(ldh_tSesContext Session,
                               pwr_tAttrRef Object, /* current object */
                               int* ErrorCount,  /* accumulated error count */
                               int* WarningCount /* accumulated waring count */
                               )
{
  return wsx_CheckIoDevice(Session, Object, ErrorCount, WarningCount,
                           wsx_mCardOption_None);
}

/*----------------------------------------------------------------------------*\
  Every method to be exported to the workbench should be registred here.
\*----------------------------------------------------------------------------*/
pwr_dExport pwr_BindMethods(Pb_DP_Slave) = {
    pwr_BindMethod(Configure), pwr_BindMethod(ConfigureFilter),
    pwr_BindMethod(SyntaxCheck), pwr_NullMethod};
