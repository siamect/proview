/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cow_pn_gsdml_attr_h
#define cow_pn_gsdml_attr_h

/* cow_pn_gsdml_attr.h -- Profinet gsdml attribute editor */

#include "cow_pn_gsdml.h"
#include "rt_pn_gsdml_data.h"

typedef struct
{
  void* value;
  char name[80];
  int type;
  int size;
  double minlimit;
  double maxlimit;
  int noedit;
  int multiline;
  int mask;
} attr_sItem;

typedef enum {
  attr_eOrderModuleType_Default,
  attr_eOrderModuleType_Name,
  attr_eOrderModuleType_Number
} attr_eOrderModuleType;

class GsdmlAttrNav;
class CoWow;

class GsdmlAttr
{
public:
  void* parent_ctx;
  char name[80];
  pn_gsdml* gsdml;
  int edit_mode;
  GsdmlAttrNav* attrnav;
  int input_open;
  void* object;
  void (*close_cb)(void*);
  int (*save_cb)(void*);
  int (*help_cb)(void*, const char*);
  void* client_data;
  int recall_idx;
  static char value_recall[30][160];
  int value_current_recall;
  pwr_tFileName data_filename;
  CoWow* wow;

  GsdmlAttr(void* a_parent_ctx, void* a_object, pn_gsdml* a_gsdml,
            int a_edit_mode, const char* a_data_filename);
  virtual ~GsdmlAttr();

  virtual void message(char severity, const char* message) {}
  virtual void attr_help_text(const char* help_text) {}
  virtual void set_prompt(const char* prompt) {}
  virtual void change_value() {}

  void activate_ordermoduletype(attr_eOrderModuleType type);
  void activate_exit();
  void activate_help();
  void activate_copy();
  void activate_cut();
  void activate_paste();
  void activate_print();
  void activate_viewio(int set);
  void activate_zoom_in();
  void activate_zoom_out();
  void activate_zoom_reset();
  void activate_cmd_ok();
  void activate_cmd_apply();
  void activate_cmd_ca();
  void activate_collapse();
  void activate_expand_all();

  static void gsdmlattr_message(void* attr, char severity, const char* message);
  static void gsdmlattr_change_value_cb(void* attr_ctx);
  static void cmd_close_apply_cb(void* ctx, void* data);
  static void cmd_close_no_cb(void* ctx, void* data);
};

#endif
