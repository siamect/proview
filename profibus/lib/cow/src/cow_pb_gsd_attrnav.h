/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cow_pb_gsd_attrnav_h
#define cow_pb_gsd_attrnav_h

/* cow_pb_gsd_attrnav.h -- Profibus gsd configurator navigator */

#include "flow_browapi.h"

#include "cow_pb_gsd_attr.h"

#define pb_cModuleClassFile "$pwr_exe/pb_module_classes.dat"

typedef enum {
  attrnav_eItemType_PbBase,
  attrnav_eItemType_PbEnum,
  attrnav_eItemType_PbEnumValue,
  attrnav_eItemType_PbModule,
  attrnav_eItemType_PbModuleType,
  attrnav_eItemType_PbModuleData,
  attrnav_eItemType_PbModuleClass,
  attrnav_eItemType_PbPrmData,
  attrnav_eItemType_PbMoreData,
  attrnav_eItemType_PbEnumByteOrder
} attrnav_eItemType;

typedef enum {
  attrnav_mOpen_All = ~0,
  attrnav_mOpen_Children = 1 << 0,
  attrnav_mOpen_Attributes = 1 << 1
} attrnav_mOpen;

class ItemPb;

//! Class for handling of brow.
class GsdAttrNavBrow
{
public:
  GsdAttrNavBrow(BrowCtx* brow_ctx, void* xn) : ctx(brow_ctx), attrnav(xn) {}
  ~GsdAttrNavBrow();

  BrowCtx* ctx;
  void* attrnav;
  brow_tNodeClass nc_object;
  brow_tNodeClass nc_attr;
  brow_tNodeClass nc_attr_multiline;
  brow_tNodeClass nc_table;
  brow_tNodeClass nc_header;
  brow_tNodeClass nc_table_header;
  brow_tNodeClass nc_enum;
  flow_sAnnotPixmap* pixmap_leaf;
  flow_sAnnotPixmap* pixmap_map;
  flow_sAnnotPixmap* pixmap_openmap;
  flow_sAnnotPixmap* pixmap_attr;
  flow_sAnnotPixmap* pixmap_attrarray;
  flow_sAnnotPixmap* pixmap_attrenum;

  void free_pixmaps();
  void allocate_pixmaps();
  void create_nodeclasses();
  void brow_setup();
};

class CoWow;
class CoWowTimer;

//! The navigation area of the attribute editor.
class GsdAttrNav
{
public:
  void* parent_ctx;
  pb_gsd* gsd;
  char name[80];
  GsdAttrNavBrow* brow;
  attr_sItem* itemlist;
  int item_cnt;
  int edit_mode;
  int trace_started;
  void (*message_cb)(void*, char, const char*);
  void (*change_value_cb)(void*);
  CoWow* wow;
  CoWowTimer* trace_timerid;
  char modelname[80];

  GsdAttrNav(void* xn_parent_ctx, const char* xn_name, pb_gsd* xn_gsd,
             int xn_edit_mode, pwr_tStatus* status);
  virtual ~GsdAttrNav();

  virtual void set_inputfocus() {}

  void start_trace(pwr_tObjid Objid, char* object_str);
  int set_attr_value(const char* value_str);
  int check_attr_value(char** value);
  int get_select(pwr_sAttrRef* attrref, int* is_attr);
  void message(char sev, const char* text);
  void force_trace_scan();
  int object_attr();
  void print(char* filename);
  int get_select(ItemPb** item);
  void zoom(double zoom_factor);
  void unzoom();
  void get_zoom(double* zoom_factor);
  int search_class(const char* filename, const char* model, const char* module,
                   char* mclass);

  static void trace_scan(void* data);
  static int trace_scan_bc(brow_tObject object, void* p);
  static int trace_connect_bc(brow_tObject object, char* name, char* attr,
                              flow_eTraceType type, void** p);
  static int trace_disconnect_bc(brow_tObject object);
  static int init_brow_cb(FlowCtx* fctx, void* client_data);
  static int attr_string_to_value(int type_id, const char* value_str,
                                  void* buffer_ptr, int buff_size,
                                  int attr_size);
  static void attrvalue_to_string(int type_id, void* value_ptr, char* str,
                                  int size, int* len, char* format);
  static int brow_cb(FlowCtx* ctx, flow_tEvent event);
};

class ItemPb
{
public:
  ItemPb();
  virtual ~ItemPb();

  attrnav_eItemType type;
  brow_tNode node;
  char name[120];
  int parent;

  virtual int open_children(GsdAttrNav* attrnav, double x, double y);
  virtual int close(GsdAttrNav* attrnav, double x, double y);
};

//! Item for a normal attribute.
class ItemPbBase : public ItemPb
{
public:
  ItemPbBase(GsdAttrNav* attrnav, const char* item_name, const char* attr,
             int attr_type, int attr_size, double attr_min_limit,
             double attr_max_limit, void* attr_value_p, int attr_noedit,
             gsd_sPrmText* attr_enumtext, brow_tNode dest,
             flow_eDest dest_code);
  virtual ~ItemPbBase();

  void* value_p;
  char old_value[80];
  int first_scan;
  int type_id;
  int size;
  double min_limit;
  double max_limit;
  int noedit;
  gsd_sPrmText* enumtext;
  int subgraph;
};

class ItemPbEnum : public ItemPbBase
{
public:
  ItemPbEnum(GsdAttrNav* attrnav, const char* item_name, const char* attr,
             int attr_type, int attr_size, double attr_min_limit,
             double attr_max_limit, void* attr_value_p, int attr_noedit,
             gsd_sPrmText* attr_enumtext, brow_tNode dest,
             flow_eDest dest_code);
  virtual ~ItemPbEnum();

  int old_value;

  virtual int open_children(GsdAttrNav* attrnav, double x, double y);
};

//! Item for an enum attribute.
class ItemPbEnumValue : public ItemPb
{
public:
  ItemPbEnumValue(GsdAttrNav* attrnav, const char* item_name, int item_num,
                  int item_type_id, void* attr_value_p, brow_tNode dest,
                  flow_eDest dest_code);
  virtual ~ItemPbEnumValue();

  int num;
  int type_id;
  void* value_p;
  int old_value;
  int first_scan;
};

//! Item for a module.
class ItemPbModule : public ItemPb
{
public:
  ItemPbModule(GsdAttrNav* attrnav, const char* item_name,
               gsd_sModuleConf* item_mconf, brow_tNode dest,
               flow_eDest dest_code);
  virtual ~ItemPbModule() {}

  gsd_sModuleConf* mconf;
  char old_value[80];
  char old_type[80];
  int first_scan;

  virtual int open_children(GsdAttrNav* attrnav, double x, double y);
};

//! Item for module type selection.
class ItemPbModuleType : public ItemPb
{
public:
  ItemPbModuleType(GsdAttrNav* attrnav, const char* item_name,
                   gsd_sModuleConf* item_mconf, brow_tNode dest,
                   flow_eDest dest_code);
  virtual ~ItemPbModuleType() {}

  gsd_sModuleConf* mconf;
  int old_value;
  int first_scan;

  virtual int open_children(GsdAttrNav* attrnav, double x, double y);
};

//! Item for module type selection.
class ItemPbModuleData : public ItemPb
{
public:
  ItemPbModuleData(GsdAttrNav* attrnav, const char* item_name,
                   gsd_sModuleConf* item_mconf, brow_tNode dest,
                   flow_eDest dest_code);
  virtual ~ItemPbModuleData() {}

  gsd_sModuleConf* mconf;

  virtual int open_children(GsdAttrNav* attrnav, double x, double y);
  void update(GsdAttrNav* attrnav);
};

//! Item for module class selection.
class ItemPbModuleClass : public ItemPb
{
public:
  ItemPbModuleClass(GsdAttrNav* attrnav, const char* item_name,
                    gsd_sModuleConf* item_mconf, brow_tNode dest,
                    flow_eDest dest_code);
  virtual ~ItemPbModuleClass() {}

  gsd_sModuleConf* mconf;
  int old_value;
  int first_scan;

  virtual int open_children(GsdAttrNav* attrnav, double x, double y);
};

//! Item for slave prmdata.
class ItemPbPrmData : public ItemPb
{
public:
  ItemPbPrmData(GsdAttrNav* attrnav, const char* item_name, brow_tNode dest,
                flow_eDest dest_code);
  virtual ~ItemPbPrmData() {}

  virtual int open_children(GsdAttrNav* attrnav, double x, double y);
};

//! Item for slave prmdata.
class ItemPbMoreData : public ItemPb
{
public:
  ItemPbMoreData(GsdAttrNav* attrnav, const char* item_name, brow_tNode dest,
                 flow_eDest dest_code);
  virtual ~ItemPbMoreData() {}
  virtual int open_children(GsdAttrNav* attrnav, double x, double y);
};

//! Item for slave byte order.
class ItemPbEnumByteOrder : public ItemPbBase
{
public:
  ItemPbEnumByteOrder(GsdAttrNav* attrnav, const char* item_name,
                      const char* attr, int attr_type, int attr_size,
                      double attr_min_limit, double attr_max_limit,
                      void* attr_value_p, int attr_noedit, brow_tNode dest,
                      flow_eDest dest_code);
  virtual ~ItemPbEnumByteOrder() {}

  int old_value;

  virtual int open_children(GsdAttrNav* attrnav, double x, double y);
};

#endif
