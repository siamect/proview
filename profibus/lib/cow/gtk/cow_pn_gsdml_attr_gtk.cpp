/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* cow_pn_gsdml_attr_gtk.cpp -- Display gsd attributes */

#include <stdlib.h>

#include "co_cdh.h"
#include "co_dcli.h"
#include "co_string.h"
#include "co_time.h"

#include "rt_pb_msg.h"

#include "flow_msg.h"

#include "glow_growapi.h"

#include "cow_pn_gsdml_attr_gtk.h"
#include "cow_pn_gsdml_attrnav_gtk.h"

CoWowRecall GsdmlAttrGtk::value_recall;

void GsdmlAttrGtk::message(char severity, const char* message)
{
  gtk_label_set_text(GTK_LABEL(msg_label), message);
}

void GsdmlAttrGtk::attr_help_text(const char* help_text)
{
  GtkTextBuffer* buffer;

  buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(this->help_text));
  gtk_text_buffer_set_text(buffer, help_text, -1);
}

void GsdmlAttrGtk::set_prompt(const char* prompt)
{
  if (streq(prompt, ""))
  {
    g_object_set(cmd_prompt, "visible", FALSE, NULL);
    g_object_set(msg_label, "visible", TRUE, NULL);
  }
  else
  {
    g_object_set(msg_label, "visible", FALSE, NULL);
    g_object_set(cmd_prompt, "visible", TRUE, NULL);
  }
}

void GsdmlAttrGtk::change_value()
{
  int sts;
  GtkWidget* text_w;
  char* value;

  if (input_open)
  {
    g_object_set(cmd_input, "visible", FALSE, NULL);
    set_prompt("");
    input_open = 0;
    return;
  }

  if (!edit_mode)
  {
    message('E', "Not in edit mode");
    return;
  }

  sts = attrnav->check_attr_value(&value);
  if (EVEN(sts))
  {
    if (sts == PB__NOATTRSEL)
      message('E', "No attribute is selected");
    else
      message('E', "Attribute can't be modified");
    return;
  }

  text_w = cmd_input;
  g_object_set(text_w, "visible", TRUE, NULL);

  message(' ', "");
  gtk_widget_grab_focus(cmd_input);

  if (value)
  {
    gint pos = 0;
    gtk_editable_delete_text(GTK_EDITABLE(cmd_input), 0, -1);
    gtk_editable_insert_text(GTK_EDITABLE(cmd_input), value, strlen(value),
                             &pos);

    // Select the text
    gtk_editable_set_position(GTK_EDITABLE(cmd_input), -1);
    gtk_editable_select_region(GTK_EDITABLE(cmd_input), 0, -1);
  }
  else
  {
    gtk_editable_delete_text(GTK_EDITABLE(cmd_input), 0, -1);
  }
  set_prompt("value >");
  input_open = 1;
}

//
//  Callbackfunctions from menu entries
//
void GsdmlAttrGtk::activate_change_value(GtkWidget* w, gpointer data)
{
  GsdmlAttrGtk* attr = (GsdmlAttrGtk*)data;

  attr->change_value();
}

void GsdmlAttrGtk::activate_ordermoduletype_default(GtkWidget* w, gpointer data)
{
  GsdmlAttrGtk* attr = (GsdmlAttrGtk*)data;

  attr->activate_ordermoduletype(attr_eOrderModuleType_Default);
}

void GsdmlAttrGtk::activate_ordermoduletype_name(GtkWidget* w, gpointer data)
{
  GsdmlAttrGtk* attr = (GsdmlAttrGtk*)data;

  attr->activate_ordermoduletype(attr_eOrderModuleType_Name);
}

void GsdmlAttrGtk::activate_ordermoduletype_number(GtkWidget* w, gpointer data)
{
  GsdmlAttrGtk* attr = (GsdmlAttrGtk*)data;

  attr->activate_ordermoduletype(attr_eOrderModuleType_Number);
}

void GsdmlAttrGtk::activate_exit(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_exit();
}

void GsdmlAttrGtk::activate_help(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_help();
}

void GsdmlAttrGtk::activate_copy(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_copy();
}

void GsdmlAttrGtk::activate_cut(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_cut();
}

void GsdmlAttrGtk::activate_paste(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_paste();
}

void GsdmlAttrGtk::activate_viewio(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  int set = (int)gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(w));
  attr->activate_viewio(set);
}

void GsdmlAttrGtk::activate_zoom_in(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_zoom_in();
}

void GsdmlAttrGtk::activate_zoom_out(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_zoom_out();
}

void GsdmlAttrGtk::activate_zoom_reset(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_zoom_reset();
}

void GsdmlAttrGtk::activate_collapse(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_collapse();
}

void GsdmlAttrGtk::activate_expand_all(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_expand_all();
}

void GsdmlAttrGtk::activate_print(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_print();
}

void GsdmlAttrGtk::activate_cmd_ok(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_cmd_ok();
}

void GsdmlAttrGtk::activate_cmd_apply(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_cmd_apply();
}

void GsdmlAttrGtk::activate_cmd_ca(GtkWidget* w, gpointer data)
{
  GsdmlAttr* attr = (GsdmlAttr*)data;

  attr->activate_cmd_ca();
}

void GsdmlAttrGtk::activate_cmd_input(GtkWidget* w, gpointer data)
{
  char* text;
  GsdmlAttrGtk* attr = (GsdmlAttrGtk*)data;
  int sts;

  g_object_set(attr->cmd_prompt, "visible", FALSE, NULL);
  g_object_set(attr->cmd_input, "visible", FALSE, NULL);

  attr->attrnav->set_inputfocus();

  text = gtk_editable_get_chars(GTK_EDITABLE(w), 0, -1);
  if (attr->input_open)
  {
    sts = attr->attrnav->set_attr_value(text);
    g_object_set(w, "visible", FALSE, NULL);
    attr->set_prompt("");
    attr->input_open = 0;
  }
  g_free(text);
}

gboolean GsdmlAttrGtk::action_inputfocus(GtkWidget* w, GdkEvent* event,
                                         gpointer data)
{
  GsdmlAttrGtk* attr = (GsdmlAttrGtk*)data;
  gboolean input_visible;

  if (attr->focustimer.disabled())
    return FALSE;

  g_object_get(attr->cmd_input, "visible", &input_visible, NULL);
  if (input_visible)
    gtk_widget_grab_focus(attr->cmd_input);
  else if (attr->attrnav)
    attr->attrnav->set_inputfocus();

  attr->focustimer.disable(400);

  return FALSE;
}

GsdmlAttrGtk::~GsdmlAttrGtk()
{
  delete (GsdmlAttrNav*)attrnav;
  gtk_widget_destroy(toplevel);
}

static gint delete_event(GtkWidget* w, GdkEvent* event, gpointer data)
{
  GsdmlAttrGtk::activate_exit(w, data);
  return TRUE;
}

static void destroy_event(GtkWidget* w, gpointer data) {}

GsdmlAttrGtk::GsdmlAttrGtk(GtkWidget* a_parent_wid, void* a_parent_ctx,
                           void* a_object, pn_gsdml* a_gsdml, int a_edit_mode,
                           const char* a_data_filename, pwr_tStatus* a_sts)
    : GsdmlAttr(a_parent_ctx, a_object, a_gsdml, a_edit_mode, a_data_filename)
{
  int sts;

  toplevel = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height", 700,
                                      "default-width", 700, "title",
                                      "profinetConfigurator", NULL);

  g_signal_connect(toplevel, "delete_event", G_CALLBACK(delete_event), this);
  g_signal_connect(toplevel, "destroy", G_CALLBACK(destroy_event), this);
  g_signal_connect(toplevel, "focus-in-event", G_CALLBACK(action_inputfocus),
                   this);

  GtkWidget* vbox = gtk_vbox_new(FALSE, 0);

  // Menu
  // Accelerators
  GtkAccelGroup* accel_g =
      (GtkAccelGroup*)g_object_new(GTK_TYPE_ACCEL_GROUP, NULL);
  gtk_window_add_accel_group(GTK_WINDOW(toplevel), accel_g);

  GtkMenuBar* menu_bar = (GtkMenuBar*)g_object_new(GTK_TYPE_MENU_BAR, NULL);

  // File entry
  GtkWidget* file_print =
      gtk_image_menu_item_new_from_stock(GTK_STOCK_PRINT, accel_g);
  g_signal_connect(file_print, "activate", G_CALLBACK(activate_print), this);

  GtkWidget* file_close =
      gtk_image_menu_item_new_from_stock(GTK_STOCK_CLOSE, accel_g);
  g_signal_connect(file_close, "activate", G_CALLBACK(activate_exit), this);

  GtkMenu* file_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_print);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_close);

  GtkWidget* file = gtk_menu_item_new_with_mnemonic("_File");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), file);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(file), GTK_WIDGET(file_menu));

  // Edit entry
  menubutton_copy = gtk_image_menu_item_new_from_stock(GTK_STOCK_COPY, accel_g);
  g_signal_connect(menubutton_copy, "activate", G_CALLBACK(activate_copy),
                   this);

  menubutton_cut = gtk_image_menu_item_new_from_stock(GTK_STOCK_CUT, accel_g);
  g_signal_connect(menubutton_cut, "activate", G_CALLBACK(activate_cut), this);

  menubutton_paste =
      gtk_image_menu_item_new_from_stock(GTK_STOCK_PASTE, accel_g);
  g_signal_connect(menubutton_paste, "activate", G_CALLBACK(activate_paste),
                   this);

  GtkWidget* edit_collapse = gtk_menu_item_new_with_mnemonic("C_ollapse");
  g_signal_connect(edit_collapse, "activate", G_CALLBACK(activate_collapse),
                   this);

  GtkWidget* edit_expand_all = gtk_menu_item_new_with_mnemonic("_Expand All");
  g_signal_connect(edit_expand_all, "activate", G_CALLBACK(activate_expand_all),
                   this);

  GtkMenu* edit_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), menubutton_copy);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), menubutton_cut);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), menubutton_paste);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), edit_collapse);
  gtk_menu_shell_append(GTK_MENU_SHELL(edit_menu), edit_expand_all);

  GtkWidget* edit = gtk_menu_item_new_with_mnemonic("_Edit");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), edit);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(edit), GTK_WIDGET(edit_menu));

  // Functions entry
  menubutton_changevalue = gtk_menu_item_new_with_mnemonic("_Change Value");
  g_signal_connect(menubutton_changevalue, "activate",
                   G_CALLBACK(activate_change_value), this);
  gtk_widget_add_accelerator(menubutton_changevalue, "activate", accel_g, 'q',
                             GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  // Submenu Order module type
  GSList* radio_group = NULL;
  GtkWidget* func_ordermoduletype_default =
      gtk_radio_menu_item_new_with_mnemonic(radio_group, "_Default");
  radio_group = gtk_radio_menu_item_get_group(
      GTK_RADIO_MENU_ITEM(func_ordermoduletype_default));
  g_signal_connect(func_ordermoduletype_default, "activate",
                   G_CALLBACK(activate_ordermoduletype_default), this);

  GtkWidget* func_ordermoduletype_name =
      gtk_radio_menu_item_new_with_mnemonic(radio_group, "By _name");
  radio_group = gtk_radio_menu_item_get_group(
      GTK_RADIO_MENU_ITEM(func_ordermoduletype_name));
  g_signal_connect(func_ordermoduletype_name, "activate",
                   G_CALLBACK(activate_ordermoduletype_name), this);

  GtkWidget* func_ordermoduletype_number =
      gtk_radio_menu_item_new_with_mnemonic(radio_group, "By n_umber");
  radio_group = gtk_radio_menu_item_get_group(
      GTK_RADIO_MENU_ITEM(func_ordermoduletype_number));
  g_signal_connect(func_ordermoduletype_number, "activate",
                   G_CALLBACK(activate_ordermoduletype_number), this);

  GtkWidget* func_ordermoduletype =
      gtk_menu_item_new_with_mnemonic("_Order ModuleType");
  GtkMenu* func_ordermoduletype_menu =
      (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(func_ordermoduletype_menu),
                        func_ordermoduletype_default);
  gtk_menu_shell_append(GTK_MENU_SHELL(func_ordermoduletype_menu),
                        func_ordermoduletype_name);
  gtk_menu_shell_append(GTK_MENU_SHELL(func_ordermoduletype_menu),
                        func_ordermoduletype_number);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(func_ordermoduletype),
                            GTK_WIDGET(func_ordermoduletype_menu));

  GtkMenu* func_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), menubutton_changevalue);
  gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), func_ordermoduletype);

  GtkWidget* functions = gtk_menu_item_new_with_mnemonic("_Functions");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), functions);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(functions), GTK_WIDGET(func_menu));

  // View Entry

  // Edit entry
  menubutton_viewio = gtk_check_menu_item_new_with_mnemonic("_View I/O");
  g_signal_connect(menubutton_viewio, "activate", G_CALLBACK(activate_viewio),
                   this);

  GtkWidget* view_zoom_in =
      gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_IN, NULL);
  g_signal_connect(view_zoom_in, "activate", G_CALLBACK(activate_zoom_in),
                   this);
  gtk_widget_add_accelerator(view_zoom_in, "activate", accel_g, 'i',
                             GdkModifierType(GDK_CONTROL_MASK),
                             GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_out =
      gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_OUT, NULL);
  g_signal_connect(view_zoom_out, "activate", G_CALLBACK(activate_zoom_out),
                   this);
  gtk_widget_add_accelerator(view_zoom_out, "activate", accel_g, 'o',
                             GdkModifierType(GDK_CONTROL_MASK),
                             GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_reset =
      gtk_image_menu_item_new_from_stock(GTK_STOCK_ZOOM_100, NULL);
  g_signal_connect(view_zoom_reset, "activate", G_CALLBACK(activate_zoom_reset),
                   this);
  gtk_widget_add_accelerator(view_zoom_reset, "activate", accel_g, 'b',
                             GdkModifierType(GDK_CONTROL_MASK),
                             GTK_ACCEL_VISIBLE);

  GtkMenu* view_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), menubutton_viewio);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_in);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_out);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_reset);

  GtkWidget* view = gtk_menu_item_new_with_mnemonic("_View");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), view);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(view), GTK_WIDGET(view_menu));

  // Help entry
  GtkWidget* help_help =
      gtk_image_menu_item_new_from_stock(GTK_STOCK_HELP, accel_g);
  g_signal_connect(help_help, "activate", G_CALLBACK(activate_help), this);

  GtkMenu* help_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_help);

  GtkWidget* help = gtk_menu_item_new_with_mnemonic("_Help");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), help);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(help), GTK_WIDGET(help_menu));

  // Navigator
  attrnav = new GsdmlAttrNavGtk(this, vbox, "Plant", gsdml, edit_mode,
                                &brow_widget, &sts);
  attrnav->message_cb = &GsdmlAttr::gsdmlattr_message;
  attrnav->change_value_cb = &GsdmlAttr::gsdmlattr_change_value_cb;

  // Attribute Help Text
  GtkWidget* help_area = gtk_hbox_new(FALSE, 0);

  // We want scrollbars to the right in case the help text is very long
  GtkWidget* scroll_window = gtk_scrolled_window_new(NULL, NULL);
  gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scroll_window),
                                 GTK_POLICY_NEVER, GTK_POLICY_AUTOMATIC);

  // Set up the text view
  help_text = gtk_text_view_new();
  gtk_text_view_set_editable(GTK_TEXT_VIEW(help_text), FALSE);
  gtk_text_view_set_wrap_mode(GTK_TEXT_VIEW(help_text), GTK_WRAP_WORD);
  gtk_widget_set_can_focus(help_text, FALSE);
  gtk_widget_set_size_request(help_text, -1, 100);

  // Add the text view to the container and pack it in the layout
  gtk_container_add(GTK_CONTAINER(scroll_window), help_text);
  gtk_box_pack_start(GTK_BOX(help_area), scroll_window, TRUE, TRUE, 0);

  // Status bar and value input
  GtkWidget* statusbar = gtk_hbox_new(FALSE, 0);
  msg_label = gtk_label_new("");
  gtk_widget_set_size_request(msg_label, -1, 25);
  cmd_prompt = gtk_label_new("value > ");
  gtk_widget_set_size_request(cmd_prompt, -1, 25);
  cmd_entry = new CoWowEntryGtk(&value_recall);
  cmd_input = cmd_entry->widget();
  gtk_widget_set_size_request(cmd_input, -1, 25);
  g_signal_connect(cmd_input, "activate", G_CALLBACK(activate_cmd_input), this);

  gtk_box_pack_start(GTK_BOX(statusbar), msg_label, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(statusbar), cmd_prompt, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(statusbar), cmd_input, TRUE, TRUE, 0);

  // Apply and Ok buttons
  cmd_ok = gtk_button_new_with_label("Ok");
  gtk_widget_set_size_request(cmd_ok, 70, 25);
  g_signal_connect(cmd_ok, "clicked", G_CALLBACK(activate_cmd_ok), this);
  cmd_apply = gtk_button_new_with_label("Apply");
  gtk_widget_set_size_request(cmd_apply, 70, 25);
  g_signal_connect(cmd_apply, "clicked", G_CALLBACK(activate_cmd_apply), this);
  cmd_cancel = gtk_button_new_with_label("Cancel");
  gtk_widget_set_size_request(cmd_cancel, 70, 25);
  g_signal_connect(cmd_cancel, "clicked", G_CALLBACK(activate_cmd_ca), this);

  GtkWidget* hboxbuttons = gtk_hbox_new(TRUE, 40);
  gtk_box_pack_start(GTK_BOX(hboxbuttons), cmd_ok, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(hboxbuttons), cmd_apply, FALSE, FALSE, 0);
  gtk_box_pack_end(GTK_BOX(hboxbuttons), cmd_cancel, FALSE, FALSE, 0);

  gtk_box_pack_start(GTK_BOX(vbox), GTK_WIDGET(menu_bar), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), brow_widget, TRUE, TRUE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), help_area, FALSE, FALSE, 3);
  gtk_box_pack_start(GTK_BOX(vbox), statusbar, FALSE, FALSE, 3);
  gtk_box_pack_start(GTK_BOX(vbox), gtk_hseparator_new(), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), hboxbuttons, FALSE, FALSE, 5);

  gtk_container_add(GTK_CONTAINER(toplevel), vbox);
  gtk_widget_show_all(toplevel);

  g_object_set(cmd_prompt, "visible", FALSE, NULL);
  g_object_set(cmd_input, "visible", FALSE, NULL);

  if (!edit_mode)
  {
    gtk_widget_set_sensitive(cmd_ok, FALSE);
    gtk_widget_set_sensitive(cmd_apply, FALSE);
    gtk_widget_set_sensitive(menubutton_copy, FALSE);
    gtk_widget_set_sensitive(menubutton_cut, FALSE);
    gtk_widget_set_sensitive(menubutton_paste, FALSE);
    gtk_widget_set_sensitive(menubutton_changevalue, FALSE);
  }

  wow = new CoWowGtk(toplevel);

  *a_sts = attrnav->open(data_filename);
}
