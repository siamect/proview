/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef nmps_h
#define nmps_h

#include "rt_plc.h"

#define NMPS_CELL_MAXSIZE                                                      \
  120 /* Number of  dataobject in                                              \
         NMpsCell och NMpsSelectCell */
#define NMPS_CELLMIR_SIZE                                                      \
  30 /* Number of dataobject in                                                \
        NMpsMirrorCell */
#define MMPS_CELLMIR_ORIGCELL_SIZE                                             \
  10 /* Size of the origcell-array                                             \
        in NMpsMirrorCell */
#define NMPS_OPTYPE_EXTINSERT 0
#define NMPS_OPTYPE_EXTINSERT_IDX 1
#define NMPS_OPTYPE_EXTDELETE 2
#define NMPS_OPTYPE_EXTDELETE_IDX 3
#define NMPS_OPTYPE_EXTDELETE_OBJID 4
#define NMPS_OPTYPE_EXTSELECT_OBJID 5
#define NMPS_OPTYPE_EXTINSERTSELECT 6
#define NMPS_OPTYPE_EXTUNSELECT_OBJID 7
#define NMPS_OPTYPE_EXTMOVEFORW_OBJID 8
#define NMPS_OPTYPE_EXTMOVEBACKW_OBJID 9
#define NMPS_OPTYPE_EXTREMOVE_OBJID 10

#define NMPS_CELL_RELOADDONE 1
#define NMPS_CELL_INITIALIZED 2

#define NMPS_CELLFUNC_SINGELSELECT 1
#define NMPS_CELLFUNC_ONESELECT 2
#define NMPS_CELLFUNC_DELETE 4
#define NMPS_CELLFUNC_RESETDELETE 8
#define NMPS_CELLFUNC_BACKUP 16
#define NMPS_CELLFUNC_CHECKOBJECTS 32

#define NMPS_TRPFUNC_UNIT 1
#define NMPS_TRPFUNC_ALL 2
#define NMPS_TRPFUNC_ALLEMPTY 4
#define NMPS_TRPFUNC_TRIGGRESET 8
#define NMPS_TRPFUNC_SLOW 16
#define NMPS_TRPFUNC_LEVEL 32

#ifndef nmps_data_info
#define nmps_data_info
/* Data structure for one dataobject in a NMpsCell and NMpsStoreCell */
typedef struct {
  pwr_tDataRef DataP pwr_dAlignLW;
  pwr_tBoolean Data_Front pwr_dAlignW;
  pwr_tBoolean Data_Back pwr_dAlignW;
  gdh_tDlid Data_Dlid pwr_dAlignW;
  pwr_tBoolean Data_Select pwr_dAlignW;
  pwr_tBoolean Data_OldSelect pwr_dAlignW;
  // pwr_tInt32	filler;
} plc_t_DataInfo;

/* Data structure for one dataobjekt in a NMpsMirrorCell */
typedef struct {
  pwr_tDataRef DataP pwr_dAlignLW;
  gdh_tDlid Data_Dlid pwr_dAlignW;
} plc_t_DataInfoMirCell;
#endif

/* Data structure for the copyarea in a  NMpsMirrorCell */
typedef struct {
  plc_t_DataInfoMirCell datainfo[NMPS_CELLMIR_SIZE];
} nmps_t_mircell_copyarea;

int nmps_RemoveData(pwr_tObjid objid);
int nmps_RemoveAndDeleteData(pwr_tObjid objid);

void NMpsCell_init(pwr_sClass_NMpsCell* object);
void NMpsCell_exec(plc_sThread* tp, pwr_sClass_NMpsCell* object);
void NMpsStoreCell_init(pwr_sClass_NMpsStoreCell* object);
void NMpsStoreCell_exec(plc_sThread* tp, pwr_sClass_NMpsStoreCell* object);
void NMpsOutCell_exec(plc_sThread* tp, pwr_sClass_NMpsOutCell* object);
void NMpsTrp_exec(plc_sThread* tp, pwr_sClass_NMpsTrp* object);
void NMpsTrpRR_exec(plc_sThread* tp, pwr_sClass_NMpsTrpRR* object);
void NMpsTrpFF_exec(plc_sThread* tp, pwr_sClass_NMpsTrpFF* object);
void DataSelect_exec(plc_sThread* tp, pwr_sClass_DataSelect* object);
void DataSel_exec(plc_sThread* tp, pwr_sClass_DataSel* object);
void DataEqual_exec(plc_sThread* tp, pwr_sClass_DataEqual* object);
void DataNotEqual_exec(plc_sThread* tp, pwr_sClass_DataNotEqual* object);
void DataMux_exec(plc_sThread* tp, pwr_sClass_DataMux* object);
void NMpsMirrorCell_init(pwr_sClass_NMpsMirrorCell* object);
void NMpsMirrorCell_exec(plc_sThread* tp, pwr_sClass_NMpsMirrorCell* object);
void DataFWrite_exec(plc_sThread* tp, pwr_sClass_DataFWrite* object);
void DataFRead_exec(plc_sThread* tp, pwr_sClass_DataFRead* object);
void NMpsCell60_init(pwr_sClass_NMpsCell60* object);
void NMpsCell60_exec(plc_sThread* tp, pwr_sClass_NMpsCell60* object);
void NMpsCell120_init(pwr_sClass_NMpsCell120* object);
void NMpsCell120_exec(plc_sThread* tp, pwr_sClass_NMpsCell120* object);
void NMpsStoreCell60_init(pwr_sClass_NMpsStoreCell60* object);
void NMpsStoreCell60_exec(plc_sThread* tp, pwr_sClass_NMpsStoreCell60* object);
void NMpsStoreCell120_init(pwr_sClass_NMpsStoreCell120* object);
void NMpsStoreCell120_exec(
    plc_sThread* tp, pwr_sClass_NMpsStoreCell120* object);
void CellDisp_init(pwr_sClass_CellDisp* object);
void CellDisp_exec(plc_sThread* tp, pwr_sClass_CellDisp* object);
void CellDispMir_init(pwr_sClass_CellDispMir* object);
void CellDispMir_exec(plc_sThread* tp, pwr_sClass_CellDispMir* object);
void CellUpdate_init(pwr_sClass_CellUpdate* object);
void CellUpdate_exec(plc_sThread* tp, pwr_sClass_CellUpdate* object);
void DispLink_exec(plc_sThread* tp, pwr_sClass_DispLink* object);
void RunningTime_exec(plc_sThread* tp, pwr_sClass_RunningTime* object);
void datacnv_init(pwr_sClass_datacnv* object);
void datacnv_exec(plc_sThread* tp, pwr_sClass_datacnv* object);
void DataRequest_exec(plc_sThread* tp, pwr_sClass_DataRequest* object);
void DataRcv_exec(plc_sThread* tp, pwr_sClass_DataRcv* object);
void DataSend_exec(plc_sThread* tp, pwr_sClass_DataSend* object);

#endif
