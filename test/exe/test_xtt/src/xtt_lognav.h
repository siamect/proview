/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_lognav_h
#define xtt_lognav_h

/* xtt_attrnav.h -- Sev Table Viewer */

#include <vector>

#include "pwr_privilege.h"

#include "flow_browapi.h"

#include "rt_sevcli.h"

class ItemBase;

typedef enum {
  lognav_eItemType_Hier,
  lognav_eItemType_Entry,
  lognav_eItemType_Detail
} lognav_eItemType;

typedef enum {
  lognav_mOpen_All = ~0,
  lognav_mOpen_Children = 1 << 0,
  lognav_mOpen_Attributes = 1 << 1
} lognav_mOpen;

typedef enum {
  lognav_eSeverity_No,
  lognav_eSeverity_Detail,
  lognav_eSeverity_DetailWarning,
  lognav_eSeverity_DetailError,
  lognav_eSeverity_Success,
  lognav_eSeverity_Info,
  lognav_eSeverity_Warning,
  lognav_eSeverity_Error,
  lognav_eSeverity_Fatal
} lognav_eSeverity;

class LogNav_object {
public:
};

class LogNav_hier : public LogNav_object {
public:
  lognav_eSeverity severity;
  lognav_eItemType type;
  pwr_tTime time;
  char text[120];
  std::vector<LogNav_hier> child;

  LogNav_hier() : severity(lognav_eSeverity_No), time(pwr_cNTime) {}
    LogNav_hier(const LogNav_hier& x) : severity(x.severity), type(x.type),
      child(x.child) {
    memcpy(&time, &x.time, sizeof(pwr_tTime));
    strcpy(text, x.text);
  }
};

typedef enum {
  lognav_eTreeItemType_No,
  lognav_eTreeItemType_Hier,
  lognav_eTreeItemType_Entry,
  lognav_eTreeItemType_Detail
} lognav_eTreeItemType;

//! Class for handling of brow.
class LogNavBrow {
public:
  LogNavBrow(BrowCtx* brow_ctx, void* xn) : ctx(brow_ctx), lognav(xn)
  {
  }
  ~LogNavBrow();

  BrowCtx* ctx;
  void* lognav;
  brow_tNodeClass nc_red;
  brow_tNodeClass nc_green;
  brow_tNodeClass nc_yellow;
  brow_tNodeClass nc_white;
  brow_tNodeClass nc_nomark;
  flow_sAnnotPixmap* pixmap_leaf;
  flow_sAnnotPixmap* pixmap_map;
  flow_sAnnotPixmap* pixmap_openmap;

  void free_pixmaps();
  void allocate_pixmaps();
  void create_nodeclasses();
  void brow_setup();
};

//! The navigation area of the attribute editor.
class LogNav {
public:
  LogNav(void* xn_parent_ctx, LogNav_hier *xn_tree, pwr_tStatus* status);
  virtual ~LogNav();

  void* parent_ctx;
  LogNavBrow* brow;
  LogNav_hier *tree;
  int item_cnt;
  void (*message_cb)(void*, char, const char*);
  int (*command_cb)(void*, char* cmd);
  int list_layout;

  void print(char* filename);
  int create_items();
  int get_select(ItemBase** item);
  void get_zoom(double* zoom_factor);
  void zoom(double zoom_factor);
  void unzoom();

  virtual void message(char sev, const char* text);
  virtual void set_inputfocus()
  {
  }
  static int init_brow_cb(FlowCtx* fctx, void* client_data);
};

class ItemBase {
public:
  ItemBase(lognav_eItemType t);
  virtual ~ItemBase();
  lognav_eItemType type;
  virtual int close(LogNav* lognav, double x, double y);
};

//! Hierarchy item.
class ItemHier : public ItemBase {
public:
  ItemHier(LogNav* lognav, LogNav_hier* item, brow_tNode dest,
      flow_eDest dest_code);

  virtual ~ItemHier()
  {
  }

  LogNav_hier *item;
  brow_tNode node;

  int open_children(LogNav* lognav, double x, double y);
  int close(LogNav* lognav, double x, double y);
};

//! Log entry item.
class ItemEntry : public ItemBase {
public:
  ItemEntry(LogNav* lognav, LogNav_hier* item, brow_tNode dest,
      flow_eDest dest_code);

  virtual ~ItemEntry()
  {
  }

  LogNav_hier *item;
  brow_tNode node;

  int open_children(LogNav* lognav, double x, double y);
  int close(LogNav* lognav, double x, double y);
};


#endif
