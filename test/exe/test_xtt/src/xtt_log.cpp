/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_log.cpp -- Display object attributes */

#include <stdlib.h>

#include "co_cnf.h"
#include "co_dcli.h"
#include "co_string.h"
#include "co_time.h"

#include "cow_wow.h"
#include "cow_xhelp.h"

#include "flow_msg.h"

#include "glow_curvectx.h"

#include "xtt_log.h"
#include "xtt_lognav.h"

XttLog::~XttLog()
{
}

XttLog::XttLog(void* xn_parent_ctx, LogNav_hier *xn_tree)
    : parent_ctx(xn_parent_ctx), tree(xn_tree), cologin(0), command_open(0),
      close_cb(0), base_priv(pwr_mPrv_System), priv(pwr_mPrv_System), verify(0),
      ccm_func_registred(0), wow(0), quiet(0)
{
  char default_priv[80];

  strcpy(base_user, "");
  strcpy(user, "");

  // Get default privilete from proview.cnf
  if (cnf_get_value("sevXttDefaultPriv", default_priv, sizeof(default_priv))) {
    if (str_NoCaseStrcmp(default_priv, "READ") == 0)
      priv = pwr_mPrv_SevRead;
    else if (str_NoCaseStrcmp(default_priv, "ADMIN") == 0)
      priv = pwr_mPrv_SevAdmin;
    else if (str_NoCaseStrcmp(default_priv, "NONE") == 0)
      priv = 0;
    else
      priv = 0;
  } else
    priv = 0;
}

void XttLog::message(void* xttlog, char severity, const char* message)
{
  ((XttLog*)xttlog)->message(severity, message);
}

int XttLog::command_cb(void* ctx, char* cmd)
{
  return ((XttLog*)ctx)->command(cmd);
}

int XttLog::is_authorized(void* ctx, unsigned int access, int msg)
{
  return ((XttLog*)ctx)->is_authorized(access, msg);
}

int XttLog::is_authorized(unsigned int access, int msg)
{
  if (!(priv & access)) {
    if (msg)
      message('I', "Not authorized for this operation");
    return 0;
  }
  return 1;
}

void XttLog::open_login()
{
  pwr_tCmd cmd;
  strcpy(cmd, "login");
  command(cmd);
}

void XttLog::logout()
{
  pwr_tCmd cmd;
  strcpy(cmd, "logout");
  command(cmd);
}

void XttLog::activate_print()
{
  pwr_tFileName filename;
  pwr_tCmd cmd;

  dcli_translate_filename(filename, "$pwrp_tmp/sevxtt.ps");
  lognav->print(filename);

  sprintf(cmd, "$pwr_exe/rt_print.sh %s", filename);
  system(cmd);
}

void XttLog::activate_zoom_in()
{
  double zoom_factor;

  lognav->get_zoom(&zoom_factor);
  if (zoom_factor > 40)
    return;

  lognav->zoom(1.18);
}

void XttLog::activate_zoom_out()
{
  double zoom_factor;

  lognav->get_zoom(&zoom_factor);
  if (zoom_factor < 15)
    return;

  lognav->zoom(1.0 / 1.18);
}

void XttLog::activate_zoom_reset()
{
  lognav->unzoom();
}

void XttLog::activate_help()
{
  CoXHelp::dhelp("overview", "", navh_eHelpFile_Base, NULL, 0);
}

void XttLog::activate_help_project()
{
  CoXHelp::dhelp("index", "", navh_eHelpFile_Project, NULL, 0);
}

void XttLog::activate_help_proview()
{
  char cmd[] = "help /version";

  command(cmd);
}

void XttLog::sevhist_help_cb(void* ctx, const char* key)
{
  CoXHelp::dhelp(key, "", navh_eHelpFile_Base, NULL, 0);
}

int XttLog::sevhist_get_select_cb(
    void* ctx, pwr_tOid* oid, char* aname, char* oname)
{
  XttLog* xttlog = (XttLog*)ctx;
  ItemBase* item;

  if (!xttlog->lognav->get_select(&item)) {
    xttlog->message('E', "Select an storage item");
    return 0;
  }

  switch (item->type) {
  case lognav_eItemType_Hier:
  case lognav_eItemType_Entry: {
    break;
  }
  default:
    return 0;
  }
  return 1;
}
