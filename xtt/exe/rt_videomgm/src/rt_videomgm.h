/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_videomgm_h
#define xtt_videomgm_h

/* xtt_videomgm.h -- Video management system */

#include <fstream>
#include <vector>

#include "pwr_baseclasses.h"

class VideoMgmCell {
public:
  VideoMgmCell()
  {
    strcpy(id, "");
    strcpy(cameraid, "");
  }
  VideoMgmCell(const VideoMgmCell& x)
  {
    strncpy(id, x.id, sizeof(id));
    strncpy(cameraid, x.cameraid, sizeof(cameraid));
  }
  char id[80];
  char cameraid[80];
};

class VideoMgmPanel {
public:
  VideoMgmPanel() : width(0), height(0)
  {
    strcpy(id, "");
    strcpy(name, "");
  }
  VideoMgmPanel(const VideoMgmPanel& x)
      : width(x.width), height(x.height), cell(x.cell)
  {
    strncpy(id, x.id, sizeof(id));
    strncpy(name, x.name, sizeof(name));
  }
  char id[80];
  char name[80];
  int width;
  int height;
  std::vector<VideoMgmCell> cell;
};

class VideoMgmCamera {
public:
  VideoMgmCamera()
  {
    strcpy(id, "");
    strcpy(name, "");
    strcpy(model, "");
    strcpy(username, "");
    strcpy(password, "");
  }
  VideoMgmCamera(const VideoMgmCamera& x)
  {
    strncpy(id, x.id, sizeof(id));
    strncpy(name, x.name, sizeof(name));
    strncpy(model, x.model, sizeof(model));
    strncpy(username, x.username, sizeof(username));
    strncpy(password, x.password, sizeof(password));
  }
  char id[80];
  char name[80];
  char model[80];
  char username[80];
  char password[80];
};

class XttVideoMgm {
public:
  int m_camera_cnt;
  float m_scantime;
  pwr_sClass_XttVideoMgm* m_op;
  pwr_tDlid m_dlid;
  pwr_tBoolean m_panel_select_old[20];
  pwr_tBoolean m_camera_select_old[40];
  pwr_tInt32 m_cell_camera_idx_old[20];
  pwr_tInt32 m_current_panel_old;
  pwr_tInt32 m_current_camera_old;
  std::vector<VideoMgmPanel> m_panel;
  std::vector<VideoMgmCamera> m_camera;

  XttVideoMgm();
  virtual ~XttVideoMgm();
  int cinit();
  void cscan();
  void configure_layout();
  virtual int init();
  virtual int authorize(char* user, char* password);
  virtual int get_panels();
  virtual int get_cameras();
  virtual int get_camera_image(int idx, const char* jpgfile);
  virtual int assign_camera(int panel_idx, int cell_idx, int camera_idx);
  virtual int set_camera_fullscreen(int camera_idx);
  virtual int display_panel(int panel_idx);
  virtual int create_panel(char* name);
  virtual int delete_panel(char* name);
};

class XttVideoMgmAimetis : public XttVideoMgm {
public:
  char m_fix;
  char m_auth_token[80];
  char m_addr[80];
  pwr_tTime m_last_auth;

  XttVideoMgmAimetis(char* addr) : m_fix(0)
  {
    strncpy(m_addr, addr, sizeof(m_addr));
    strcpy(m_auth_token, "");
    memset(&m_panel_select_old, 0, sizeof(m_panel_select_old));
    memset(&m_camera_select_old, 0, sizeof(m_camera_select_old));
  }
  int init();
  int authorize(char* user, char* password);
  int check_session();
  int get_panels();
  int get_cameras();
  int get_camera_image(int idx, const char* jpgfile);
  int assign_camera(int panel_idx, int cell_idx, int camera_idx);
  int set_camera_fullscreen(int camera_idx);
  int display_panel(int panel_idx);
  int create_panel(char* name);
  int delete_panel(char* name);
};

class Json {
public:
  static int get_attribute_value(
      std::ifstream& fp, const char* attribute, char* value, int size);
};

class VideoMgmServer {
public:
  float m_scantime;
  std::vector<XttVideoMgm*> m_mgmvect;

  VideoMgmServer() : m_scantime(0.5)
  {
  }
  void open();
  void scan();
  void close();
  float scantime()
  {
    return m_scantime;
  }
};

#endif
