/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef rt_xtt_gtk_h
#define rt_xtt_gtk_h

/* rt_xtt_gtk.h -- Simple navigator */

typedef void* Widget;

#include "cow_wow_gtk.h"

#include "rt_xtt_main.h"

class XttHotkey;

class XttGtk : public Xtt {
public:
  GtkWidget* parent_wid;
  GtkWidget* brow_widget;
  GtkWidget* form_widget;
  GtkWidget* toplevel;
  GtkWidget* msg_label;
  GtkWidget* cmd_prompt;
  GtkWidget* cmd_input;
  GtkWidget* xnav_form;
  GtkWidget* india_widget;
  GtkWidget* india_label;
  GtkWidget* india_text;
  CoWowFocusTimerGtk focustimer;
  CoWowRecall* cmd_recall;
  CoWowRecall* value_recall;
  CoWowEntryGtk* cmd_entry;
  XttHotkey* hotkey;

  XttGtk(int argc, char* argv[], int* sts);
  ~XttGtk();

  void message(char severity, const char* msg);
  void xtt_mainloop();
  // int init_hotkey( XtAppContext AppCtx, Widget Top);
  void open_input_dialog(const char* text, const char* title,
      const char* init_text, void (*ok_cb)(Xtt*, char*));
  void set_prompt(const char* prompt);
  void open_change_value();
  void create_input_dialog();
  void print();

  static void close(void* ctx, int terminate);
  static void set_dimension(void* ctx, int width, int height);
  static void map(void* ctx);

  static void activate_change_value(GtkWidget* w, gpointer data);
  static void activate_command(GtkWidget* w, gpointer data);
  static void activate_exit(GtkWidget* w, gpointer data);
  static void activate_print(GtkWidget* w, gpointer data);
  static void activate_login(GtkWidget* w, gpointer data);
  static void activate_logout(GtkWidget* w, gpointer data);
  static void activate_find(GtkWidget* w, gpointer data);
  static void activate_findregex(GtkWidget* w, gpointer data);
  static void activate_findnext(GtkWidget* w, gpointer data);
  static void activate_collapse(GtkWidget* w, gpointer data);
  static void activate_openobject(GtkWidget* w, gpointer data);
  static void activate_openplc(GtkWidget* w, gpointer data);
  static void activate_showcrossref(GtkWidget* w, gpointer data);
  static void activate_opengraph(GtkWidget* w, gpointer data);
  static void activate_collect_insert(GtkWidget* w, gpointer data);
  static void activate_collect_show(GtkWidget* w, gpointer data);
  static void activate_collect_remove(GtkWidget* w, gpointer data);
  static void activate_collect_clear(GtkWidget* w, gpointer data);
  static void activate_collect_opengraph(GtkWidget* w, gpointer data);
  static void activate_collect_window(GtkWidget* w, gpointer data);
  static void activate_collect_new_window(GtkWidget* w, gpointer data);
  static void activate_collect_signals(GtkWidget* w, gpointer data);
  static void activate_collect_iosignals(GtkWidget* w, gpointer data);
  static void activate_collect_open(GtkWidget* w, gpointer data);
  static void activate_dashboard_insert(GtkWidget* w, gpointer data);
  static void activate_dashboard_open(GtkWidget* w, gpointer data);
  static void activate_advanceduser(GtkWidget* w, gpointer data);
  static void activate_zoom_in(GtkWidget* w, gpointer data);
  static void activate_zoom_out(GtkWidget* w, gpointer data);
  static void activate_zoom_reset(GtkWidget* w, gpointer data);
  static void activate_help(GtkWidget* w, gpointer data);
  static void activate_help_navigator(GtkWidget* w, gpointer data);
  static void activate_help_project(GtkWidget* w, gpointer data);
  static void activate_help_proview(GtkWidget* w, gpointer data);
  static void activate_back(GtkWidget* w, gpointer data);
  static void create_msg_label(GtkWidget* w, gpointer data);
  static void create_cmd_prompt(GtkWidget* w, gpointer data);
  static void create_cmd_input(GtkWidget* w, gpointer data);
  static void create_xnav_form(GtkWidget* w, gpointer data);
  static void create_india_label(GtkWidget* w, gpointer data);
  static void create_india_text(GtkWidget* w, gpointer data);
  static void activate_india_ok(GtkWidget* w, gpointer data);
  static void activate_india_cancel(GtkWidget* w, gpointer data);
  static gboolean action_inputfocus(
      GtkWidget* w, GdkEvent* event, gpointer data);
  static void valchanged_cmd_input(GtkWidget* w, gpointer data);

  static void hotkey_Command(char* arg1, char *arg2, void* userdata);
  static void hotkey_ToggleDig(char* arg1, char *arg2, void* userdata);
  static void hotkey_SetDig(char* arg1, char *arg2, void* userdata);
  static void hotkey_ResetDig(char* arg1, char *arg2, void* userdata);
  static void hotkey_SetValue(char* arg1, char *arg2, void* userdata);
};

#endif
