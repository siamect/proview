/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* rt_xtt.cpp -- Display plant and node hiererachy */

#include <iostream>

#include "co_help_main.h"
#include "co_lng.h"
#include "co_msg.h"
#include "co_string.h"

#include "cow_xhelp.h"

static void usage()
{
  std::cout << "co_help Proview Help Window\n\n"
            << "Usage:\n\n"
            << "  co_help [-t 'topic'] [-s 'sourcefile'] [-b 'bookmark']\n\n"
            << "Arguments:\n\n"
            << "  -t    Help topic, default 'index'\n"
            << "  -s    Source helpfile\n"
            << "  -b    Bookmark\n"
            << "  -l    Language, e.g sv_se\n"
            << "  -c    Open Configuration help\n"
            << "  -d    Open Designer's Guide\n"
            << "  -g    Open Ge Reference Manual\n"
            << "  -o    Open Operator Help\n\n";
}

CoHelpMain::~CoHelpMain()
{
}

void CoHelpMain::exec_help()
{
  pwr_tStatus sts;

  sts = CoXHelp::dhelp(topic, bookmark, type, helpfile, strict);
  if (EVEN(sts)) {
    char msg[80];
    msg_GetText(sts, msg, sizeof(msg));
    printf("%s\n", msg);
    exit(0);
  }
}

CoHelpMain::CoHelpMain(int argc, char* argv[], int* return_sts)
    : strict(0), type(navh_eHelpFile_Project)
{
  strcpy(topic, "index");
  strcpy(helpfile, "");
  strcpy(bookmark, "");

  // Set language
  for (int i = 1; i < argc; i++) {
    if (streq(argv[i], "-l") && i + 1 < argc) {
      Lng::set(argv[i + 1]);
      i++;
    } else if (streq(argv[i], "-t") && i + 1 < argc) {
      strcpy(topic, argv[i + 1]);
      i++;
    } else if (streq(argv[i], "-s") && i + 1 < argc) {
      type = navh_eHelpFile_Other;
      strcpy(helpfile, argv[i + 1]);
      i++;
    } else if (streq(argv[i], "-b") && i + 1 < argc) {
      strcpy(bookmark, argv[i + 1]);
      i++;
    } else if (streq(argv[i], "-c")) {
      type = navh_eHelpFile_Other;
      if (streq(topic, "index"))
        strcpy(topic, "overview");
      strcpy(helpfile, pwr_cNameBaseWttHelp);
    } else if (streq(argv[i], "-d")) {
      type = navh_eHelpFile_Other;
      strcpy(helpfile, "$pwr_lang/man_dg.dat");
    } else if (streq(argv[i], "-p")) {
      type = navh_eHelpFile_Project;
    } else if (streq(argv[i], "-o")) {
      type = navh_eHelpFile_Other;
      if (streq(topic, "index"))
        strcpy(topic, "overview");
      strcpy(helpfile, pwr_cNameBaseXttHelp);
    } else if (streq(argv[i], "-g")) {
      type = navh_eHelpFile_Other;
      strcpy(helpfile, "$pwr_lang/man_geref.dat");
    } else if (streq(argv[i], "-h")) {
      usage();
      exit(0);
    }
  }
}
