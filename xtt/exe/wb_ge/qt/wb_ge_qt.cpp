/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_ge_qt.cpp -- graphical editor */

#include <locale.h>

#include "co_string.h"

#include "cow_msgwindow_qt.h"
#include "cow_qt_helpers.h"
#include "cow_style_qt.h"
#include "cow_xhelp_qt.h"

#include "ge_qt.h"

#include "wb_log_qt.h"

#include <QApplication>

#define wnav_cInitFile "$pwrp_login/wtt_init"

/*  Fallback resources  */

static QWidget* toplevel;

static void usage()
{
  printf("\nUsage: wb_ge [-l language] [graphname]\n");
}

int main(int argc, char* argv[])
{
  log_setLevel(LOG_TRACE);
  int i;
  pwr_tFileName file;
  char graph_name[80];
  int sts;
  unsigned int opt = ge_mOption_EnableComment;
  Ge* gectx;
  pwr_tFileName fname;

  QApplication app(argc, argv);
  QApplication::setStyle(new PwrStyle());

  setlocale(LC_NUMERIC, "POSIX");
  setlocale(LC_TIME, "en_US");

  toplevel = new QWidget();
  toplevel->setMinimumSize(100, 100);
  toplevel->setWindowTitle("Pwr wb_ge");
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  // Create help window
  CoXHelpQt* xhelp = new CoXHelpQt(0, xhelp_eUtility_Wtt, &sts);
  CoXHelpQt::set_default(xhelp);

  log_debug("%s ", argv[0]);
  if (argc > 1) {
    for (i = 1; i < argc; i++) {
      fprintf(stderr, "%s ", argv[i]);
      if (streq(argv[i], "-l")) {
        if (i + 1 >= argc) {
          usage();
          exit(0);
        }
        Lng::set(argv[i + 1]);
        i++;
      } else {
        strcpy(file, argv[i]);
      }
    }

    if (file[0] == '@') {
      // Execute script
      pwr_tStatus sts;

      gectx = new GeQt(NULL, 0, 1, 0, NULL);
      sts = gectx->command(file);
      if (EVEN(sts)) {
        gectx->message(sts);
      }
    } else {
      // Open graph
      strcpy(graph_name, file);
      gectx = new GeQt(NULL, 0, 1, opt, graph_name);

      sprintf(fname, "@%s.pwr_com", wnav_cInitFile);
      gectx->command(fname);
    }
  } else {
    gectx = new GeQt(NULL, 0, 1, opt, NULL);

    sprintf(fname, "@%s.pwr_com", wnav_cInitFile);
    gectx->command(fname);
  }
  fprintf(stderr, "\n");

  toplevel->show();

  new wb_log_qt(toplevel);

  // Create message window
  MsgWindowQt* msg_window = new MsgWindowQt(gectx, "Ge messages", &sts);
  msg_window->find_ge_cb = Ge::find_ge_cb;
  MsgWindow::set_default(msg_window);

  return app.exec();
}
