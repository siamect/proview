/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef ge_curve_gtk_h
#define ge_curve_gtk_h

/* ge_curve_gtk.h -- Curve widget */

#include "ge_curve.h"

#include "cow_wow_gtk.h"

class GeCurveGtk : public GeCurve {
public:
  GeCurveGtk(void* gc_parent_ctx, GtkWidget* parent_widget, char* curve_name,
      char* filename, GeCurveData* curve_data, int pos_right, int gc_width,
      int gc_height, unsigned int gc_options, int gc_color_theme,
      void* basewidget);
  GtkWidget* parent_wid;
  GtkWidget* grow_widget;
  GtkWidget* curve_widget;
  GtkWidget* axisform_widget;
  GtkWidget* nameform_widget;
  GtkWidget* curveform_widget;
  GtkWidget* pane_widget;
  GtkWidget* toplevel;
  GtkWidget* vbox;
  GtkWidget* growcurve_main_widget;
  GtkWidget* growaxis_main_widget;
  GtkWidget* grownames_main_widget;
  GtkWidget* nav_widget;
  GtkWidget* minmax_widget;
  GtkWidget* minmax_textmin_widget;
  GtkWidget* minmax_textmax_widget;
  GtkWidget* menu_new;
  GtkWidget* menu_save;
  GtkWidget* menu_open;
  GtkWidget* menu_snapshot;
  GtkWidget* menu_export;
  GtkWidget* menu_add;
  GtkWidget* tools_snapshot;
  GtkWidget* tools_add;
  GtkWidget* tools_curvetype_line;
  GtkWidget* tools_curvetype_points;
  GtkWidget* tools_curvetype_linepoints;
  GtkWidget* tools_curvetype_square;
  GtkWidget* tools_curve_fill;
  GtkWidget* tools_curve_digsplit;
  GtkWidget* export_widget;
  GtkWidget* export_attrcombo_widget;
  GtkWidget* export_fromtime_widget;
  GtkWidget* export_totime_widget;
  GtkWidget* export_rows_widget;
  GtkWidget* export_filename_widget;
  GtkWidget* sea_timebox;
  GtkWidget* timebox_start_time;
  GtkWidget* timebox_stop_time;
  GtkWidget* timebox_timecombo;
  CoWowFocusTimerGtk focustimer;
  int disable_timecombo_callback;
  GdkCursor* clock_cursor;

  void pop();
  void write_title(char* str);
  void resize();
  void open_minmax(int idx);
  void open_export(pwr_tTime* from, pwr_tTime* to, int rows, char* filename);
  void axis_set_width(int width);
  void create_minmax_dialog();
  void create_export_dialog();
  void set_inputfocus();
  void enable(unsigned int mask);
  void setup(unsigned int mask);
  void set_times(pwr_tTime* from, pwr_tTime* to);
  void set_times_sensitivity(int sensitive);
  pwr_tStatus get_times(pwr_tTime* from, pwr_tTime* to);
  int get_period(time_ePeriod* period);
  void set_period(time_ePeriod period, int nocallback);
  void set_clock_cursor();
  void reset_cursor();
  void* get_widget();

  ~GeCurveGtk();

  static void activate_exit(GtkWidget* w, gpointer data);
  static void activate_configure(GtkWidget* w, gpointer data);
  static void activate_print(GtkWidget* w, gpointer data);
  static void activate_new(GtkWidget* w, gpointer data);
  static void activate_save(GtkWidget* w, gpointer data);
  static void activate_open(GtkWidget* w, gpointer data);
  static void activate_snapshot(GtkWidget* w, gpointer data);
  static void activate_export(GtkWidget* w, gpointer data);
  static void activate_zoomin(GtkWidget* w, gpointer data);
  static void activate_zoomout(GtkWidget* w, gpointer data);
  static void activate_zoomreset(GtkWidget* w, gpointer data);
  static void activate_page_left(GtkWidget* w, gpointer data);
  static void activate_page_right(GtkWidget* w, gpointer data);
  static void activate_scroll_left(GtkWidget* w, gpointer data);
  static void activate_scroll_right(GtkWidget* w, gpointer data);
  static void activate_increase_period(GtkWidget* w, gpointer data);
  static void activate_decrease_period(GtkWidget* w, gpointer data);
  static void activate_reload(GtkWidget* w, gpointer data);
  static void activate_prev_period(GtkWidget* w, gpointer data);
  static void activate_next_period(GtkWidget* w, gpointer data);
  static void activate_add(GtkWidget* w, gpointer data);
  static void activate_madd(GtkWidget* w, gpointer data);
  static void activate_remove(GtkWidget* w, gpointer data);
  static void activate_timecombo(GtkWidget* w, gpointer data);
  static void activate_background(GtkWidget* w, gpointer data);
  static void activate_showname(GtkWidget* w, gpointer data);
  static void activate_filledcurves(GtkWidget* w, gpointer data);
  static void activate_curvetype_line(GtkWidget* w, gpointer data);
  static void activate_curvetype_points(GtkWidget* w, gpointer data);
  static void activate_curvetype_linepoints(GtkWidget* w, gpointer data);
  static void activate_curvetype_square(GtkWidget* w, gpointer data);
  static void activate_digsplit(GtkWidget* w, gpointer data);
  static void activate_xlimits(GtkWidget* w, gpointer data);
  static void activate_help(GtkWidget* w, gpointer data);
  static void activate_minmax_ok(GtkWidget* w, gpointer data);
  static void activate_minmax_cancel(GtkWidget* w, gpointer data);
  static void activate_minmax_save(GtkWidget* w, gpointer data);
  static void activate_export_ok(GtkWidget* w, gpointer data);
  static void activate_export_cancel(GtkWidget* w, gpointer data);
  static void activate_export_browse(GtkWidget* w, gpointer data);
  static void export_file_selected_cb(
      void* ctx, char* filename, wow_eFileSelType file_type);
  static gboolean action_inputfocus(
      GtkWidget* w, GdkEvent* event, gpointer data);
};

#endif
