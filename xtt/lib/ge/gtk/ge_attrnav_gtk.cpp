/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* ge_attrnav.cpp -- Display object info */

#include "co_cdh.h"
#include "co_time.h"

#include "flow_browwidget_gtk.h"
#include "flow_msg.h"

#include "glow_growwidget_gtk.h"

#include "ge_dyn.h"
#include "ge_attrnav_gtk.h"
#include "ge_msg.h"

//
// Create the navigator widget
//
AttrNavGtk::AttrNavGtk(void* xn_parent_ctx, GtkWidget* xn_parent_wid,
    attr_eType xn_type, const char* xn_name, attr_sItem* xn_itemlist,
    int xn_item_cnt, GtkWidget** w, pwr_tStatus* status)
    : AttrNav(
          xn_parent_ctx, xn_type, xn_name, xn_itemlist, xn_item_cnt, status),
      parent_wid(xn_parent_wid), trace_timerid(0)
{
  form_widget
      = scrolledbrowwidgetgtk_new(AttrNav::init_brow_cb, this, &brow_widget);

  gtk_widget_show_all(brow_widget);

  // Create the root item
  *w = form_widget;

  *status = 1;
}
//
//  Delete a nav context
//

AttrNavGtk::~AttrNavGtk()
{
  if (trace_started)
    g_source_remove(trace_timerid);

  delete brow;
  gtk_widget_destroy(form_widget);
}

void AttrNavGtk::trace_start()
{
  AttrNavGtk::trace_scan(this);
}

static gboolean attrnavgtk_trace_scan(void* data)
{
  AttrNavGtk::trace_scan((AttrNav*)data);
  return FALSE;
}

void AttrNavGtk::trace_scan(AttrNav* attrnav)
{
  int time = 200;

  if (attrnav->trace_started) {
    brow_TraceScan(attrnav->brow->ctx);

    ((AttrNavGtk*)attrnav)->trace_timerid
        = g_timeout_add(time, attrnavgtk_trace_scan, attrnav);
  }
}

void AttrNavGtk::set_inputfocus()
{
  gtk_widget_grab_focus(brow_widget);
}
