/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <ctype.h>
#include <string.h>

extern "C" {
#include "pwr_baseclasses.h"
#include "co_cdh.h"
#include "co_dcli.h"
#include "co_time.h"
}

#include "cow_wow_gtk.h"

#include "flow_browwidget_gtk.h"

#include "glow_growwidget_gtk.h"

#include "ge_dyn.h"
#include "ge_subpalette_gtk.h"

//
// Create the navigator widget
//
SubPaletteGtk::SubPaletteGtk(void* xn_parent_ctx, GtkWidget* xn_parent_wid,
    const char* xn_name, GtkWidget** w, pwr_tStatus* status)
    : SubPalette(xn_parent_ctx, xn_name, status), parent_wid(xn_parent_wid)
{
  form_widget
      = scrolledbrowwidgetgtk_new(SubPalette::init_brow_cb, this, &brow_widget);

  // Create the root item
  *w = form_widget;

  *status = 1;
}

//
//  Delete a nav context
//
SubPaletteGtk::~SubPaletteGtk()
{
  delete brow;
  // XtDestroyWidget( form_widget);
}

void SubPaletteGtk::set_inputfocus(int focus)
{
  // TODO if ( focus) Set border ...
  if (focus)
    gtk_widget_grab_focus(brow_widget);
}

void SubPaletteGtk::create_popup_menu(char* filename, int x, int y)
{
  gint wind_x, wind_y;

  strncpy(popup_help_filename, filename, sizeof(popup_help_filename));

  CoWowGtk::PopupPosition(form_widget, x, y, &wind_x, &wind_y);

  popupmenu_x = wind_x;
  popupmenu_y = wind_y;

  GtkMenu* menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  GtkWidget* w = gtk_menu_item_new_with_label("Help");
  g_signal_connect(w, "activate", G_CALLBACK(activate_help), this);
  gtk_menu_shell_append(GTK_MENU_SHELL(menu), w);
  gtk_widget_show(w);

  // g_signal_connect( menu, "deactivate",
  //		    G_CALLBACK(popup_unmap_cb), this);
  gtk_menu_popup(menu, NULL, NULL, menu_position_func, this, 0,
      gtk_get_current_event_time());
}

void SubPaletteGtk::menu_position_func(
    GtkMenu* menu, gint* x, gint* y, gboolean* push_in, gpointer data)
{
  SubPaletteGtk* subpalette = (SubPaletteGtk*)data;
  *x = subpalette->popupmenu_x;
  *y = subpalette->popupmenu_y;
  *push_in = FALSE;
}

//	Callback from the menu.
void SubPaletteGtk::activate_help(GtkWidget* w, gpointer data)
{
  char helpfile[80] = "$pwr_exe/man_subgraph.dat";
  char topic[200];
  char* s;
  SubPaletteGtk* subpalette = (SubPaletteGtk*)data;

  printf("Help callback %s\n", subpalette->popup_help_filename);

  if ((s = strrchr(subpalette->popup_help_filename, '/')))
    strncpy(topic, s + 1, sizeof(topic));
  else
    strncpy(topic, subpalette->popup_help_filename, sizeof(topic));
  if ((s = strrchr(topic, '.')))
    *s = 0;

  if (subpalette->help_cb)
    (subpalette->help_cb)(subpalette->parent_ctx, topic, helpfile);
}
