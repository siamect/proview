/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef ge_journal_h
#define ge_journal_h

#include <vector>

#include "glow_growapi.h"

class Graph;

class JournalPos {
public:
  JournalPos()
  {
  }
  std::streampos undo_pos;
  std::streampos redo_pos;
  std::streampos end_pos;
};

/* ge_journal.h -- Journal function */

typedef enum {
  journal_eAction_DeleteObject,
  journal_eAction_DeleteSelect,
  journal_eAction_MoveObject,
  journal_eAction_MoveSelect,
  journal_eAction_CreateObject,
  journal_eAction_AntePropertiesSelect,
  journal_eAction_PostPropertiesSelect,
  journal_eAction_AntePropertiesObject,
  journal_eAction_PostPropertiesObject,
  journal_eAction_AnteGroupSelect,
  journal_eAction_PostGroupSelect,
  journal_eAction_UngroupSelect,
  journal_eAction_PopSelect,
  journal_eAction_PushSelect,
  journal_eAction_AntePaste,
  journal_eAction_PostPaste,
  journal_eAction_AnteRename,
  journal_eAction_PostRename,
  journal_eAction_No
} journal_eAction;

typedef enum {
  journal_eStatus_Empty,
  journal_eStatus_Stored,
  journal_eStatus_Undo,
  journal_eStatus_Redo,
  journal_eStatus_AnteProperties,
  journal_eStatus_AntePaste,
  journal_eStatus_AnteGroup
} journal_eStatus;

class GraphJournal {
public:
  GraphJournal(Graph* g, int* sts);
  ~GraphJournal();

  int store(journal_eAction action, grow_tObject o);
  int undo();
  int redo();
  void check_object_number(grow_tObject o);
  int open(const char* name);
  int clear(char* name = 0);
  int restore(char* fname);
  int store_undo_delete_select();
  int store_redo_delete_select();
  int undo_delete_select();
  int redo_delete_select();
  int store_undo_delete_object(grow_tObject o);
  int store_redo_delete_object(grow_tObject o);
  int undo_delete_object();
  int redo_delete_object();
  int store_undo_create_object(grow_tObject o);
  int store_redo_create_object(grow_tObject o);
  int undo_create_object();
  int redo_create_object();
  int store_properties_select();
  int undo_properties_select();
  int store_properties_object(grow_tObject o);
  int undo_properties_object();
  int store_undo_group_select(grow_tObject o);
  int store_redo_group_select();
  int undo_group_select();
  int redo_group_select();
  int store_undo_ungroup_select();
  int store_redo_ungroup_select();
  int undo_ungroup_select();
  int redo_ungroup_select();
  int store_undo_paste();
  int store_redo_paste();
  int undo_paste();
  int redo_paste();
  int store_undo_pop_select();
  int store_redo_pop_select();
  int undo_pop_select();
  int redo_pop_select();
  int store_undo_push_select();
  int store_redo_push_select();
  int undo_push_select();
  int redo_push_select();
  int store_undo_rename(grow_tObject o);
  int store_redo_rename(grow_tObject o);
  int undo_rename();
  int redo_rename();
  static void print(char* fname);
  static char* tag_to_str(int tag);
  static char* action_to_str(int action);

  Graph* graph;
  std::fstream fp;
  int empty;
  journal_eStatus status;
  std::vector<JournalPos> poslist;
  std::vector<grow_tObject> pastelist;
  int current_idx;
  char graphname[80];
  pwr_tFileName filename;
  char rename_name[80];
};

#endif
