/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef ge_attr_h
#define ge_attr_h

#include "ge_attrnav.h"

/* ge_attr.h -- Ge attribute editor */

/*! \file ge_attr.h
    \brief Contains the Attr class. */
/*! \addtogroup Ge */
/*@{*/

class GeDyn;

class AttrNav;

//! Attribute editor.
/*! Displays grow attributes and dynamic attributes for an object or graph. */
class Attr {
public:
  Attr(void* a_parent_ctx, attr_eType a_type, void* a_object,
      attr_sItem* itemlist, int item_cnt);
  void* parent_ctx;
  attr_eType type;
  int embedded;
  char name[80];
  AttrNav* attrnav;
  int input_open;
  void* object;
  void (*close_cb)(void*, void*, grow_tObject, void*, int);
  void (*redraw_cb)(void*, void*, grow_tObject, void*);
  int (*get_subgraph_info_cb)(void*, char*, attr_sItem**, int*);
  int (*get_dyn_info_cb)(void*, GeDyn*, attr_sItem**, int*);
  int (*reconfigure_attr_cb)(void*, void*, attr_sItem**, int*, void**);
  void (*store_cb)(void*, void*);
  int (*recall_cb)(void*, void*, int, GeDyn**);
  int (*set_data_cb)(void*, void*, GeDyn*);
  int (*get_plant_select_cb)(void*, char*, int);
  int (*get_current_colors_cb)(
      void*, glow_eDrawType*, glow_eDrawType*, glow_eDrawType*);
  int (*get_current_color_tone_cb)(void*, glow_eDrawType*);
  void (*get_object_list_cb)(
      void*, unsigned int type, grow_tObject**, int*, grow_tObject*, int);
  void (*open_value_input_cb)(void*, int, int, char*);
  int (*set_inputfocus_cb)(void*, void*);
  int (*traverse_inputfocus_cb)(void*, void*);
  void* client_data;
  int recall_idx;
  GeDyn* original_data;

  virtual void message(char severity, const char* message)
  {
  }
  virtual void message_popup(char severity, const char* msg)
  {
    message(severity, msg);
  }
  virtual void set_prompt(const char* prompt)
  {
  }
  virtual void change_value()
  {
  }
  virtual int reconfigure_attr()
  {
    return 1;
  }
  virtual void store();
  virtual void recall_next();
  virtual void recall_prev();
  void refresh_objects(unsigned int type);
  void set_graph(Graph* g)
  {
    attrnav->graph = g;
  }
  void set_inputfocus(int focus)
  {
    if (focus)
      attrnav->set_inputfocus();
  }
  int set_attr_value(char* value_str);
  void filter(int type, char* pattern)
  {
    attrnav->filter(type, pattern);
  }
  void find_object(char* object)
  {
    attrnav->find_object(object);
  }
  void clear()
  {
    attrnav->clear();
  }
  static int get_plant_select_c(void* attr_ctx, char* value, int size);
  static int get_current_colors_c(void* attr_ctx, glow_eDrawType* fill_color,
      glow_eDrawType* border_color, glow_eDrawType* text_color);
  static int get_current_color_tone_c(
      void* attr_ctx, glow_eDrawType* tone_color);
  static int get_subgraph_info_c(
      void* attr_ctx, char* name, attr_sItem** itemlist, int* item_cnt);
  static int get_dyn_info_c(
      void* attr_ctx, GeDyn* dyn, attr_sItem** itemlist, int* item_cnt);
  static void change_value_c(void* attr);
  static int reconfigure_attr_c(void* attr);
  static void get_object_list_c(void* attr_ctx, unsigned int type,
      grow_tObject** list, int* list_cnt, grow_tObject* parent, int parent_cnt);
  static int set_inputfocus_c(void* attr_ctx);
  static int traverse_inputfocus_c(void* attr_ctx);
  static void message(
      void* attr, int popup, char severity, const char* message);
  virtual ~Attr();
};

/*@}*/
#endif
