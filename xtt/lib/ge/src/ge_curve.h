/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef ge_curve_h
#define ge_curve_h

/* ge_curve.h -- Curve widget */

#include "pwr_baseclasses.h"

#include "co_time.h"

#include "glow_growapi.h"

/*! \file ge_curve.h
    \brief Contains the GeCurve class. */
/*! \addtogroup Ge */
/*@{*/

#define CURVE_MAX_COLS 101

#define ge_ePeriod_Markers ((time_ePeriod)1000)

typedef enum {
  curve_mOptions_FullScreen = 1 << 0,
  curve_mOptions_Maximize = 1 << 1,
  curve_mOptions_FullMaximize = 1 << 2,
  curve_mOptions_Iconify = 1 << 3,
  curve_mOptions_Invisible = 1 << 4,
  curve_mOptions_Embedded = 1 << 5,
  curve_mOptions_ShowDescrFirst = 1 << 6,
  curve_mOptions_CurveTypeLine = 1 << 7,
  curve_mOptions_CurveTypePoints = 1 << 8,
  curve_mOptions_CurveTypeLinePoints = 1 << 9,
  curve_mOptions_CurveTypeSquare = 1 << 10,
  curve_mOptions_FillCurve = 1 << 11,
  curve_mOptions_SplitDigital = 1 << 12,
  curve_mOptions_LightBackground = 1 << 13,
  curve_mOptions_TimeRangeMinute = 1 << 14,
  curve_mOptions_TimeRange10Minutes = 1 << 15,
  curve_mOptions_TimeRangeHour = 1 << 16,
  curve_mOptions_TimeRangeDay = 1 << 17,
  curve_mOptions_TimeRangeWeek = 1 << 18,
  curve_mOptions_TimeRangeMonth = 1 << 19
} curve_mOptions;

typedef enum {
  curve_mEnable_New = 1 << 0,
  curve_mEnable_Save = 1 << 1,
  curve_mEnable_Open = 1 << 2,
  curve_mEnable_Snapshot = 1 << 3,
  curve_mEnable_Export = 1 << 4,
  curve_mEnable_Timebox = 1 << 5,
  curve_mEnable_Add = 1 << 6,
  curve_mEnable_ExportTime = 1 << 7,
  curve_mEnable_CurveType = 1 << 8,
  curve_mEnable_CurveTypeSquare = 1 << 9,
  curve_mEnable_FillCurve = 1 << 10,
  curve_mEnable_DigitalSplit = 1 << 11
} curve_mEnable;

typedef enum {
  curve_eDataType_LogFile,
  curve_eDataType_DsTrend,
  curve_eDataType_MultiTrend,
  curve_eDataType_ODBC
} curve_eDataType;

typedef enum { curve_eAxis_x, curve_eAxis_y } curve_eAxis;

typedef enum {
  curve_eTimeFormat_Float,
  curve_eTimeFormat_HourMinute,
  curve_eTimeFormat_DayHour
} curve_eTimeFormat;

//! Contains data for the curves.
class GeCurveData {
public:
  GeCurveData(curve_eDataType datatype);
  curve_eDataType type;
  int rows[CURVE_MAX_COLS];
  int cols;
  pwr_tAName y_name[CURVE_MAX_COLS];
  pwr_tAName x_name;
  char y_description[CURVE_MAX_COLS][80];
  char y_unit[CURVE_MAX_COLS][16];
  char x_unit[CURVE_MAX_COLS][16];
  double* y_data[CURVE_MAX_COLS];
  double* x_data[CURVE_MAX_COLS];
  double y_max_value[CURVE_MAX_COLS];
  double y_min_value[CURVE_MAX_COLS];
  double x_max_value[CURVE_MAX_COLS];
  double x_min_value[CURVE_MAX_COLS];
  double y_max_value_axis[CURVE_MAX_COLS];
  double y_min_value_axis[CURVE_MAX_COLS];
  int y_trend_lines[CURVE_MAX_COLS];
  int y_axis_lines[CURVE_MAX_COLS];
  int y_axis_linelongq[CURVE_MAX_COLS];
  int y_axis_valueq[CURVE_MAX_COLS];
  double x_max_value_axis[CURVE_MAX_COLS];
  double x_min_value_axis[CURVE_MAX_COLS];
  int x_trend_lines[CURVE_MAX_COLS];
  int x_axis_lines[CURVE_MAX_COLS];
  int x_axis_linelongq[CURVE_MAX_COLS];
  int x_axis_valueq[CURVE_MAX_COLS];
  glow_eDrawType color[CURVE_MAX_COLS];
  glow_eDrawType fillcolor[CURVE_MAX_COLS];
  glow_eDrawType axiscolor[CURVE_MAX_COLS];
  pwr_eType y_value_type[CURVE_MAX_COLS];
  pwr_eType x_value_type[CURVE_MAX_COLS];
  curve_eAxis y_axis_type[CURVE_MAX_COLS];
  curve_eAxis x_axis_type[CURVE_MAX_COLS];
  double y_axis_width[CURVE_MAX_COLS];
  char y_format[CURVE_MAX_COLS][20];
  char x_format[CURVE_MAX_COLS][20];
  pwr_eType y_orig_type[CURVE_MAX_COLS];
  int x_reverse;
  curve_eTimeFormat time_format;

  void get_borders();
  void get_default_axis();
  void select_color(bool dark_bg);
  void scale(int axis_type, int value_type, double min_value, double max_value,
      double* min_value_axis, double* max_value_axis, int* trend_lines,
      int* axis_lines, int* axis_linelongq, int* axis_valueq, char* format,
      double* axis_width, int not_zero, int allow_odd);
  ~GeCurveData();
};

class CoWow;
class CurveCtx;

//! A curve window used for trends and logging curves.
class GeCurve {
public:
  void* parent_ctx;
  char name[80];
  CurveCtx* growcurve_ctx;
  GrowCtx* growaxis_ctx;
  GrowCtx* grownames_ctx;
  glow_eDrawType curve_border;
  glow_eDrawType curve_color;
  glow_eDrawType background_dark;
  glow_eDrawType background_bright;
  glow_eDrawType border_dark;
  glow_eDrawType border_bright;
  grow_tObject curve_object;
  grow_tObject curve_axisobject;
  grow_tObject curve_markobject1;
  grow_tObject curve_markobject2;
  GeCurveData* cd = NULL;
  grow_tObject mark1_text;
  grow_tObject mark2_text;
  grow_tObject mark1_rect;
  grow_tObject mark2_rect;
  double axis_window_width;
  int hide[CURVE_MAX_COLS];
  grow_tObject name_rect[CURVE_MAX_COLS + 1];
  grow_tObject hide_rect[CURVE_MAX_COLS + 1];
  grow_tObject hide_l1[CURVE_MAX_COLS + 1];
  grow_tObject hide_l2[CURVE_MAX_COLS + 1];
  grow_tObject scale_rect[CURVE_MAX_COLS + 1];
  grow_tObject mark1_annot[CURVE_MAX_COLS + 1];
  grow_tObject mark2_annot[CURVE_MAX_COLS + 1];
  grow_tObject cursor_annot[CURVE_MAX_COLS + 1];
  grow_tObject axis_rect[CURVE_MAX_COLS + 1];
  grow_tObject axis_object[CURVE_MAX_COLS + 1];
  grow_tObject axis_lineobject;
  int auto_refresh;
  int axis_displayed;
  int minmax_idx;
  void (*close_cb)(void*);
  void (*help_cb)(void*);
  void (*increase_period_cb)(void*);
  void (*decrease_period_cb)(void*);
  void (*reload_cb)(void*);
  void (*prev_period_cb)(void*);
  void (*next_period_cb)(void*);
  void (*add_cb)(void*);
  void (*madd_cb)(void*);
  void (*remove_cb)(void*);
  int (*export_cb)(void*, pwr_tTime*, pwr_tTime*, int, int, char*);
  void (*new_cb)(void*);
  void (*save_cb)(void*);
  void (*open_cb)(void*);
  void (*snapshot_cb)(void*);
  int initial_right_position;
  char title[300];
  double last_cursor_x;
  double last_mark1_x;
  double last_mark2_x;
  pwr_tTime last_mark1_time;
  pwr_tTime last_mark2_time;
  int deferred_configure_axes;
  CoWow* wow;
  int center_from_window;
  unsigned int options;
  unsigned int layout_mask;
  int color_theme;
  int selected_mark;
  time_ePeriod current_period;
  int fill_curves;

  GeCurve(void* gc_parent_ctx, char* curve_name, char* filename,
      GeCurveData* curve_data, int pos_right, int gc_width, int gc_height,
      unsigned int options, int color_theme);
  virtual ~GeCurve();
  virtual void write_title(char* str)
  {
  }
  virtual void pop()
  {
  }
  virtual void resize()
  {
  }
  virtual void open_minmax(int idx)
  {
  }
  virtual void open_export(
      pwr_tTime* from, pwr_tTime* to, int rows, char* filename)
  {
  }
  virtual void axis_set_width(int width)
  {
  }
  virtual void enable(unsigned int mask)
  {
  }
  virtual void setup(unsigned int mask)
  {
  }
  virtual void set_times(pwr_tTime* from, pwr_tTime* to)
  {
  }
  virtual void set_times_sensitivity(int sensitive)
  {
  }
  virtual pwr_tStatus get_times(pwr_tTime* from, pwr_tTime* to)
  {
    return 0;
  }
  virtual int get_period(time_ePeriod* period)
  {
    return 0;
  }
  virtual void set_period(time_ePeriod period, int nocallback)
  {
  }
  virtual void set_clock_cursor()
  {
  }
  virtual void reset_cursor()
  {
  }
  virtual void* get_widget()
  {
    return 0;
  }
  void set_inputfocus()
  {
  }

  int read_file(char* filename);
  int configure_curves();
  int configure_axes();
  int config_names();
  void points_added(unsigned int* no_of_points);
  void set_title(char* str);
  void set_time(pwr_tTime time);
  void print(char* filename);
  void scroll(double value);
  void measure_window(double* ll_x, double* ll_y, double* ur_x, double* ur_y);
  void activate_exit();
  void activate_configure();
  void activate_new();
  void activate_save();
  void activate_open();
  void activate_snapshot();
  void activate_export();
  void activate_print();
  void activate_background();
  void activate_filledcurves(int set);
  void activate_curvetype(int type);
  void activate_digsplit();
  void activate_help();
  void activate_period(time_ePeriod);
  void activate_period_markers();
  void activate_edit();
  void activate_minmax_ok(double min_value, double max_value);
  void activate_minmax_save(double min_value, double max_value);
  void set_curvedata(GeCurveData* curve_data);
  void redraw();
  void x_to_points(double x, double* time, double* values);
  void set_center_from_window(int val)
  {
    center_from_window = val;
  }
  void set_title(const char* str);
  void update_color_theme(int ct);
  void set_times_markers();
  void update_times_markers();

  static int growcurve_cb(GlowCtx* ctx, glow_tEvent event);
  static int init_growcurve_cb(GlowCtx* fctx, void* client_data);
  static int growaxis_cb(GlowCtx* ctx, glow_tEvent event);
  static int grownames_cb(GlowCtx* ctx, glow_tEvent event);
  static int init_growaxis_cb(GlowCtx* fctx, void* client_data);
  static int init_grownames_cb(GlowCtx* fctx, void* client_data);
  static int get_saved_minmax(char* name, double* min_value, double* max_value);
  static char* minmax_filename(char* aname);
};

/*@}*/
#endif
