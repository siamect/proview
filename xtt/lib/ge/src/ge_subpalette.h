/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef ge_subpalette_h
#define ge_subpalette_h

#include "flow_browapi.h"

/*! \file ge_subpalette.h
    \brief Contains the SubPalette class and related classes. */
/*! \addtogroup Ge */
/*@{*/

#define SUBP_PIXMAPS_SIZE 253

typedef struct subpalette_s_Menu {
  char title[80];
  int item_type;
  char file[120];
  int pixmap;
  struct subpalette_s_Menu* child_list;
  struct subpalette_s_Menu* parent;
  struct subpalette_s_Menu* next;
} subpalette_sMenu;

typedef enum {
  subpalette_eItemType_LocalSubGraphs,
  subpalette_eItemType_Menu,
  subpalette_eItemType_File
} subpalette_eItemType;

typedef enum {
  subpalette_mOpen_All = ~0,
  subpalette_mOpen_Children = 1 << 0,
  subpalette_mOpen_Attributes = 1 << 1,
  subpalette_mOpen_Crossref = 1 << 2
} subpalette_mOpen;

class SubPaletteBrow {
public:
  SubPaletteBrow(BrowCtx* brow_ctx, void* xn);
  ~SubPaletteBrow();

  BrowCtx* ctx;
  void* subpalette;
  brow_tNodeClass nc_object;
  brow_tNodeClass nc_sub;
  flow_sAnnotPixmap* pixmap_leaf;
  flow_sAnnotPixmap* pixmap_map;
  flow_sAnnotPixmap* pixmap_openmap;
  flow_sAnnotPixmap* pixmaps[SUBP_PIXMAPS_SIZE];

  void free_pixmaps();
  void allocate_pixmaps();
  void create_nodeclasses();
  void brow_setup();
};

//! Display the subgraph palette.
class SubPalette {
public:
  SubPalette(void* xn_parent_ctx, const char* xn_name, pwr_tStatus* status);
  virtual ~SubPalette();

  void* parent_ctx;
  char name[80];
  SubPaletteBrow* brow;
  int trace_started;
  void (*message_cb)(void*, char, const char*);
  int (*traverse_focus_cb)(void*, void*);
  int (*set_focus_cb)(void*, void*);
  void (*help_cb)(void*, char*, char*);
  void* root_item;
  subpalette_sMenu* menu_tree;
  char path[10][80];
  int path_cnt;
  int displayed;

  virtual void set_inputfocus(int focus)
  {
  }
  virtual void create_popup_menu(char* filename, int x, int y)
  {
  }

  void message(char sev, char* text);
  int get_select(pwr_sAttrRef* attrref, int* is_attr);
  void set_inputfocus();
  int object_attr();
  int get_select(char* text, char* filename);
  void menu_tree_build(char* filename);
  subpalette_sMenu* menu_tree_build_children(std::ifstream* fp, int* line_cnt,
      char* filename, subpalette_sMenu* parent);
  void menu_tree_free();
  void menu_tree_free_children(subpalette_sMenu* first_child);
  void get_path(int* path_count, char** path_vect)
  {
    *path_count = path_cnt;
    *path_vect = (char*)path;
  }
  void select_by_name(char* name);
  static int init_brow_cb(FlowCtx* fctx, void* client_data);
};

class Item {
public:
  Item(subpalette_eItemType item_type);
  virtual ~Item();
  subpalette_eItemType type;
  char name[120];
  brow_tNode node;

  virtual int open_children(SubPalette* subpalette, double x, double y);
  virtual int close(SubPalette* subpalette, double x, double y);
};

class ItemLocalSubGraphs : public Item {
public:
  ItemLocalSubGraphs(SubPalette* subpalette, char* item_name,
      char* item_filename, brow_tNode dest, flow_eDest dest_code);
  char filename[120];

  int open_children(SubPalette* subpalette, double x, double y);
  int close(SubPalette* subpalette, double x, double y);
};

class ItemFile : public Item {
public:
  ItemFile(SubPalette* subpalette, char* item_name, char* item_filename,
      int item_pixmap, brow_tNode dest, flow_eDest dest_code);
  virtual ~ItemFile();
  char filename[120];
  int pixmap;
};

class ItemMenu : public Item {
public:
  ItemMenu(SubPalette* subpalette, const char* item_name, brow_tNode dest,
      flow_eDest dest_code, subpalette_sMenu** item_child_list,
      int item_is_root);
  subpalette_sMenu** child_list;
  int is_root;
  int open_children(SubPalette* subpalette, double x, double y);
  int close(SubPalette* subpalette, double x, double y);
};

/*@}*/
#endif
