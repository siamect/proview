/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* ge_graph_javabean.cpp -- export javabean */

#include <ctype.h>

#include "co_ccm_msg.h"
#include "co_cdh.h"
#include "co_cnf.h"
#include "co_dcli.h"
#include "co_string.h"
#include "co_time.h"

#include "rt_gdh.h"

#include "ge_dyn.h"
#include "ge_msg.h"

#define cFrameBorderX 8
#define cFrameBorderY 44

#if defined OS_LINUX

int Graph::export_javabean(char* filename, char* bean_name)
{
  std::ofstream fp;
  char fname[120];
  char beaninfo_filename[120];
  char* s;
  double x0, x1, y0, y1;
  int trace_type1;
  int trace_type2;
  int dyn_action_type1;
  int dyn_action_type2;
  glow_eDrawType trace_color;
  glow_eDrawType trace_color2;
  char low_bean_name[80];
  int* numbers;
  int annot_cnt;
  int i;

  str_ToLower(low_bean_name, bean_name);

  grow_GetSubGraphDynType(grow->ctx, &trace_type1, &trace_type2,
      &dyn_action_type1, &dyn_action_type2);
  grow_GetSubGraphTraceColor(grow->ctx, &trace_color, &trace_color2);
  if (grow_IsSlider(grow->ctx))
    trace_type1 = graph_eTrace_Slider;

  grow_GetSubgraphAnnotNumbers(grow->ctx, &numbers, &annot_cnt);

  grow_MeasureJavaBean(grow->ctx, &x1, &x0, &y1, &y0);

  if (!strchr(filename, ':') && !strchr(filename, '/')) {
    strcpy(fname, default_path);
    strcat(fname, filename);
  }
  fp.open(fname);

  switch (trace_type1) {
  case graph_eTrace_SetDig:
  case graph_eTrace_ResetDig:
  case graph_eTrace_ToggleDig:
  case graph_eTrace_SetDigWithTone:
  case graph_eTrace_ResetDigWithTone:
  case graph_eTrace_ToggleDigWithTone:
  case graph_eTrace_Command:
  case graph_eTrace_DigWithCommand:
  case graph_eTrace_DigToneWithCommand: {
    if (str_StartsWith(bean_name, "Jop"))
      fp << "package jpwr.beans;\n";

    fp << "import jpwr.rt.*;\n"
       << "import jpwr.jop.*;\n"
       << "import java.awt.*;\n"
       << "import java.awt.geom.*;\n"
       << "import java.awt.image.*;\n"
       << "import java.awt.font.*;\n"
       << "import javax.swing.*;\n"
       << "import javax.swing.Timer;\n"
       << "import java.awt.event.*;\n"
       << '\n'
       << "public class " << bean_name
       << " extends JComponent implements JopDynamic, JopConfirm, "
          "ActionListener{"
       << '\n'
       << "  Dimension size;\n"
       << "  Object root;\n"
       << "  JopEngine en;\n";
    switch (trace_type1) {
    case graph_eTrace_SetDig:
    case graph_eTrace_SetDigWithTone:
      fp << "  int clickAction = Jop.BUTTON_ACTION_SET;\n";
      break;
    case graph_eTrace_ResetDig:
    case graph_eTrace_ResetDigWithTone:
      fp << "  int clickAction = Jop.BUTTON_ACTION_RESET;\n";
      break;
    case graph_eTrace_ToggleDig:
    case graph_eTrace_ToggleDigWithTone:
      fp << "  int clickAction = Jop.BUTTON_ACTION_TOGGLE;\n";
      break;
    case graph_eTrace_Command:
    case graph_eTrace_DigWithCommand:
    case graph_eTrace_DigToneWithCommand:
      fp << "  int clickAction = Jop.BUTTON_ACTION_COMMAND;\n";
      break;
    default:;
    }
    fp <<

        "  public int getClickAction() { return clickAction;}\n"
       << "  public void setClickAction(int clickAction) { this.clickAction = "
          "clickAction;}"
       << '\n'
       << "  String command = new String();\n"
       << "  public String getCommand() { return command;}\n"
       << "  public void setCommand( String command) { this.command = command;}"
       << '\n'
       << "  String confirmText = new String();\n"
       << "  public String getConfirmText() { return confirmText;}\n"
       << "  public void setConfirmText( String confirmText) { "
          "this.confirmText = confirmText;}"
       << '\n'
       << "  boolean confirm = false;\n"
       << "  public boolean getConfirm() { return confirm;}\n"
       << "  public void setConfirm( boolean confirm) { this.confirm = "
          "confirm;}"
       << '\n'
       << "  Timer timer = new Timer(500, this);\n"
       << "  public " << bean_name << " component = this;\n"
       << "  public " << bean_name << "()\n"
       << "  {\n"
       << "    try {\n"
       << "      jbInit();\n"
       << "    }\n"
       << "    catch(Exception e) {\n"
       << "      e.printStackTrace();\n"
       << "    }\n"
       << "  }\n"
       << '\n'
       << "  private void jbInit() throws Exception {\n"
       << "    size = new Dimension( " << int(x1 - x0) + 2 * glow_cJBean_Offset
       << ", " << int(y1 - y0) + 2 * glow_cJBean_Offset << ");\n"
       << "    timer.start();\n"
       << "  }\n"
       << "  public void actionPerformed(ActionEvent e) {\n"
       << "    boolean engine_found = false;\n"
       << "    Container parent = getParent();\n"
       << "    while ( parent != null) {\n"
       << "      if ( parent instanceof JopFrame) {\n"
       << "        en = ((JopFrame)parent).engine;\n"
       << "        if ( !en.isReady())\n"
       << "          break;\n"
       << "        en.add(this);\n"
       << "        root = parent;\n"
       << "        engine_found = true;\n"
       << "        break;\n"
       << "      }\n"
       << "      parent = parent.getParent();\n"
       << "    }\n"
       << "    if ( !engine_found) {\n"
       << "      parent = getParent();\n"
       << "      while ( parent != null) {\n"
       << "        if ( parent instanceof JopApplet) {\n"
       << "          en = ((JopApplet)parent).engine;\n"
       << "          if ( !en.isReady())\n"
       << "            break;\n"
       << "          en.add(this);\n"
       << "          root = parent;\n"
       << "          engine_found = true;\n"
       << "          break;\n"
       << "        }\n"
       << "        parent = parent.getParent();\n"
       << "      }\n"
       << "    }\n"
       << "    if ( engine_found) {\n"
       << "      timer.stop();\n"
       << "      timer = null;\n"
       << "      if ( en.gdh.isAuthorized( access)) {\n"
       << "        this.addMouseListener(new MouseAdapter() {\n"
       << "          public void mouseClicked(MouseEvent e) {\n"
       << "            PwrtStatus sts;\n"
       << "            if ( confirm) {\n"
       << "              JopConfirmDialog.open( component, confirmText);"
       << '\n'
       << "            }\n"
       << "            else if (clickAction == Jop.BUTTON_ACTION_SET) {\n"
       << "              sts = en.gdh.setObjectInfo( pwrAttribute, true);"
       << '\n'
       << "              if ( sts.evenSts())\n"
       << "                System.out.println( \"setObjectInfoError \" + sts);"
       << '\n'
       << "            }\n"
       << "            else if(clickAction == Jop.BUTTON_ACTION_RESET) {"
       << '\n'
       << "              sts = en.gdh.setObjectInfo( pwrAttribute, false);"
       << '\n'
       << "              if ( sts.evenSts())\n"
       << "                System.out.println( \"setObjectInfoError \" + sts);"
       << '\n'
       << "            }\n"
       << "            else if(clickAction == Jop.BUTTON_ACTION_TOGGLE) {"
       << '\n'
       << "              sts = en.gdh.toggleObjectInfo(pwrAttribute);\n"
       << "              if ( sts.evenSts())\n"
       << "                System.out.println( \"setObjectInfoError \" + sts);"
       << '\n'
       << "            }\n"
       << "            else if(clickAction == Jop.BUTTON_ACTION_COMMAND) {"
       << '\n'
       << "              Jop.executeCommand( root, command);\n"
       << "            }\n"
       << "          }\n"
       << "          public void mousePressed(MouseEvent e) {\n"
       << "            colorInverse = 1;\n"
       << "	     repaint();\n"
       << "          }\n"
       << "          public void mouseReleased(MouseEvent e) {\n"
       << "            colorInverse = 0;\n"
       << "	     repaint();\n"
       << "          }\n"
       << "        });\n"
       << "      }\n"
       << "    }\n"
       << "  }\n"
       << "  public void confirmYes() {\n"
       << "    PwrtStatus sts;\n"
       << "    switch ( clickAction) {\n"
       << "      case Jop.BUTTON_ACTION_SET:\n"
       << "        sts = en.gdh.setObjectInfo( pwrAttribute, true);\n"
       << "        if ( sts.evenSts())\n"
       << "          System.out.println( \"setObjectInfoError \" + sts);"
       << '\n'
       << "        break;\n"
       << "      case Jop.BUTTON_ACTION_RESET:\n"
       << "        sts = en.gdh.setObjectInfo( pwrAttribute, false);\n"
       << "        if ( sts.evenSts())\n"
       << "          System.out.println( \"setObjectInfoError \" + sts);"
       << '\n'
       << "        break;\n"
       << "      case Jop.BUTTON_ACTION_TOGGLE:\n"
       << "        sts = en.gdh.toggleObjectInfo( pwrAttribute);\n"
       << "        if ( sts.evenSts())\n"
       << "          System.out.println( \"setObjectInfoError \" + sts);"
       << '\n'
       << "        break;\n"
       << "      case Jop.BUTTON_ACTION_COMMAND:\n"
       << "        if ( command.compareTo(\"\") != 0)\n"
       << "          Jop.executeCommand( root, command);\n"
       << "        break;\n"
       << "    }\n"
       << "  }\n";

    grow_ExportJavaBean(grow->ctx, fp, 0);

    fp << "  public Dimension getPreferredSize() { return size;}\n"
       << "  public Dimension getMinimumSize() { return size;}\n";
    switch (trace_type1) {
    case graph_eTrace_SetDig:
    case graph_eTrace_ResetDig:
    case graph_eTrace_ToggleDig:
    case graph_eTrace_DigWithCommand:
    case graph_eTrace_Command:
      fp << "  int lowColor = " << (int)trace_color << ";\n"
         << "  public void setLowColor( int lowColor) { this.lowColor = "
            "lowColor;}"
         << '\n'
         << "  public int getLowColor() { return lowColor;}\n";

      break;
    case graph_eTrace_SetDigWithTone:
    case graph_eTrace_ResetDigWithTone:
    case graph_eTrace_ToggleDigWithTone:
    case graph_eTrace_DigToneWithCommand:
      fp <<

          "  int lowTone = " << (int)trace_color << ";\n"
         << "  public void setLowTone( int lowTone) { this.lowTone = lowTone;}"
         << '\n'
         << "  public int getLowTone() { return lowTone;}\n";

      break;
    default:;
    }
    fp << "  private String pwrAttribute = new String();\n"
       << "  public void setPwrAttribute( String pwrAttribute) { "
          "this.pwrAttribute = pwrAttribute;}"
       << '\n'
       << "  public String getPwrAttribute() { return pwrAttribute;}\n"
       << "  private int access = 65532;\n"
       << "  public void setAccess( int access) { this.access = access;}"
       << '\n'
       << "  public int getAccess() { return access;}\n"
       << "  String pwrAttrColor = new String();\n"
       << "  public void setPwrAttrColor( String pwrAttrColor) { "
          "this.pwrAttrColor = pwrAttrColor;}"
       << '\n'
       << "  public String getPwrAttrColor() { return pwrAttrColor;}\n"
       << "  String pwrAttrText = new String();\n"
       << "  public void setPwrAttrText( String pwrAttrText) { "
          "this.pwrAttrText = pwrAttrText;}"
       << '\n'
       << "  public String getPwrAttrText() { return pwrAttrText;}\n"
       << "  String textLow = new String();\n"
       << "  public void setTextLow( String textLow) { this.textLow = textLow;}"
       << '\n'
       << "  public String getTextLow() { return textLow;}\n"
       << "  String textHigh = new String();\n"
       << "  public void setTextHigh( String textHigh) { this.textHigh = "
          "textHigh;}"
       << '\n'
       << "  public String getTextHigh() { return textHigh;}\n"
       << "  boolean valueColor;\n"
       << "  boolean valueColorOld;\n"
       << "  boolean valueText;\n"
       << "  boolean valueTextOld;\n"
       << "  boolean firstScan = true;\n"
       << "  GdhrRefObjectInfo retColor = null;\n"
       << "  GdhrRefObjectInfo retText = null;\n"
       << "  boolean colorAttrFound = false;\n"
       << "  boolean textAttrFound = false;\n"
       << "  public void dynamicOpen() {\n"
       << "    if ( pwrAttrColor.compareTo(\"\") != 0) {\n"
       << "      retColor = en.gdh.refObjectInfo( pwrAttrColor);\n"
       << "      if ( retColor.evenSts())\n"
       << "        System.out.println( \"refObjectInfoError retColor\");"
       << '\n'
       << "      else\n"
       << "        colorAttrFound = true;\n"
       << "    }\n"
       << "    if ( pwrAttrText.compareTo(\"\") != 0) {\n"
       << "      retText = en.gdh.refObjectInfo( pwrAttrText);\n"
       << "      if ( retText.evenSts())\n"
       << "        System.out.println( \"refObjectInfoError retText\");\n"
       << "      else\n"
       << "        textAttrFound = true;\n"
       << "    }\n"
       << "  }\n"
       << "  public void dynamicClose() {\n"
       << "    if ( colorAttrFound)\n"
       << "      en.gdh.unrefObjectInfo( retColor.refid);\n"
       << "    if ( textAttrFound)\n"
       << "      en.gdh.unrefObjectInfo( retText.refid);\n"
       << "  }\n"
       << "  public void dynamicUpdate( boolean animationOnly) {\n"
       << "    if ( animationOnly)\n"
       << "      return;\n"
       << "    if ( textAttrFound) {\n"
       << "      valueText = en.gdh.getObjectRefInfoBoolean( retText.id);"
       << '\n'
       << "      if ( valueText != valueTextOld || firstScan) {\n"
       << "        if ( valueText) {\n"
       << "          annot1 = textHigh;\n"
       << "          repaint();\n"
       << "        }\n"
       << "        else {\n"
       << "          annot1 = textLow;\n"
       << "          repaint();\n"
       << "        }\n"
       << "      }\n"
       << "      valueTextOld = valueText;\n"
       << "    }\n";
    switch (trace_type1) {
    case graph_eTrace_SetDig:
    case graph_eTrace_ResetDig:
    case graph_eTrace_ToggleDig:
    case graph_eTrace_Command:
    case graph_eTrace_DigWithCommand:
      fp << "    if ( colorAttrFound) {\n"
         << "      valueColor = en.gdh.getObjectRefInfoBoolean( retColor.id);"
         << '\n'
         << "      if ( valueColorOld != valueColor || firstScan) {\n"
         << "        if ( valueColor) {\n"
         << "          fillColor = originalFillColor;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        else {\n"
         << "          fillColor = lowColor;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        valueColorOld = valueColor;\n"
         << "      }\n"
         << "    }\n";

      break;
    case graph_eTrace_SetDigWithTone:
    case graph_eTrace_ResetDigWithTone:
    case graph_eTrace_ToggleDigWithTone:
    case graph_eTrace_DigToneWithCommand:
      fp << "    if ( colorAttrFound) {\n"
         << "      valueColor = en.gdh.getObjectRefInfoBoolean( retColor.id);"
         << '\n'
         << "      if ( valueColorOld != valueColor || firstScan) {\n"
         << "        if ( valueColor) {\n"
         << "          colorTone = originalColorTone;\n"
         << "          fillColor = originalFillColor;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        else {\n"
         << "          if ( lowTone <= GeColor.COLOR_TONE_MAX)\n"
         << "            colorTone = lowTone;\n"
         << "          else\n"
         << "            fillColor = lowTone;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        valueColorOld = valueColor;\n"
         << "      }\n"
         << "    }\n";

      break;
    default:;
    }
    fp << "    if ( firstScan)\n"
       << "      firstScan = false;\n"
       << "  }\n"
       << "}\n";

    break;
  }
  case graph_eTrace_DigWithError:
  case graph_eTrace_Dig:
  case graph_eTrace_DigTone:
  case graph_eTrace_DigToneWithError:
  case graph_eTrace_Annot:
  case graph_eTrace_DigWithText:
  case graph_eTrace_DigBorder:
  case graph_eTrace_Invisible:
  case graph_eTrace_AnnotWithTone: {
    if (str_StartsWith(bean_name, "Jop"))
      fp << "package jpwr.beans;\n";

    fp << "import jpwr.rt.*;\n"
       << "import jpwr.jop.*;\n"
       << "import java.awt.*;\n"
       << "import java.awt.geom.*;\n"
       << "import java.awt.image.*;\n"
       << "import java.awt.font.*;\n"
       << "import javax.swing.*;\n"
       << "import javax.swing.Timer;\n"
       << "import java.awt.event.*;\n"
       << '\n'
       << "public class " << bean_name
       << " extends JComponent implements JopDynamic, ActionListener{\n"
       << "  Dimension size;\n"
       << "  Object root;\n"
       << "  JopEngine en;\n"
       << "  Timer timer = new Timer(500, this);\n"
       << "  public " << bean_name << "()\n"
       << "  {\n"
       << "    try {\n"
       << "      jbInit();\n"
       << "    }\n"
       << "    catch(Exception e) {\n"
       << "      e.printStackTrace();\n"
       << "    }\n"
       << "  }\n"
       << '\n'
       << "  private void jbInit() throws Exception {\n"
       << "    size = new Dimension( " << int(x1 - x0) + 2 * glow_cJBean_Offset
       << ", " << int(y1 - y0) + 2 * glow_cJBean_Offset << ");\n"
       << "    timer.start();\n"
       << "  }\n"
       << "  public void actionPerformed(ActionEvent e) {\n"
       << "    boolean engine_found = false;\n"
       << "    Container parent = getParent();\n"
       << "    while ( parent != null) {\n"
       << "      if ( parent instanceof JopFrame) {\n"
       << "        en = ((JopFrame)parent).engine;\n"
       << "        if ( !en.isReady())\n"
       << "          break;\n"
       << "        en.add(this);\n"
       << "        root = parent;\n"
       << "        engine_found = true;\n"
       << "        break;\n"
       << "      }\n"
       << "      parent = parent.getParent();\n"
       << "    }\n"
       << "    if ( !engine_found) {\n"
       << "      parent = getParent();\n"
       << "      while ( parent != null) {\n"
       << "        if ( parent instanceof JopApplet) {\n"
       << "          en = ((JopApplet)parent).engine;\n"
       << "          if ( !en.isReady())\n"
       << "            break;\n"
       << "          en.add(this);\n"
       << "          root = parent;\n"
       << "          engine_found = true;\n"
       << "          break;\n"
       << "        }\n"
       << "        parent = parent.getParent();\n"
       << "      }\n"
       << "    }\n"
       << "    if ( engine_found) {\n"
       << "      timer.stop();\n"
       << "      timer = null;    \n"
       << "    }\n"
       << "  }\n";

    grow_ExportJavaBean(grow->ctx, fp, 0);

    fp << "  public Dimension getPreferredSize() { return size;}\n"
       << "  public Dimension getMinimumSize() { return size;}\n";

    switch (trace_type1) {
    case graph_eTrace_DigWithError: {
      fp << "  int lowColor = " << (int)trace_color << ";\n"
         << "  public void setLowColor( int lowColor) { this.lowColor = "
            "lowColor;}"
         << '\n'
         << "  public int getLowColor() { return lowColor;}\n"
         << "  String pwrAttribute = new String();\n"
         << "  public void setPwrAttribute( String pwrAttribute) { "
            "this.pwrAttribute = pwrAttribute;}"
         << '\n'
         << "  public String getPwrAttribute() { return pwrAttribute;}\n"
         << "  String pwrAttrError = new String();\n"
         << "  public void setPwrAttrError( String pwrAttrError) { "
            "this.pwrAttrError = pwrAttrError;}"
         << '\n'
         << "  public String getPwrAttrError() { return pwrAttrError;}\n"
         << "  boolean valueColor;\n"
         << "  boolean valueColorOld;\n"
         << "  boolean valueError;\n"
         << "  boolean valueErrorOld;\n"
         << "  boolean firstScan = true;\n"
         << "  GdhrRefObjectInfo retColor = null;\n"
         << "  GdhrRefObjectInfo retError = null;\n"
         << "  boolean colorAttrFound = false;\n"
         << "  boolean errorAttrFound = false;\n"
         << "  public void dynamicOpen() {\n"
         << "    if ( pwrAttribute.compareTo(\"\") != 0) {\n"
         << "      retColor = en.gdh.refObjectInfo( pwrAttribute);\n"
         << "      if ( retColor.evenSts())\n"
         << "        System.out.println( \"refObjectInfoError retColor\");"
         << '\n'
         << "      else\n"
         << "        colorAttrFound = true;\n"
         << "    }\n"
         << "    if ( pwrAttrError.compareTo(\"\") != 0) {\n"
         << "      retError = en.gdh.refObjectInfo( pwrAttrError);\n"
         << "      if ( retError.evenSts())\n"
         << "        System.out.println( \"refObjectInfoError retError\");"
         << '\n'
         << "      else\n"
         << "        errorAttrFound = true;\n"
         << "    }\n"
         << "  }\n"
         << "  public void dynamicClose() {\n"
         << "    if ( colorAttrFound)\n"
         << "      en.gdh.unrefObjectInfo( retColor.refid);\n"
         << "    if ( errorAttrFound)\n"
         << "      en.gdh.unrefObjectInfo( retError.refid);\n"
         << "  }\n"
         << "  public void dynamicUpdate( boolean animationOnly) {\n"
         << "    if ( animationOnly)\n"
         << "      return;\n"
         << "    if ( errorAttrFound) {\n"
         << "      valueColor = en.gdh.getObjectRefInfoBoolean( retColor.id);"
         << '\n'
         << "      valueError = en.gdh.getObjectRefInfoBoolean( retError.id);"
         << '\n'
         << "      if ( valueError != valueErrorOld || valueColor != "
            "valueColorOld || firstScan) {"
         << '\n'
         << "        if ( valueError) {\n"
         << "          fillColor = 56;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        else if ( valueColor) {\n"
         << "          fillColor = originalFillColor;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        else {\n"
         << "          fillColor = lowColor;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        valueErrorOld = valueError;\n"
         << "        valueColorOld = valueColor;\n"
         << "      }\n"
         << "    }\n"
         << "    else if ( colorAttrFound) {\n"
         << "      valueColor = en.gdh.getObjectRefInfoBoolean( retColor.id);"
         << '\n'
         << "      if ( valueColorOld != valueColor || firstScan) {\n"
         << "        if ( valueColor) {\n"
         << "          fillColor = originalFillColor;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        else {\n"
         << "          fillColor = lowColor;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        valueColorOld = valueColor;\n"
         << "      }\n"
         << "    }\n"
         << "    if ( firstScan)\n"
         << "      firstScan = false;\n"
         << "  }\n";

      break;
    }

    case graph_eTrace_DigToneWithError: {
      fp << "  int lowTone = " << (int)trace_color << ";\n"
         << "  public void setLowTone( int lowTone) { this.lowTone = lowTone;}"
         << '\n'
         << "  public int getLowTone() { return lowTone;}\n"
         << "  String pwrAttribute = new String();\n"
         << "  public void setPwrAttribute( String pwrAttribute) { "
            "this.pwrAttribute = pwrAttribute;}"
         << '\n'
         << "  public String getPwrAttribute() { return pwrAttribute;}\n"
         << "  String pwrAttrError = new String();\n"
         << "  public void setPwrAttrError( String pwrAttrError) { "
            "this.pwrAttrError = pwrAttrError;}"
         << '\n'
         << "  public String getPwrAttrError() { return pwrAttrError;}\n"
         << "  boolean valueColor;\n"
         << "  boolean valueColorOld;\n"
         << "  boolean valueError;\n"
         << "  boolean valueErrorOld;\n"
         << "  boolean firstScan = true;\n"
         << "  GdhrRefObjectInfo retColor = null;\n"
         << "  GdhrRefObjectInfo retError = null;\n"
         << "  boolean colorAttrFound = false;\n"
         << "  boolean errorAttrFound = false;\n"
         << "  public void dynamicOpen() {\n"
         << "    if ( pwrAttribute.compareTo(\"\") != 0) {\n"
         << "      retColor = en.gdh.refObjectInfo( pwrAttribute);\n"
         << "      if ( retColor.evenSts())\n"
         << "        System.out.println( \"refObjectInfoError retColor\");"
         << '\n'
         << "      else\n"
         << "        colorAttrFound = true;\n"
         << "    }\n"
         << "    if ( pwrAttrError.compareTo(\"\") != 0) {\n"
         << "      retError = en.gdh.refObjectInfo( pwrAttrError);\n"
         << "      if ( retError.evenSts())\n"
         << "        System.out.println( \"refObjectInfoError retError\");"
         << '\n'
         << "      else\n"
         << "        errorAttrFound = true;\n"
         << "    }\n"
         << "  }\n"
         << "  public void dynamicClose() {\n"
         << "    if ( colorAttrFound)\n"
         << "      en.gdh.unrefObjectInfo( retColor.refid);\n"
         << "    if ( errorAttrFound)\n"
         << "      en.gdh.unrefObjectInfo( retError.refid);\n"
         << "  }\n"
         << "  public void dynamicUpdate( boolean animationOnly) {\n"
         << "    if ( animationOnly)\n"
         << "      return;\n"
         << "    if ( errorAttrFound) {\n"
         << "      valueColor = en.gdh.getObjectRefInfoBoolean( retColor.id);"
         << '\n'
         << "      valueError = en.gdh.getObjectRefInfoBoolean( retError.id);"
         << '\n'
         << "      if ( valueError != valueErrorOld || valueColor != "
            "valueColorOld || firstScan) {"
         << '\n'
         << "        if ( valueError) {\n"
         << "          fillColor = 56;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        else if ( valueColor) {\n"
         << "          colorTone = originalColorTone;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        else {\n"
         << "          if ( lowTone <= GeColor.COLOR_TONE_MAX)\n"
         << "            colorTone = lowTone;\n"
         << "          else\n"
         << "            fillColor = lowTone;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        valueErrorOld = valueError;\n"
         << "        valueColorOld = valueColor;\n"
         << "      }\n"
         << "    }\n"
         << "    else if ( colorAttrFound) {\n"
         << "      valueColor = en.gdh.getObjectRefInfoBoolean( retColor.id);"
         << '\n'
         << "      if ( valueColorOld != valueColor || firstScan) {\n"
         << "        if ( valueColor) {\n"
         << "          colorTone = originalColorTone;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        else {\n"
         << "          if ( lowTone <= GeColor.COLOR_TONE_MAX)\n"
         << "            colorTone = lowTone;\n"
         << "          else\n"
         << "            fillColor = lowTone;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        valueColorOld = valueColor;\n"
         << "      }\n"
         << "    }\n"
         << "    if ( firstScan)\n"
         << "      firstScan = false;\n"
         << "  }\n";

      break;
    }

    case graph_eTrace_Dig: {
      fp << "  int lowColor = " << (int)trace_color << ";\n"
         << "  public void setLowColor( int lowColor) { this.lowColor = "
            "lowColor;}"
         << '\n'
         << "  public int getLowColor() { return lowColor;}\n"
         << "  String pwrAttribute = new String();\n"
         << "  public void setPwrAttribute( String pwrAttribute) { "
            "this.pwrAttribute = pwrAttribute;}"
         << '\n'
         << "  public String getPwrAttribute() { return pwrAttribute;}\n"
         << "  boolean valueColor;\n"
         << "  boolean valueColorOld;\n"
         << "  boolean firstScan = true;\n"
         << "  GdhrRefObjectInfo retColor = null;\n"
         << "  boolean colorAttrFound = false;\n"
         << "  public void dynamicOpen() {\n"
         << "    if ( pwrAttribute.compareTo(\"\") != 0) {\n"
         << "      retColor = en.gdh.refObjectInfo( pwrAttribute);\n"
         << "      if ( retColor.evenSts())\n"
         << "        System.out.println( \"refObjectInfoError retColor\");"
         << '\n'
         << "      else\n"
         << "        colorAttrFound = true;\n"
         << "    }\n"
         << "  }\n"
         << "  public void dynamicClose() {\n"
         << "    if ( colorAttrFound)\n"
         << "      en.gdh.unrefObjectInfo( retColor.refid);\n"
         << "  }\n"
         << "  public void dynamicUpdate( boolean animationOnly) {\n"
         << "    if ( animationOnly)\n"
         << "      return;\n"
         << "    if ( colorAttrFound) {\n"
         << "      valueColor = en.gdh.getObjectRefInfoBoolean( retColor.id);"
         << '\n'
         << "      if ( valueColorOld != valueColor || firstScan) {\n"
         << "        if ( valueColor) {\n"
         << "          fillColor = originalFillColor;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        else {\n"
         << "          fillColor = lowColor;\n"
         << "          repaint();\n"
         << "        }\n"
         << "      }\n"
         << "      valueColorOld = valueColor;\n"
         << "    }\n"
         << "    if ( firstScan)\n"
         << "      firstScan = false;\n"
         << "  }\n";

      break;
    }

    case graph_eTrace_DigTone: {
      fp << "  int lowTone = " << (int)trace_color << ";\n"
         << "  public void setLowTone( int lowTone) { this.lowTone = lowTone;}"
         << '\n'
         << "  public int getLowTone() { return lowTone;}\n"
         << "  String pwrAttribute = new String();\n"
         << "  public void setPwrAttribute( String pwrAttribute) { "
            "this.pwrAttribute = pwrAttribute;}"
         << '\n'
         << "  public String getPwrAttribute() { return pwrAttribute;}\n"
         << "  boolean valueColor;\n"
         << "  boolean valueColorOld;\n"
         << "  boolean firstScan = true;\n"
         << "  GdhrRefObjectInfo retColor = null;\n"
         << "  boolean colorAttrFound = false;\n"
         << "  public void dynamicOpen() {\n"
         << "    if ( pwrAttribute.compareTo(\"\") != 0) {\n"
         << "      retColor = en.gdh.refObjectInfo( pwrAttribute);\n"
         << "      if ( retColor.evenSts())\n"
         << "        System.out.println( \"refObjectInfoError retColor\");"
         << '\n'
         << "      else\n"
         << "        colorAttrFound = true;\n"
         << "    }\n"
         << "  }\n"
         << "  public void dynamicClose() {\n"
         << "    if ( colorAttrFound)\n"
         << "      en.gdh.unrefObjectInfo( retColor.refid);\n"
         << "  }\n"
         << "  public void dynamicUpdate( boolean animationOnly) {\n"
         << "    if ( animationOnly)\n"
         << "      return;\n"
         << "    if ( colorAttrFound) {\n"
         << "      valueColor = en.gdh.getObjectRefInfoBoolean( retColor.id);"
         << '\n'
         << "      if ( valueColorOld != valueColor || firstScan) {\n"
         << "        if ( valueColor) {\n"
         << "          colorTone = originalColorTone;\n"
         << "          fillColor = originalFillColor;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        else {\n"
         << "          if ( lowTone <= GeColor.COLOR_TONE_MAX)\n"
         << "            colorTone = lowTone;\n"
         << "          else\n"
         << "            fillColor = lowTone;\n"
         << "          repaint();\n"
         << "        }\n"
         << "        valueColorOld = valueColor;\n"
         << "      }\n"
         << "    }\n"
         << "    if ( firstScan)\n"
         << "      firstScan = false;\n"
         << "  }\n";

      break;
    }

    default:;
    }

    fp << "}\n";
    break;
  }
  case graph_eTrace_Slider: {
    if (str_StartsWith(bean_name, "Jop"))
      fp << "package jpwr.beans;\n";

    fp << "import jpwr.rt.*;\n"
       << "import jpwr.jop.*;\n"
       << "import java.awt.*;\n"
       << "import java.awt.geom.*;\n"
       << "import java.awt.image.*;\n"
       << "import java.awt.font.*;\n"
       << "import javax.swing.*;\n"
       << "public class " << bean_name << " extends JopSlider {\n"
       << "  Dimension size;\n"
       << "  Object root;\n"
       << "  JopEngine en;\n"
       << "  public " << bean_name << "()\n"
       << "  {\n"
       << "    try {\n"
       << "      jbInit();\n"
       << "    }\n"
       << "    catch(Exception e) {\n"
       << "      e.printStackTrace();\n"
       << "    }\n"
       << "  }\n"
       << '\n'
       << "  private void jbInit() throws Exception {\n"
       << "    size = new Dimension( " << int(x1 - x0) + 2 * glow_cJBean_Offset
       << ", " << int(y1 - y0) + 2 * glow_cJBean_Offset << ");\n"
       << "  }\n";

    grow_ExportJavaBean(grow->ctx, fp, 0);

    fp << "  public Dimension getPreferredSize() { return size;}\n"
       << "  public Dimension getMinimumSize() { return size;}\n"
       << "}\n";

    break;
  }
  default: {
    // Component without dynamics

    if (str_StartsWith(bean_name, "Jop"))
      fp << "package jpwr.beans;\n";

    fp << "import jpwr.rt.*;\n"
       << "import jpwr.jop.*;\n"
       << "import java.awt.*;\n"
       << "import java.awt.geom.*;\n"
       << "import java.awt.image.*;\n"
       << "import java.awt.font.*;\n"
       << "import javax.swing.*;\n"
       << "public class " << bean_name << " extends JComponent {\n"
       << "  Dimension size;\n"
       << "  public " << bean_name << "()\n"
       << "  {\n"
       << "    try {\n"
       << "      jbInit();\n"
       << "    }\n"
       << "    catch(Exception e) {\n"
       << "      e.printStackTrace();\n"
       << "    }\n"
       << "  }\n"
       << '\n'
       << "  private void jbInit() throws Exception {\n"
       << "    size = new Dimension( " << int(x1 - x0) + 2 * glow_cJBean_Offset
       << ", " << int(y1 - y0) + 2 * glow_cJBean_Offset << ");\n"
       << "  }\n";

    grow_ExportJavaBean(grow->ctx, fp, 0);

    fp << "  public Dimension getPreferredSize() { return size;}\n"
       << "  public Dimension getMinimumSize() { return size;}\n"
       << "}\n";
  }
  }

  fp.close();

  // Generate BeanInfo
  strcpy(beaninfo_filename, fname);
  if ((s = strrchr(beaninfo_filename, '.')))
    *s = 0;
  strcat(beaninfo_filename, "BeanInfo.java");

  fp.open(beaninfo_filename);

  if (str_StartsWith(bean_name, "Jop"))
    fp << "package jpwr.beans;\n";

  fp << "import jpwr.jop.*;\n"
     << "import java.beans.*;\n"
     << "public class " << bean_name << "BeanInfo extends SimpleBeanInfo {"
     << '\n'
     << "  Class beanClass = " << bean_name << ".class;\n"
     << "  String iconColor16x16Filename = \"" << low_bean_name << "16.gif\";"
     << '\n'
     << "  String iconColor32x32Filename = \"" << low_bean_name << "32.gif\";"
     << '\n'
     << "  String iconMono16x16Filename;\n"
     << "  String iconMono32x32Filename;\n"
     << "\n"
     << "  public " << bean_name << "BeanInfo() {\n"
     << "  }\n"
     << "  public PropertyDescriptor[] getPropertyDescriptors() {\n"
     << "    try {\n"
     << "      PropertyDescriptor _toolTipText = new "
        "PropertyDescriptor(\"toolTipText\","
     << '\n'
     << "        beanClass, \"getToolTipText\", \"setToolTipText\");\n"
     << "      _toolTipText.setDisplayName(\"toolTipText\");\n"
     << "      _toolTipText.setShortDescription(\"toolTipText\");\n"
     << "      PropertyDescriptor _fillColor = new "
        "PropertyDescriptor(\"fillColor\","
     << '\n'
     << "        beanClass, \"getFillColor\", \"setFillColor\");\n"
     << "      _fillColor.setDisplayName(\"fillColor\");\n"
     << "      _fillColor.setShortDescription(\"fillColor\");\n"
     << "      _fillColor.setPropertyEditorClass(GeColorEditor.class);\n"
     << "      PropertyDescriptor _borderColor = new "
        "PropertyDescriptor(\"borderColor\","
     << '\n'
     << "        beanClass, \"getBorderColor\", \"setBorderColor\");\n"
     << "      _borderColor.setDisplayName(\"borderColor\");\n"
     << "      _borderColor.setShortDescription(\"borderColor\");\n"
     << "      _borderColor.setPropertyEditorClass(GeColorEditor.class);"
     << '\n'
     << "      PropertyDescriptor _colorTone = new "
        "PropertyDescriptor(\"colorTone\","
     << '\n'
     << "        beanClass, \"getColorTone\", \"setColorTone\");\n"
     << "      _colorTone.setDisplayName(\"colorTone\");\n"
     << "      _colorTone.setShortDescription(\"colorTone\");\n"
     << "      _colorTone.setPropertyEditorClass(GeColorToneEditor.class);"
     << '\n'
     << "      PropertyDescriptor _colorShift = new "
        "PropertyDescriptor(\"colorShift\","
     << '\n'
     << "        beanClass, \"getColorShift\", \"setColorShift\");\n"
     << "      _colorShift.setDisplayName(\"colorShift\");\n"
     << "      _colorShift.setShortDescription(\"colorShift\");\n"
     << "      _colorShift.setPropertyEditorClass(GeColorShiftEditor.class);"
     << '\n'
     << "      PropertyDescriptor _colorBrightness = new "
        "PropertyDescriptor(\"colorBrightness\","
     << '\n'
     << "        beanClass, \"getColorBrightness\", \"setColorBrightness\");"
     << '\n'
     << "      _colorBrightness.setDisplayName(\"colorBrightness\");\n"
     << "      _colorBrightness.setShortDescription(\"colorBrightness\");"
     << '\n'
     << "      "
        "_colorBrightness.setPropertyEditorClass(GeColorBrightnessEditor.class)"
        ";"
     << '\n'
     << "      PropertyDescriptor _colorIntensity = new "
        "PropertyDescriptor(\"colorIntensity\","
     << '\n'
     << "        beanClass, \"getColorIntensity\", \"setColorIntensity\");"
     << '\n'
     << "      _colorIntensity.setDisplayName(\"colorIntensity\");\n"
     << "      _colorIntensity.setShortDescription(\"colorIntensity\");\n"
     << "      "
        "_colorIntensity.setPropertyEditorClass(GeColorIntensityEditor.class);"
     << '\n'
     << "      PropertyDescriptor _rotate = new PropertyDescriptor(\"rotate\","
     << '\n'
     << "        beanClass, \"getRotate\", \"setRotate\");\n"
     << "      _rotate.setDisplayName(\"rotate\");\n"
     << "      _rotate.setShortDescription(\"rotate\");\n";

  switch (trace_type1) {
  case graph_eTrace_SetDig:
  case graph_eTrace_ResetDig:
  case graph_eTrace_ToggleDig:
  case graph_eTrace_Command: {
    fp <<

        "      PropertyDescriptor _clickAction = new "
        "PropertyDescriptor(\"clickAction\","
       << '\n'
       << "        beanClass, \"getClickAction\", \"setClickAction\");\n"
       << "      _clickAction.setDisplayName(\"clickAction\");\n"
       << "      _clickAction.setShortDescription(\"clickAction\");\n"
       << "      _clickAction.setPropertyEditorClass(ClickActionEditor.class);"
       << '\n'
       << "      PropertyDescriptor _command = new "
          "PropertyDescriptor(\"command\","
       << '\n'
       << "        beanClass, \"getCommand\", \"setCommand\");\n"
       << "      _command.setDisplayName(\"command\");\n"
       << "      _command.setShortDescription(\"command\");\n"
       << "      PropertyDescriptor _lowColor = new "
          "PropertyDescriptor(\"lowColor\","
       << '\n'
       << "        beanClass, \"getLowColor\", \"setLowColor\");\n"
       << "      _lowColor.setDisplayName(\"lowColor\");\n"
       << "      _lowColor.setShortDescription(\"lowColor\");\n"
       << "      _lowColor.setPropertyEditorClass(GeColorEditor.class);\n"
       << "      PropertyDescriptor _pwrAttribute = new "
          "PropertyDescriptor(\"pwrAttribute\","
       << '\n'
       << "        beanClass, \"getPwrAttribute\", \"setPwrAttribute\");"
       << '\n'
       << "      _pwrAttribute.setDisplayName(\"pwrAttribute\");\n"
       << "      _pwrAttribute.setShortDescription(\"pwrAttribute\");\n"
       << "      PropertyDescriptor _pwrAttrColor = new "
          "PropertyDescriptor(\"pwrAttrColor\","
       << '\n'
       << "        beanClass, \"getPwrAttrColor\", \"setPwrAttrColor\");"
       << '\n'
       << "      _pwrAttrColor.setDisplayName(\"pwrAttrColor\");\n"
       << "      _pwrAttrColor.setShortDescription(\"pwrAttColor\");\n"
       << "      PropertyDescriptor _pwrAttrText = new "
          "PropertyDescriptor(\"pwrAttrText\","
       << '\n'
       << "        beanClass, \"getPwrAttrText\", \"setPwrAttrText\");\n"
       << "      _pwrAttrText.setDisplayName(\"pwrAttrText\");\n"
       << "      _pwrAttrText.setShortDescription(\"pwrAttText\");\n"
       << "      PropertyDescriptor _textLow = new "
          "PropertyDescriptor(\"textLow\","
       << '\n'
       << "        beanClass, \"getTextLow\", \"setTextLow\");\n"
       << "      _textLow.setDisplayName(\"textLow\");\n"
       << "      _textLow.setShortDescription(\"textLow\");\n"
       << "      PropertyDescriptor _textHigh = new "
          "PropertyDescriptor(\"textHigh\","
       << '\n'
       << "        beanClass, \"getTextHigh\", \"setTextHigh\");\n"
       << "      _textLow.setDisplayName(\"textHigh\");\n"
       << "      _textLow.setShortDescription(\"textHigh\");\n"
       << "      PropertyDescriptor _access = new "
          "PropertyDescriptor(\"access\","
       << '\n'
       << "        beanClass, \"getAccess\", \"setAccess\");\n"
       << "      _access.setDisplayName(\"access\");\n"
       << "      _access.setShortDescription(\"access\");\n"
       << "      PropertyDescriptor _confirm = new "
          "PropertyDescriptor(\"confirm\","
       << '\n'
       << "        beanClass, \"getConfirm\", \"setConfirm\");\n"
       << "      _confirm.setDisplayName(\"confirm\");\n"
       << "      _confirm.setShortDescription(\"confirm\");\n"
       << "      PropertyDescriptor _confirmText = new "
          "PropertyDescriptor(\"confirmText\","
       << '\n'
       << "        beanClass, \"getConfirmText\", \"setConfirmText\");\n"
       << "      _confirmText.setDisplayName(\"confirmText\");\n"
       << "      _confirmText.setShortDescription(\"confirmText\");\n";

    for (i = 0; i < annot_cnt; i++) {
      fp << "      PropertyDescriptor _annot" << numbers[i]
         << " = new PropertyDescriptor(\"annot" << numbers[i] << "\",\n"
         << "        beanClass, \"getAnnot" << numbers[i] << "\", \"setAnnot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setDisplayName(\"annot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setShortDescription(\"annot"
         << numbers[i] << "\");\n"
         << "      PropertyDescriptor _annot" << numbers[i]
         << "Font = new PropertyDescriptor(\"annot" << numbers[i] << "Font\","
         << '\n'
         << "        beanClass, \"getAnnot" << numbers[i]
         << "Font\", \"setAnnot" << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setDisplayName(\"annot"
         << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setShortDescription(\"annot"
         << numbers[i] << "Font\");\n";
    }

    fp << "      PropertyDescriptor[] pds = new PropertyDescriptor[] {\n"
       << "	_toolTipText, _fillColor, _borderColor, _colorTone, "
          "_colorShift,"
       << '\n'
       << "	_colorBrightness, _colorIntensity, _rotate,\n"
       << "	_clickAction, _command, _lowColor, _pwrAttribute, "
          "_pwrAttrColor,"
       << '\n'
       << "	_pwrAttrText, _textLow, _textHigh, _access, _confirm, "
          "confirmText";
    for (i = 0; i < annot_cnt; i++) {
      fp << ", _annot" << numbers[i] << ", _annot" << numbers[i] << "Font";
    }
    fp << "};\n";

    break;
  }
  case graph_eTrace_SetDigWithTone:
  case graph_eTrace_ResetDigWithTone:
  case graph_eTrace_ToggleDigWithTone: {
    fp <<

        "      PropertyDescriptor _clickAction = new "
        "PropertyDescriptor(\"clickAction\","
       << '\n'
       << "        beanClass, \"getClickAction\", \"setClickAction\");\n"
       << "      _clickAction.setDisplayName(\"clickAction\");\n"
       << "      _clickAction.setShortDescription(\"clickAction\");\n"
       << "      _clickAction.setPropertyEditorClass(ClickActionEditor.class);"
       << '\n'
       << "      PropertyDescriptor _command = new "
          "PropertyDescriptor(\"command\","
       << '\n'
       << "        beanClass, \"getCommand\", \"setCommand\");\n"
       << "      _command.setDisplayName(\"command\");\n"
       << "      _command.setShortDescription(\"command\");\n"
       << "      PropertyDescriptor _lowTone = new "
          "PropertyDescriptor(\"lowTone\","
       << '\n'
       << "        beanClass, \"getLowTone\", \"setLowTone\");\n"
       << "      _lowTone.setDisplayName(\"lowTone\");\n"
       << "      _lowTone.setShortDescription(\"lowTone\");\n"
       << "      _lowTone.setPropertyEditorClass(GeColorToneEditor.class);"
       << '\n'
       << "      PropertyDescriptor _pwrAttribute = new "
          "PropertyDescriptor(\"pwrAttribute\","
       << '\n'
       << "        beanClass, \"getPwrAttribute\", \"setPwrAttribute\");"
       << '\n'
       << "      _pwrAttribute.setDisplayName(\"pwrAttribute\");\n"
       << "      _pwrAttribute.setShortDescription(\"pwrAttribute\");\n"
       << "      PropertyDescriptor _pwrAttrColor = new "
          "PropertyDescriptor(\"pwrAttrColor\","
       << '\n'
       << "        beanClass, \"getPwrAttrColor\", \"setPwrAttrColor\");"
       << '\n'
       << "      _pwrAttrColor.setDisplayName(\"pwrAttrColor\");\n"
       << "      _pwrAttrColor.setShortDescription(\"pwrAttColor\");\n"
       << "      PropertyDescriptor _pwrAttrText = new "
          "PropertyDescriptor(\"pwrAttrText\","
       << '\n'
       << "        beanClass, \"getPwrAttrText\", \"setPwrAttrText\");\n"
       << "      _pwrAttrText.setDisplayName(\"pwrAttrText\");\n"
       << "      _pwrAttrText.setShortDescription(\"pwrAttText\");\n"
       << "      PropertyDescriptor _textLow = new "
          "PropertyDescriptor(\"textLow\","
       << '\n'
       << "        beanClass, \"getTextLow\", \"setTextLow\");\n"
       << "      _textLow.setDisplayName(\"textLow\");\n"
       << "      _textLow.setShortDescription(\"textLow\");\n"
       << "      PropertyDescriptor _textHigh = new "
          "PropertyDescriptor(\"textHigh\","
       << '\n'
       << "        beanClass, \"getTextHigh\", \"setTextHigh\");\n"
       << "      _textHigh.setDisplayName(\"textHigh\");\n"
       << "      _textHigh.setShortDescription(\"textHigh\");\n"
       << "      PropertyDescriptor _access = new "
          "PropertyDescriptor(\"access\","
       << '\n'
       << "        beanClass, \"getAccess\", \"setAccess\");\n"
       << "      _access.setDisplayName(\"access\");\n"
       << "      _access.setShortDescription(\"access\");\n"
       << "      PropertyDescriptor _confirm = new "
          "PropertyDescriptor(\"confirm\","
       << '\n'
       << "        beanClass, \"getConfirm\", \"setConfirm\");\n"
       << "      _confirm.setDisplayName(\"confirm\");\n"
       << "      _confirm.setShortDescription(\"confirm\");\n"
       << "      PropertyDescriptor _confirmText = new "
          "PropertyDescriptor(\"confirmText\","
       << '\n'
       << "        beanClass, \"getConfirmText\", \"setConfirmText\");\n"
       << "      _confirmText.setDisplayName(\"confirmText\");\n"
       << "      _confirmText.setShortDescription(\"confirmText\");\n";
    for (i = 0; i < annot_cnt; i++) {
      fp << "      PropertyDescriptor _annot" << numbers[i]
         << " = new PropertyDescriptor(\"annot" << numbers[i] << "\",\n"
         << "        beanClass, \"getAnnot" << numbers[i] << "\", \"setAnnot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setDisplayName(\"annot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setShortDescription(\"annot"
         << numbers[i] << "\");\n"
         << "      PropertyDescriptor _annot" << numbers[i]
         << "Font = new PropertyDescriptor(\"annot" << numbers[i] << "Font\","
         << '\n'
         << "        beanClass, \"getAnnot" << numbers[i]
         << "Font\", \"setAnnot" << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setDisplayName(\"annot"
         << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setShortDescription(\"annot"
         << numbers[i] << "Font\");\n";
    }
    fp << "      PropertyDescriptor[] pds = new PropertyDescriptor[] {\n"
       << "	_toolTipText, _fillColor, _borderColor, _colorTone, "
          "_colorShift,"
       << '\n'
       << "	_colorBrightness, _colorIntensity, _rotate,\n"
       << "	_clickAction, _command, _lowTone, _pwrAttribute, _pwrAttrColor,"
       << '\n'
       << "	_pwrAttrText, _textLow, _textHigh, _access, _confirm, "
          "_confirmText";
    for (i = 0; i < annot_cnt; i++) {
      fp << ", _annot" << numbers[i] << ", _annot" << numbers[i] << "Font";
    }
    fp << "};\n";
    break;
  }
  case graph_eTrace_Dig: {
    fp <<

        "      PropertyDescriptor _lowColor = new "
        "PropertyDescriptor(\"lowColor\","
       << '\n'
       << "        beanClass, \"getLowColor\", \"setLowColor\");\n"
       << "      _lowColor.setDisplayName(\"lowColor\");\n"
       << "      _lowColor.setShortDescription(\"lowColor\");\n"
       << "      _lowColor.setPropertyEditorClass(GeColorEditor.class);\n"
       << "      PropertyDescriptor _pwrAttribute = new "
          "PropertyDescriptor(\"pwrAttribute\","
       << '\n'
       << "        beanClass, \"getPwrAttribute\", \"setPwrAttribute\");"
       << '\n'
       << "      _pwrAttribute.setDisplayName(\"pwrAttribute\");\n"
       << "      _pwrAttribute.setShortDescription(\"pwrAttribute\");\n";
    for (i = 0; i < annot_cnt; i++) {
      fp << "      PropertyDescriptor _annot" << numbers[i]
         << " = new PropertyDescriptor(\"annot" << numbers[i] << "\",\n"
         << "        beanClass, \"getAnnot" << numbers[i] << "\", \"setAnnot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setDisplayName(\"annot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setShortDescription(\"annot"
         << numbers[i] << "\");\n"
         << "      PropertyDescriptor _annot" << numbers[i]
         << "Font = new PropertyDescriptor(\"annot" << numbers[i] << "Font\","
         << '\n'
         << "        beanClass, \"getAnnot" << numbers[i]
         << "Font\", \"setAnnot" << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setDisplayName(\"annot"
         << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setShortDescription(\"annot"
         << numbers[i] << "Font\");\n";
    }
    fp << "      PropertyDescriptor[] pds = new PropertyDescriptor[] {\n"
       << "	_toolTipText, _fillColor, _borderColor, _colorTone, "
          "_colorShift,"
       << '\n'
       << "	_colorBrightness, _colorIntensity, _rotate,\n"
       << "	_lowColor, _pwrAttribute";
    for (i = 0; i < annot_cnt; i++) {
      fp << ", _annot" << numbers[i] << ", _annot" << numbers[i] << "Font";
    }
    fp << "};\n";
    break;
  }
  case graph_eTrace_DigWithError: {
    fp <<

        "      PropertyDescriptor _lowColor = new "
        "PropertyDescriptor(\"lowColor\","
       << '\n'
       << "        beanClass, \"getLowColor\", \"setLowColor\");\n"
       << "      _lowColor.setDisplayName(\"lowColor\");\n"
       << "      _lowColor.setShortDescription(\"lowColor\");\n"
       << "      _lowColor.setPropertyEditorClass(GeColorEditor.class);\n"
       << "      PropertyDescriptor _pwrAttribute = new "
          "PropertyDescriptor(\"pwrAttribute\","
       << '\n'
       << "        beanClass, \"getPwrAttribute\", \"setPwrAttribute\");"
       << '\n'
       << "      _pwrAttribute.setDisplayName(\"pwrAttribute\");\n"
       << "      _pwrAttribute.setShortDescription(\"pwrAttribute\");\n"
       << "      PropertyDescriptor _pwrAttrError = new "
          "PropertyDescriptor(\"pwrAttrError\","
       << '\n'
       << "        beanClass, \"getPwrAttrError\", \"setPwrAttrError\");"
       << '\n'
       << "      _pwrAttrError.setDisplayName(\"pwrAttrError\");\n"
       << "      _pwrAttrError.setShortDescription(\"pwrAttError\");\n";
    for (i = 0; i < annot_cnt; i++) {
      fp << "      PropertyDescriptor _annot" << numbers[i]
         << " = new PropertyDescriptor(\"annot" << numbers[i] << "\",\n"
         << "        beanClass, \"getAnnot" << numbers[i] << "\", \"setAnnot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setDisplayName(\"annot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setShortDescription(\"annot"
         << numbers[i] << "\");\n"
         << "      PropertyDescriptor _annot" << numbers[i]
         << "Font = new PropertyDescriptor(\"annot" << numbers[i] << "Font\","
         << '\n'
         << "        beanClass, \"getAnnot" << numbers[i]
         << "Font\", \"setAnnot" << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setDisplayName(\"annot"
         << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setShortDescription(\"annot"
         << numbers[i] << "Font\");\n";
    }
    fp << "      PropertyDescriptor[] pds = new PropertyDescriptor[] {\n"
       << "	_toolTipText, _fillColor, _borderColor, _colorTone, "
          "_colorShift,"
       << '\n'
       << "	_colorBrightness, _colorIntensity, _rotate,\n"
       << "	_lowColor, _pwrAttribute, _pwrAttrError";
    for (i = 0; i < annot_cnt; i++) {
      fp << ", _annot" << numbers[i] << ", _annot" << numbers[i] << "Font";
    }
    fp << "};\n";
    break;
  }

  case graph_eTrace_DigTone: {
    fp << "      PropertyDescriptor _lowTone = new "
          "PropertyDescriptor(\"lowTone\","
       << '\n'
       << "        beanClass, \"getLowTone\", \"setLowTone\");\n"
       << "      _lowTone.setDisplayName(\"lowTone\");\n"
       << "      _lowTone.setShortDescription(\"lowTone\");\n"
       << "      _lowTone.setPropertyEditorClass(GeColorToneEditor.class);"
       << '\n'
       << "      PropertyDescriptor _pwrAttribute = new "
          "PropertyDescriptor(\"pwrAttribute\","
       << '\n'
       << "        beanClass, \"getPwrAttribute\", \"setPwrAttribute\");"
       << '\n'
       << "      _pwrAttribute.setDisplayName(\"pwrAttribute\");\n"
       << "      _pwrAttribute.setShortDescription(\"pwrAttribute\");\n";
    for (i = 0; i < annot_cnt; i++) {
      fp << "      PropertyDescriptor _annot" << numbers[i]
         << " = new PropertyDescriptor(\"annot" << numbers[i] << "\",\n"
         << "        beanClass, \"getAnnot" << numbers[i] << "\", \"setAnnot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setDisplayName(\"annot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setShortDescription(\"annot"
         << numbers[i] << "\");\n"
         << "      PropertyDescriptor _annot" << numbers[i]
         << "Font = new PropertyDescriptor(\"annot" << numbers[i] << "Font\","
         << '\n'
         << "        beanClass, \"getAnnot" << numbers[i]
         << "Font\", \"setAnnot" << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setDisplayName(\"annot"
         << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setShortDescription(\"annot"
         << numbers[i] << "Font\");\n";
    }
    fp << "      PropertyDescriptor[] pds = new PropertyDescriptor[] {\n"
       << "	_toolTipText, _fillColor, _borderColor, _colorTone, "
          "_colorShift,"
       << '\n'
       << "	_colorBrightness, _colorIntensity, _rotate,\n"
       << "	_lowTone, _pwrAttribute";
    for (i = 0; i < annot_cnt; i++) {
      fp << ", _annot" << numbers[i] << ", _annot" << numbers[i] << "Font";
    }
    fp << "};\n";
    break;
  }
  case graph_eTrace_DigToneWithError: {
    fp << "      PropertyDescriptor _lowTone = new "
          "PropertyDescriptor(\"lowTone\","
       << '\n'
       << "        beanClass, \"getLowTone\", \"setLowTone\");\n"
       << "      _lowTone.setDisplayName(\"lowTone\");\n"
       << "      _lowTone.setShortDescription(\"lowTone\");\n"
       << "      _lowTone.setPropertyEditorClass(GeColorToneEditor.class);"
       << '\n'
       << "      PropertyDescriptor _pwrAttribute = new "
          "PropertyDescriptor(\"pwrAttribute\","
       << '\n'
       << "        beanClass, \"getPwrAttribute\", \"setPwrAttribute\");"
       << '\n'
       << "      _pwrAttribute.setDisplayName(\"pwrAttribute\");\n"
       << "      _pwrAttribute.setShortDescription(\"pwrAttribute\");\n"
       << "      PropertyDescriptor _pwrAttrError = new "
          "PropertyDescriptor(\"pwrAttrError\","
       << '\n'
       << "        beanClass, \"getPwrAttrError\", \"setPwrAttrError\");"
       << '\n'
       << "      _pwrAttrError.setDisplayName(\"pwrAttrError\");\n"
       << "      _pwrAttrError.setShortDescription(\"pwrAttError\");\n";
    for (i = 0; i < annot_cnt; i++) {
      fp << "      PropertyDescriptor _annot" << numbers[i]
         << " = new PropertyDescriptor(\"annot" << numbers[i] << "\",\n"
         << "        beanClass, \"getAnnot" << numbers[i] << "\", \"setAnnot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setDisplayName(\"annot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setShortDescription(\"annot"
         << numbers[i] << "\");\n"
         << "      PropertyDescriptor _annot" << numbers[i]
         << "Font = new PropertyDescriptor(\"annot" << numbers[i] << "Font\","
         << '\n'
         << "        beanClass, \"getAnnot" << numbers[i]
         << "Font\", \"setAnnot" << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setDisplayName(\"annot"
         << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setShortDescription(\"annot"
         << numbers[i] << "Font\");\n";
    }
    fp << "      PropertyDescriptor[] pds = new PropertyDescriptor[] {\n"
       << "	_toolTipText, _fillColor, _borderColor, _colorTone, "
          "_colorShift,"
       << '\n'
       << "	_colorBrightness, _colorIntensity, _rotate,\n"
       << "	_lowTone, _pwrAttribute, _pwrAttrError";
    for (i = 0; i < annot_cnt; i++) {
      fp << ", _annot" << numbers[i] << ", _annot" << numbers[i] << "Font";
    }
    fp << "};\n";
    break;
  }

  default: {
    for (i = 0; i < annot_cnt; i++) {
      fp << "      PropertyDescriptor _annot" << numbers[i]
         << " = new PropertyDescriptor(\"annot" << numbers[i] << "\",\n"
         << "        beanClass, \"getAnnot" << numbers[i] << "\", \"setAnnot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setDisplayName(\"annot"
         << numbers[i] << "\");\n"
         << "      _annot" << numbers[i] << ".setShortDescription(\"annot"
         << numbers[i] << "\");\n"
         << "      PropertyDescriptor _annot" << numbers[i]
         << "Font = new PropertyDescriptor(\"annot" << numbers[i] << "Font\","
         << '\n'
         << "        beanClass, \"getAnnot" << numbers[i]
         << "Font\", \"setAnnot" << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setDisplayName(\"annot"
         << numbers[i] << "Font\");\n"
         << "      _annot" << numbers[i] << "Font.setShortDescription(\"annot"
         << numbers[i] << "Font\");\n";
    }
    fp << "      PropertyDescriptor[] pds = new PropertyDescriptor[] {\n"
       << "	_toolTipText, _fillColor, _borderColor, _colorTone, "
          "_colorShift,"
       << '\n'
       << "	_colorBrightness, _colorIntensity, _rotate";
    for (i = 0; i < annot_cnt; i++) {
      fp << ", _annot" << numbers[i] << ", _annot" << numbers[i] << "Font";
    }
    fp << "};\n";
    break;
  }
  }
  fp << "      return pds;\n"
     << "\n"
     << "    }\n"
     << "    catch(IntrospectionException ex) {\n"
     << "      ex.printStackTrace();\n"
     << "      return null;\n"
     << "    }\n"
     << "  }\n"
     << "  public java.awt.Image getIcon(int iconKind) {\n"
     << "    switch (iconKind) {\n"
     << "    case BeanInfo.ICON_COLOR_16x16:\n"
     << "        return iconColor16x16Filename != null ? "
        "loadImage(iconColor16x16Filename) : null;"
     << '\n'
     << "    case BeanInfo.ICON_COLOR_32x32:\n"
     << "        return iconColor32x32Filename != null ? "
        "loadImage(iconColor32x32Filename) : null;"
     << '\n'
     << "    case BeanInfo.ICON_MONO_16x16:\n"
     << "        return iconMono16x16Filename != null ? "
        "loadImage(iconMono16x16Filename) : null;"
     << '\n'
     << "    case BeanInfo.ICON_MONO_32x32:\n"
     << "        return iconMono32x32Filename != null ? "
        "loadImage(iconMono32x32Filename) : null;"
     << '\n'
     << "        }\n"
     << "    return null;\n"
     << "  }\n"
     << "  public BeanInfo[] getAdditionalBeanInfo() {\n"
     << "    Class superclass = beanClass.getSuperclass();\n"
     << "    try {\n"
     << "      BeanInfo superBeanInfo = Introspector.getBeanInfo(superclass);"
     << '\n'
     << "//    return new BeanInfo[] { superBeanInfo };\n"
     << "      return null;\n"
     << "    }\n"
     << "    catch(IntrospectionException ex) {\n"
     << "      ex.printStackTrace();\n"
     << "      return null;\n"
     << "    }\n"
     << "  }\n"
     << "}\n";

  fp.close();
  free((char*)numbers);

  return 1;
}

int Graph::export_gejava_nodeclass(std::ofstream& fp, grow_tNodeClass nodeclass)
{
  char bean_name[40];
  double x0, x1, y0, y1;
  int dyn_type1;
  int dyn_type2;
  int dyn_action_type1;
  int dyn_action_type2;
  int pages;
  grow_tObject *objectlist, *object_p;
  int object_cnt;
  int i;

  grow_GetNodeClassJavaName(nodeclass, bean_name);
  grow_GetNodeClassDynType(
      nodeclass, &dyn_type1, &dyn_type2, &dyn_action_type1, &dyn_action_type2);

  grow_MeasureNodeClassJavaBean(nodeclass, &x1, &x0, &y1, &y0);
  pages = grow_GetNodeClassPages(nodeclass);

  if (dyn_action_type1 & ge_mActionType1_ValueInput) {
    glow_eDrawType annot_background = (glow_eDrawType)31;
    grow_GetNodeClassAnnotBackground(nodeclass, &annot_background);

    fp << "protected class " << bean_name << " extends GeTextField {\n"
       << "  public " << bean_name << "( JopSession session)\n"
       << "  {\n"
       << "    super( session);\n"
       << "    setFont( annotFont);\n"
       << "    setFillColor( " << annot_background << ");\n"
       << "  }\n";
    fp <<

        "  int original_width = " << int(x1 - x0) + 2 * glow_cJBean_Offset
       << ";\n"
       << "  int original_height = " << int(y1 - y0) + 2 * glow_cJBean_Offset
       << ";\n"
       << "  boolean fontSet = false;\n";

    grow_ExportNcJavaBeanFont(grow->ctx, nodeclass, fp, 0);

    fp << "  public void paintComponent(Graphics g1) {\n"
       << "    if ( !fontSet) {\n"
       << "      float width = getWidth();\n"
       << "      float height = getHeight();\n"
       << "      setFont( annotFont.deriveFont((float)(height / "
          "original_height * annotFont.getSize())));"
       << '\n'
       << "      fontSet = true;\n"
       << "    }\n"
       << "    super.paintComponent( g1);\n"
       << "  }\n";
    fp << "}\n";

  } else if (streq(bean_name, "pwr_framethin")) {
    // Use prefabricated class GeFrameThin
    fp << "protected class " << bean_name << " extends GeFrameThin {\n"
       << "  public " << bean_name << "( JopSession session)\n"
       << "  {\n"
       << "     super(session);\n"
       << "  }\n"
       << "}\n";

  } else {
    //    if ( grow_IsSliderClass( nodeclass))
    //      fp <<
    //"protected class " << bean_name << " extends GeSlider {\n";
    //    else
    fp << "protected class " << bean_name << " extends GeComponent {\n";

    fp << "  // Dimension size;\n";

    // Declarations of GrowNode objects
    grow_ExportNodeClassJavaBean(grow->ctx, nodeclass, fp, 1);

    fp << "  public " << bean_name << "( JopSession session)\n"
       << "  {\n"
       << "    super( session);\n"
       << "    size = new Dimension( " << int(x1 - x0) + 2 * glow_cJBean_Offset
       << ", " << int(y1 - y0) + 2 * glow_cJBean_Offset << ");\n";

    // GrowNode attributes of GrowNode objects
    grow_ExportNodeClassJavaBean(grow->ctx, nodeclass, fp, 2);

    // Print dynamics for all groups and grownodes in groups
    grow_GetNodeClassObjectList(nodeclass, &objectlist, &object_cnt);

    object_p = objectlist;
    for (i = 0; i < object_cnt; i++) {
      if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowNode
          || grow_GetObjectType(*object_p) == glow_eObjectType_GrowGroup
          || grow_GetObjectType(*object_p) == glow_eObjectType_GrowXYCurve)
        export_GejavaObjectTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowBar)
        export_BarTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowTrend)
        export_TrendTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowPie)
        export_PieTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowBarChart)
        export_BarChartTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowTable)
        export_TableTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowSlider)
        // export_SliderTraceAttr( fp, *object_p, i);
        export_GejavaObjectTraceAttr(fp, *object_p, i);
      object_p++;
    }

    if (pages > 1)
      fp << "    pages = " << pages << ";\n";
    fp << "  }\n";

    grow_ExportNodeClassJavaBean(grow->ctx, nodeclass, fp, 0);

    fp << "  public Dimension getPreferredSize() { return size;}\n"
       << "  public Dimension getMinimumSize() { return size;}\n"
       << "}\n";
  }
  return 1;
}

int Graph::export_javaframe(
    char* filename, char* bean_name, int applet, int html)
{
  std::ofstream fp;
  char fname[120];
  double x0, x1, y0, y1;
  glow_eDrawType background_color;
  grow_tObject *objectlist, *object_p;
  int object_cnt;
  int i;
  char background_image[80];
  int background_tiled;
  int bg_image_width = 0;
  int bg_image_height = 0;
  int sts;

  grow_GetBackgroundImage(grow->ctx, background_image, &background_tiled);
  if (!streq(background_image, "")) {
    sts = grow_GetBackgroundImageSize(
        grow->ctx, &bg_image_width, &bg_image_height);
    if (EVEN(sts))
      strcpy(background_image, "");
  }

  if (!strchr(filename, ':') && !strchr(filename, '/')) {
    strcpy(fname, default_path);
    strcat(fname, filename);
  } else
    strcpy(fname, filename);

  dcli_translate_filename(fname, fname);

  if (!html) {
    grow_GetObjectList(grow->ctx, &objectlist, &object_cnt);

    grow_MeasureJavaBean(grow->ctx, &x1, &x0, &y1, &y0);
    grow_GetBackgroundColor(grow->ctx, &background_color);

    fp.open(fname);

    fp << "import jpwr.rt.*;\n"
       << "import jpwr.jop.*;\n"
       << "import java.awt.*;\n"
       << "import java.awt.geom.*;\n"
       << "import java.awt.image.*;\n"
       << "import java.awt.font.*;\n"
       << "import javax.swing.*;\n"
       << "import java.awt.event.*;\n"
       << '\n';
    if (applet)
      fp << "public class " << bean_name << " extends JopApplet {\n";
    else
      fp << "public class " << bean_name << " extends JopFrame {\n";
    fp << "  JPanel contentPane;\n"
       << "  BorderLayout borderLayout1 = new BorderLayout();\n"
       << "  public LocalPanel localPanel = new LocalPanel();\n"
       << "  Dimension size;\n";

    // Declarations of components
    grow_ExportJavaBean(grow->ctx, fp, 1);

    if (applet) {
      fp << "  public " << bean_name << "() {}\n"
         << "  public void init() {\n"
         << "    super.init();\n";
    } else {
      fp << "  public " << bean_name << "() {\n";
    }
    fp << "    try {\n"
       << "      jbInit();\n"
       << "    }\n"
       << "    catch(Exception e) {\n"
       << "      e.printStackTrace();\n"
       << "    }\n"
       << "  }\n"
       << "  private void jbInit() throws Exception  {\n"
       << "    size = new Dimension( " << int(x1 - x0) + 2 * glow_cJBean_Offset
       << ", " << int(y1 - y0) + 2 * glow_cJBean_Offset << ");\n"
       << "    contentPane = (JPanel) this.getContentPane();\n"
       << "    contentPane.setLayout(borderLayout1);\n"
       << "    contentPane.add(localPanel, BorderLayout.CENTER);\n"
       << "    contentPane.setOpaque(true);\n"
       << "    localPanel.setLayout(null);\n"
       << "    localPanel.setOpaque(true);\n";
    if (background_color != glow_eDrawType_LineErase)
      fp << "    localPanel.setBackground(GeColor.getColor("
         << (int)background_color << ", GeColor.NO_COLOR));\n";
    else
      fp << "    localPanel.setBackground(GeColor.getColor(31, "
            "GeColor.NO_COLOR));"
         << '\n';
    if (!applet)
      fp << "    this.setSize(size);\n"
         << "    this.setTitle(\"" << bean_name << "\");\n";

    // Set drawing attributes of components
    grow_ExportJavaBean(grow->ctx, fp, 2);

    object_p = objectlist;
    for (i = 0; i < object_cnt; i++) {
      if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowNode)
        export_ObjectTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowBar)
        export_BarTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowTrend)
        export_TrendTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowPie)
        export_PieTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowBarChart)
        export_BarChartTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowTable)
        export_TableTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowSlider)
        export_SliderTraceAttr(fp, *object_p, i);
      object_p++;
    }

    fp << "    engine.setFrameReady();\n"
       << "  }\n"
       << "\n"
       << "class LocalPanel extends JPanel {\n";
    if (!streq(background_image, "")) {
      fp << "  GeImage backgroundImage = new GeImage( session);\n"
         << "  public LocalPanel() {\n"
         << "    backgroundImage.setSession( session);\n";
      if (background_tiled)
        fp << "    backgroundImage.setBounds(0,0, " << bg_image_width << ", "
           << bg_image_height << ");\n";
      else
        fp << "    backgroundImage.setBounds(0,0, "
           << int(x1 - x0) + 2 * glow_cJBean_Offset << ", "
           << int(y1 - y0) + 2 * glow_cJBean_Offset << ");\n";
      fp << "    backgroundImage.setImage( \"" << background_image << "\");"
         << '\n'
         << "  }\n";
    } else
      fp << "  public LocalPanel() {}\n";

    grow_ExportJavaBean(grow->ctx, fp, 0);

    fp << "  public Dimension getPreferredSize() { return size;}\n"
       << "  public Dimension getMinimumSize() { return size;}\n"
       << "}\n"
       <<

        "}\n";

    fp.close();

  } else {
    char codebase[200];

    // Create a html file
    cnf_get_value("appletCodebase", codebase, sizeof(codebase));

    grow_MeasureJavaBean(grow->ctx, &x1, &x0, &y1, &y0);
    fp.open(fname);

    fp << "<html>\n"
       << "  <head>\n"
       << "      <title>" << bean_name << "</title>\n"
       << "  </head>\n"
       << "  <body bgcolor=\"#999999\">\n"
       << "    <object classid=\"clsid:8AD9C840-044E-11D1-B3E9-00805F499D93\""
       << '\n'
       << "      width=" << int(x1 - x0) + 2 * glow_cJBean_Offset << '\n'
       << "      height=" << int(y1 - y0) + 2 * glow_cJBean_Offset << '\n'
       << "      codebase=\"" << codebase << "\">\n"
       << "      <PARAM NAME = CODE VALUE = " << bean_name << "_A.class >"
       << '\n'
       << "      <PARAM NAME =\"archive\" VALUE =\"pwrp_" << systemname
       << "_web.jar,"
       << "pwr_rt_client.jar,pwr_jop.jar,pwr_jopg.jar\">\n"
       << "      <PARAM NAME=\"type\" "
          "VALUE=\"application/x-java-applet;version=1.3\">"
       << '\n'
       << "      <PARAM NAME=\"scriptable\" VALUE=\"false\">\n"
       << "      <PARAM NAME=\"instance\" VALUE=\"\">\n"
       << "    <embed type=\"application/x-java-applet;version=1.3\"\n"
       << "      code = " << bean_name << "_A.class\n"
       << "      archive =\"pwrp_" << systemname << "_web.jar,"
       << "pwr_rt_client.jar,pwr_jop.jar,pwr_jopg.jar\"\n"
       << "      width=" << int(x1 - x0) + 2 * glow_cJBean_Offset << '\n'
       << "      height=" << int(y1 - y0) + 2 * glow_cJBean_Offset << ">"
       << '\n'
       << "      height=" << int(y1 - y0) + 2 * glow_cJBean_Offset << '\n'
       << "      instance=\"\">\n"
       << "  </body>\n"
       << "</html>\n";

    fp.close();
  }

  return 1;
}

int Graph::export_gejava(char* filename, char* bean_name, int applet, int html)
{
  std::ofstream fp;
  char fname[120];
  double x0, x1, y0, y1;
  glow_eDrawType background_color;
  grow_tObject *objectlist, *object_p;
  int object_cnt;
  int i;
  grow_tNodeClass* nodeclass_list;
  int nodeclass_count;
  double scan_time, fast_scan_time, animation_scan_time;
  char background_image[80];
  int background_tiled;
  int bg_image_width = 0;
  int bg_image_height = 0;
  int sts;
  int baseclass;

  baseclass = str_StartsWith(filename, "Jopc");

  grow_GetBackgroundImage(grow->ctx, background_image, &background_tiled);
  if (!streq(background_image, "")) {
    sts = grow_GetBackgroundImageSize(
        grow->ctx, &bg_image_width, &bg_image_height);
    if (EVEN(sts))
      strcpy(background_image, "");
  }

  if (baseclass) {
    strcpy(fname, java_path);
    strcat(fname, "/");
    strcat(fname, filename);
  } else if (!strchr(filename, ':') && !strchr(filename, '/')) {
    strcpy(fname, default_path);
    strcat(fname, filename);
  } else
    strcpy(fname, filename);

  dcli_translate_filename(fname, fname);

  if (!html) {
    grow_GetObjectList(grow->ctx, &objectlist, &object_cnt);

    grow_SetJavaFrame(grow->ctx, &x1, &x0, &y1, &y0);
    grow_GetBackgroundColor(grow->ctx, &background_color);
    grow_GetScanTime(
        grow->ctx, &scan_time, &fast_scan_time, &animation_scan_time);

    fp.open(fname);

    if (baseclass)
      fp << "package jpwr." << java_package << ";\n";

    fp << "import jpwr.rt.*;\n"
       << "import jpwr.jop.*;\n"
       << "import java.awt.*;\n"
       << "import java.awt.geom.*;\n"
       << "import java.awt.image.*;\n"
       << "import java.awt.font.*;\n"
       << "import javax.swing.*;\n"
       << "import java.awt.event.*;\n"
       << '\n';
    if (applet)
      fp << "public class " << bean_name << " extends JopApplet {\n";
    else
      fp << "public class " << bean_name
         << " extends JopFrame implements JopUtilityIfc {\n";
    fp << "  JPanel contentPane;\n"
       << "  BorderLayout borderLayout1 = new BorderLayout();\n"
       << "  public LocalPanel localPanel = new LocalPanel();\n"
       << "  boolean scrollbar = false;\n"
       << "  Dimension size;\n";

    // Declarations of components
    grow_ExportJavaBean(grow->ctx, fp, 1);

    if (applet) {
      fp << "  public " << bean_name << "() {}\n"
         << "  public void init() {\n"
         << "    super.init();\n"
         << "    geInit();\n"
         << "  }\n";
    } else {
      fp << "  public " << bean_name
         << "( JopSession session, String instance, boolean scrollbar) {"
         << '\n'
         << "    super( session, instance);\n"
         << "    this.scrollbar = scrollbar;\n"
         << "    geInit();\n"
         << "  }\n"
         << "  public " << bean_name
         << "( JopSession session, String instance, boolean scrollbar, boolean "
            "noinit) {"
         << '\n'
         << "    super( session, instance);\n"
         << "    this.scrollbar = scrollbar;\n"
         << "    if ( !noinit)\n"
         << "      geInit();\n"
         << "  }\n";
    }

    fp << "  public void geInit() {\n"
       << "    JopSpider.setSystemName( \"" << systemname << "\");\n"
       << "    engine.setAnimationScanTime( " << int(animation_scan_time * 1000)
       << ");\n"
       << "    engine.setScanTime( " << int(scan_time * 1000) << ");\n"
       << "    size = new Dimension( "
       << int(x1 - x0) + 2 * glow_cJBean_Offset + cFrameBorderX << ", "
       << int(y1 - y0) + 2 * glow_cJBean_Offset + cFrameBorderY << ");\n"
       << "    Dimension dsize = new "
          "Dimension(localPanel.original_width,localPanel.original_height);"
       << '\n'
       << "    this.addComponentListener(new AspectRatioListener(this,size));"
       << '\n'
       << "    contentPane = (JPanel) this.getContentPane();\n"
       << "    contentPane.setLayout(borderLayout1);\n";
    if (applet) {
      fp << "      contentPane.add(localPanel, BorderLayout.CENTER);\n";
    } else {
      fp << "    if ( scrollbar)\n"
         << "      contentPane.add( new JScrollPane(localPanel), "
            "BorderLayout.CENTER);"
         << '\n'
         << "    else\n"
         << "      contentPane.add(localPanel, BorderLayout.CENTER);\n";
    }
    fp << "    contentPane.setOpaque(true);\n"
       << "    localPanel.setLayout( new RatioLayout()); // scaletest\n"
       << "    localPanel.setOpaque(true);\n";
    if (background_color != glow_eDrawType_LineErase)
      fp << "    localPanel.setBackground(GeColor.getColor("
         << (int)background_color << ", GeColor.NO_COLOR));\n";
    else
      fp << "    localPanel.setBackground(GeColor.getColor(31, "
            "GeColor.NO_COLOR));"
         << '\n';
    if (!applet)
      fp << "    this.setSize(size);\n"
         << "    if ( engine.isInstance())\n"
         << "      setTitle( engine.getInstance());\n"
         << "    else\n"
         << "      this.setTitle(\"" << bean_name << "\");\n";

    // Set drawing attributes of components
    grow_ExportJavaBean(grow->ctx, fp, 2);

    int ocnt = 0;
    int fcnt = 0;
    object_p = objectlist;
    for (i = 0; i < object_cnt; i++) {
      if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowNode
          || grow_GetObjectType(*object_p) == glow_eObjectType_GrowGroup
          || grow_GetObjectType(*object_p) == glow_eObjectType_GrowXYCurve)
        export_GejavaObjectTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowBar)
        export_BarTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowTrend)
        export_TrendTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowPie)
        export_PieTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowBarChart)
        export_BarChartTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowTable)
        export_TableTraceAttr(fp, *object_p, i);
      else if (grow_GetObjectType(*object_p) == glow_eObjectType_GrowSlider)
        // export_SliderTraceAttr( fp, *object_p, i);
        export_GejavaObjectTraceAttr(fp, *object_p, i);
      object_p++;
      ocnt++;

      // Avoid too large java functions
      if (ocnt > 150) {
        fcnt++;
        ocnt = 0;
        fp << "    geInit" << fcnt << "();\n"
           << "  }\n"
           << "  public void geInit" << fcnt << "() {\n";
      }
    }

    fp << "    engine.setFrameReady();\n"
       << "  }\n"
       << "\n"
       << "class LocalPanel extends JPanel {\n";
    if (!streq(background_image, "")) {
      fp << "  GeImage backgroundImage = new GeImage( session);\n"
         << "  public LocalPanel() {\n"
         << "    backgroundImage.setSession(session);\n";
      if (background_tiled)
        fp << "    backgroundImage.setBounds(0,0, " << bg_image_width << ", "
           << bg_image_height << ");\n";
      else
        fp << "    backgroundImage.setBounds(0,0, "
           << int(x1 - x0) + 2 * glow_cJBean_Offset << ", "
           << int(y1 - y0) + 2 * glow_cJBean_Offset << ");\n";
      fp << "    backgroundImage.setImage( \"" << background_image << "\");"
         << '\n'
         << "  }\n";
    } else
      fp << "  public LocalPanel() {}\n";

    grow_ExportJavaBean(grow->ctx, fp, 0);

    fp << "  public Dimension getPreferredSize() { return size;}\n"
       << "  public Dimension getMinimumSize() { return size;}\n"
       << "}\n";

    grow_GetNodeClassList(grow->ctx, &nodeclass_list, &nodeclass_count);
    for (i = 0; i < nodeclass_count; i++) {
      if (!grow_IsNextNodeClass(nodeclass_list[i]))
        export_gejava_nodeclass(fp, nodeclass_list[i]);
    }

    grow_GetNodeGroupList(grow->ctx, &nodeclass_list, &nodeclass_count);
    for (i = 0; i < nodeclass_count; i++) {
      export_gejava_nodeclass(fp, nodeclass_list[i]);
    }
    if (nodeclass_count > 0)
      free(nodeclass_list);

    if (!applet) {
      // JopUtility interface
      fp << "  public int getUtilityType() {\n"
         << "    return JopUtility.GRAPH;\n"
         << "  }\n"
         << "  public PwrtObjid getUtilityObjid() {\n"
         << "    if ( utilityAref != null)\n"
         << "      return utilityAref.getObjid();\n"
         << "    else\n"
         << "      return null;\n"
         << "  }\n"
         << "  public PwrtAttrRef getUtilityAttrRef() {\n"
         << "    return utilityAref;\n"
         << "  }\n"
         << "  public String getUtilityName() {\n"
         << "    return this.getClass().getName();\n"
         << "  }\n";
    }

    fp << "}\n";

    fp.close();
  } else {
    char codebase[200];

    // Create a html file
    cnf_get_value("appletCodebase", codebase, sizeof(codebase));

    grow_SetJavaFrame(grow->ctx, &x1, &x0, &y1, &y0);
    fp.open(fname);

    fp << "<html>\n"
       << "  <head>\n"
       << "      <title>" << bean_name << "</title>\n"
       << "  </head>\n"
       << "  <body bgcolor=\"#999999\">\n"
       << "    <object classid=\"clsid:8AD9C840-044E-11D1-B3E9-00805F499D93\""
       << '\n'
       << "      width=" << int(x1 - x0) + 2 * glow_cJBean_Offset << '\n'
       << "      height=" << int(y1 - y0) + 2 * glow_cJBean_Offset << '\n'
       << "      codebase=\"" << codebase << "\">\n"
       << "      <PARAM NAME = CODE VALUE = " << bean_name << "_A.class >"
       << '\n'
       << "      <PARAM NAME =\"archive\" VALUE =\"pwrp_" << systemname
       << "_web.jar,"
       << "pwr_rt_client.jar,pwr_jop.jar,pwr_jopg.jar\">\n"
       << "      <PARAM NAME=\"type\" "
          "VALUE=\"application/x-java-applet;version=1.3\">"
       << '\n'
       << "      <PARAM NAME=\"scriptable\" VALUE=\"false\">\n"
       << "      <PARAM NAME=\"instance\" VALUE=\"\">\n"
       << "    <embed type=\"application/x-java-applet;version=1.3\"\n"
       << "      code = " << bean_name << "_A.class\n"
       << "      archive =\"pwrp_" << systemname << "_web.jar,"
       << "pwr_rt_client.jar,pwr_jop.jar,pwr_jopg.jar\"\n"
       << "      width=" << int(x1 - x0) + 2 * glow_cJBean_Offset << '\n'
       << "      height=" << int(y1 - y0) + 2 * glow_cJBean_Offset << '\n'
       << "      instance=\"\">\n"
       << "  </body>\n"
       << "</html>\n";

    fp.close();
  }

  if (baseclass)
    return GE__ISBASECLASS;
  return GE__SUCCESS;
}

int Graph::export_ObjectTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  int dyn_type1;
  int dyn_type2;
  int dyn_action_type1;
  int dyn_action_type2;
  glow_sTraceData* trace_data;
  glow_eDrawType trace_color;
  glow_eDrawType trace_color2;
  glow_eDrawType color;
  char class_name[40];
  char var_name[40];
  int i;
  int annot_cnt;
  int* numbers;
  char annot_str[200];

  grow_GetTraceAttr(object, &trace_data);
  grow_GetObjectClassJavaName(object, class_name);

  strcpy(var_name, class_name);
  var_name[0] = _tolower(var_name[0]);
  sprintf(&var_name[strlen(var_name)], "%d", cnt);

  // todo
  dyn_type1 = (graph_eTrace)trace_data->attr_type;
  if (dyn_type1 == graph_eTrace_Inherit)
    grow_GetObjectClassDynType(
        object, &dyn_type1, &dyn_type2, &dyn_action_type1, &dyn_action_type2);

  trace_color = trace_data->color;
  if (trace_color == glow_eDrawType_Inherit)
    grow_GetObjectClassTraceColor(object, &trace_color, &color);
  trace_color2 = trace_data->color2;
  if (trace_color2 == glow_eDrawType_Inherit)
    grow_GetObjectClassTraceColor(object, &color, &trace_color2);

  // dyn_type No equals Inherit from class
  if (dyn_type1 == graph_eTrace_No)
    dyn_type1 = graph_eTrace_Inherit;

  switch (dyn_type1) {
  case graph_eTrace_Dig:
  case graph_eTrace_DigWithCommand:
  case graph_eTrace_DigBorder:
  case graph_eTrace_DigWithText:
  case graph_eTrace_Invisible:
    if (!streq(trace_data->data[0], "")) {
      fp << "    " << var_name << ".setPwrAttribute(\"" << trace_data->data[0]
         << "\");\n"
         << "    " << var_name << ".setLowColor(" << (int)trace_color << ");"
         << '\n';
    }
    break;
  case graph_eTrace_DigWithError:
    if (!streq(trace_data->data[0], "")) {
      fp << "    " << var_name << ".setPwrAttribute(\"" << trace_data->data[0]
         << "\");\n";
      if (!streq(trace_data->data[1], ""))
        fp << "    " << var_name << ".setPwrAttrError(\"" << trace_data->data[1]
           << "\");\n";
      fp << "    " << var_name << ".setLowColor(" << (int)trace_color << ");"
         << '\n';
    }
    break;
  case graph_eTrace_DigTone:
    if (!streq(trace_data->data[0], "")) {
      fp << "    " << var_name << ".setPwrAttribute(\"" << trace_data->data[0]
         << "\");\n"
         << "    " << var_name << ".setLowTone(" << (int)trace_color << ");"
         << '\n';
    }
    break;
  case graph_eTrace_DigToneWithError:
    if (!streq(trace_data->data[0], "")) {
      fp << "    " << var_name << ".setPwrAttribute(\"" << trace_data->data[0]
         << "\");\n";
      if (!streq(trace_data->data[1], ""))
        fp << "    " << var_name << ".setPwrAttrError(\"" << trace_data->data[1]
           << "\");\n";
      fp << "    " << var_name << ".setLowTone(" << (int)trace_color << ");"
         << '\n';
    }
    break;
  case graph_eTrace_SetDig:
    if (!streq(trace_data->data[0], "")) {
      fp << "    " << var_name << ".setPwrAttribute(\"" << trace_data->data[0]
         << "\");\n"
         << "    " << var_name << ".setClickAction(Jop.BUTTON_ACTION_SET);"
         << '\n';
    }
    break;
  case graph_eTrace_ResetDig:
    if (!streq(trace_data->data[0], "")) {
      fp << "    " << var_name << ".setPwrAttribute(\"" << trace_data->data[0]
         << "\");\n"
         << "    " << var_name << ".setClickAction(Jop.BUTTON_ACTION_RESET);"
         << '\n';
    }
    break;
  case graph_eTrace_ToggleDig:
    if (!streq(trace_data->data[0], "")) {
      fp << "    " << var_name << ".setPwrAttribute(\"" << trace_data->data[0]
         << "\");\n"
         << "    " << var_name << ".setClickAction(Jop.BUTTON_ACTION_TOGGLE);"
         << '\n';
    }
    break;
  case graph_eTrace_Command:
    if (!streq(trace_data->data[0], "")) {
      fp << "    " << var_name << ".setCommand(\"" << trace_data->data[0]
         << "\");\n"
         << "    " << var_name << ".setClickAction(Jop.BUTTON_ACTION_COMMAND);"
         << '\n';
    }
    break;
  case graph_eTrace_SetDigWithTone:
    if (!streq(trace_data->data[0], "")) {
      fp << "    " << var_name << ".setPwrAttribute(\"" << trace_data->data[0]
         << "\");\n"
         << "    " << var_name << ".setPwrAttrTone(\"" << trace_data->data[2]
         << "\");\n"
         << "    " << var_name << ".setClickAction(Jop.BUTTON_ACTION_SET);"
         << '\n'
         << "    " << var_name << ".setLowTone(" << (int)trace_color << ");"
         << '\n';
    }
    break;
  case graph_eTrace_ResetDigWithTone:
    if (!streq(trace_data->data[0], "")) {
      fp << "    " << var_name << ".setPwrAttribute(\"" << trace_data->data[0]
         << "\");\n"
         << "    " << var_name << ".setPwrAttrTone(\"" << trace_data->data[2]
         << "\");\n"
         << "    " << var_name << ".setClickAction(Jop.BUTTON_ACTION_RESET);"
         << '\n'
         << "    " << var_name << ".setLowTone(" << (int)trace_color << ");"
         << '\n';
    }
    break;
  case graph_eTrace_ToggleDigWithTone:
    if (!streq(trace_data->data[0], "")) {
      fp << "    " << var_name << ".setPwrAttribute(\"" << trace_data->data[0]
         << "\");\n"
         << "    " << var_name << ".setPwrAttrTone(\"" << trace_data->data[2]
         << "\");\n"
         << "    " << var_name << ".setClickAction(Jop.BUTTON_ACTION_TOGGLE);"
         << '\n'
         << "    " << var_name << ".setLowTone(" << (int)trace_color << ");"
         << '\n';
    }
    break;
  default:;
  }

  // Print annotations
  grow_GetObjectAnnotationNumbers(object, &numbers, &annot_cnt);

  for (i = 0; i < annot_cnt; i++) {
    grow_GetAnnotation(object, numbers[i], annot_str, sizeof(annot_str));
    if (!streq(annot_str, "")) {
      fp << "    " << var_name << ".setAnnot" << numbers[i] << "(\""
         << annot_str << "\");\n";
    }
  }
  free((char*)numbers);
  return 1;
}

int Graph::export_GejavaObjectTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  char class_name[40];
  char var_name[40];
  int i;
  int annot_cnt;
  int* numbers;
  char annot_str[200];
  GeDyn* dyn;
  int dyn_type1;
  int dyn_type2;
  int dyn_action_type1;
  int dyn_action_type2;

  grow_GetUserData(object, (void**)&dyn);
  grow_GetObjectClassJavaName(object, class_name);
  grow_GetObjectClassDynType(
      object, &dyn_type1, &dyn_type2, &dyn_action_type1, &dyn_action_type2);

  strcpy(var_name, class_name);
  var_name[0] = _tolower(var_name[0]);
  sprintf(&var_name[strlen(var_name)], "%d", cnt);

  dyn->export_java(object, fp, var_name);

  // Print annotations
  grow_GetObjectAnnotationNumbers(object, &numbers, &annot_cnt);

  for (i = 0; i < annot_cnt; i++) {
    grow_GetAnnotation(object, numbers[i], annot_str, sizeof(annot_str));
    if (!streq(annot_str, "")) {
      fp << "    " << var_name << ".setAnnot" << numbers[i] << "(\""
         << annot_str << "\");\n";
    }
    if (dyn_action_type1 & ge_mActionType1_ValueInput) {
      // Set text size of GeTextField
      double tsize;
      int sts;

      sts = grow_GetAnnotationTextSize(object, numbers[i], &tsize);
      if (ODD(sts)) {
        fp << "    " << var_name << ".setAnnot" << numbers[i] << "Font("
           << var_name << ".annotFont.deriveFont((float)" << (float)tsize
           << "));\n";
      }
    }
  }

  free((char*)numbers);
  return 1;
}

int Graph::export_TableTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  GeDyn* dyn;
  char class_name[] = "GeTable";
  char var_name[40];

  grow_GetUserData(object, (void**)&dyn);

  strcpy(var_name, class_name);
  var_name[0] = _tolower(var_name[0]);
  sprintf(&var_name[strlen(var_name)], "%d", cnt);

  dyn->export_java(object, fp, var_name);
  return 1;
}

int Graph::export_BarTraceAttr(std::ofstream& fp, grow_tObject object, int cnt)
{
  GeDyn* dyn;
  char class_name[] = "JopBar";
  char var_name[40];

  grow_GetUserData(object, (void**)&dyn);

  strcpy(var_name, class_name);
  var_name[0] = _tolower(var_name[0]);
  sprintf(&var_name[strlen(var_name)], "%d", cnt);

  GeDynElem* elem = dyn->elements;
  // for (GeDynElem* elem = dyn->elements; elem; elem = elem->next) {
  if (elem->dyn_type1 == ge_mDynType1_Bar) {
    if (!streq(((GeBar*)elem)->attribute, ""))
      fp << "    " << var_name << ".setPwrAttribute(\""
         << ((GeBar*)elem)->attribute << "\");\n";
    if (!streq(((GeBar*)elem)->minvalue_attr, ""))
      fp << "    " << var_name << ".setMinValueAttr(\""
         << ((GeBar*)elem)->minvalue_attr << "\");\n";
    if (!streq(((GeBar*)elem)->maxvalue_attr, ""))
      fp << "    " << var_name << ".setMaxValueAttr(\""
         << ((GeBar*)elem)->maxvalue_attr << "\");\n";
  }
  // break;
  //}
  if (dyn->total_action_type1 & ~ge_mActionType1_Inherit) {
    fp << "    " << var_name << ".dd.setActionType("
       << (int)dyn->total_action_type1 << ");\n"
       << "    " << var_name << ".dd.setAccess(" << (int)dyn->access << ");"
       << '\n';

    dyn->export_java(object, fp, var_name);
  }

  return 1;
}

int Graph::export_TrendTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  GeDyn* dyn;
  char class_name[] = "JopTrend";
  char var_name[40];

  grow_GetUserData(object, (void**)&dyn);

  strcpy(var_name, class_name);
  var_name[0] = _tolower(var_name[0]);
  sprintf(&var_name[strlen(var_name)], "%d", cnt);

  GeDynElem* elem = dyn->elements;
  // for (GeDynElem* elem = dyn->elements; elem; elem = elem->next) {
  if (elem->dyn_type1 == ge_mDynType1_Trend) {
    if (!streq(((GeTrend*)elem)->attribute1, ""))
      fp << "    " << var_name << ".setPwrAttribute1(\""
         << ((GeTrend*)elem)->attribute1 << "\");\n";
    if (!streq(((GeTrend*)elem)->attribute2, ""))
      fp << "    " << var_name << ".setPwrAttribute2(\""
         << ((GeTrend*)elem)->attribute2 << "\");\n";
    if (!streq(((GeTrend*)elem)->minvalue_attr1, ""))
      fp << "    " << var_name << ".setMinValueAttr1(\""
         << ((GeTrend*)elem)->minvalue_attr1 << "\");\n";
    if (!streq(((GeTrend*)elem)->maxvalue_attr1, ""))
      fp << "    " << var_name << ".setMaxValueAttr1(\""
         << ((GeTrend*)elem)->maxvalue_attr1 << "\");\n";
    if (!streq(((GeTrend*)elem)->minvalue_attr2, ""))
      fp << "    " << var_name << ".setMinValueAttr2(\""
         << ((GeTrend*)elem)->minvalue_attr2 << "\");\n";
    if (!streq(((GeTrend*)elem)->maxvalue_attr2, ""))
      fp << "    " << var_name << ".setMaxValueAttr2(\""
         << ((GeTrend*)elem)->maxvalue_attr2 << "\");\n";
  }
  // break;
  //}
  if (dyn->total_action_type1 & ~ge_mActionType1_Inherit) {
    fp << "    " << var_name << ".dd.setActionType("
       << (int)dyn->total_action_type1 << ");\n"
       << "    " << var_name << ".dd.setAccess(" << (int)dyn->access << ");"
       << '\n';

    dyn->export_java(object, fp, var_name);
  }

  return 1;
}

int Graph::export_PieTraceAttr(std::ofstream& fp, grow_tObject object, int cnt)
{
  GeDyn* dyn;
  char class_name[] = "JopPie";
  char var_name[40];

  grow_GetUserData(object, (void**)&dyn);

  strcpy(var_name, class_name);
  var_name[0] = _tolower(var_name[0]);
  sprintf(&var_name[strlen(var_name)], "%d", cnt);

  GeDynElem* elem = dyn->elements;
  // for (GeDynElem* elem = dyn->elements; elem; elem = elem->next) {
  if (elem->dyn_type1 == ge_mDynType1_Pie) {
    fp << "    " << var_name << ".setPwrAttribute(new String[]{";

    for (int i = 0; i < PIE_MAX_SECTORS; i++) {
      if (!streq(((GePie*)elem)->attribute[i], ""))
        fp << "\"" << ((GePie*)elem)->attribute[i] << "\"";
      else
        fp << "null";
      if (i != PIE_MAX_SECTORS - 1)
        fp << ",";
    }
    fp << "});\n"
       << "    " << var_name << ".setFixRange(" << ((GePie*)elem)->fix_range
       << ");\n";
  }
  // break;
  //}
  if (dyn->total_action_type1 & ~ge_mActionType1_Inherit) {
    fp << "    " << var_name << ".dd.setActionType("
       << (int)dyn->total_action_type1 << ");\n"
       << "    " << var_name << ".dd.setAccess(" << (int)dyn->access << ");"
       << '\n';

    dyn->export_java(object, fp, var_name);
  }

  return 1;
}

int Graph::export_BarChartTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  GeDyn* dyn;
  char class_name[] = "JopBarChart";
  char var_name[40];

  grow_GetUserData(object, (void**)&dyn);

  strcpy(var_name, class_name);
  var_name[0] = _tolower(var_name[0]);
  sprintf(&var_name[strlen(var_name)], "%d", cnt);

  GeDynElem* elem = dyn->elements;
  // for (GeDynElem* elem = dyn->elements; elem; elem = elem->next) {
  if (elem->dyn_type1 == ge_mDynType1_BarChart) {
    fp << "    " << var_name << ".setPwrAttribute(new String[]{";

    for (int i = 0; i < BARCHART_MAX_BARSEGMENTS; i++) {
      if (!streq(((GeBarChart*)elem)->attribute[i], ""))
        fp << "\"" << ((GeBarChart*)elem)->attribute[i] << "\"";
      else
        fp << "null";
      if (i != BARCHART_MAX_BARSEGMENTS - 1)
        fp << ",";
    }
    fp << "});\n";
  }
  // break;
  //}
  if (dyn->total_action_type1 & ~ge_mActionType1_Inherit) {
    fp << "    " << var_name << ".dd.setActionType("
       << (int)dyn->total_action_type1 << ");\n"
       << "    " << var_name << ".dd.setAccess(" << (int)dyn->access << ");"
       << '\n';

    dyn->export_java(object, fp, var_name);
  }

  return 1;
}

int Graph::export_SliderTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  glow_sTraceData* trace_data;
  char class_name[40];
  char var_name[40];

  grow_GetTraceAttr(object, &trace_data);
  grow_GetObjectClassJavaName(object, class_name);

  strcpy(var_name, class_name);
  var_name[0] = _tolower(var_name[0]);
  sprintf(&var_name[strlen(var_name)], "%d", cnt);

  if (!streq(trace_data->data[0], "")) {
    if (!streq(trace_data->data[0], ""))
      fp << "    " << var_name << ".setPwrAttribute(\"" << trace_data->data[0]
         << "\");\n"
         << "    " << var_name << ".setAccess(" << (int)trace_data->access
         << ");\n";
  }
  return 1;
}

#else

int Graph::export_javabean(char* filename, char* bean_name)
{
  return 1;
}
int Graph::export_gejava_nodeclass(std::ofstream& fp, grow_tNodeClass nodeclass)
{
  return 1;
}
int Graph::export_javaframe(
    char* filename, char* bean_name, int applet, int html)
{
  return 1;
}
int Graph::export_gejava(char* filename, char* bean_name, int applet, int html)
{
  return 1;
}
int Graph::export_ObjectTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  return 1;
}
int Graph::export_GejavaObjectTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  return 1;
}
int Graph::export_BarTraceAttr(std::ofstream& fp, grow_tObject object, int cnt)
{
  return 1;
}
int Graph::export_TrendTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  return 1;
}
int Graph::export_PieTraceAttr(std::ofstream& fp, grow_tObject object, int cnt)
{
  return 1;
}
int Graph::export_BarChartTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  return 1;
}
int Graph::export_TableTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  return 1;
}
int Graph::export_SliderTraceAttr(
    std::ofstream& fp, grow_tObject object, int cnt)
{
  return 1;
}

#endif
