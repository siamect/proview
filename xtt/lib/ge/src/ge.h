/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef ge_h
#define ge_h

#include "cow_wow.h"

#include "glow.h"
#ifndef glow_growapi_h
typedef void* grow_tObject;
class GlowCtx;
#endif

#include "ge_cmn.h"
#include "ge_subpalette.h"
#ifndef ge_subgraphs_h
class SubGraphs;
#endif

#include "wb_ldh.h"

/* ge.h -- Simple graphic editor */

typedef enum {
  ge_mOption_EnableComment = 1 << 0,
  ge_mOption_IgnoreJournal = 1 << 1
} ge_mOption;

typedef struct {
  char name[40];
  char prev[40];
} ge_tPrevPage;

class ColPalCtx;
class Graph;
class Nav;
class CoWow;
class Attr;
class GeDyn;

class Ge {
public:
  void* parent_ctx;
  char name[80];
  Graph* graph;
  SubPalette* subpalette;
  SubGraphs* subgraphs;
  ColPalCtx* colorpalette_ctx;
  int text_input_open;
  int name_input_open;
  int value_input_open;
  int objectnav_input_open;
  int command_open;
  int confirm_open;
  int yesnodia_open;
  void (*yesnodia_yes_cb)(Ge*);
  void (*yesnodia_no_cb)(Ge*);
  void (*india_ok_cb)(Ge*, char*);
  void* current_text_object;
  void* current_value_object;
  void* current_confirm_object;
  ldh_tSesContext ldhses;
  Nav* plantctx;
  int exit_when_close;
  ge_tPrevPage prev_table[40];
  int prev_count;
  void* focused_component;
  void* prev_focused_component;
  grow_tObject recover_object;
  char recover_name[80];
  int plant_mapped;
  int subpalette_mapped;
  int objectnav_mapped;
  unsigned int options;
  CoWow* wow;
  void* open_dialog;
  Attr* objectnav;
  void (*close_cb)(void*);

  Ge(void* parent_ctx, ldh_tSesContext ldhses, int exit_when_close,
      unsigned int x_options);
  virtual ~Ge();
  void open(char* name);
  void save(char* name);
  void clear();
  int command(char* cmd);
  void message(pwr_tStatus sts);

  virtual void set_title(char* title)
  {
  }
  virtual void open_input_dialog(const char* text, const char* title,
      const char* init_text, void (*india_ok_cb)(Ge*, char*))
  {
  }
  virtual void message(char severity, const char* message)
  {
  }
  virtual void pop()
  {
  }
  virtual void status_msg(char* pos_str)
  {
  }
  virtual void open_yesnodia(const char* text, const char* title,
      void (*yes_cb)(Ge*), void (*no_cb)(Ge*))
  {
  }
  virtual void set_prompt(const char* prompt)
  {
  }
  virtual void subgraphs_new()
  {
  }
  virtual void update()
  {
  }
  virtual int get_plant_select(char* name, int size)
  {
    return 0;
  }
  virtual void* create_list(const char* title, const char* texts,
      void(action_cb)(void*, char*, int), void(cancel_cb)(void*), void* ctx)
  {
    return 0;
  }
  virtual int create_modal_dialog(const char* title, const char* text,
      const char* button1, const char* button2, const char* button3,
      const char* image)
  {
    return 0;
  }
  virtual void plant_del(void* plantctx)
  {
  }
  virtual int plant_get_select(
      void* plantctx, pwr_sAttrRef* attrref, int* is_attr)
  {
    return 0;
  }

  void set_title();
  void prevtable_insert(char* name, char* prev);
  int prevtable_get(char* name, char* prev);
  void prevtable_clear();
  void save_and_close();

  void clear_all();
  void open_graph(const char* name, int dashboard);
  int set_focus(void* component);
  void close();
  int select_object(char* name);

  void activate_change_text();
  void activate_change_name();
  void activate_search_object();
  void activate_preview_start();
  void activate_preview_stop();
  void activate_delete();
  void activate_cut();
  void activate_copy();
  void activate_objattr_store();
  void activate_objattr_recall();
  void activate_rotate();
  void activate_rotate90();
  void activate_flip_vert();
  void activate_flip_horiz();
  void activate_pop();
  void activate_push();
  void activate_edit_polyline();
  void activate_scale_equal();
  void activate_move_horizontal();
  void activate_move_vertical();
  void activate_move_reset();
  void activate_align_horiz_up();
  void activate_align_horiz_down();
  void activate_align_horiz_center();
  void activate_align_vert_left();
  void activate_align_vert_right();
  void activate_align_vert_center();
  void activate_equid_vert_up();
  void activate_equid_vert_down();
  void activate_equid_vert_center();
  void activate_equid_horiz_left();
  void activate_equid_horiz_right();
  void activate_equid_horiz_center();
  void activate_select_cons();
  void activate_select_objects();
  void activate_select_nextobject(glow_eDirection dir);
  void activate_group();
  void activate_ungroup();
  void activate_connect();
  void activate_connectsecond();
  void activate_objectattributes();
  void activate_show_grid(int set);
  void activate_paste();
  void activate_command();
  void activate_exit();
  void activate_print();
  void activate_new();
  void activate_save();
  void activate_save_as();
  void activate_build();
  void activate_syntax_check();
  void activate_export_javabean();
  void activate_export_javabean_as();
  void activate_export_gejava();
  void activate_export_gejava_as();
  void activate_export_java();
  void activate_export_java_as();
  void activate_export_plcfo();
  void activate_export_plcfo_as();
  void activate_creanextpage();
  void activate_nextpage();
  void activate_prevpage();
  void activate_graph_attr();
  void activate_open(int dashboard);
  void activate_colortheme_select();
  void activate_colortheme_next();
  void activate_customcolors_read();
  void activate_customcolors_write();
  void activate_subgraphs();
  void activate_reset_mode();
  void activate_rect(bool keep);
  void activate_rectrounded(bool keep);
  void activate_line(bool keep);
  void activate_polyline(bool keep);
  void activate_circle(bool keep);
  void activate_text(bool keep);
  void activate_annot(bool keep);
  void activate_conpoint(bool keep);
  void activate_fill(int set);
  void activate_border(int set);
  void activate_shadow(int set);
  void activate_incr_lightness();
  void activate_decr_lightness();
  void activate_incr_intensity();
  void activate_decr_intensity();
  void activate_incr_shift();
  void activate_decr_shift();
  void activate_scale();
  void activate_scale(double factor);
  void activate_grid(int set);
  void activate_linewidth(int width);
  void activate_linetype1();
  void activate_linetype2();
  void activate_linetype3();
  void activate_linetype4();
  void activate_linetype5();
  void activate_linetype6();
  void activate_linetype7();
  void activate_gridsize(double size);
  void activate_textsize(int size);
  void activate_textfont(glow_eFont font);
  void activate_textbold(int set);
  void activate_zoom_in();
  void activate_zoom_out();
  void activate_zoom_reset();
  void activate_concorner_right();
  void activate_concorner_rounded();
  void activate_round_amount(double amount);
  void activate_contype_straight();
  void activate_contype_routed();
  void activate_contype_stronearr();
  void activate_contype_stepdiv();
  void activate_contype_stepconv();
  void activate_contype_transdiv();
  void activate_contype_transconv();
  void activate_condir_center();
  void activate_condir_left();
  void activate_condir_right();
  void activate_condir_up();
  void activate_condir_down();
  void activate_background_color();
  void activate_gradient(glow_eGradient gradient);
  void activate_help();
  void activate_help_subgraph();
  void activate_india_ok(char* value);
  void activate_india_cancel();
  void activate_yesnodia_yes();
  void activate_yesnodia_no();
  void activate_yesnodia_cancel();
  void activate_confirm_ok();
  void activate_confirm_cancel();

  static int get_plant_select_cb(void* ge_ctx, char* select_name, int size);
  static void refresh_objects_cb(void* ge_ctx, unsigned int type);
  static void customcolors_selected_cb(
      void* ctx, char* filename, wow_eFileSelType file_type);
  static void customcolors_write_cb(Ge* gectx, char* name);
  static void load_graph_cb(void* ge_ctx, char* name);
  static void save_graph(Ge* gectx, char* name);
  static void save_graph_and_close(Ge* gectx, char* name);
  static void ungroup_yes_cb(Ge* gectx);
  static void ungroup_no_cb(Ge* gectx);
  static void delete_yes_cb(Ge* gectx);
  static void delete_no_cb(Ge* gectx);
  static void recover_dynprop_yes_cb(Ge* gectx);
  static void recover_dynprop_no_cb(Ge* gectx);
  static void exit_save_cb(Ge* gectx);
  static void exit_nosave_cb(Ge* gectx);
  static void export_javabean(Ge* gectx, char* name);
  static void export_gejava(Ge* gectx, char* name);
  static void export_plcfo(Ge* gectx, char* filename);
  static void rotate(Ge* gectx, char* value_str);
  static int subpalette_get_select(void* gectx, char* text, char* filename);
  static void colorpalette_get_current(void* gectx, glow_eDrawType* fill_color,
      glow_eDrawType* border_color, glow_eDrawType* text_color);
  static void colorpalette_set_current(void* gectx, glow_eDrawType fill_color,
      glow_eDrawType border_color, glow_eDrawType text_color);
  static void colorpalette_get_current_tone(void* gectx, glow_eDrawType* tone);
  static void colorpalette_set_current_tone(void* gectx, glow_eDrawType tone);
  static void update_colorpalette(void* gectx);
  static void subgraphs_close_cb(SubGraphs* subgraphs);
  static void status_msg(void* ge_ctx, double x, double y);
  static int command_cb(void* ge_ctx, char* command, char* script);
  static void open_list_cb(void* ctx, char* text, int ok_pressed);
  static void open_cancel_cb(void* ctx);
  static int sort_files(const void* file1, const void* file2);

  static int colorpalette_cb(GlowCtx* ctx, glow_tEvent event);
  static int init_colorpalette_cb(GlowCtx* fctx, void* client_data);
  static int get_ldhses_cb(void* ctx, ldh_tSesContext* ldhses, int load);
  static int check_ldh_object_cb(void* ctx, char* name, pwr_eType* type);
  static int traverse_focus(void* ctx, void* component);
  static int set_focus_cb(void* ctx, void* component);
  static void message_cb(void* ctx, char severity, const char* message);
  static void help_cb(void* ctx, char* topic, char* helpfile);
  static int create_modal_dialog_cb(void* ge_ctx, const char* title,
      const char* text, const char* button1, const char* button2,
      const char* button3, const char* image);
  static void search_object_cb(void* ge_ctx, void* data, char* name);
  static void graph_get_object_list_cb(void* g, unsigned int type,
      grow_tObject** list, int* list_cnt, grow_tObject* parent, int parent_cnt);
  static void graph_attr_store_cb(void* g, grow_tObject object);
  static int graph_attr_recall_cb(
      void* g, grow_tObject object, int idx, GeDyn** old_dyn);
  static int graph_get_plant_select_cb(void* g, char* value, int size);
  static int graph_get_current_colors_cb(void* g, glow_eDrawType* fill_color,
      glow_eDrawType* border_color, glow_eDrawType* text_color);
  static int graph_get_current_color_tone_cb(
      void* g, glow_eDrawType* color_tone);
  static int graph_reconfigure_attr_cb(void* g, grow_tObject object,
      attr_sItem** itemlist, int* itemlist_cnt, void** client_data);
  static int graph_attr_set_data_cb(void* g, grow_tObject object, GeDyn* data);
  static int graph_get_dyn_info_cb(
      void* g, GeDyn* dyn, attr_sItem** itemlist, int* itemlist_cnt);
  static int graph_get_subgraph_info_cb(
      void* g, char* name, attr_sItem** itemlist, int* itemlist_cnt);
  static void graph_attr_close_cb(
      void* g, void* attrctx, grow_tObject o, void* info, int keep);
  static void graph_attr_redraw_cb(
      void* g, void* attrctx, grow_tObject o, void* info);
  static void find_ge_cb(void* g, char* object, void* utility);
};

#endif
