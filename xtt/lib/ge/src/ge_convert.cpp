/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* ge_convert.cpp
   Conversion between different versions of Ge.
   3.4 -> 4.0
*/

#include "co_ccm.h"
#include "co_ccm_msg.h"
#include "co_dcli.h"
#include "co_dcli_msg.h"
#include "co_string.h"

#include "ge_msg.h"
#include "ge.h"
#include "ge_dyn.h"

extern "C" {
#if LDH
#include "wb_wccm.h"
#endif
}

#if defined OS_LINUX

int Graph::convert()
{
  char name[80];
  grow_tObject* objectlist;
  int object_cnt;

  // grow_Convert( grow->ctx, glow_eConvert_V34);

  // Convert all objects
  grow_GetObjectList(grow->ctx, &objectlist, &object_cnt);
  for (int i = 0; i < object_cnt; i++) {
    grow_GetObjectName(objectlist[i], name, sizeof(name), glow_eName_Object);
    if (streq(name, "")) {
      sprintf(name, "O%d", grow_IncrNextObjectNameNumber(grow->ctx));
      grow_SetObjectName(objectlist[i], name);
    }

    if (grow_GetObjectType(objectlist[i]) == glow_eObjectType_GrowGroup) {
      grow_tObject* grouplist;
      int group_cnt;

      grow_GetGroupObjectList(objectlist[i], &grouplist, &group_cnt);
      for (int j = 0; j < group_cnt; j++) {
        grow_GetObjectName(grouplist[j], name, sizeof(name), glow_eName_Object);
        if (streq(name, "")) {
          sprintf(name, "O%d", grow_IncrNextObjectNameNumber(grow->ctx));
          grow_SetObjectName(grouplist[j], name);
        }
      }
    }
  }

  // grow_Redraw( grow->ctx);
  return 1;
}

#else

int Graph::convert()
{
  return 1;
}
#endif
