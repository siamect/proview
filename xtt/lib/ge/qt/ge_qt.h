/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef ge_qt_h
#define ge_qt_h

#include "cow_wow_qt.h"

#include "ge.h"

#include <QAction>
#include <QComboBox>
#include <QLabel>
#include <QSplitter>

/* ge_qt.h -- Simple graphic editor */

class GeQtWidget;

class GeQt : public Ge {
public:
  GeQtWidget* toplevel;
  QWidget* grow_widget;
  QWidget* colorpalette_widget;
  QWidget* colpal_main_widget;
  QWidget* plant_widget;
  QWidget* subpalette_widget;
  QWidget* subgraphs_widget;
  QLabel* cursor_position;
  QLabel* msg_label;
  QLabel* cmd_prompt;
  QAction* grid_on_w;
  QComboBox* tools_gridsize;
  QComboBox* tools_gradient;
  QComboBox* tools_textfont;
  QAction* show_grid_w;
  QAction* view_plant_w;
  QAction* view_graphlist_w;
  QAction* view_objectnav_w;
  QWidget* graph_list;
  QWidget* objectnav_w;
  CoWowRecall* text_recall;
  CoWowRecall* name_recall;
  CoWowRecall* value_recall;
  CoWowRecall* cmd_recall;
  CoWowEntryQt* recall_entry;

public:
  GeQt(void* parent_ctx, ldh_tSesContext ldhses, int exit_when_close,
        unsigned int options, char* graph_name);
  ~GeQt();

  virtual void set_title(char* title);
  virtual void open_input_dialog(const char* text, const char* title,
      const char* init_text, void (*india_ok_cb)(Ge*, char*));
  virtual void message(char severity, const char* message);
  virtual void status_msg(char* pos_str);
  virtual void open_yesnodia(const char* text, const char* title,
      void (*yes_cb)(Ge*), void (*no_cb)(Ge*));
  virtual void set_prompt(const char* prompt);
  virtual void subgraphs_new();
  virtual void update();
  virtual int get_plant_select(char* name, int size);
  virtual void* create_list(const char* title, const char* texts,
      void(action_cb)(void*, char*, int), void(cancel_cb)(void*), void* ctx);
  virtual int create_modal_dialog(const char* title, const char* text,
      const char* button1, const char* button2, const char* button3,
      const char* image);

  static void change_text_cb(void* ge_ctx, void* text_object, const char* text);
  static void change_name_cb(void* ge_ctx, void* text_object, char* text);
  static void change_value_cb(void* ge_ctx, void* value_object, char* text);
  static void objectnav_change_value_cb(
      void* ge_ctx, int multiline, int size, char* text);
  static void confirm_cb(void* ge_ctx, void* confirm_object, char* text);

  static void graph_file_selected_cb(
      void* ctx, char* filename, wow_eFileSelType file_type);
  static void image_file_selected_cb(
      void* ctx, char* filename, wow_eFileSelType file_type);
};

class GeQtWidget : public QWidget {
  Q_OBJECT

public:
  GeQtWidget(GeQt* parent_ctx) : QWidget(), ge(parent_ctx) {}

protected:
  void focusInEvent(QFocusEvent* event);
  void closeEvent(QCloseEvent* event);

public slots:
  void valchanged_cmd_entry();

  void activate_create_subgraph();
  void activate_change_text();
  void activate_search_object();
  void activate_preview_start();
  void activate_preview_stop();
  void activate_delete();
  void activate_cut();
  void activate_copy();
  void activate_objattr_store();
  void activate_objattr_recall();
  void activate_rotate();
  void activate_rotate90();
  void activate_flip_vert();
  void activate_flip_horiz();
  void activate_pop();
  void activate_push();
  void activate_edit_polyline();
  void activate_scale_equal();
  void activate_move_horizontal();
  void activate_move_vertical();
  void activate_move_reset();
  void activate_align_horiz_up();
  void activate_align_horiz_down();
  void activate_align_horiz_center();
  void activate_align_vert_left();
  void activate_align_vert_right();
  void activate_align_vert_center();
  void activate_equid_vert_up();
  void activate_equid_vert_down();
  void activate_equid_vert_center();
  void activate_equid_horiz_left();
  void activate_equid_horiz_right();
  void activate_equid_horiz_center();
  void activate_select_cons();
  void activate_select_objects();
  void activate_select_next();
  void activate_group();
  void activate_ungroup();
  void activate_connect();
  void activate_connectsecond();
  void activate_objectattributes();
  void activate_show_grid(bool s = false);
  void activate_paste();
  void activate_undo();
  void activate_redo();
  void activate_command();
  void activate_print();
  void activate_syntax_check();
  void activate_history();
  void activate_new();
  void activate_save();
  void activate_save_as();
  void activate_build();
  void activate_export_javabean();
  void activate_export_javabean_as();
  void activate_export_gejava();
  void activate_export_gejava_as();
  void activate_export_java();
  void activate_export_java_as();
  void activate_export_plcfo();
  void activate_export_plcfo_as();
  void activate_colortheme_select();
  void activate_colortheme_next();
  void activate_customcolors_read();
  void activate_customcolors_write();
  void activate_import_graph();
  void activate_import_image();
  void activate_creanextpage();
  void activate_nextpage();
  void activate_prevpage();
  void activate_graph_attr();
  void activate_open();
  void activate_subgraphs();
  void activate_rect();
  void activate_rectrounded();
  void activate_line();
  void activate_polyline();
  void activate_circle();
  void activate_text();
  void activate_annot();
  void activate_conpoint();
  void activate_fill(bool set);
  void activate_border(bool set);
  void activate_shadow(bool set);
  void activate_incr_lightness();
  void activate_decr_lightness();
  void activate_incr_intensity();
  void activate_decr_intensity();
  void activate_incr_shift();
  void activate_decr_shift();
  void activate_gradient(int idx);
  void activate_gradient();
  void activate_reset_mode();
  void activate_scale();
  void activate_scale_double();
  void activate_scale_half();
  void activate_grid(bool set);
  void activate_linewidth(int idx);
  void activate_linetype(int idx);
  void activate_gridsize(int idx);
  void activate_textsize(int idx);
  void activate_textfont(int idx);
  void activate_textbold(bool set);
  void activate_zoom_in();
  void activate_zoom_out();
  void activate_zoom_reset();
  void activate_view_plant(bool set);
  void activate_view_graphlist(bool set);
  void activate_view_objectnav(bool set);
  void activate_concorner_right();
  void activate_concorner_rounded();
  void activate_round_amount();
  void activate_contype_straight();
  void activate_contype_routed();
  void activate_contype_stronearr();
  void activate_contype_stepdiv();
  void activate_contype_stepconv();
  void activate_contype_transdiv();
  void activate_contype_transconv();
  void activate_condir_center();
  void activate_condir_left();
  void activate_condir_right();
  void activate_condir_up();
  void activate_condir_down();
  void activate_background_color();
  void activate_help();
  void activate_help_subgraph();

private:
  GeQt* ge;
};

#endif
