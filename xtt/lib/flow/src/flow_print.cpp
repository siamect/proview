/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "flow_print.h"

FlowPrint::FlowPrint()
{
}

FlowPrint::FlowPrint(char* filename, void* flow_ctx, int page_border, int* sts)
{
}

FlowPrint::~FlowPrint()
{
}

int FlowPrint::type()
{
  return 0;
}

int FlowPrint::print_page(double ll_x, double ll_y, double ur_x, double ur_y)
{
  return 1;
}

int FlowPrint::rect(double x, double y, double width, double height,
    flow_eDrawType type, double idx, int highlight)
{
  return 1;
}

int FlowPrint::filled_rect(double x, double y, double width, double height,
    flow_eDrawType type, double idx)
{
  return 1;
}

int FlowPrint::triangle(double x, double y, double width, double height,
    flow_eDrawType type, double idx, int highlight)
{
  return 1;
}

int FlowPrint::filled_triangle(double x, double y, double width, double height,
    flow_eDrawType type, double idx)
{
  return 1;
}

int FlowPrint::arc(double x, double y, double width, double height, int angle1,
    int angle2, flow_eDrawType type, double idx, int highlight)
{
  return 1;
}

int FlowPrint::line(double x1, double y1, double x2, double y2,
    flow_eDrawType type, double idx, int highlight)
{
  return 1;
}

int FlowPrint::text(double x, double y, char* text, int len,
    flow_eDrawType type, double size, int line)
{
  return 1;
}

int FlowPrint::pixmap(
    double x, double y, flow_sPixmapDataElem* data, flow_eDrawType type)
{
  return 1;
}

int FlowPrint::image(double x, double y, double width, double height,
    flow_tImImage image, flow_eDrawType type)
{
  return 1;
}

int FlowPrint::arrow(double x1, double y1, double x2, double y2, double x3,
    double y3, flow_eDrawType type, double idx)
{
  return 1;
}

void FlowPrint::set_showred(int show)
{
}
