/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "flow_array_elem.h"

void FlowArrayElem::zoom()
{
}

void FlowArrayElem::nav_zoom()
{
}

void FlowArrayElem::print_zoom()
{
}

void FlowArrayElem::traverse(int x, int y)
{
}

void FlowArrayElem::get_borders(
    double* x_right, double* x_left, double* y_high, double* y_low)
{
}

void FlowArrayElem::get_borders(double pos_x, double pos_y, double* x_right,
    double* x_left, double* y_high, double* y_low, void* node)
{
}

void FlowArrayElem::get_borders()
{
}

int FlowArrayElem::event_handler(flow_eEvent event, int x, int y)
{
  return 0;
}

int FlowArrayElem::event_handler(
    void* pos, flow_eEvent event, int x, int y, void* node)
{
  return 0;
}

void FlowArrayElem::print(double ll_x, double ll_y, double ur_x, double ur_y)
{
}

void FlowArrayElem::save(std::ofstream& fp, flow_eSaveMode mode)
{
}

void FlowArrayElem::open(std::ifstream& fp)
{
}

void FlowArrayElem::print(void* pos, void* node, int highlight)
{
}

void FlowArrayElem::draw(int ll_x, int ll_y, int ur_x, int ur_y)
{
}

void FlowArrayElem::draw(
    void* pos, int highlight, int dimmed, int hot, void* node)
{
}

void FlowArrayElem::erase()
{
}

void FlowArrayElem::erase(void* pos, int hot, void* node)
{
}

void FlowArrayElem::draw_inverse(void* pos, int hot, void* node)
{
}

void FlowArrayElem::move(int delta_x, int delta_y, int grid)
{
}

void FlowArrayElem::move_noerase(int delta_x, int delta_y, int grid)
{
}

void FlowArrayElem::shift(void* pos, double delta_x, double delta_y,
    int highlight, int dimmed, int hot)
{
}

void FlowArrayElem::nav_draw(int ll_x, int ll_y, int ur_x, int ur_y)
{
}

void FlowArrayElem::nav_draw(void* pos, int highlight, void* node)
{
}

void FlowArrayElem::nav_erase()
{
}

void FlowArrayElem::nav_erase(void* pos, void* node)
{
}

void FlowArrayElem::conpoint_select(
    void* pos, int x, int y, double* distance, void** cp)
{
}

int FlowArrayElem::get_conpoint(
    int num, double* x, double* y, flow_eDirection* dir)
{
  return 0;
}

void FlowArrayElem::redraw_node_cons(void* node)
{
}

int FlowArrayElem::delete_node_cons(void* node)
{
  return 0;
}

void FlowArrayElem::set_highlight(int on)
{
}

int FlowArrayElem::get_highlight()
{
  return 1;
}

void FlowArrayElem::set_dimmed(int on)
{
}

int FlowArrayElem::get_dimmed()
{
  return 1;
}

void FlowArrayElem::set_inverse(int on)
{
}

void FlowArrayElem::set_hot(int on)
{
}

void FlowArrayElem::select_region_insert(
    double ll_x, double ll_y, double ur_x, double ur_y)
{
}

flow_eObjectType FlowArrayElem::type()
{
  return flow_eObjectType_NoObject;
}

void FlowArrayElem::link_insert(FlowArrayElem** start)
{
}

int FlowArrayElem::in_area(double ll_x, double ll_y, double ur_x, double ur_y)
{
  return 0;
}

int FlowArrayElem::in_area_exact(
    double ll_x, double ll_y, double ur_x, double ur_y)
{
  return 0;
}

int FlowArrayElem::in_vert_line(double x, double l_y, double u_y)
{
  return 0;
}

int FlowArrayElem::in_horiz_line(double y, double l_x, double u_x)
{
  return 0;
}

void FlowArrayElem::conpoint_refcon_redraw(void* node, int conpoint)
{
}

void FlowArrayElem::conpoint_refcon_erase(void* node, int conpoint)
{
}

void FlowArrayElem::remove_notify()
{
}

void FlowArrayElem::set_user_data(void* data)
{
}

void FlowArrayElem::get_user_data(void** data)
{
}

void FlowArrayElem::trace_scan()
{
}

int FlowArrayElem::trace_init()
{
  return 1;
}

void FlowArrayElem::trace_close()
{
}

void FlowArrayElem::set_trace_attr(const char* object, const char* attribute,
    flow_eTraceType type, int inverted)
{
}

FlowTraceAttr FlowArrayElem::get_trace_attr()
{
  return FlowTraceAttr();
}

void* FlowArrayElem::get_ctx()
{
  return NULL;
}

void FlowArrayElem::configure(void* previous)
{
}

void FlowArrayElem::move_widgets(int x, int y)
{
}

void FlowArrayElem::get_object_name(char* name)
{
}

FlowArrayElem::~FlowArrayElem()
{
}
