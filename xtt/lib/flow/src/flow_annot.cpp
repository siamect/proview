/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <iostream>

#include "co_string.h"

#include "flow_annot.h"
#include "flow_node.h"
#include "flow_draw.h"
#include "flow_browctx.h"

void FlowAnnot::zoom()
{
  p.zoom();
}

void FlowAnnot::nav_zoom()
{
  p.nav_zoom();
}

void FlowAnnot::print_zoom()
{
  p.print_zoom();
}

void FlowAnnot::traverse(int x, int y)
{
  p.traverse(x, y);
}

void FlowAnnot::print(void* pos, void* node, int highlight)
{
  if (!(display_level & ctx->display_level))
    return;
  if (!((FlowNode*)node)->annotv[number])
    return;
  double idx
      = (ctx->print_zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  double size = 8.0 + 6.0 / 3 * idx;
  double x;
  double print_zoom_factor = 312;

  if (size <= 0)
    return;

  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  switch (annot_type) {
  case flow_eAnnotType_OneLine:
    if (relative_pos && ((FlowNode*)node)->relative_annot_pos) {
      x = ((FlowPoint*)pos)->print_z_x
          + MAX(p.print_z_x, ((FlowNode*)node)->rel_annot_x[number]
                    * ctx->print_zoom_factor);
    } else
      x = p.print_z_x + ((FlowPoint*)pos)->print_z_x;
    ctx->current_print->text(x, p.print_z_y + ((FlowPoint*)pos)->print_z_y,
        ((FlowNode*)node)->annotv[number],
        strlen(((FlowNode*)node)->annotv[number]), draw_type, size, 0);
    break;
  case flow_eAnnotType_MultiLine: {
    double z_h;
    int z_width, z_height;
    int z_x = int(p.print_z_x + ((FlowPoint*)pos)->print_z_x);
    int z_y = int(p.print_z_y + ((FlowPoint*)pos)->print_z_y);
    int len = 0;
    int line_cnt = 0;
    char* line = ((FlowNode*)node)->annotv[number];
    char* s;
    switch (ctx->current_print->type()) {
    case print_eType_Pdf: {
      ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type, text_size, &z_width,
          &z_height, ctx->print_zoom_factor / ctx->base_zoom_factor
              * (12 + 2 * text_size));
      float k = -2.5 * ctx->print_zoom_factor / ctx->base_zoom_factor + 2.62;
      z_height *= k;
      break;
    }
    default:
      ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type, text_size, &z_width,
          &z_height, ctx->print_zoom_factor / ctx->base_zoom_factor
              * (12 + 2 * text_size));
    }
    z_h = ctx->print_zoom_factor / ctx->base_zoom_factor * z_height;
    for (s = ((FlowNode*)node)->annotv[number]; *s; s++) {
      if (*s == 10) {
        if (len)
          ctx->current_print->text(
              z_x, z_y + line_cnt * z_h, line, len, draw_type, size, line_cnt);
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
    }
    if (len)
      ctx->current_print->text(
          z_x, z_y + line_cnt * z_h, line, len, draw_type, size, line_cnt);
    break;
  }
  case flow_eAnnotType_HelpText: {
    int z_width, z_height;
    int z_x = int(p.print_z_x + ((FlowPoint*)pos)->print_z_x);
    int z_y = int(p.print_z_y + ((FlowPoint*)pos)->print_z_y);
    int len = 0;
    int line_cnt = 0;
    int y_offs = 0;
    int last = 0;
    char* line = ((FlowNode*)node)->annotv[number];
    char* s;
    int lix;

    for (s = ((FlowNode*)node)->annotv[number];; s++) {
      if (*s == 0)
        last = 1;
      if (*s == 10 || last) {
        if (len) {
          *s = 0;
          if (str_NoCaseStrncmp(line, "<h1>", 4) == 0) {
            int h1_size = text_size + 4;
            switch (ctx->current_print->type()) {
            case print_eType_Pdf: {
              ctx->fdraw->get_text_extent(ctx, "Ag", 2,
                  flow_eDrawType_TextHelveticaBold, h1_size, &z_width,
                  &z_height, print_zoom_factor / ctx->base_zoom_factor
                      * (12 + 2 * h1_size));
              float k = -2.5 * print_zoom_factor / ctx->base_zoom_factor + 2.62;
              z_height *= k * ctx->print_zoom_factor / print_zoom_factor;
              size = 0.85 * z_height;
              break;
            }
            default:
              ctx->fdraw->get_text_extent(ctx, "Ag", 2,
                  flow_eDrawType_TextHelveticaBold, h1_size, &z_width,
                  &z_height, ctx->print_zoom_factor / ctx->base_zoom_factor
                      * (12 + 2 * h1_size));
              float k = -2.5 * ctx->print_zoom_factor / ctx->base_zoom_factor
                  + 2.62;
              z_height *= k;
              size = 8.0 + 48.0 / 3 * idx;
            }

            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->current_print->text(z_x, z_y + y_offs, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, size, line_cnt);
          } else if (str_NoCaseStrncmp(line, "<h2>", 4) == 0) {
            int h2_size = text_size + 2;
            switch (ctx->current_print->type()) {
            case print_eType_Pdf: {
              ctx->fdraw->get_text_extent(ctx, "Ag", 2,
                  flow_eDrawType_TextHelveticaBold, h2_size, &z_width,
                  &z_height, print_zoom_factor / ctx->base_zoom_factor
                      * (12 + 2 * h2_size));
              float k
                  = (-2.5 * print_zoom_factor / ctx->base_zoom_factor + 2.62)
                  * ctx->print_zoom_factor / print_zoom_factor;
              z_height *= k;
              size = 0.85 * z_height;
              break;
            }
            default:
              ctx->fdraw->get_text_extent(ctx, "Ag", 2,
                  flow_eDrawType_TextHelveticaBold, h2_size, &z_width,
                  &z_height, ctx->print_zoom_factor / ctx->base_zoom_factor
                      * (12 + 2 * h2_size));
              float k = -2.5 * ctx->print_zoom_factor / ctx->base_zoom_factor
                  + 2.62;
              z_height *= k;
              size = 8.0 + 20.0 / 3 * idx;
            }

            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->current_print->text(z_x, z_y + y_offs, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, size, line_cnt);
          } else if (str_NoCaseStrncmp(line, "<b>", 3) == 0) {
            switch (ctx->current_print->type()) {
            case print_eType_Pdf: {
              ctx->fdraw->get_text_extent(ctx, "Ag", 2,
                  flow_eDrawType_TextHelveticaBold, text_size, &z_width,
                  &z_height, print_zoom_factor / ctx->base_zoom_factor
                      * (12 + 2 * text_size));
              float k = -2.5 * print_zoom_factor / ctx->base_zoom_factor + 2.62;
              z_height *= k * ctx->print_zoom_factor / print_zoom_factor;
              size = 0.85 * z_height;
              break;
            }
            default:
              ctx->fdraw->get_text_extent(ctx, "Ag", 2,
                  flow_eDrawType_TextHelveticaBold, text_size, &z_width,
                  &z_height, ctx->print_zoom_factor / ctx->base_zoom_factor
                      * (12 + 2 * text_size));
              float k = -2.5 * ctx->print_zoom_factor / ctx->base_zoom_factor
                  + 2.62;
              z_height *= k;
              size = 8.0 + 6.0 / 3 * idx;
            }

            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->current_print->text(z_x, z_y + y_offs, &line[3], len - 3,
                flow_eDrawType_TextHelveticaBold, size, line_cnt);

          } else if (str_NoCaseStrncmp(line, "<image>", 7) == 0) {
          } else {
            if (str_NoCaseStrncmp(line, "<c>", 3) == 0)
              lix = 3;
            else
              lix = 0;
            char* s1 = strstr(line, "<link>");
            int eix = 0;
            char c = '\0';
            if (s1) {
              eix = strlen(s1);
              c = *s1;
              *s1 = 0;
            }
            switch (ctx->current_print->type()) {
            case print_eType_Pdf: {
              ctx->fdraw->get_text_extent(ctx, "Ag", 2,
                  flow_eDrawType_TextHelvetica, text_size, &z_width, &z_height,
                  print_zoom_factor / ctx->base_zoom_factor
                      * (12 + 2 * text_size));
              float k = -2.5 * print_zoom_factor / ctx->base_zoom_factor + 2.62;
              z_height *= k * ctx->print_zoom_factor / print_zoom_factor;
              break;
            }
            default:
              ctx->fdraw->get_text_extent(ctx, "Ag", 2,
                  flow_eDrawType_TextHelvetica, text_size, &z_width, &z_height,
                  ctx->print_zoom_factor / ctx->base_zoom_factor
                      * (12 + 2 * text_size));
            }

            float k
                = -2.5 * ctx->print_zoom_factor / ctx->base_zoom_factor + 2.62;
            z_height *= k;
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            size = 8.0 + 6.0 / 3 * idx;
            ctx->current_print->text(z_x, z_y + y_offs, &line[lix],
                len - lix - eix, draw_type, size, line_cnt);
            if (s1)
              *s1 = c;
          }
          if (!last)
            *s = 10;
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
      if (last)
        break;
    }
    break;
  }
  }
}

void FlowAnnot::save(std::ofstream& fp, flow_eSaveMode mode)
{
  fp << int(flow_eSave_Annot) << '\n';
  fp << int(flow_eSave_Annot_number) << FSPACE << number << '\n';
  fp << int(flow_eSave_Annot_draw_type) << FSPACE << int(draw_type) << '\n';
  fp << int(flow_eSave_Annot_text_size) << FSPACE << text_size << '\n';
  fp << int(flow_eSave_Annot_display_level) << FSPACE << int(display_level)
     << '\n';
  fp << int(flow_eSave_Annot_p) << '\n';
  p.save(fp, mode);
  fp << int(flow_eSave_Annot_annot_type) << FSPACE << int(annot_type) << '\n';
  fp << int(flow_eSave_End) << '\n';
}

void FlowAnnot::open(std::ifstream& fp)
{
  int type;
  int end_found = 0;
  char dummy[40];
  int tmp;

  for (;;) {
    fp >> type;
    switch (type) {
    case flow_eSave_Annot:
      break;
    case flow_eSave_Annot_number:
      fp >> number;
      break;
    case flow_eSave_Annot_draw_type:
      fp >> tmp;
      draw_type = (flow_eDrawType)tmp;
      break;
    case flow_eSave_Annot_text_size:
      fp >> text_size;
      break;
    case flow_eSave_Annot_display_level:
      fp >> tmp;
      display_level = (flow_mDisplayLevel)tmp;
      break;
    case flow_eSave_Annot_p:
      p.open(fp);
      break;
    case flow_eSave_Annot_annot_type:
      fp >> tmp;
      annot_type = (flow_eAnnotType)tmp;
      break;
    case flow_eSave_End:
      end_found = 1;
      break;
    default:
      std::cout << "FlowAnnot:open syntax error\n";
      fp.getline(dummy, sizeof(dummy));
    }
    if (end_found)
      break;
  }
}

void FlowAnnot::draw(void* pos, int highlight, int dimmed, int hot, void* node)
{
  int x;

  if (!(display_level & ctx->display_level))
    return;

  if (!((FlowNode*)node)->annotv[number])
    return;
  int idx = int(ctx->zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  switch (annot_type) {
  case flow_eAnnotType_OneLine:
    if (relative_pos && ((FlowNode*)node)->relative_annot_pos) {
      x = int(((FlowPoint*)pos)->z_x - ctx->offset_x
          + MAX(p.z_x,
                ((FlowNode*)node)->rel_annot_x[number] * ctx->zoom_factor));
    } else
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
    ctx->fdraw->text(ctx, x, p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y,
        ((FlowNode*)node)->annotv[number],
        strlen(((FlowNode*)node)->annotv[number]), draw_type, idx, highlight,
        dimmed, 0, tsize(text_size));
    if (((FlowNode*)node)->annotv_inputmode[number])
      ctx->fdraw->move_input(ctx, ((FlowNode*)node)->annotv_input[number], x,
          p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y,
          flow_ePosition_Absolute);
    break;
  case flow_eAnnotType_MultiLine: {
    int z_width, z_height;
    int z_x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
    int z_y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y;
    int len = 0;
    int line_cnt = 0;
    char* line = ((FlowNode*)node)->annotv[number];
    char* s;
    ctx->fdraw->get_text_extent(
        ctx, "Ag", 2, draw_type, idx, &z_width, &z_height, tsize(text_size));
    for (s = ((FlowNode*)node)->annotv[number]; *s; s++) {
      if (*s == 10) {
        if (len) {
          *s = 0;
          ctx->fdraw->text(ctx, z_x, z_y + line_cnt * z_height, line, len,
              draw_type, idx, highlight, dimmed, 0, tsize(text_size));
          *s = 10;
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
    }
    if (len)
      ctx->fdraw->text(ctx, z_x, z_y + line_cnt * z_height, line, len,
          draw_type, idx, highlight, dimmed, 0, tsize(text_size));
    break;
  }
  case flow_eAnnotType_HelpText: {
    int z_width, z_height;
    int z_x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
    int z_y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y;
    int len = 0;
    int line_cnt = 0;
    int y_offs = 0;
    int last = 0;
    char* line = ((FlowNode*)node)->annotv[number];
    char* s;
    int lix;

    for (s = ((FlowNode*)node)->annotv[number];; s++) {
      if (*s == 0)
        last = 1;
      if (*s == 10 || last) {
        if (len) {
          *s = 0;
          if (str_NoCaseStrncmp(line, "<h1>", 4) == 0) {
            int h1_size = text_size + 4;
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type,
                flow_eDrawType_TextHelveticaBold, &z_width, &z_height,
                tsize(h1_size));
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text(ctx, z_x, z_y + y_offs, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, idx, highlight, dimmed, 0,
                tsize(h1_size));
          } else if (str_NoCaseStrncmp(line, "<h2>", 4) == 0) {
            int h2_size = text_size + 2;
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type,
                flow_eDrawType_TextHelveticaBold, &z_width, &z_height,
                tsize(h2_size));
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text(ctx, z_x, z_y + y_offs, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, idx, highlight, dimmed, 0,
                tsize(h2_size));
          } else if (str_NoCaseStrncmp(line, "<b>", 3) == 0) {
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type,
                flow_eDrawType_TextHelveticaBold, &z_width, &z_height,
                tsize(text_size));
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text(ctx, z_x, z_y + y_offs, &line[3], len - 3,
                flow_eDrawType_TextHelveticaBold, idx, highlight, dimmed, 0,
                tsize(text_size));
          } else if (str_NoCaseStrncmp(line, "<image>", 7) == 0) {
          } else {
            if (str_NoCaseStrncmp(line, "<c>", 3) == 0)
              lix = 3;
            else
              lix = 0;
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type, draw_type,
                &z_width, &z_height, tsize(text_size));
            char* s1 = strstr(line, "<link>");
            int eix = 0;
            char c = '\0';
            if (s1) {
              eix = strlen(s1);
              c = *s1;
              *s1 = 0;
            }
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text(ctx, z_x, z_y + y_offs, &line[lix],
                len - lix - eix, draw_type, idx, highlight, dimmed, 0,
                tsize(text_size));
            if (s1)
              *s1 = c;
          }
          if (!last)
            *s = 10;
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
      if (last)
        break;
    }
    break;
  }
  }
}

void FlowAnnot::erase(void* pos, int hot, void* node)
{
  int x;

  if (!(display_level & ctx->display_level))
    return;

  if (!((FlowNode*)node)->annotv[number])
    return;
  int idx = int(ctx->zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  switch (annot_type) {
  case flow_eAnnotType_OneLine:
    if (relative_pos && ((FlowNode*)node)->relative_annot_pos) {
      x = int(((FlowPoint*)pos)->z_x - ctx->offset_x
          + MAX(p.z_x,
                ((FlowNode*)node)->rel_annot_x[number] * ctx->zoom_factor));
    } else
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
    ctx->fdraw->text_erase(ctx, x,
        p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y,
        ((FlowNode*)node)->annotv[number],
        strlen(((FlowNode*)node)->annotv[number]), draw_type, idx, 0,
        tsize(text_size));
    break;
  case flow_eAnnotType_MultiLine: {
    int z_width, z_height;
    int z_x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
    int z_y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y;
    int len = 0;
    int line_cnt = 0;
    char* line = ((FlowNode*)node)->annotv[number];
    char* s;
    ctx->fdraw->get_text_extent(
        ctx, "Ag", 2, draw_type, idx, &z_width, &z_height, tsize(text_size));
    for (s = ((FlowNode*)node)->annotv[number]; *s; s++) {
      if (*s == 10) {
        if (len) {
          *s = 0;
          ctx->fdraw->text_erase(ctx, z_x, z_y + line_cnt * z_height, line, len,
              draw_type, idx, 0, tsize(text_size));
          *s = 10;
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
    }
    if (len)
      ctx->fdraw->text_erase(ctx, z_x, z_y + line_cnt * z_height, line, len,
          draw_type, idx, 0, tsize(text_size));
    break;
  }
  case flow_eAnnotType_HelpText: {
    int z_width, z_height;
    int z_x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
    int z_y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y;
    int len = 0;
    int line_cnt = 0;
    int y_offs = 0;
    int last = 0;
    char* line = ((FlowNode*)node)->annotv[number];
    char* s;
    int lix;

    for (s = ((FlowNode*)node)->annotv[number];; s++) {
      if (*s == 0)
        last = 1;
      if (*s == 10 || last) {
        if (len) {
          *s = 0;
          if (str_NoCaseStrncmp(line, "<h1>", 4) == 0) {
            int h1_size = text_size + 4;
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type,
                flow_eDrawType_TextHelveticaBold, &z_width, &z_height,
                tsize(h1_size));
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text_erase(ctx, z_x, z_y + y_offs, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, idx, 0, tsize(h1_size));
          } else if (str_NoCaseStrncmp(line, "<h2>", 4) == 0) {
            int h2_size = text_size + 2;
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type,
                flow_eDrawType_TextHelveticaBold, &z_width, &z_height,
                tsize(h2_size));
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text_erase(ctx, z_x, z_y + y_offs, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, idx, 0, tsize(h2_size));
          } else if (str_NoCaseStrncmp(line, "<b>", 3) == 0) {
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type,
                flow_eDrawType_TextHelveticaBold, &z_width, &z_height,
                tsize(text_size));
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text_erase(ctx, z_x, z_y + y_offs, &line[3], len - 3,
                flow_eDrawType_TextHelveticaBold, idx, 0, tsize(text_size));
          } else if (str_NoCaseStrncmp(line, "<image>", 7) == 0) {
          } else {
            if (str_NoCaseStrncmp(line, "<c>", 3) == 0)
              lix = 3;
            else
              lix = 0;
            char* s1 = strstr(line, "<link>");
            int eix = 0;
            char c = '\0';
            if (s1) {
              eix = strlen(s1);
              c = *s1;
              *s1 = 0;
            }
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type, draw_type,
                &z_width, &z_height, tsize(text_size));
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text_erase(ctx, z_x, z_y + y_offs, &line[lix],
                len - lix - eix, draw_type, idx, 0, tsize(text_size));
            if (s1)
              *s1 = c;
          }
          if (!last)
            *s = 10;
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
      if (last)
        break;
    }
    break;
  }
  }
}

void FlowAnnot::draw_inverse(void* pos, int hot, void* node)
{
  int x;

  if (!(display_level & ctx->display_level))
    return;

  if (!((FlowNode*)node)->annotv[number])
    return;
  int idx = int(ctx->zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  switch (annot_type) {
  case flow_eAnnotType_OneLine:
    if (relative_pos && ((FlowNode*)node)->relative_annot_pos) {
      x = int(((FlowPoint*)pos)->z_x - ctx->offset_x
          + MAX(p.z_x,
                ((FlowNode*)node)->rel_annot_x[number] * ctx->zoom_factor));
    } else
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
    ctx->fdraw->text_inverse(ctx, x,
        p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y,
        ((FlowNode*)node)->annotv[number],
        strlen(((FlowNode*)node)->annotv[number]), draw_type, idx, 0,
        tsize(text_size));
    break;
  case flow_eAnnotType_MultiLine: {
    int z_width, z_height;
    int z_x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
    int z_y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y;
    int len = 0;
    int line_cnt = 0;
    char* line = ((FlowNode*)node)->annotv[number];
    char* s;
    ctx->fdraw->get_text_extent(
        ctx, "Ag", 2, draw_type, idx, &z_width, &z_height, tsize(text_size));
    for (s = ((FlowNode*)node)->annotv[number]; *s; s++) {
      if (*s == 10) {
        if (len) {
          *s = 0;
          ctx->fdraw->text_inverse(ctx, z_x, z_y + line_cnt * z_height, line,
              len, draw_type, idx, 0, tsize(text_size));
          *s = 10;
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
    }
    if (len)
      ctx->fdraw->text_inverse(ctx, z_x, z_y + line_cnt * z_height, line, len,
          draw_type, idx, 0, tsize(text_size));
    break;
  }
  case flow_eAnnotType_HelpText: {
    int z_width, z_height;
    int z_x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
    int z_y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y;
    int len = 0;
    int line_cnt = 0;
    int y_offs = 0;
    int last = 0;
    char* line = ((FlowNode*)node)->annotv[number];
    char* s;
    int lix;

    for (s = ((FlowNode*)node)->annotv[number];; s++) {
      if (*s == 0)
        last = 1;
      if (*s == 10 || last) {
        if (len) {
          *s = 0;
          if (str_NoCaseStrncmp(line, "<h1>", 4) == 0) {
            int h1_size = text_size + 4;
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type,
                flow_eDrawType_TextHelveticaBold, &z_width, &z_height,
                tsize(h1_size));
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text_inverse(ctx, z_x, z_y + y_offs, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, idx, 0, tsize(h1_size));
          } else if (str_NoCaseStrncmp(line, "<h2>", 4) == 0) {
            int h2_size = text_size + 2;
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type,
                flow_eDrawType_TextHelveticaBold, &z_width, &z_height,
                tsize(h2_size));
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text_inverse(ctx, z_x, z_y + y_offs, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, idx, 0, tsize(h2_size));
          } else if (str_NoCaseStrncmp(line, "<b>", 3) == 0) {
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type,
                flow_eDrawType_TextHelveticaBold, &z_width, &z_height,
                tsize(text_size));
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text_inverse(ctx, z_x, z_y + y_offs, &line[3], len - 3,
                flow_eDrawType_TextHelveticaBold, idx, 0, tsize(text_size));
          } else if (str_NoCaseStrncmp(line, "<image>", 7) == 0) {
          } else {
            if (str_NoCaseStrncmp(line, "<c>", 3) == 0)
              lix = 3;
            else
              lix = 0;
            char* s1 = strstr(line, "<link>");
            int eix = 0;
            char c = '\0';
            if (s1) {
              eix = strlen(s1);
              c = *s1;
              *s1 = 0;
            }
            ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type, draw_type,
                &z_width, &z_height, tsize(text_size));
            if (line_cnt > 0)
              y_offs += z_height;
            else
              y_offs += z_height / 3;
            ctx->fdraw->text_inverse(ctx, z_x, z_y + y_offs, &line[lix],
                len - lix - eix, draw_type, idx, 0, tsize(text_size));
            if (s1)
              *s = c;
          }
          if (!last)
            *s = 10;
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
      if (last)
        break;
    }
    break;
  }
  }
}

void FlowAnnot::nav_draw(void* pos, int highlight, void* node)
{
  if (!(display_level & ctx->display_level))
    return;
  if (!((FlowNode*)node)->annotv[number])
    return;
  int idx
      = int(ctx->nav_zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  switch (annot_type) {
  case flow_eAnnotType_OneLine:
    ctx->fdraw->nav_text(ctx,
        p.nav_z_x + ((FlowPoint*)pos)->nav_z_x - ctx->nav_offset_x,
        p.nav_z_y + ((FlowPoint*)pos)->nav_z_y - ctx->nav_offset_y,
        ((FlowNode*)node)->annotv[number],
        strlen(((FlowNode*)node)->annotv[number]), draw_type, idx, highlight, 0,
        nav_tsize(text_size));
    break;
  case flow_eAnnotType_MultiLine:
  case flow_eAnnotType_HelpText: {
    int z_width, z_height;
    int z_x = p.nav_z_x + ((FlowPoint*)pos)->nav_z_x - ctx->nav_offset_x;
    int z_y = p.nav_z_y + ((FlowPoint*)pos)->nav_z_y - ctx->nav_offset_y;
    int len = 0;
    int line_cnt = 0;
    char* line = ((FlowNode*)node)->annotv[number];
    char* s;
    ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type, idx, &z_width,
        &z_height, nav_tsize(text_size));
    for (s = ((FlowNode*)node)->annotv[number]; *s; s++) {
      if (*s == 10) {
        if (len) {
          *s = 0;
          ctx->fdraw->nav_text(ctx, z_x, z_y + line_cnt * z_height, line, len,
              draw_type, idx, highlight, 0, nav_tsize(text_size));
          *s = 10;
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
    }
    if (len)
      ctx->fdraw->nav_text(ctx, z_x, z_y + line_cnt * z_height, line, len,
          draw_type, idx, highlight, 0, nav_tsize(text_size));
    break;
  }
  }
}

void FlowAnnot::nav_erase(void* pos, void* node)
{
  if (!(display_level & ctx->display_level))
    return;
  if (!((FlowNode*)node)->annotv[number])
    return;
  int idx
      = int(ctx->nav_zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  switch (annot_type) {
  case flow_eAnnotType_OneLine:
    ctx->fdraw->nav_text_erase(ctx,
        p.nav_z_x + ((FlowPoint*)pos)->nav_z_x - ctx->nav_offset_x,
        p.nav_z_y + ((FlowPoint*)pos)->nav_z_y - ctx->nav_offset_y,
        ((FlowNode*)node)->annotv[number],
        strlen(((FlowNode*)node)->annotv[number]), draw_type, idx, 0,
        nav_tsize(text_size));
    break;
  case flow_eAnnotType_MultiLine:
  case flow_eAnnotType_HelpText: {
    int z_width, z_height;
    int z_x = p.nav_z_x + ((FlowPoint*)pos)->nav_z_x - ctx->nav_offset_x;
    int z_y = p.nav_z_y + ((FlowPoint*)pos)->nav_z_y - ctx->nav_offset_y;
    int len = 0;
    int line_cnt = 0;
    char* line = ((FlowNode*)node)->annotv[number];
    char* s;
    ctx->fdraw->get_text_extent(
        ctx, "Ag", 2, draw_type, idx, &z_width, &z_height, tsize(text_size));
    for (s = ((FlowNode*)node)->annotv[number]; *s; s++) {
      if (*s == 10) {
        if (len) {
          *s = 0;
          ctx->fdraw->nav_text_erase(ctx, z_x, z_y + line_cnt * z_height, line,
              len, draw_type, idx, 0, nav_tsize(text_size));
          *s = 10;
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
    }
    if (len)
      ctx->fdraw->nav_text_erase(ctx, z_x, z_y + line_cnt * z_height, line, len,
          draw_type, idx, 0, nav_tsize(text_size));
    break;
  }
  }
}

int FlowAnnot::event_handler(
    void* pos, flow_eEvent event, int x, int y, void* node)
{
  FlowPoint* p;

  p = (FlowPoint*)pos;
  /**
    if ( p1.z_x + ((FlowPoint *)pos)->z_x - ctx->offset_x < x &&
         x < p2.z_x  + ((FlowPoint *)pos)->z_x - ctx->offset_x &&
         p1.z_y  + ((FlowPoint *)pos)->z_y - ctx->offset_y < y &&
         y < p2.z_y + ((FlowPoint *)pos)->z_y - ctx->offset_y)
    {
      std::cout << "Event handler: Hit in text\n";
      return 1;
    }
    else
  ***/
  return 0;
}

void FlowAnnot::get_borders(double pos_x, double pos_y, double* x_right,
    double* x_left, double* y_high, double* y_low, void* node)
{
  if (!((FlowNode*)node)->annotv[number])
    return;
  if (display_level != flow_mDisplayLevel_1)
    return;

  if (annot_type == flow_eAnnotType_MultiLine
      || annot_type == flow_eAnnotType_HelpText) {
    double width, height;
    int rows;

    flow_measure_annot_text(ctx, ((FlowNode*)node)->annotv[number], draw_type,
        text_size, annot_type, &width, &height, &rows);
    if (pos_x + p.x < *x_left)
      *x_left = pos_x + p.x;
    if (pos_x + p.x + width > *x_right)
      *x_right = pos_x + p.x + width;
    if (pos_y + p.y < *y_low)
      *y_low = pos_y + p.y;
    if (pos_y + p.y + height > *y_high)
      *y_high = pos_y + p.y + height;
  }
}

void FlowAnnot::measure_annot(char* text, double* width, double* height)
{
  int idx = int(ctx->zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  int z_width, z_height;

  if (idx < 0) {
    *width = 0;
    *height = 0;
    return;
  }
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  switch (annot_type) {
  case flow_eAnnotType_OneLine:
    ctx->fdraw->get_text_extent(ctx, text, strlen(text), draw_type, idx,
        &z_width, &z_height, tsize(text_size));
    break;
  case flow_eAnnotType_MultiLine: {
    int l_width, l_height;
    int len = 0;
    int line_cnt = 0;
    char* line = text;
    char* s;

    ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type, text_size, &z_width,
        &z_height, tsize(text_size));

    z_width = 0;
    for (s = text; *s; s++) {
      if (*s == 10) {
        if (len) {
          ctx->fdraw->get_text_extent(ctx, line, len, draw_type, idx, &l_width,
              &l_height, tsize(text_size));
          z_width = MAX(z_width, l_width);
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
    }
    if (len) {
      ctx->fdraw->get_text_extent(ctx, line, len, draw_type, idx, &l_width,
          &l_height, tsize(text_size));
      z_width = MAX(z_width, l_width);
      line_cnt++;
    }
    z_height = line_cnt * z_height;
    break;
  }
  case flow_eAnnotType_HelpText: {
    int l_width, l_height;
    int len = 0;
    int line_cnt = 0;
    int last = 0;
    char* line = text;
    char* s;
    int lix;

    z_width = 0;
    z_height = 0;
    for (s = text;; s++) {
      if (*s == 0)
        last = 1;
      if (*s == 10 || last) {
        if (len) {
          *s = 0;
          if (str_NoCaseStrncmp(line, "<h1>", 4) == 0) {
            int h1_size = text_size + 4;
            ctx->fdraw->get_text_extent(ctx, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, idx, &l_width, &l_height,
                tsize(h1_size));
            z_height += l_height;
            z_width = MAX(z_width, l_width);
          } else if (str_NoCaseStrncmp(line, "<h2>", 4) == 0) {
            int h2_size = text_size + 2;
            ctx->fdraw->get_text_extent(ctx, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, idx, &l_width, &l_height,
                tsize(h2_size));
            z_height += l_height;
            z_width = MAX(z_width, l_width);
          } else if (str_NoCaseStrncmp(line, "<b>", 3) == 0) {
            ctx->fdraw->get_text_extent(ctx, &line[3], len - 3,
                flow_eDrawType_TextHelveticaBold, idx, &l_width, &l_height,
                tsize(text_size));
            z_height += l_height;
            z_width = MAX(z_width, l_width);
          } else if (str_NoCaseStrncmp(line, "<image>", 7) == 0) {
          } else {
            if (str_NoCaseStrncmp(line, "<c>", 3) == 0)
              lix = 3;
            else
              lix = 0;
            char* s1 = strstr(line, "<link>");
            int eix = 0;
            char c = '\0';
            if (s1) {
              eix = strlen(s1);
              c = *s1;
              *s1 = 0;
            }

            ctx->fdraw->get_text_extent(ctx, &line[lix], len - lix - eix,
                draw_type, idx, &l_width, &l_height, tsize(text_size));
            z_height += l_height;
            z_width = MAX(z_width, l_width);

            if (s1)
              *s1 = c;
          }
          if (!last)
            *s = 10;
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
      if (last)
        break;
    }
    break;
  }
  }
  *width = z_width / ctx->zoom_factor;
  *height = z_height / ctx->zoom_factor;
}

void FlowAnnot::configure_annotations(void* pos, void* node)
{
  double width, height;

  if (!((FlowNode*)node)->annotv[number])
    return;

  if (relative_pos)
    ((FlowNode*)node)->rel_annot_x[number]
        = ((FlowNode*)node)->relative_annot_x;
  measure_annot(((FlowNode*)node)->annotv[number], &width, &height);
  ((FlowNode*)node)->relative_annot_x
      = MAX(p.x, ((FlowNode*)node)->rel_annot_x[number]) + width
      + ((BrowCtx*)ctx)->annotation_space;
}

void FlowAnnot::open_annotation_input(void* pos, void* node)
{
  if (!((FlowNode*)node)->annotv[number])
    return;

  int x, width_pix, height_pix;
  double width, height;
  int idx = int(ctx->zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  idx = MAX(0, idx);
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  switch (annot_type) {
  case flow_eAnnotType_OneLine:
    measure_annot(((FlowNode*)node)->annotv[number], &width, &height);
    width_pix = int(width * ctx->zoom_factor);
    height_pix = int(height * ctx->zoom_factor);
    if (relative_pos && ((FlowNode*)node)->relative_annot_pos) {
      x = int(((FlowPoint*)pos)->z_x - ctx->offset_x
          + MAX(p.z_x,
                ((FlowNode*)node)->rel_annot_x[number] * ctx->zoom_factor));
    } else
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
    ctx->fdraw->create_input(ctx, x,
        p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y,
        ((FlowNode*)node)->annotv[number],
        strlen(((FlowNode*)node)->annotv[number]), idx, width_pix, height_pix,
        node, number, &((FlowNode*)node)->annotv_input[number]);
    break;
  case flow_eAnnotType_MultiLine:
  case flow_eAnnotType_HelpText:
    // Not yet implemented...
    break;
  }
}

void FlowAnnot::close_annotation_input(void* node)
{
  if (!((FlowNode*)node)->annotv_inputmode[number])
    return;

  ctx->fdraw->close_input(ctx, ((FlowNode*)node)->annotv_input[number]);
}

int FlowAnnot::get_annotation_input(void* node, char** text)
{
  if (!((FlowNode*)node)->annotv_inputmode[number])
    return 0;

  return ctx->fdraw->get_input(
      ctx, ((FlowNode*)node)->annotv_input[number], text);
}

void FlowAnnot::move_widgets(void* node, int x, int y)
{
  if (!((FlowNode*)node)->annotv_inputmode[number])
    return;

  ctx->fdraw->move_input(ctx, ((FlowNode*)node)->annotv_input[number], x, y,
      flow_ePosition_Relative);
}

std::ostream& operator<<(std::ostream& o, const FlowAnnot a)
{
  o << '(' << a.p.x << ',' << a.p.y << ')';
  return o;
}

void flow_measure_annot_text(FlowCtx* ctx, char* text, flow_eDrawType draw_type,
    int text_size, flow_eAnnotType annot_type, double* width, double* height,
    int* rows)
{
  int z_width, z_height;

  switch (annot_type) {
  case flow_eAnnotType_OneLine:
    ctx->fdraw->get_text_extent(ctx, text, strlen(text), draw_type, text_size,
        &z_width, &z_height, (8 + 2 * text_size));
    *rows = 1;
    break;
  case flow_eAnnotType_MultiLine: {
    int l_width, l_height;
    int len = 0;
    int line_cnt = 0;
    char* line = text;
    char* s;

    ctx->fdraw->get_text_extent(ctx, "Ag", 2, draw_type, text_size, &z_width,
        &z_height, (8 + 2 * text_size));

    z_width = 0;
    for (s = text; *s; s++) {
      if (*s == 10) {
        if (len) {
          ctx->fdraw->get_text_extent(ctx, line, len, draw_type, text_size,
              &l_width, &l_height, (8 + 2 * text_size));
          z_width = MAX(z_width, l_width);
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
    }
    if (len) {
      ctx->fdraw->get_text_extent(ctx, line, len, draw_type, text_size,
          &l_width, &l_height, (8 + 2 * text_size));
      z_width = MAX(z_width, l_width);
      line_cnt++;
    }
    z_height = line_cnt * z_height;
    *rows = MAX(line_cnt, 1);
    break;
  }
  case flow_eAnnotType_HelpText: {
    int l_width, l_height;
    int len = 0;
    int line_cnt = 0;
    int last = 0;
    char* line = text;
    char* s;
    int lix;

    z_width = 0;
    z_height = 0;
    for (s = text;; s++) {
      if (*s == 0)
        last = 1;
      if (*s == 10 || last) {
        if (len) {
          *s = 0;
          if (str_NoCaseStrncmp(line, "<h1>", 4) == 0) {
            int h1_size = text_size + 4;
            ctx->fdraw->get_text_extent(ctx, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, text_size, &l_width,
                &l_height, (8 + 2 * h1_size));
            z_height += l_height;
            z_width = MAX(z_width, l_width);
          } else if (str_NoCaseStrncmp(line, "<h2>", 4) == 0) {
            int h2_size = text_size + 2;
            ctx->fdraw->get_text_extent(ctx, &line[4], len - 4,
                flow_eDrawType_TextHelveticaBold, text_size, &l_width,
                &l_height, (8 + 2 * h2_size));
            z_height += l_height;
            z_width = MAX(z_width, l_width);
          } else if (str_NoCaseStrncmp(line, "<b>", 3) == 0) {
            ctx->fdraw->get_text_extent(ctx, &line[3], len - 3,
                flow_eDrawType_TextHelveticaBold, text_size, &l_width,
                &l_height, (8 + 2 * text_size));
            z_height += l_height;
            z_width = MAX(z_width, l_width);
          } else if (str_NoCaseStrncmp(line, "<image>", 7) == 0) {
          } else {
            if (str_NoCaseStrncmp(line, "<c>", 3) == 0)
              lix = 3;
            else
              lix = 0;
            char* s1 = strstr(line, "<link>");
            int eix = 0;
            char c = '\0';
            if (s1) {
              eix = strlen(s1);
              c = *s1;
              *s1 = 0;
            }
            ctx->fdraw->get_text_extent(ctx, &line[lix], len - lix - eix,
                flow_eDrawType_TextHelvetica, text_size, &l_width, &l_height,
                (8 + 2 * text_size));
            z_height += l_height;
            z_width = MAX(z_width, l_width);

            if (s1)
              *s1 = c;
          }
          if (!last)
            *s = 10;
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
      if (last)
        break;
    }
    break;
  }
  }
  *width = 1.0 * z_width / ctx->base_zoom_factor;
  *height = 1.0 * z_height / ctx->base_zoom_factor;
}

double FlowAnnot::tsize(int text_idx)
{
  return ctx->zoom_factor / ctx->base_zoom_factor * (8 + 2 * text_idx);
}

double FlowAnnot::nav_tsize(int text_idx)
{
  return ctx->zoom_factor / ctx->base_zoom_factor * (8 + 2 * text_idx);
}
