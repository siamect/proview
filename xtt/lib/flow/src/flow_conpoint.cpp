/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <math.h>
#include <string.h>

#include <iostream>

#include "flow_conpoint.h"
#include "flow_draw.h"
#include "flow_node.h"

FlowConPoint::FlowConPoint(
    FlowCtx* flow_ctx, double x, double y, int cp_num, flow_eDirection d)
    : ctx(flow_ctx), number(cp_num), p(flow_ctx, x, y), direction(d),
      trace_attr_type(flow_eTraceType_Boolean)
{
  strcpy(trace_attribute, "");
}

void FlowConPoint::zoom()
{
  p.zoom();
}

void FlowConPoint::nav_zoom()
{
  p.nav_zoom();
}

void FlowConPoint::print_zoom()
{
  p.print_zoom();
}

void FlowConPoint::save(std::ofstream& fp, flow_eSaveMode mode)
{
  fp << int(flow_eSave_ConPoint) << '\n';
  fp << int(flow_eSave_ConPoint_number) << FSPACE << number << '\n';
  fp << int(flow_eSave_ConPoint_direction) << FSPACE << int(direction) << '\n';
  fp << int(flow_eSave_ConPoint_p) << '\n';
  p.save(fp, mode);
  fp << int(flow_eSave_ConPoint_trace_attribute) << FSPACE << trace_attribute
     << '\n';
  fp << int(flow_eSave_ConPoint_trace_attr_type) << FSPACE
     << int(trace_attr_type) << '\n';
  fp << int(flow_eSave_End) << '\n';
}

void FlowConPoint::open(std::ifstream& fp)
{
  int type;
  int end_found = 0;
  char dummy[40];
  int tmp;

  for (;;) {
    fp >> type;
    switch (type) {
    case flow_eSave_ConPoint:
      break;
    case flow_eSave_ConPoint_number:
      fp >> number;
      break;
    case flow_eSave_ConPoint_direction:
      fp >> tmp;
      direction = (flow_eDirection)tmp;
      break;
    case flow_eSave_ConPoint_p:
      p.open(fp);
      break;
    case flow_eSave_ConPoint_trace_attribute:
      fp.get();
      fp.getline(trace_attribute, sizeof(trace_attribute));
      break;
    case flow_eSave_ConPoint_trace_attr_type:
      fp >> tmp;
      trace_attr_type = (flow_eTraceType)tmp;
      break;
    case flow_eSave_End:
      end_found = 1;
      break;
    default:
      std::cout << "FlowConPoint:open syntax error\n";
      fp.getline(dummy, sizeof(dummy));
    }
    if (end_found)
      break;
  }
}

void FlowConPoint::traverse(int x, int y)
{
  p.traverse(x, y);
}

int FlowConPoint::event_handler(
    void* pos, flow_eEvent event, int x, int y, void* node)
{
  return 0;
}

void FlowConPoint::conpoint_select(
    void* pos, int x, int y, double* distance, void** cp)
{
  int px, py;
  double dist;

  px = ((FlowPoint*)pos)->z_x - ctx->offset_x + p.z_x;
  py = ((FlowPoint*)pos)->z_y - ctx->offset_y + p.z_y;

  dist = sqrt(1.0 * (x - px) * (x - px) + 1.0 * (y - py) * (y - py));
  if (dist < *distance) {
    *distance = dist;
    *cp = (void*)this;
  }
}

int FlowConPoint::get_conpoint(
    int num, double* x, double* y, flow_eDirection* dir)
{
  if (number == num) {
    *x = p.x;
    *y = p.y;
    *dir = direction;
    return 1;
  }
  return 0;
}

void FlowConPoint::set_trace_attr(const char* object, const char* attribute,
    flow_eTraceType type, int inverted)
{
  strncpy(trace_attribute, attribute, sizeof(trace_attribute));
  trace_attr_type = type;
}

FlowTraceAttr FlowConPoint::get_trace_attr()
{
  FlowTraceAttr attr;
  strncpy(attr.attribute, trace_attribute, sizeof(attr.attribute));
  attr.type = trace_attr_type;
  attr.inverted = 0;
  return attr;
}

void FlowConPoint::draw(
    void* pos, int highlight, int dimmed, int hot, void* node)
{
  int line_width = 1;
  int idx = int(ctx->zoom_factor / ctx->base_zoom_factor * line_width - 1) + 2;
  idx = MAX(0, idx);
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  int size = (int)(0.025 * ctx->zoom_factor);
  int x, y;

  if (((FlowNode*)node)->sel_conpoint1 == number
      || ((FlowNode*)node)->sel_conpoint2 == number) {
    switch (direction) {
    case flow_eDirection_Up:
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x - size / 2;
      y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y - size;
      ;
      break;
    case flow_eDirection_Down:
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x - size / 2;
      y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y;
      break;
    case flow_eDirection_Right:
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x - size;
      y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y - size / 2;
      break;
    case flow_eDirection_Left:
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
      y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y - size / 2;
      break;
    default:
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x - size / 2;
      y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y - size / 2;
    }
    ctx->fdraw->arc(
        ctx, x, y, size, size, 0, 360, flow_eDrawType_LineRed, idx, 0, 0);
  }
}

void FlowConPoint::erase(void* pos, int hot, void* node)
{
  int line_width = 1;
  int idx = int(ctx->zoom_factor / ctx->base_zoom_factor * line_width - 1) + 2;
  idx = MAX(0, idx);
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  int size = (int)(0.025 * ctx->zoom_factor);
  int x, y;

  if (((FlowNode*)node)->sel_conpoint1 == number
      || ((FlowNode*)node)->sel_conpoint2 == number) {
    switch (direction) {
    case flow_eDirection_Up:
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x - size / 2;
      y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y - size;
      ;
      break;
    case flow_eDirection_Down:
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x - size / 2;
      y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y;
      break;
    case flow_eDirection_Right:
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x - size;
      y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y - size / 2;
      break;
    case flow_eDirection_Left:
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x;
      y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y - size / 2;
      break;
    default:
      x = p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x - size / 2;
      y = p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y - size / 2;
    }
    ctx->fdraw->arc_erase(ctx, x, y, size, size, 0, 360, idx);
  }
}

std::ostream& operator<<(std::ostream& o, const FlowConPoint cp)
{
  o << '(' << cp.p.x << ',' << cp.p.y << ')';
  return o;
}
