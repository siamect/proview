/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <string.h>

#include <iostream>

#include "flow_conclass.h"

FlowConClass::FlowConClass(FlowCtx* flow_ctx, const char* name,
    flow_eConType contype, flow_eCorner cornertype, flow_eDrawType d_type,
    int line_w, double arrow_w, double arrow_l, double round_corner_amnt,
    flow_eConGroup grp)
    : ctx(flow_ctx), zero(flow_ctx, 0, 0), con_type(contype),
      corner(cornertype), draw_type(d_type), line_width(line_w),
      arrow_width(arrow_w), arrow_length(arrow_l),
      round_corner_amount(round_corner_amnt), group(grp)
{
  strcpy(cc_name, name);
  zero.nav_zoom();
  zero.print_zoom();
}

void FlowConClass::save(std::ofstream& fp, flow_eSaveMode mode)
{
  if ((mode == flow_eSaveMode_Trace && group != flow_eConGroup_Trace)
      || (mode == flow_eSaveMode_Edit && group == flow_eConGroup_Trace))
    return;
  fp << int(flow_eSave_ConClass) << '\n';
  fp << int(flow_eSave_ConClass_cc_name) << FSPACE << cc_name << '\n';
  fp << int(flow_eSave_ConClass_con_type) << FSPACE << int(con_type) << '\n';
  fp << int(flow_eSave_ConClass_corner) << FSPACE << int(corner) << '\n';
  fp << int(flow_eSave_ConClass_draw_type) << FSPACE << int(draw_type) << '\n';
  fp << int(flow_eSave_ConClass_line_width) << FSPACE << line_width << '\n';
  fp << int(flow_eSave_ConClass_arrow_width) << FSPACE << arrow_width << '\n';
  fp << int(flow_eSave_ConClass_arrow_length) << FSPACE << arrow_length << '\n';
  fp << int(flow_eSave_ConClass_round_corner_amount) << FSPACE
     << round_corner_amount << '\n';
  fp << int(flow_eSave_ConClass_group) << FSPACE << int(group) << '\n';
  fp << int(flow_eSave_End) << '\n';
}

void FlowConClass::open(std::ifstream& fp)
{
  int type;
  int end_found = 0;
  char dummy[40];
  int tmp;

  for (;;) {
    fp >> type;
    switch (type) {
    case flow_eSave_ConClass:
      break;
    case flow_eSave_ConClass_cc_name:
      fp.get();
      fp.getline(cc_name, sizeof(cc_name));
      break;
    case flow_eSave_ConClass_con_type:
      fp >> tmp;
      con_type = (flow_eConType)tmp;
      break;
    case flow_eSave_ConClass_corner:
      fp >> tmp;
      corner = (flow_eCorner)tmp;
      break;
    case flow_eSave_ConClass_draw_type:
      fp >> tmp;
      draw_type = (flow_eDrawType)tmp;
      break;
    case flow_eSave_ConClass_line_width:
      fp >> line_width;
      break;
    case flow_eSave_ConClass_arrow_width:
      fp >> arrow_width;
      break;
    case flow_eSave_ConClass_arrow_length:
      fp >> arrow_length;
      break;
    case flow_eSave_ConClass_round_corner_amount:
      fp >> round_corner_amount;
      break;
    case flow_eSave_ConClass_group:
      fp >> tmp;
      group = (flow_eConGroup)tmp;
      break;
    case flow_eSave_End:
      end_found = 1;
      break;
    default:
      std::cout << "FlowConClass:open syntax error\n";
      fp.getline(dummy, sizeof(dummy));
    }
    if (end_found)
      break;
  }
}

void FlowConClass::get_object_name(char* name)
{
  strcpy(name, cc_name);
}

std::ostream& operator<<(std::ostream& o, const FlowConClass cc)
{
  o << "ConClass: " << cc.cc_name;
  return o;
}
