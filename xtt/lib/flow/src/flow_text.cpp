/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <string.h>

#include <iostream>

#include "flow_text.h"
#include "flow_draw.h"

FlowText::FlowText(FlowCtx* flow_ctx, const char* text1, double x, double y,
    flow_eDrawType d_type, int t_size)
    : ctx(flow_ctx), p(flow_ctx, x, y), draw_type(d_type), text_size(t_size)
{
  strncpy(text, text1, sizeof(text));
}

void FlowText::zoom()
{
  p.zoom();
}

void FlowText::nav_zoom()
{
  p.nav_zoom();
}

void FlowText::print_zoom()
{
  p.print_zoom();
}

void FlowText::traverse(int x, int y)
{
  p.traverse(x, y);
}

void FlowText::print(void* pos, void* node, int highlight)
{
  double idx
      = (ctx->print_zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  double size = 8.0 + 6.0 / 3 * idx;

  if (size <= 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  ctx->current_print->text(p.print_z_x + ((FlowPoint*)pos)->print_z_x,
      p.print_z_y + ((FlowPoint*)pos)->print_z_y, text, strlen(text), draw_type,
      size, 0);
}

void FlowText::save(std::ofstream& fp, flow_eSaveMode mode)
{
  fp << int(flow_eSave_Text) << '\n';
  fp << int(flow_eSave_Text_text_size) << FSPACE << text_size << '\n';
  fp << int(flow_eSave_Text_draw_type) << FSPACE << int(draw_type) << '\n';
  fp << int(flow_eSave_Text_text) << FSPACE << text << '\n';
  fp << int(flow_eSave_Text_p) << '\n';
  p.save(fp, mode);
  fp << int(flow_eSave_End) << '\n';
}

void FlowText::open(std::ifstream& fp)
{
  int type;
  int end_found = 0;
  char dummy[40];
  int tmp;

  for (;;) {
    fp >> type;
    switch (type) {
    case flow_eSave_Text:
      break;
    case flow_eSave_Text_text_size:
      fp >> text_size;
      break;
    case flow_eSave_Text_draw_type:
      fp >> tmp;
      draw_type = (flow_eDrawType)tmp;
      break;
    case flow_eSave_Text_text:
      fp.get();
      fp.getline(text, sizeof(text));
      break;
    case flow_eSave_Text_p:
      p.open(fp);
      break;
    case flow_eSave_End:
      end_found = 1;
      break;
    default:
      std::cout << "FlowText:open syntax error\n";
      fp.getline(dummy, sizeof(dummy));
    }
    if (end_found)
      break;
  }
}

void FlowText::draw(void* pos, int highlight, int dimmed, int hot, void* node)
{
  int idx = int(ctx->zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  ctx->fdraw->text(ctx, p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x,
      p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y, text, strlen(text),
      draw_type, idx, highlight, dimmed, 0,
      ctx->zoom_factor / ctx->base_zoom_factor * (8 + 2 * text_size));
}

void FlowText::draw_inverse(void* pos, int hot, void* node)
{
  int idx = int(ctx->zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  ctx->fdraw->text_inverse(ctx, p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x,
      p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y, text, strlen(text),
      draw_type, idx, 0,
      ctx->zoom_factor / ctx->base_zoom_factor * (8 + 2 * text_size));
}

void FlowText::erase(void* pos, int hot, void* node)
{
  int idx = int(ctx->zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  ctx->fdraw->text_erase(ctx, p.z_x + ((FlowPoint*)pos)->z_x - ctx->offset_x,
      p.z_y + ((FlowPoint*)pos)->z_y - ctx->offset_y, text, strlen(text),
      draw_type, idx, 0,
      ctx->zoom_factor / ctx->base_zoom_factor * (8 + 2 * text_size));
}

void FlowText::nav_draw(void* pos, int highlight, void* node)
{
  int idx
      = int(ctx->nav_zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  ctx->fdraw->nav_text(ctx,
      p.nav_z_x + ((FlowPoint*)pos)->nav_z_x - ctx->nav_offset_x,
      p.nav_z_y + ((FlowPoint*)pos)->nav_z_y - ctx->nav_offset_y, text,
      strlen(text), draw_type, idx, highlight, 0,
      ctx->nav_zoom_factor / ctx->base_zoom_factor * (8 + 2 * text_size));
}

void FlowText::nav_erase(void* pos, void* node)
{
  int idx
      = int(ctx->nav_zoom_factor / ctx->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  ctx->fdraw->nav_text_erase(ctx,
      p.nav_z_x + ((FlowPoint*)pos)->nav_z_x - ctx->nav_offset_x,
      p.nav_z_y + ((FlowPoint*)pos)->nav_z_y - ctx->nav_offset_y, text,
      strlen(text), draw_type, idx, 0,
      ctx->nav_zoom_factor / ctx->base_zoom_factor * (8 + 2 * text_size));
}

int FlowText::event_handler(
    void* pos, flow_eEvent event, int x, int y, void* node)
{
  FlowPoint* p;

  p = (FlowPoint*)pos;
  /**
    if ( p1.z_x + ((FlowPoint *)pos)->z_x - ctx->offset_x < x &&
         x < p2.z_x  + ((FlowPoint *)pos)->z_x - ctx->offset_x &&
         p1.z_y  + ((FlowPoint *)pos)->z_y - ctx->offset_y < y &&
         y < p2.z_y + ((FlowPoint *)pos)->z_y - ctx->offset_y)
    {
      std::cout << "Event handler: Hit in text\n";
      return 1;
    }
    else
  ***/
  return 0;
}

void FlowText::get_borders(double pos_x, double pos_y, double* x_right,
    double* x_left, double* y_high, double* y_low, void* node)
{
  /*
    if ( pos_x + p1.x < *x_left)
      *x_left = pos_x + p1.x;
    if ( pos_x + p2.x < *x_left)
      *x_left = pos_x + p1.x;
    if ( pos_x + p1.x > *x_right)
      *x_right = pos_x + p2.x;
    if ( pos_x + p2.x > *x_right)
      *x_right = pos_x + p2.x;
    if ( pos_y + p1.y < *y_low)
      *y_low = pos_y + p1.y;
    if ( pos_y + p2.y < *y_low)
      *y_low = pos_y + p1.y;
    if ( pos_y + p1.y > *y_high)
      *y_high = pos_y + p2.y;
    if ( pos_y + p2.y > *y_high)
      *y_high = pos_y + p2.y;
  */
}

void FlowText::move(
    void* pos, double x, double y, int highlight, int dimmed, int hot)
{
  erase(pos, hot, NULL);
  nav_erase(pos, NULL);
  p.x = x;
  p.y = y;
  zoom();
  nav_zoom();
  draw(pos, highlight, dimmed, hot, NULL);
  nav_draw(pos, highlight, NULL);
}

void FlowText::shift(void* pos, double delta_x, double delta_y, int highlight,
    int dimmed, int hot)
{
  erase(pos, hot, NULL);
  nav_erase(pos, NULL);
  p.x += delta_x;
  p.y += delta_y;
  zoom();
  nav_zoom();

  draw(pos, highlight, dimmed, hot, NULL);
  nav_draw(pos, highlight, NULL);
}

std::ostream& operator<<(std::ostream& o, const FlowText t)
{
  o << '(' << t.p.x << ',' << t.p.y << ')' << t.text;
  return o;
}
