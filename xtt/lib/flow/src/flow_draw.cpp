/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "flow_draw.h"

FlowDraw::FlowDraw() : basectx(0), click_sensitivity(0), imlib(0)
{
}

FlowDraw::~FlowDraw()
{
}

void FlowDraw::enable_event(FlowCtx* ctx, flow_eEvent event,
    flow_eEventType event_type,
    int (*event_cb)(FlowCtx* ctx, flow_tEvent event))
{
}

void FlowDraw::clear(FlowCtx* ctx)
{
}

void FlowDraw::nav_clear(FlowCtx* ctx)
{
}

void FlowDraw::get_window_size(FlowCtx* ctx, int* width, int* height)
{
}

void FlowDraw::get_nav_window_size(FlowCtx* ctx, int* width, int* height)
{
}

void FlowDraw::set_nav_window_size(FlowCtx* ctx, int width, int height)
{
}

int FlowDraw::rect(FlowCtx* ctx, int x, int y, int width, int height,
    flow_eDrawType gc_type, int idx, int highlight, int dimmed)
{
  return 1;
}

int FlowDraw::rect_erase(
    FlowCtx* ctx, int x, int y, int width, int height, int idx)
{
  return 1;
}

int FlowDraw::nav_rect(FlowCtx* ctx, int x, int y, int width, int height,
    flow_eDrawType gc_type, int idx, int highlight)
{
  return 1;
}

int FlowDraw::nav_rect_erase(
    FlowCtx* ctx, int x, int y, int width, int height, int idx)
{
  return 1;
}

int FlowDraw::triangle(FlowCtx* ctx, int x, int y, int width, int height,
    flow_eDrawType gc_type, int idx, int highlight, int dimmed)
{
  return 1;
}

int FlowDraw::triangle_erase(
    FlowCtx* ctx, int x, int y, int width, int height, int idx)
{
  return 1;
}

int FlowDraw::nav_triangle(FlowCtx* ctx, int x, int y, int width, int height,
    flow_eDrawType gc_type, int idx, int highlight)
{
  return 1;
}

int FlowDraw::nav_fill_triangle(
    FlowCtx* ctx, int x, int y, int width, int height, flow_eDrawType gc_type)
{
  return 1;
}

int FlowDraw::nav_triangle_erase(
    FlowCtx* ctx, int x, int y, int width, int height, int idx)
{
  return 1;
}

int FlowDraw::arrow(FlowCtx* ctx, int x1, int y1, int x2, int y2, int x3, int y3,
    flow_eDrawType gc_type, int idx, int highlight)
{
  return 1;
}

int FlowDraw::arrow_erase(
    FlowCtx* ctx, int x1, int y1, int x2, int y2, int x3, int y3, int idx)
{
  return 1;
}

int FlowDraw::nav_arrow(FlowCtx* ctx, int x1, int y1, int x2, int y2, int x3,
    int y3, flow_eDrawType gc_type, int idx, int highlight)
{
  return 1;
}

int FlowDraw::nav_arrow_erase(
    FlowCtx* ctx, int x1, int y1, int x2, int y2, int x3, int y3, int idx)
{
  return 1;
}

int FlowDraw::arc(FlowCtx* ctx, int x, int y, int width, int height, int angle1,
    int angle2, flow_eDrawType gc_type, int idx, int highlight, int dimmed)
{
  return 1;
}

int FlowDraw::arc_erase(FlowCtx* ctx, int x, int y, int width, int height,
    int angle1, int angle2, int idx)
{
  return 1;
}

int FlowDraw::nav_arc(FlowCtx* ctx, int x, int y, int width, int height,
    int angle1, int angle2, flow_eDrawType gc_type, int idx, int highlight)
{
  return 1;
}

int FlowDraw::nav_arc_erase(FlowCtx* ctx, int x, int y, int width, int height,
    int angle1, int angle2, int idx)
{
  return 1;
}

int FlowDraw::line(FlowCtx* ctx, int x1, int y1, int x2, int y2,
    flow_eDrawType gc_type, int idx, int highlight, int dimmed)
{
  return 1;
}

int FlowDraw::line_erase(FlowCtx* ctx, int x1, int y1, int x2, int y2, int idx)
{
  return 1;
}

int FlowDraw::nav_line(FlowCtx* ctx, int x1, int y1, int x2, int y2,
    flow_eDrawType gc_type, int idx, int highlight)
{
  return 1;
}

int FlowDraw::nav_line_erase(
    FlowCtx* ctx, int x1, int y1, int x2, int y2, int idx)
{
  return 1;
}

int FlowDraw::text(FlowCtx* ctx, int x, int y, char* text, int len,
    flow_eDrawType gc_type, int idx, int highlight, int dimmed, int line,
    double size)
{
  return 1;
}

int FlowDraw::text_inverse(FlowCtx* ctx, int x, int y, char* text, int len,
    flow_eDrawType gc_type, int idx, int line, double size)
{
  return 1;
}

int FlowDraw::text_erase(FlowCtx* ctx, int x, int y, char* text, int len,
    flow_eDrawType gc_type, int idx, int line, double size)
{
  return 1;
}

int FlowDraw::nav_text(FlowCtx* ctx, int x, int y, char* text, int len,
    flow_eDrawType gc_type, int idx, int highlight, int line, double sizes)
{
  return 1;
}

int FlowDraw::nav_text_erase(FlowCtx* ctx, int x, int y, char* text, int len,
    flow_eDrawType gc_type, int idx, int line, double size)
{
  return 1;
}

int FlowDraw::fill_rect(
    FlowCtx* ctx, int x, int y, int width, int height, flow_eDrawType gc_type)
{
  return 1;
}

int FlowDraw::fill_triangle(
    FlowCtx* ctx, int x, int y, int width, int height, flow_eDrawType gc_type)
{
  return 1;
}

int FlowDraw::image(FlowCtx* ctx, int x, int y, int width, int height,
    flow_tImImage image, flow_tPixmap pixmap, flow_tPixmap clip_mask)
{
  return 1;
}

int FlowDraw::pixmaps_create(
    FlowCtx* ctx, flow_sPixmapData* pixmap_data, void** pixmaps)
{
  return 1;
}

void FlowDraw::pixmaps_delete(FlowCtx* ctx, void* pixmaps)
{
}

int FlowDraw::pixmap(FlowCtx* ctx, int x, int y, flow_sPixmapData* pixmap_data,
    void* pixmaps, flow_eDrawType gc_type, int idx, int highlight, int line)
{
  return 1;
}

int FlowDraw::pixmap_inverse(FlowCtx* ctx, int x, int y,
    flow_sPixmapData* pixmap_data, void* pixmaps, flow_eDrawType gc_type,
    int idx, int line)
{
  return 1;
}

int FlowDraw::pixmap_erase(FlowCtx* ctx, int x, int y,
    flow_sPixmapData* pixmap_data, void* pixmaps, flow_eDrawType gc_type,
    int idx, int line)
{
  return 1;
}

int FlowDraw::nav_pixmap(FlowCtx* ctx, int x, int y,
    flow_sPixmapData* pixmap_data, void* pixmaps, flow_eDrawType gc_type,
    int idx, int highlight, int line)
{
  return 1;
}

int FlowDraw::nav_pixmap_erase(FlowCtx* ctx, int x, int y,
    flow_sPixmapData* pixmap_data, void* pixmaps, flow_eDrawType gc_type,
    int idx, int line)
{
  return 1;
}

void FlowDraw::set_timer(
    FlowCtx* ctx, int time_ms, void (*callback_func)(FlowCtx* ctx), void** id)
{
}

void FlowDraw::cancel_timer(FlowCtx* ctx, void* id)
{
}

void FlowDraw::set_cursor(FlowCtx* ctx, draw_eCursor cursor)
{
}

void FlowDraw::set_nav_cursor(FlowCtx* ctx, draw_eCursor cursor)
{
}

int FlowDraw::get_text_extent(FlowCtx* ctx, const char* text, int len,
    flow_eDrawType gc_type, int idx, int* width, int* height, double size)
{
  return 1;
}

void FlowDraw::copy_area(FlowCtx* ctx, int x, int y)
{
}

void FlowDraw::clear_area(FlowCtx* ctx, int ll_x, int ur_x, int ll_y, int ur_y)
{
}

int FlowDraw::create_input(FlowCtx* ctx, int x, int y, char* text, int len,
    int idx, int width, int height, void* node, int number, void** data)
{
  return 1;
}

int FlowDraw::close_input(FlowCtx* ctx, void* data)
{
  return 1;
}

int FlowDraw::get_input(FlowCtx* ctx, void* data, char** text)
{
  return 1;
}

void FlowDraw::move_input(
    FlowCtx* ctx, void* data, int x, int y, flow_ePosition pos_type)
{
}

void FlowDraw::delete_secondary_ctx(FlowCtx* ctx)
{
}

int FlowDraw::create_secondary_ctx(FlowCtx* flow_ctx, void** secondary_flow_ctx,
    int (*init_proc)(FlowCtx*, void*), void* client_data, flow_eCtxType type)
{
  return 1;
}

int FlowDraw::change_ctx(FlowCtx* from_ctx, FlowCtx* to_ctx)
{
  return 1;
}

void FlowDraw::set_inputfocus(FlowCtx* ctx)
{
}

void FlowDraw::set_click_sensitivity(FlowCtx* ctx, int value)
{
}

void FlowDraw::set_image_clip_mask(
    FlowCtx* ctx, flow_tPixmap pixmap, int x, int y)
{
}

void FlowDraw::reset_image_clip_mask(FlowCtx* ctx)
{
}

void FlowDraw::set_white_background(FlowCtx* ctx)
{
}

int FlowDraw::image_get_width(flow_tImImage image)
{
  return 0;
}

int FlowDraw::image_get_height(flow_tImImage image)
{
  return 0;
}

void FlowDraw::image_scale(float scale, flow_tImImage orig_im, flow_tImImage* im,
    flow_tPixmap* im_pixmap, flow_tPixmap* im_mask)
{
}

int FlowDraw::image_load(const char* imagefile, float scale, float nav_scale,
    flow_tImImage* orig_im, flow_tImImage* im, flow_tPixmap* im_pixmap,
    flow_tPixmap* im_mask, flow_tPixmap* im_nav_pixmap,
    flow_tPixmap* im_nav_mask)
{
  return 0;
}

FlowPrintDraw* FlowDraw::print_draw_new(void* context, const char* title,
    int page, void* flow_ctx, int page_border, int* sts)
{
  *sts = 0;
  return 0;
}
