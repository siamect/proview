/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/**
 * WARNING! This file is a mirrored version of flow_scroll_widget_qt.
 * If you modify it, you must modify flow_scroll_widget_qt in the same way!
 */
#ifndef GLOW_SCROLL_WIDGET_QT_H
#define GLOW_SCROLL_WIDGET_QT_H

#include "glow_draw_qt.h"

#include <QPaintEvent>
#include <QScrollBar>
#include <QScrollArea>

typedef struct {
  QWidget* parent;
  QWidget* form;
  QScrollBar* scroll_h;
  QScrollBar* scroll_v;
  int scroll_h_managed;
  int scroll_v_managed;
} widget_sScroll;

class QtScrollWidgetGlow : public QWidget {
  Q_OBJECT

public:
  void init(unsigned int eCtxType,
      int (*init_proc)(GlowCtx* ctx, void* client_data), void* client_data,
      int (*init_proc2)(QWidget* w, GlowCtx* ctx, void* client_data));
  QWidget* initScroll(unsigned int eCtxType,
      int (*init_proc)(GlowCtx* ctx, void* client_data), void* client_data,
      int (*init_proc2)(QWidget* w, GlowCtx* ctx, void* client_data));
  void init(unsigned int eCtxType, QWidget* main);

  bool eventFilter(QObject *object, QEvent *event);

  void* parent_ctx;
  GlowDrawQt* draw_ctx;
  int (*init_proc)(GlowCtx* ctx, void* clien_data);
  int (*init_widget_proc)(QWidget* w, GlowCtx* ctx, void* client_data);
  int is_navigator;
  void* client_data;
  QWidget* main_widget;
  QScrollBar* scroll_h;
  QScrollBar* scroll_v;
  QTimer* scroll_timerid;
  glow_sScroll scroll_data;
  int scroll_configure;
  int destroyed;
  QScrollArea* form;

  QImage image;

  virtual void handleEvent(QEvent* event);

protected:
  virtual void realize();

  void paintEvent(QPaintEvent* event);
  void closeEvent(QCloseEvent* event);

  bool event(QEvent* event);

  bool is_realized;
  unsigned int ctxType;

private:
  void createBuffer(QSize size);

public slots:
  void scroll_h_action(int value);
  void scroll_v_action(int value);
  void scroll_h_released(int value);
  void scroll_v_released(int value);
  void scroll_callback_cb();

signals:
  void resize_signal(QResizeEvent*);
};

#endif // GLOW_SCROLL_WIDGET_QT_H
