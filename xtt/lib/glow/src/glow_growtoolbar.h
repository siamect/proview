/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef glow_growtoolbar_h
#define glow_growtoolbar_h

#include "glow_grownode.h"

/*! \file glow_growtoolbar.h
    \brief Contains the GrowToolbar class. */
/*! \addtogroup Glow */
/*@{*/

//! Class for handling a toolbar.
/*! A GrowToolbar object is an object that is built of other object or groups.
  The GrowToolbar class contains function for drawing the object, and handle
  events when the
  object is clicked on, moved etc.
*/
class GrowToolbar : public GrowNode {
public:
  int hot_tool;
  unsigned int tools1_mask;
  unsigned int tools2_mask;

  //! Constuctor
  /*!
    \param glow_ctx 	The glow context.
    \param name		Name (max 31 char).
    \param x		x coordinate.
    \param y		y coordinate.
    \param nodraw	Don't draw the object now.
  */
  GrowToolbar(GrowCtx* glow_ctx, const char* name, const char* nc_name,
      char* tools1, char* tools2, int tools1_cnt, int tools2_cnt, double x,
      double y, int nodraw = 0);

  //! Noargs constructor.
  GrowToolbar(){}

  ~GrowToolbar();

  //! Make this object a copy of another image object.
  /*!
    \param n	Object to copy.
  */
  void copy_from(const GrowToolbar& n);

  //! Save the content of the object to file.
  /*!
    \param fp	Ouput file.
    \param mode	Not used.
  */
  void save(std::ofstream& fp, glow_eSaveMode mode);

  //! Read the content of the object from file.
  /*!
    \param fp	Input file.
  */
  void open(std::ifstream& fp);

  //! Dissolve the group.
  /*! Add the transform of the group to the transformation of all members, and
    store the name of the group as last group in all members.
  */
  void ungroup();

  //! Scan trace
  /*! Calls the trace scan callback for the toolbar and all members.
   */
  int trace_scan();

  //! Init trace
  /*! Calls the trace connect callback for the toolbar and all members.
   */
  int trace_init();

  //! Close trace
  /*! Calls the trace disconnect callback for the toolbar and all members.
   */
  void trace_close();

  //! Get list of group members.
  /*!
    \param list		Returned list of members.
    \param size		Number of objects in list.
  */
  void get_objectlist(GlowArrayElem*** list, int* size)
  {
    *list = nc->a.a;
    *size = nc->a.size();
  }

  //! Find a member object with the specified name.
  /*!
    \param name		Name of object.
    \return		Returns the object with matching name. Return 0 if it
    isn't
    found.
  */
  GlowArrayElem* get_node_from_name(char* name);

  //! Redraw all connections connected to member objects of the group.
  virtual void call_redraw_node_cons();

  //! Link member objects in list for connection calculations.
  virtual void link_insert(void** start);

  //! Conversion between different versions of Glow
  /*!
    \param version	Version to convert to.
  */
  void convert(glow_eConvert version);

  //! Set root node.
  /*!
    \param node		Rootnode.
  */
  void set_rootnode(void* node);

  void set_object_name(char* name)
  {
    strcpy(n_name, name);
    strcpy(nc->n_name, name);
  }

  int event_handler(GlowWind* w, glow_eEvent event, double fx, double fy);
  int event_handler(
      GlowWind* w, glow_eEvent event, int x, int y, double fx, double fy);
  int nc_event_handler(
      GlowWind* w, glow_eEvent event, double x, double y, int* idx);
  void configure(char* tools1, char* tools2, int tools1_cnt, int tools2_cnt,
      unsigned int show_mask1, unsigned int show_mask2,
      unsigned int insensitive_mask1, unsigned int insensitive_mask2);
  int get_mask_index(int idx, int* category, int* mask_idx);
  void scale();
};

/*@}*/
#endif
