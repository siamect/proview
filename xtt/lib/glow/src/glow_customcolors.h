/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef glow_customcolors_h
#define glow_customcolors_h

#include <fstream>

#include "glow.h"

/*! \file glow_customcolors.h
    \brief Contains the GlowCustomColors class. */
/*! \addtogroup Glow */
/*@{*/

//! Class to store custom colors.

class GrowCtx;

class GlowCustomColors {
public:
  //! Constructor
  GlowCustomColors() : colortheme_lightness(0), is_default_colortheme(0)
  {
    colors_size = sizeof(colors) / sizeof(colors[0]);
    for (int i = 0; i < colors_size; i++)
      colors[i][0] = colors[i][1] = colors[i][2] = 1;
  }

  void save(std::ofstream& fp, glow_eSaveMode mode);
  void open(std::ifstream& fp);
  int get_color(glow_eDrawType dtype, double* r, double* g, double* b);
  int set_color(glow_eDrawType dtype, double r, double g, double b);
  void reset_colors();
  int write_colorfile(char* name);
  int read_colorfile(GrowCtx* ctx, char* name);
  void set_colortheme_lightness(int lightness)
  {
    colortheme_lightness = lightness;
  }
  void set_colortheme_is_default(int isdefault)
  {
    is_default_colortheme = isdefault;
  }
  static int get_colortheme_colors(char* file, double** colorvect, int* size);

  int colors_size;
  int colortheme_lightness;
  int is_default_colortheme;
  double colors[glow_eDrawType_CustomColor__ - glow_eDrawType_CustomColor1][3];
};

/*@}*/
#endif
