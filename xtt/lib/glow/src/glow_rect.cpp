/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <stdlib.h>

#include <iostream>

#include "glow_rect.h"
#include "glow_draw.h"

void GlowRect::zoom()
{
  ll.zoom();
  ur.zoom();
}

void GlowRect::nav_zoom()
{
  ll.nav_zoom();
  ur.nav_zoom();
}

void GlowRect::print_zoom()
{
  ll.print_zoom();
  ur.print_zoom();
}

void GlowRect::traverse(int x, int y)
{
  ll.traverse(x, y);
  ur.traverse(x, y);
}

void GlowRect::save(std::ofstream& fp, glow_eSaveMode mode)
{
  fp << int(glow_eSave_Rect) << '\n';
  fp << int(glow_eSave_Rect_draw_type) << FSPACE << int(draw_type) << '\n';
  fp << int(glow_eSave_Rect_line_width) << FSPACE << line_width << '\n';
  fp << int(glow_eSave_Rect_display_level) << FSPACE << int(display_level)
     << '\n';
  fp << int(glow_eSave_Rect_fill) << FSPACE << fill << '\n';
  fp << int(glow_eSave_Rect_ll) << '\n';
  ll.save(fp, mode);
  fp << int(glow_eSave_Rect_ur) << '\n';
  ur.save(fp, mode);
  fp << int(glow_eSave_End) << '\n';
}

void GlowRect::open(std::ifstream& fp)
{
  int type = 0;
  int end_found = 0;
  char dummy[40];
  int tmp;

  for (;;) {
    if (!fp.good()) {
      fp.clear();
      fp.getline(dummy, sizeof(dummy));
      printf("** Read error GlowRect: \"%d %s\"\n", type, dummy);
    }

    fp >> type;
    switch (type) {
    case glow_eSave_Rect:
      break;
    case glow_eSave_Rect_draw_type:
      fp >> tmp;
      draw_type = (glow_eDrawType)tmp;
      break;
    case glow_eSave_Rect_line_width:
      fp >> line_width;
      break;
    case glow_eSave_Rect_display_level:
      fp >> tmp;
      display_level = (glow_mDisplayLevel)tmp;
      break;
    case glow_eSave_Rect_fill:
      fp >> fill;
      break;
    case glow_eSave_Rect_ll:
      ll.open(fp);
      break;
    case glow_eSave_Rect_ur:
      ur.open(fp);
      break;
    case glow_eSave_End:
      end_found = 1;
      break;
    default:
      std::cout << "GlowRect:open syntax error\n";
      fp.getline(dummy, sizeof(dummy));
    }
    if (end_found)
      break;
  }
}

void GlowRect::draw(GlowWind* w, void* pos, int highlight, int hot, void* node)
{
  if (!(display_level & ctx->display_level))
    return;
  int ll_x, ll_y, ur_x, ur_y;
  if (w == &ctx->navw) {
    if (ctx->no_nav)
      return;
    hot = 0;
    ll_x = ll.nav_z_x;
    ll_y = ll.nav_z_y;
    ur_x = ur.nav_z_x;
    ur_y = ur.nav_z_y;
  } else {
    ll_x = ll.z_x;
    ll_y = ll.z_y;
    ur_x = ur.z_x;
    ur_y = ur.z_y;
  }
  int idx;
  if (fix_line_width) {
    idx = line_width;
    idx += hot;
    if (idx < 0) {
      erase(w, pos, hot, node);
      return;
    }
  } else {
    idx = int(w->zoom_factor_y / w->base_zoom_factor * line_width - 1);
    idx += hot;
  }
  idx = MAX(0, idx);
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  if (!fill)
    ctx->gdraw->rect(w, ll_x + ((GlowPoint*)pos)->z_x - w->offset_x,
        ll_y + ((GlowPoint*)pos)->z_y - w->offset_y, ur_x - ll_x, ur_y - ll_y,
        draw_type, idx, highlight);
  else
    ctx->gdraw->fill_rect(w, ll_x + ((GlowPoint*)pos)->z_x - w->offset_x,
        ll_y + ((GlowPoint*)pos)->z_y - w->offset_y, ur_x - ll_x, ur_y - ll_y,
        draw_type);
}

void GlowRect::erase(GlowWind* w, void* pos, int hot, void* node)
{
  if (!(display_level & ctx->display_level))
    return;
  int ll_x, ll_y, ur_x, ur_y;
  if (w == &ctx->navw) {
    if (ctx->no_nav)
      return;
    hot = 0;
    ll_x = ll.nav_z_x;
    ll_y = ll.nav_z_y;
    ur_x = ur.nav_z_x;
    ur_y = ur.nav_z_y;
  } else {
    ll_x = ll.z_x;
    ll_y = ll.z_y;
    ur_x = ur.z_x;
    ur_y = ur.z_y;
  }
  int idx;
  if (fix_line_width) {
    idx = line_width;
    idx += hot;
    if (idx < 0)
      return;
  } else {
    idx = int(w->zoom_factor_y / w->base_zoom_factor * line_width - 1);
    idx += hot;
  }
  idx = MAX(0, idx);
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  if (!fill)
    ctx->gdraw->rect_erase(w, ll_x + ((GlowPoint*)pos)->z_x - w->offset_x,
        ll_y + ((GlowPoint*)pos)->z_y - w->offset_y, ur_x - ll_x, ur_y - ll_y,
        idx);
  else
    ctx->gdraw->fill_rect(w, ll_x + ((GlowPoint*)pos)->z_x - w->offset_x,
        ll_y + ((GlowPoint*)pos)->z_y - w->offset_y, ur_x - ll_x, ur_y - ll_y,
        glow_eDrawType_LineErase);
}

int GlowRect::event_handler(
    GlowWind* w, void* pos, glow_eEvent event, int x, int y, void* node)
{
  GlowPoint* p;

  p = (GlowPoint*)pos;
  if (ll.z_x + ((GlowPoint*)pos)->z_x - w->offset_x <= x
      && x <= ur.z_x + ((GlowPoint*)pos)->z_x - w->offset_x
      && ll.z_y + ((GlowPoint*)pos)->z_y - w->offset_y <= y
      && y <= ur.z_y + ((GlowPoint*)pos)->z_y - w->offset_y) {
    //    std::cout << "Event handler: Hit in rect\n";
    return 1;
  } else
    return 0;
}

void GlowRect::get_borders(double pos_x, double pos_y, double* x_right,
    double* x_left, double* y_high, double* y_low, void* node)
{
  if (display_level != glow_mDisplayLevel_1)
    return;
  if (pos_x + ll.x < *x_left)
    *x_left = pos_x + ll.x;
  if (pos_x + ur.x > *x_right)
    *x_right = pos_x + ur.x;
  if (pos_y + ll.y < *y_low)
    *y_low = pos_y + ll.y;
  if (pos_y + ur.y > *y_high)
    *y_high = pos_y + ur.y;
}

void GlowRect::move(void* pos, double x, double y, int highlight, int hot)
{
  double width, height;

  width = ur.x - ll.x;
  height = ur.y - ll.y;
  erase(&ctx->mw, pos, hot, NULL);
  erase(&ctx->navw, pos, 0, NULL);
  ll.x = x;
  ll.y = y;
  ur.x = x + width;
  ur.y = y + height;
  zoom();
  nav_zoom();
  draw(&ctx->mw, pos, highlight, hot, NULL);
  draw(&ctx->navw, pos, highlight, 0, NULL);
}

void GlowRect::shift(
    void* pos, double delta_x, double delta_y, int highlight, int hot)
{
  erase(&ctx->mw, pos, hot, NULL);
  erase(&ctx->navw, pos, 0, NULL);
  ll.x += delta_x;
  ll.y += delta_y;
  ur.x += delta_x;
  ur.y += delta_y;
  zoom();
  nav_zoom();

  draw(&ctx->mw, pos, highlight, hot, NULL);
  draw(&ctx->navw, pos, highlight, 0, NULL);
}
