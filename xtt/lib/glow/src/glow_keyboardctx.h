/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef glow_keyboardctx_h
#define glow_keyboardctx_h

#include "glow_growctx.h"

/*! \file glow_keyboardctx.h
    \brief Contains the KeyboardCtx class. */
/*! \addtogroup Glow */
/*@{*/

typedef enum {
  keyboard_eType_Standard,
  keyboard_eType_Numeric,
  keyboard_eType_Alphabetic
} keyboard_eType;

typedef enum {
  keyboard_eKeymap_,
  keyboard_eKeymap_Low_en_us,
  keyboard_eKeymap_High_en_us,
  keyboard_eKeymap_Low_sv_se,
  keyboard_eKeymap_High_sv_se
} keyboard_eKeymap;

typedef enum {
  keyboard_mAction_Open = 1 << 0,
  keyboard_mAction_Close = 1 << 1,
  keyboard_mAction_ResetInput = 1 << 2
} keyboard_mAction;

//! Context for the virtual keyboard.

class KeyboardCtx : public GrowCtx {
public:
  //! Constructor.
  /*!
    \param ctx_name	Name of the context.
    \param zoom_fact	Initial zoomfactor.
  */
  KeyboardCtx(const char* ctx_name, double zoom_fact = 100)
      : GrowCtx(ctx_name, zoom_fact), type(default_type),
        current_keymap(default_keymap)
  {
    ctx_type = glow_eCtxType_Keyboard;
    grid_on = 0;
  }

  //! Destructor
  ~KeyboardCtx(){}

  //! Set keymap
  void set_keymap(keyboard_eKeymap keymap);

  //! Set type
  void set_type(keyboard_eType type);

  //! Configure the keyboard
  void configure();

  //! Redraw the window.
  /*! Redraw all objects in the window.
   */
  void redraw();

  //! Adjust the pixel coordinates to the current zoomfactor.
  void zoom(double factor);

  //! Reset to base zoomfactor.
  void unzoom()
  {
    zoom(mw.base_zoom_factor / mw.zoom_factor_y);
  }

  //! Event handler
  /*!
    \param event	Current event.
    \param x		x coordinate of event.
    \param y		y coordinate of event.
    \param w		Width of exposure event.
    \param h		Height of exposure event.
    \return		Returns always 1.

    Handling of event. Detects if any color or colortone entry is hit. Send
    event to
    a callback function, if there is one registred for this event.
  */
  int event_handler(glow_eEvent event, int x, int y, int w, int h);
  void get_size(int* width, int* height);
  void set_size(int width, int height);
  void set_shift(int shift);

  keyboard_eType type;
  GlowArrayElem* keys[60]; //!< Rect for keys.
  GlowArrayElem* text_keys[60]; //!< Text for keys.
  keyboard_eKeymap current_keymap;

  static void set_default_config(keyboard_eKeymap keymap, keyboard_eType type)
  {
    default_keymap = keymap;
    default_type = type;
  }
  static keyboard_eKeymap default_keymap;
  static keyboard_eType default_type;
};

/*@}*/
#endif
