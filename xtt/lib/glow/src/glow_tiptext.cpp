/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <string.h>

#include "glow_draw.h"
#include "glow_growctx.h"

#define TIPTEXT_OFFSET_X 3
#define TIPTEXT_OFFSET_Y 3

static void tiptext_timer_cb(GlowCtx* ctx)
{
  ctx->tiptext->timer_id = 0;
  ctx->tiptext->active = true;

  ctx->tiptext->draw();
}
GlowTipText::~GlowTipText()
{
  if (timer_id)
    ctx->gdraw->remove_timer(timer_id);
}

void GlowTipText::draw_text(GlowArrayElem* e, char* text, int x, int y)
{
  int z_width, z_height, z_descent;

  if (active)
    remove_text(text_object);
  if (timer_id) {
    ctx->gdraw->remove_timer(timer_id);
    timer_id = 0;
  }

  ctx->gdraw->get_text_extent(text, strlen(text), glow_eDrawType_TextHelvetica,
      text_size, glow_eFont_LucidaSans, &z_width, &z_height, &z_descent,
      ctx->mw.zoom_factor_y / ctx->mw.base_zoom_factor * (8 + 2 * text_size),
      0);

  text_x = x + TIPTEXT_OFFSET_X;
  text_y = y + TIPTEXT_OFFSET_Y;
  text_width = z_width + 4;
  text_height = z_height + 4;
  text_descent = z_descent;
  strncpy(tiptext, text, sizeof(tiptext));
  text_object = e;

  if (text_x + text_width > ctx->mw.window_width + ctx->mw.subwindow_x)
    text_x = ctx->mw.window_width + ctx->mw.subwindow_x - text_width;
  if (text_x < 0)
    text_x = 0;
  if (text_y + text_height > ctx->mw.window_height + ctx->mw.subwindow_y)
    text_y = ctx->mw.window_height + ctx->mw.subwindow_y - text_height;
  if (text_y < 0)
    text_y = 0;

  ctx->gdraw->set_timer(ctx, 1000, tiptext_timer_cb, &timer_id);
}

void GlowTipText::draw()
{
  if (!active)
    return;

  ctx->gdraw->fill_rect(
      &ctx->mw, text_x, text_y, text_width, text_height, glow_eDrawType_Color4);
  ctx->gdraw->rect(&ctx->mw, text_x, text_y, text_width, text_height,
      glow_eDrawType_Line, 0, 0);
  ctx->gdraw->text(&ctx->mw, text_x + 2,
      text_y + text_height - text_descent - 2, tiptext, strlen(tiptext),
      glow_eDrawType_TextHelvetica, glow_eDrawType_Line, text_size, 0, 0,
      glow_eFont_LucidaSans,
      ctx->mw.zoom_factor_y / ctx->mw.base_zoom_factor * (8 + 2 * text_size),
      0);
  if (ctx->mw.double_buffer_on() && !ctx->mw.draw_buffer_only())
    ctx->gdraw->copy_buffer(
        &ctx->mw, text_x, text_y, text_x + text_width, text_y + text_height);
}

void GlowTipText::remove_text(GlowArrayElem* e)
{
  if (e != text_object)
    return;

  if (timer_id) {
    ctx->gdraw->remove_timer(timer_id);
    timer_id = 0;
    return;
  }

  if (active) {
    active = false;
    ctx->gdraw->fill_rect(&ctx->mw, text_x, text_y, text_width + 1,
        text_height + 1, glow_eDrawType_LineErase);
    ctx->draw(&ctx->mw, text_x, text_y, text_x + text_width + 1,
        text_y + text_height + 1);
  }
}

void GlowTipText::remove()
{
  if (timer_id) {
    ctx->gdraw->remove_timer(timer_id);
    timer_id = 0;
  }

  if (active)
    remove_text(text_object);
}
