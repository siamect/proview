/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef glow_transform_h
#define glow_transform_h

#include <fstream>

#include "glow.h"

class GlowTransform {
public:
  GlowTransform()
      : a11(1), a12(0), a13(0), a21(0), a22(1), a23(0), rotation(0), s_a11(1),
        s_a12(0), s_a13(0), s_a21(0), s_a22(1), s_a23(0), s_rotation(0),
        stored(false){}
  GlowTransform operator*(const GlowTransform p);
  void scale(double sx, double sy, double x0, double y0);
  void rotate(double angle, double x0, double y0);
  void move(double x0, double y0);
  void posit(double x0, double y0);
  void reset()
  {
    a11 = 1;
    a12 = 0;
    a21 = 0;
    a22 = 1;
    a23 = 0;
  }
  double x(double x1, double y1);
  double y(double x1, double y1);
  double x(GlowTransform* t, double x1, double y1);
  double y(GlowTransform* t, double x1, double y1);
  bool reverse(double x, double y, double* rx, double* ry);
  void save(std::ofstream& fp, glow_eSaveMode mode);
  void open(std::ifstream& fp);
  double rot(GlowTransform* t)
  {
    return t->rotation + rotation;
  }
  double rot()
  {
    return rotation;
  }
  void store()
  {
    s_a11 = a11;
    s_a12 = a12;
    s_a13 = a13;
    s_a21 = a21;
    s_a22 = a22;
    s_a23 = a23;
    s_rotation = rotation;
    stored = true;
  }
  void revert()
  {
    a11 = s_a11;
    a12 = s_a12;
    a13 = s_a13;
    a21 = s_a21;
    a22 = s_a22;
    a23 = s_a23;
    rotation = s_rotation;
  }
  void scale_from_stored(double sx, double sy, double x0, double y0);
  void rotate_from_stored(double angle, double x0, double y0);
  void move_from_stored(double x0, double y0);
  void set_from_stored(GlowTransform* t);
  double vertical_scale(GlowTransform* t);
  bool is_stored()
  {
    return stored;
  }
  void pos_inverse(GlowTransform* t);
  double a11;
  double a12;
  double a13;
  double a21;
  double a22;
  double a23;
  double rotation;
  double s_a11;
  double s_a12;
  double s_a13;
  double s_a21;
  double s_a22;
  double s_a23;
  double s_rotation;
  bool stored;
};

#endif
