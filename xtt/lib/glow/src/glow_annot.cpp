/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <string.h>

#include <iostream>

#include "glow_annot.h"
#include "glow_grownode.h"
#include "glow_draw.h"
#include "glow_browctx.h"

void GlowAnnot::save(std::ofstream& fp, glow_eSaveMode mode)
{
  fp << int(glow_eSave_Annot) << '\n';
  fp << int(glow_eSave_Annot_number) << FSPACE << number << '\n';
  fp << int(glow_eSave_Annot_draw_type) << FSPACE << int(draw_type) << '\n';
  fp << int(glow_eSave_Annot_color_drawtype) << FSPACE << int(color_drawtype)
     << '\n';
  fp << int(glow_eSave_Annot_text_size) << FSPACE << text_size << '\n';
  fp << int(glow_eSave_Annot_display_level) << FSPACE << int(display_level)
     << '\n';
  fp << int(glow_eSave_Annot_p) << '\n';
  p.save(fp, mode);
  fp << int(glow_eSave_Annot_annot_type) << FSPACE << int(annot_type) << '\n';
  fp << int(glow_eSave_Annot_font) << FSPACE << int(font) << '\n';
  fp << int(glow_eSave_Annot_protect) << FSPACE << protect << '\n';
  fp << int(glow_eSave_End) << '\n';
}

void GlowAnnot::open(std::ifstream& fp)
{
  int type = 0;
  int end_found = 0;
  char dummy[40];
  int tmp;

  for (;;) {
    if (!fp.good()) {
      fp.clear();
      fp.getline(dummy, sizeof(dummy));
      printf("** Read error GlowAnnot: \"%d %s\"\n", type, dummy);
    }

    fp >> type;
    switch (type) {
    case glow_eSave_Annot:
      break;
    case glow_eSave_Annot_number:
      fp >> number;
      break;
    case glow_eSave_Annot_draw_type:
      fp >> tmp;
      draw_type = (glow_eDrawType)tmp;
      break;
    case glow_eSave_Annot_color_drawtype:
      fp >> tmp;
      color_drawtype = (glow_eDrawType)tmp;
      break;
    case glow_eSave_Annot_text_size:
      fp >> text_size;
      break;
    case glow_eSave_Annot_display_level:
      fp >> tmp;
      display_level = (glow_mDisplayLevel)tmp;
      break;
    case glow_eSave_Annot_p:
      p.open(fp);
      break;
    case glow_eSave_Annot_annot_type:
      fp >> tmp;
      annot_type = (glow_eAnnotType)tmp;
      break;
    case glow_eSave_Annot_font:
      fp >> tmp;
      font = (glow_eFont)tmp;
      break;
    case glow_eSave_Annot_protect:
      fp >> protect;
      break;
    case glow_eSave_End:
      end_found = 1;
      break;
    default:
      std::cout << "GlowAnnot:open syntax error\n";
      fp.getline(dummy, sizeof(dummy));
    }
    if (end_found)
      break;
  }
}

void glow_measure_annot_text(GrowCtx* ctx, char* text, glow_eDrawType draw_type,
    int text_size, glow_eAnnotType annot_type, glow_eFont font, double* width,
    double* height, int* rows)
{
  int z_width, z_height, z_descent;

  switch (annot_type) {
  case glow_eAnnotType_OneLine:
    ctx->gdraw->get_text_extent(text, strlen(text), draw_type, text_size, font,
        &z_width, &z_height, &z_descent,
        ctx->mw.zoom_factor_y / ctx->mw.base_zoom_factor * (8 + 2 * text_size),
        0);
    *rows = 1;
    break;
  case glow_eAnnotType_MultiLine: {
    int l_width, l_height = 0, l_descent;
    int len = 0;
    int line_cnt = 0;
    char* line = text;
    char* s;
    z_width = 0;
    for (s = text; *s; s++) {
      if (*s == 10) {
        if (len) {
          ctx->gdraw->get_text_extent(line, len, draw_type, text_size, font,
              &l_width, &l_height, &l_descent, ctx->mw.zoom_factor_y
                  / ctx->mw.base_zoom_factor * (8 + 2 * text_size),
              0);
          z_width = MAX(z_width, l_width);
        }
        len = 0;
        line = s + 1;
        line_cnt++;
      } else
        len++;
    }
    if (len) {
      ctx->gdraw->get_text_extent(line, len, draw_type, text_size, font,
          &l_width, &l_height, &l_descent, ctx->mw.zoom_factor_y
              / ctx->mw.base_zoom_factor * (8 + 2 * text_size),
          0);
      z_width = MAX(z_width, l_width);
      line_cnt++;
    }
    z_height = line_cnt * l_height;
    *rows = MAX(line_cnt, 1);
    break;
  }
  }
  *width = 1.0 * z_width / ctx->mw.base_zoom_factor;
  *height = 1.0 * z_height / ctx->mw.base_zoom_factor;
}
