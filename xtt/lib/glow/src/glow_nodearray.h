/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef glow_array_h
#define glow_array_h

#include "glow_array_elem.h"

typedef void* glow_tAddress;

typedef enum {
  glow_eElemTypeRectangle,
  glow_eElemTypeCircle,
  glow_eElemTypeLine,
  glow_eElemTypePoint,
  glow_eElemTypeNode,
  glow_eElemTypeConnection
} glow_eElemType;

class GlowArray {
public:
  GlowArray(int allocate = 10, int incr = 10);
  GlowArrayElem* operator[](int idx);
  friend std::ostream& operator<<(std::ostream& o, const GlowArray a);
  int size()
  {
    return a_size;
  }
  void insert(GlowArrayElem* element);
  void zoom();
  friend class GlowNodeClass;
  friend class GlowCtx;

private:
  int allocated;
  int alloc_incr;
  int a_size;
  GlowArrayElem** a;
};

#endif
