/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef glow_colpalctx_h
#define glow_colpalctx_h

#include "glow_growctx.h"

/*! \file glow_colpalctx.h
    \brief Contains the ColPalCtx class. */
/*! \addtogroup Glow */
/*@{*/

typedef enum {
  colpal_eActive_FillColor,
  colpal_eActive_BorderColor,
  colpal_eActive_TextColor
} colpal_eActive;

//! Context for the color palette.
/*! The color palette consists of 300 colors, where the bordercolor, fillcolor
  and the textcolor
  is selected. The selected colors are displayed above the actual palette. Below
  the color palette there is
  a colortone palette where a color tone can be selected. There is also a reset
  button.

  When a color entry is activated, an event is sent to the registred callback
  routine for the event.
*/

class ColPalCtx : public GrowCtx {
public:
  //! Constructor.
  /*!
    \param ctx_name	Name of the context.
    \param zoom_fact	Initial zoomfactor.
  */
  ColPalCtx(const char* ctx_name, double zoom_fact = 100)
      : GrowCtx(ctx_name, zoom_fact), columns(30),
        current_fill(glow_eDrawType_LineGray),
        current_border(glow_eDrawType_Line), current_text(glow_eDrawType_Line),
        entry_width(0.3), entry_height(1), display_entry_width(3),
        active(colpal_eActive_FillColor)
  {
    ctx_type = glow_eCtxType_ColPal;
    grid_on = 0;
  }

  //! Destructor
  ~ColPalCtx(){}

  //! Configure the palette.
  /*! This function creates all color rectangles and texts in the palette, and
    gives them
    appropriate names, so they can be identified when an event is recieved.
  */
  void configure();

  //! Update the layout of the scrollbars.
  void change_scrollbar();

  //! Redraw the window.
  /*! Redraw all objects in the window.
   */
  void redraw();

  //! Adjust the pixel coordinates to the current zoomfactor.
  void zoom(double factor);

  //! Reset to base zoomfactor.
  void unzoom()
  {
    zoom(mw.base_zoom_factor / mw.zoom_factor_y);
  }

  //! Not used.
  void print(char* filename);

  //! Event handler
  /*!
    \param event	Current event.
    \param x		x coordinate of event.
    \param y		y coordinate of event.
    \param w		Width of exposure event.
    \param h		Height of exposure event.
    \return		Returns always 1.

    Handling of event. Detects if any color or colortone entry is hit. Send
    event to
    a callback function, if there is one registred for this event.
  */
  int event_handler(glow_eEvent event, int x, int y, int w, int h);

  void set_active(colpal_eActive a);
  colpal_eActive get_active()
  {
    return active;
  }
  void set_colors();
  void update_custom_colors(GlowCustomColors* cc);
  static char* color_idx_to_text(int idx);
  static char* customcolor_idx_to_text(int idx);
  static char* colortheme_idx_to_text(int idx);

  int columns; //!< Number of columns in the color palette.
  glow_eDrawType current_fill; //!< The currently selected fill color.
  glow_eDrawType current_border; //!< The currently selected border color.
  glow_eDrawType current_text; //!< The currently selected text color.
  glow_eDrawType current_tone; //!< The currently selected color tone.
  GlowArrayElem*
      display_fill; //!< The rectangle object to display the current fillcolor.
  GlowArrayElem* display_border; //!< The rectangle object to display the
  //! current border color.
  GlowArrayElem*
      display_text; //!< The rectangle object to display the current text color.
  GlowArrayElem*
      active_fill; //!< The rectangle object to mark fill color active.
  GlowArrayElem*
      active_border; //!< The rectangle object to mark border color active.
  GlowArrayElem*
      active_text; //!< The rectangle object to mark text color active.
  GlowArrayElem*
      active_tone; //!< The rectangle object to mark colortone active.
  GlowArrayElem* text_fill; //!< The fill color text object.
  GlowArrayElem* text_border; //!< The border color text object.
  GlowArrayElem* text_text; //!< The text color text object.
  GlowArrayElem* text_tone; //!< The text tone text object.
  GlowArrayElem* color_description; //!< Description text for color theme.
  GlowArrayElem* color_description_bg; //!< Background rect to description text.
  double entry_width; //!< Width of a color palette entry.
  double entry_height; //!< Height of a color palette entry.
  double display_entry_width; //!< Width of a display entry.
  colpal_eActive active; //!< Active colortype (fill, border or text).
};

//! Scroll horizontal.
/*!
  \param ctx	Pointer to ColPalCtx object.
  \param value	Scrollbar value.
  \param bottom	Scrollbar is in bottom position.
*/
void colpal_scroll_horizontal(ColPalCtx* ctx, int value, int bottom);

//! Scroll vertical.
/*!
  \param ctx	Pointer to ColPalCtx object.
  \param value	Scrollbar value.
  \param bottom	Scrollbar is in bottom position.
*/
void colpal_scroll_vertical(ColPalCtx* ctx, int value, int bottom);

/*@}*/
#endif
