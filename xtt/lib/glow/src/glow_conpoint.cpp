/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <math.h>
#include <string.h>

#include <iostream>

#include "glow_conpoint.h"
#include "glow_draw.h"

GlowConPoint::GlowConPoint(
    GrowCtx* glow_ctx, double x, double y, int cp_num, glow_eDirection d)
    : ctx(glow_ctx), number(cp_num), p(glow_ctx, x, y), direction(d),
      trace_attr_type(glow_eTraceType_Boolean)
{
  strcpy(trace_attribute, "");
}

void GlowConPoint::zoom()
{
  p.zoom();
}

void GlowConPoint::nav_zoom()
{
  p.nav_zoom();
}

void GlowConPoint::print_zoom()
{
  p.print_zoom();
}

void GlowConPoint::save(std::ofstream& fp, glow_eSaveMode mode)
{
  fp << int(glow_eSave_ConPoint) << '\n';
  fp << int(glow_eSave_ConPoint_number) << FSPACE << number << '\n';
  fp << int(glow_eSave_ConPoint_direction) << FSPACE << int(direction) << '\n';
  fp << int(glow_eSave_ConPoint_p) << '\n';
  p.save(fp, mode);
  fp << int(glow_eSave_ConPoint_trace_attribute) << FSPACE << trace_attribute
     << '\n';
  fp << int(glow_eSave_ConPoint_trace_attr_type) << FSPACE
     << int(trace_attr_type) << '\n';
  fp << int(glow_eSave_ConPoint_trf) << '\n';
  trf.save(fp, mode);
  fp << int(glow_eSave_End) << '\n';
}

void GlowConPoint::open(std::ifstream& fp)
{
  int type = 0;
  int end_found = 0;
  char dummy[40];
  int tmp;

  for (;;) {
    if (!fp.good()) {
      fp.clear();
      fp.getline(dummy, sizeof(dummy));
      printf("** Read error GlowConPoint: \"%d %s\"\n", type, dummy);
    }

    fp >> type;
    switch (type) {
    case glow_eSave_ConPoint:
      break;
    case glow_eSave_ConPoint_number:
      fp >> number;
      break;
    case glow_eSave_ConPoint_direction:
      fp >> tmp;
      direction = (glow_eDirection)tmp;
      break;
    case glow_eSave_ConPoint_p:
      p.open(fp);
      break;
    case glow_eSave_ConPoint_trace_attribute:
      fp.get();
      fp.getline(trace_attribute, sizeof(trace_attribute));
      break;
    case glow_eSave_ConPoint_trace_attr_type:
      fp >> tmp;
      trace_attr_type = (glow_eTraceType)tmp;
      break;
    case glow_eSave_ConPoint_trf:
      trf.open(fp);
      break;
    case glow_eSave_End:
      end_found = 1;
      break;
    default:
      std::cout << "GlowConPoint:open syntax error\n";
      fp.getline(dummy, sizeof(dummy));
    }
    if (end_found)
      break;
  }
}

void GlowConPoint::traverse(int x, int y)
{
  p.traverse(x, y);
}

int GlowConPoint::event_handler(
    void* pos, glow_eEvent event, int x, int y, void* node)
{
  return 0;
}

void GlowConPoint::conpoint_select(
    void* pos, int x, int y, double* distance, void** cp)
{
  int px, py;
  double dist;

  px = ((GlowPoint*)pos)->z_x - ctx->mw.offset_x + p.z_x;
  py = ((GlowPoint*)pos)->z_y - ctx->mw.offset_y + p.z_y;

  dist = sqrt(1.0 * (x - px) * (x - px) + 1.0 * (y - py) * (y - py));
  if (dist < *distance) {
    *distance = dist;
    *cp = (void*)this;
  }
}

void GlowConPoint::conpoint_select(GlowTransform* t, int x, int y,
    double* distance, void** cp, int* pix_x, int* pix_y)
{
  int px, py;
  double dist;
  double x1, y1;

  x1 = trf.x(t, p.x, p.y);
  y1 = trf.y(t, p.x, p.y);
  px = int(x1 * ctx->mw.zoom_factor_x - ctx->mw.offset_x);
  py = int(y1 * ctx->mw.zoom_factor_y - ctx->mw.offset_y);

  dist = sqrt(1.0 * (x - px) * (x - px) + 1.0 * (y - py) * (y - py));
  if (dist < *distance) {
    *distance = dist;
    *cp = (void*)this;
    *pix_x = px;
    *pix_y = py;
  }
}

int GlowConPoint::get_conpoint(
    int num, double* x, double* y, glow_eDirection* dir)
{
  if (number == num) {
    *x = p.x;
    *y = p.y;
    *dir = direction;
    return 1;
  }
  return 0;
}

int GlowConPoint::get_conpoint(GlowTransform* t, int num, bool flip_horizontal,
    bool flip_vertical, double* x, double* y, glow_eDirection* dir)
{
  double rotation;

  if (number == num) {
    *x = trf.x(t, p.x, p.y);
    *y = trf.y(t, p.x, p.y);
    if (direction == glow_eDirection_Center) {
      *dir = direction;
      return 1;
    }
    rotation = (trf.rot(t) / 360 - floor(trf.rot(t) / 360)) * 360;
    if (45 >= rotation || rotation > 315) {
      *dir = direction;
    } else if (45 < rotation && rotation <= 135) {
      switch (direction) {
      case glow_eDirection_Right:
        *dir = glow_eDirection_Up;
        break;
      case glow_eDirection_Up:
        *dir = glow_eDirection_Left;
        break;
      case glow_eDirection_Left:
        *dir = glow_eDirection_Down;
        break;
      case glow_eDirection_Down:
        *dir = glow_eDirection_Right;
        break;
      default:;
      }
    } else if (135 < rotation && rotation <= 225) {
      switch (direction) {
      case glow_eDirection_Right:
        *dir = glow_eDirection_Left;
        break;
      case glow_eDirection_Up:
        *dir = glow_eDirection_Down;
        break;
      case glow_eDirection_Left:
        *dir = glow_eDirection_Right;
        break;
      case glow_eDirection_Down:
        *dir = glow_eDirection_Up;
        break;
      default:;
      }
    } else // if ( 225 < rotation && rotation <= 315)
    {
      switch (direction) {
      case glow_eDirection_Right:
        *dir = glow_eDirection_Down;
        break;
      case glow_eDirection_Up:
        *dir = glow_eDirection_Right;
        break;
      case glow_eDirection_Left:
        *dir = glow_eDirection_Up;
        break;
      case glow_eDirection_Down:
        *dir = glow_eDirection_Left;
        break;
      default:;
      }
    }

    if (flip_horizontal) {
      switch (*dir) {
      case glow_eDirection_Up:
        *dir = glow_eDirection_Down;
        break;
      case glow_eDirection_Down:
        *dir = glow_eDirection_Up;
        break;
      default:;
      }
    }
    if (flip_vertical) {
      switch (*dir) {
      case glow_eDirection_Right:
        *dir = glow_eDirection_Left;
        break;
      case glow_eDirection_Left:
        *dir = glow_eDirection_Right;
        break;
      default:;
      }
    }

    return 1;
  }
  return 0;
}

std::ostream& operator<<(std::ostream& o, const GlowConPoint cp)
{
  o << '(' << cp.p.x << ',' << cp.p.y << ')';
  return o;
}
