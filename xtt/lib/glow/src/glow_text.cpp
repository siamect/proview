/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <stdlib.h>
#include <string.h>

#include <iostream>

#include "glow_text.h"
#include "glow_draw.h"

GlowText::GlowText(GrowCtx* glow_ctx, const char* text1, double x, double y,
    glow_eDrawType d_type, glow_eDrawType color_d_type, int t_size,
    glow_mDisplayLevel display_lev)
    : ctx(glow_ctx), p(glow_ctx, x, y), draw_type(d_type), text_size(t_size),
      display_level(display_lev), color_drawtype(color_d_type)
{
  text = (char*)malloc(strlen(text1) + 1);
  strcpy(text, text1);
}

void GlowText::zoom()
{
  p.zoom();
}

void GlowText::nav_zoom()
{
  p.nav_zoom();
}

void GlowText::print_zoom()
{
  p.print_zoom();
}

void GlowText::traverse(int x, int y)
{
  p.traverse(x, y);
}

void GlowText::save(std::ofstream& fp, glow_eSaveMode mode)
{
  fp << int(glow_eSave_Text) << '\n';
  fp << int(glow_eSave_Text_text_size) << FSPACE << text_size << '\n';
  fp << int(glow_eSave_Text_draw_type) << FSPACE << int(draw_type) << '\n';
  fp << int(glow_eSave_Text_color_drawtype) << FSPACE << int(color_drawtype)
     << '\n';
  fp << int(glow_eSave_Text_text) << FSPACE << text << '\n';
  fp << int(glow_eSave_Text_p) << '\n';
  p.save(fp, mode);
  fp << int(glow_eSave_End) << '\n';
}

void GlowText::open(std::ifstream& fp)
{
  int type = 0;
  int end_found = 0;
  char dummy[40];
  char tmp_text[500];
  int tmp;

  for (;;) {
    if (!fp.good()) {
      fp.clear();
      fp.getline(dummy, sizeof(dummy));
      printf("** Read error GlowText: \"%d %s\"\n", type, dummy);
    }

    fp >> type;
    switch (type) {
    case glow_eSave_Text:
      break;
    case glow_eSave_Text_text_size:
      fp >> text_size;
      break;
    case glow_eSave_Text_draw_type:
      fp >> tmp;
      draw_type = (glow_eDrawType)tmp;
      break;
    case glow_eSave_Text_color_drawtype:
      fp >> tmp;
      color_drawtype = (glow_eDrawType)tmp;
      break;
    case glow_eSave_Text_text:
      fp.get();
      fp.getline(tmp_text, sizeof(tmp_text));
      free(text);
      text = (char*)malloc(strlen(tmp_text) + 1);
      strcpy(text, tmp_text);
      break;
    case glow_eSave_Text_p:
      p.open(fp);
      break;
    case glow_eSave_End:
      end_found = 1;
      break;
    default:
      std::cout << "GlowText:open syntax error\n";
      fp.getline(dummy, sizeof(dummy));
    }
    if (end_found)
      break;
  }
}

void GlowText::draw(GlowWind* w, void* pos, int highlight, int hot, void* node)
{
  int idx = int(w->zoom_factor_y / w->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  ctx->gdraw->text(w, p.z_x + ((GlowPoint*)pos)->z_x - w->offset_x,
      p.z_y + ((GlowPoint*)pos)->z_y - w->offset_y, text, strlen(text),
      draw_type, color_drawtype, idx, highlight, 0, glow_eFont_Helvetica,
      w->zoom_factor_y / w->base_zoom_factor * (8 + 2 * text_size), 0);
}

void GlowText::erase(GlowWind* w, void* pos, int hot, void* node)
{
  int idx = int(w->zoom_factor_y / w->base_zoom_factor * (text_size + 4) - 4);
  if (idx < 0)
    return;
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  ctx->gdraw->text_erase(w, p.z_x + ((GlowPoint*)pos)->z_x - w->offset_x,
      p.z_y + ((GlowPoint*)pos)->z_y - w->offset_y, text, strlen(text),
      draw_type, idx, 0, glow_eFont_Helvetica,
      w->zoom_factor_y / w->base_zoom_factor * (8 + 2 * text_size), 0);
}

int GlowText::event_handler(
    GlowWind* w, void* pos, glow_eEvent event, int x, int y, void* node)
{
  GlowPoint* p;

  p = (GlowPoint*)pos;
  return 0;
}

void GlowText::get_borders(double pos_x, double pos_y, double* x_right,
    double* x_left, double* y_high, double* y_low, void* node)
{
}

void GlowText::move(void* pos, double x, double y, int highlight, int hot)
{
  erase(&ctx->mw, pos, hot, NULL);
  erase(&ctx->navw, pos, 0, NULL);
  p.x = x;
  p.y = y;
  zoom();
  nav_zoom();
  draw(&ctx->mw, pos, highlight, hot, NULL);
  draw(&ctx->navw, pos, highlight, 0, NULL);
}

void GlowText::shift(
    void* pos, double delta_x, double delta_y, int highlight, int hot)
{
  erase(&ctx->mw, pos, hot, NULL);
  erase(&ctx->navw, pos, 0, NULL);
  p.x += delta_x;
  p.y += delta_y;
  zoom();
  nav_zoom();

  draw(&ctx->mw, pos, highlight, hot, NULL);
  draw(&ctx->navw, pos, highlight, 0, NULL);
}
