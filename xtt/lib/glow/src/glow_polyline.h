/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef glow_polyline_h
#define glow_polyline_h

#include "glow_growctx.h"
#include "glow_draw.h"

class GlowPolyLine : public GlowArrayElem {
public:
  GlowPolyLine(){}
  GlowPolyLine(GrowCtx* glow_ctx, glow_sPoint* pointarray, int point_cnt,
      glow_eDrawType d_type = glow_eDrawType_Line, int line_w = 1,
      int fix_line_w = 0, int line_fill = 0, int closed = 0);
  ~GlowPolyLine();
  GlowPolyLine(const GlowPolyLine& c);

  friend std::ostream& operator<<(std::ostream& o, const GlowPolyLine l);
  void zoom();
  void nav_zoom();
  void print_zoom();
  void save(std::ofstream& fp, glow_eSaveMode mode);
  void open(std::ifstream& fp);
  void get_borders(double pos_x, double pos_y, double* x_right, double* x_left,
      double* y_high, double* y_low, void* node);
  glow_eObjectType type()
  {
    return glow_eObjectType_PolyLine;
  }
  void set_fill(int fillval)
  {
    fill = fillval;
  }
  void set_drawtype(glow_eDrawType drawtype)
  {
    draw_type = drawtype;
  }
  void set_linewidth(int linewidth)
  {
    line_width = linewidth;
  }
  void add_points(void* pos, glow_sPoint* pointarray, int point_cnt,
      int highlight, int hot);
  void traverse(int x, int y);
  GrowCtx* ctx;
  GlowArray a_points;
  glow_sPointX* points;
  glow_eDrawType draw_type;
  int line_width;
  int fix_line_width;
  int fill;
  int closed_line;
};

#endif
