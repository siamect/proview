/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <iostream>

#include "glow_growctx.h"

GlowPoint::GlowPoint(GrowCtx* glow_ctx, double x1, double y1)
    : ctx(glow_ctx), x(x1), y(y1)
{
  (*this).zoom();
}

void GlowPoint::posit(double x1, double y1)
{
  x = x1;
  y = y1;
  z_x = int(x * ctx->mw.zoom_factor_x + 0.5);
  z_y = int(y * ctx->mw.zoom_factor_y + 0.5);
  nav_z_x = int(x * ctx->navw.zoom_factor_x + 0.5);
  nav_z_y = int(y * ctx->navw.zoom_factor_y + 0.5);
}

void GlowPoint::posit_z(int x1, int y1)
{
  x = 1.0 * x1 / ctx->mw.zoom_factor_x;
  y = 1.0 * y1 / ctx->mw.zoom_factor_y;
  z_x = x1;
  z_y = y1;
  nav_z_x = int(x * ctx->navw.zoom_factor_x);
  nav_z_y = int(y * ctx->navw.zoom_factor_y);
}

void GlowPoint::zoom()
{
  z_x = int(x * ctx->mw.zoom_factor_x + 0.5);
  z_y = int(y * ctx->mw.zoom_factor_y + 0.5);
  current_zoom_factor = ctx->mw.zoom_factor_x;
}

void GlowPoint::nav_zoom()
{
  nav_z_x = int(x * ctx->navw.zoom_factor_x + 0.5);
  nav_z_y = int(y * ctx->navw.zoom_factor_y + 0.5);
}

void GlowPoint::print_zoom()
{
  print_z_x = x * ctx->print_zoom_factor;
  print_z_y = y * ctx->print_zoom_factor;
}

void GlowPoint::traverse(int x, int y)
{
}

void GlowPoint::save(std::ofstream& fp, glow_eSaveMode mode)
{
  fp << int(glow_eSave_Point) << '\n';
  fp << int(glow_eSave_Point_x) << FSPACE << x << '\n';
  fp << int(glow_eSave_Point_y) << FSPACE << y << '\n';
  fp << int(glow_eSave_End) << '\n';
}

void GlowPoint::open(std::ifstream& fp)
{
  int type = 0;
  int end_found = 0;
  char dummy[40];

  for (;;) {
    if (!fp.good()) {
      fp.clear();
      fp.getline(dummy, sizeof(dummy));
      printf("** Read error GlowPoint: \"%d %s\"\n", type, dummy);
    }

    fp >> type;
    switch (type) {
    case glow_eSave_Point:
      break;
    case glow_eSave_Point_x:
      fp >> x;
      break;
    case glow_eSave_Point_y:
      fp >> y;
      break;
    case glow_eSave_End:
      end_found = 1;
      break;
    default:
      std::cout << "GlowPoint:open syntax error\n";
      fp.getline(dummy, sizeof(dummy));
    }
    if (end_found)
      break;
  }
}

const GlowPoint& GlowPoint::operator+=(const GlowPoint p)
{
  x += p.x;
  y += p.y;
  z_x += p.z_x;
  z_y += p.z_y;
  return *this;
}

GlowPoint GlowPoint::operator+(const GlowPoint p)
{
  GlowPoint tmp(*this);
  tmp += p;
  return tmp;
}

const GlowPoint& GlowPoint::operator-=(const GlowPoint p)
{
  x -= p.x;
  y -= p.y;
  z_x -= p.z_x;
  z_y -= p.z_y;
  return *this;
}

GlowPoint GlowPoint::operator-(const GlowPoint p)
{
  GlowPoint tmp(*this);
  tmp -= p;
  return tmp;
}

std::ostream& operator<<(std::ostream& o, const GlowPoint p)
{
  o << '(' << p.x << ',' << p.y << ')' << '[' << p.z_x << ',' << p.z_y << ']';
  return o;
}
