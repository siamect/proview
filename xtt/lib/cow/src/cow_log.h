/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cow_log_h
#define cow_log_h

#include "co_dcli.h"
#include "co_syi.h"
#include "cow_wow.h"

typedef enum { log_mOption_Comment = 1 } log_mOption;

class CoLog;
class CoWow;

class CoLog {
protected:
  pwr_tFileName m_filename;
  char m_pid[40];
  CoWow* m_wow;
  static CoLog* m_default_log;
  int m_level;
  CoWowRecall* m_recall;

public:
  CoLog(const char* filename);
  ~CoLog()
  {
    if (this == m_default_log)
      m_default_log = 0;
    delete m_recall;
  }

  void set_default()
  {
    m_default_log = this;
  }
  void log(const char* category, const char* str, const char* cmt,
      unsigned int opt = 0);
  void get(char categories[][20], char* item,
      void item_cb(void*, pwr_tTime, char*, char*, char*, char*), void* ctx);
  void push()
  {
    m_level++;
  }
  void pull()
  {
    m_level--;
    if (m_level < 1)
      m_level = 1;
  }

  static void dlog(
      const char* category, const char* str, const char* cmt, unsigned int opt)
  {
    if (m_default_log)
      m_default_log->log(category, str, cmt, opt);
  }
  static void dpush()
  {
    if (m_default_log)
      m_default_log->push();
  }
  static void dpull()
  {
    if (m_default_log)
      m_default_log->pull();
  }
  static void dget(char categories[][20], char* item,
      void item_cb(void*, pwr_tTime, char*, char*, char*, char*), void* ctx)
  {
    if (m_default_log)
      m_default_log->get(categories, item, item_cb, ctx);
  }
};

#endif
