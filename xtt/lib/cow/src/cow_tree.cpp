/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_tbl.cpp -- Display object attributes */

#include <stdlib.h>

#include "co_cdh.h"
#include "co_time.h"
#include "cow_xhelp.h"
#include "co_dcli.h"
#include "cow_wow.h"
#include "co_cnf.h"

#include "flow_msg.h"

#include "glow_curvectx.h"

#include "cow_tree.h"
#include "cow_treenav.h"

CowTree::~CowTree()
{
}

CowTree::CowTree(void* xn_parent_ctx, pwr_tAttrRef* xn_itemlist,
    int xn_item_cnt, unsigned int xn_options,
    pwr_tStatus (*xn_get_object_info_cb)(
        void*, pwr_tAttrRef*, char*, int, char*, char*, int),
    pwr_tStatus (*xn_get_node_info_cb)(void*, char*, char*, int),
    pwr_tStatus (*xn_action_cb)(void*, pwr_tAttrRef*))
    : parent_ctx(xn_parent_ctx), close_cb(0), wow(0)
{
  get_object_info_cb = xn_get_object_info_cb;
  get_node_info_cb = xn_get_node_info_cb;
  action_cb = xn_action_cb;
}

void CowTree::message(void* cowtree, char severity, const char* message)
{
  ((CowTree*)cowtree)->message(severity, message);
}

void CowTree::activate_print()
{
  pwr_tFileName filename;
  pwr_tCmd cmd;

  dcli_translate_filename(filename, "$pwrp_tmp/cow_tree.ps");
  treenav->print(filename);

  sprintf(cmd, "$pwr_exe/rt_print.sh %s", filename);
  system(cmd);
}

void CowTree::activate_zoom_in()
{
  double zoom_factor;

  treenav->get_zoom(&zoom_factor);
  if (zoom_factor > 40)
    return;

  treenav->zoom(1.18);
}

void CowTree::activate_zoom_out()
{
  double zoom_factor;

  treenav->get_zoom(&zoom_factor);
  if (zoom_factor < 15)
    return;

  treenav->zoom(1.0 / 1.18);
}

void CowTree::activate_zoom_reset()
{
  treenav->unzoom();
}

void CowTree::activate_help()
{
  CoXHelp::dhelp("overview", "", navh_eHelpFile_Base, NULL, 0);
}

int CowTree::activate_button_ok()
{
  TrItemBase* item;
  pwr_tAttrRef aref;
  pwr_tStatus sts = 0;

  if (!treenav->get_select(&item)) {
    message('E', "Select an object");
    return 0;
  }

  switch (item->type) {
  case treenav_eItemType_Object:
  case treenav_eItemType_TreeObject: {
    TreeNav_object* hi = &((TrItemObject*)item)->item;

    aref = hi->aref;
    break;
  }
  default:
    message('E', "Select an object");
    return 0;
  }

  if (action_cb)
    sts = (action_cb)(parent_ctx, &aref);
  return sts;
}

int CowTree::get_select_cb(void* ctx, pwr_tAttrRef* aref)
{
  CowTree* cowtree = (CowTree*)ctx;
  TrItemBase* item;

  if (!cowtree->treenav->get_select(&item)) {
    cowtree->message('E', "Select an storage item");
    return 0;
  }

  switch (item->type) {
  case treenav_eItemType_Object:
  case treenav_eItemType_TreeObject: {
    TreeNav_object* hi = &((TrItemObject*)item)->item;

    *aref = hi->aref;
    break;
  }
  default:
    return 0;
  }
  return 1;
}

pwr_tStatus CowTree::get_object_info(void* ctx, pwr_tAttrRef* aref, char* name,
    int nsize, char* cname, char* descr, int dsize)
{
  CowTree* cowtree = (CowTree*)ctx;

  return (cowtree->get_object_info_cb)(
      cowtree->parent_ctx, aref, name, nsize, cname, descr, dsize);
}

pwr_tStatus CowTree::get_node_info(
    void* ctx, char* name, char* descr, int dsize)
{
  CowTree* cowtree = (CowTree*)ctx;

  return (cowtree->get_node_info_cb)(cowtree->parent_ctx, name, descr, dsize);
}

pwr_tStatus CowTree::action(void* ctx, pwr_tAttrRef* aref)
{
  CowTree* cowtree = (CowTree*)ctx;

  return (cowtree->action_cb)(cowtree->parent_ctx, aref);
}
