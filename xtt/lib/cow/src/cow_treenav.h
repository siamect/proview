/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cow_treenav_h
#define cow_treenav_h

/* cow_treenav.h -- Table Viewer */

#include <vector>

#include "rt_qcom.h"

#include "flow_browapi.h"

class TrItemBase;

typedef enum {
  treenav_eItemType_Object,
  treenav_eItemType_TreeObject,
  treenav_eItemType_TreeNode,
} treenav_eItemType;

typedef enum {
  treenav_mOpen_All = ~0,
  treenav_mOpen_Children = 1 << 0
} treenav_mOpen;

class TreeNav_object {
public:
  pwr_tAttrRef aref;
  pwr_tAName name;
  pwr_tObjName cname;
  pwr_tString80 description;

  TreeNav_object()
  {
    memset(&aref, 0, sizeof(aref));
    strcpy(name, "");
    strcpy(cname, "");
    strcpy(description, "");
  }
  TreeNav_object(const TreeNav_object& x) : aref(x.aref)
  {
    strcpy(name, x.name);
    strcpy(cname, x.cname);
    strcpy(description, x.description);
  }
  TreeNav_object& operator=(const TreeNav_object& x)
  {
    aref = x.aref;
    strcpy(name, x.name);
    strcpy(cname, x.cname);
    strcpy(description, x.description);

    return *this;
  }
};

typedef enum {
  treenav_eTreeItemType_No,
  treenav_eTreeItemType_Object,
  treenav_eTreeItemType_ObjectAttr
} treenav_eTreeItemType;

class TreeNode {
public:
  TreeNode()
      : fth(0), fch(0), fws(0), bws(0), type(treenav_eTreeItemType_No), idx(0),
        deleted(0)
  {
    strcpy(sname, "");
    strcpy(descr, "");
  }
  int fth;
  int fch;
  int fws;
  int bws;
  char sname[80];
  pwr_tString80 descr;
  treenav_eTreeItemType type;
  int idx;
  int deleted;
};

//! Class for handling of brow.
class TreeNavBrow {
public:
  TreeNavBrow(BrowCtx* brow_ctx, void* xn) : ctx(brow_ctx), treenav(xn){}
  ~TreeNavBrow();

  BrowCtx* ctx;
  void* treenav;
  brow_tNodeClass nc_object;
  brow_tNodeClass nc_node;
  flow_sAnnotPixmap* pixmap_leaf;
  flow_sAnnotPixmap* pixmap_map;
  flow_sAnnotPixmap* pixmap_openmap;

  void free_pixmaps();
  void allocate_pixmaps();
  void create_nodeclasses();
  void brow_setup();
};

//! The navigation area of the attribute editor.
class TreeNav {
public:
  TreeNav(void* xn_parent_ctx, pwr_tAttrRef* xn_itemlist, int xn_item_cnt,
      unsigned int xn_options,
      pwr_tStatus (*xn_get_object_info)(
          void*, pwr_tAttrRef*, char*, int, char*, char*, int),
      pwr_tStatus (*xn_get_node_info)(void*, char*, char*, int),
      pwr_tStatus* status);
  virtual ~TreeNav();

  void* parent_ctx;
  TreeNavBrow* brow;
  pwr_tAttrRef* itemlist;
  std::vector<TreeNav_object> objectlist;
  int item_cnt;
  void (*message_cb)(void*, char, const char*);
  std::vector<TreeNode> tree;
  unsigned int options;
  pwr_tStatus (*get_object_info)(
      void*, pwr_tAttrRef*, char*, int, char*, char*, int);
  pwr_tStatus (*get_node_info)(void*, char*, char*, int);

  void print(char* filename);
  int create_items();
  void build_tree();
  void tree_add(char* name, int list_index, treenav_eTreeItemType type);
  int get_select(TrItemBase** item);
  int get_item(char* oname, TreeNav_object** hi);
  void get_zoom(double* zoom_factor);
  void zoom(double zoom_factor);
  void unzoom();
  void show_tree();
  void show_list();
  void delete_item(TreeNav_object* hi);
  void create_objectlist(
      pwr_tAttrRef* xn_itemlist, int xn_item_cnt, pwr_tStatus* status);
  void add_item_command(char* name, char* command);
  int get_descr(char* name, int seg, int idx, char* descr);

  virtual void message(char sev, const char* text);
  virtual void set_inputfocus()
  {
  }
  static int init_brow_cb(FlowCtx* fctx, void* client_data);
};

class TrItemBase {
public:
  TrItemBase(treenav_eItemType t);
  virtual ~TrItemBase();
  treenav_eItemType type;
  virtual int close(TreeNav* treenav, double x, double y);
};

//! Item for an object in list layout.
class TrItemObject : public TrItemBase {
public:
  TrItemObject(TreeNav* treenav, TreeNav_object* item, brow_tNode dest,
      flow_eDest dest_code);
  virtual ~TrItemObject();

  TreeNav_object item;
  brow_tNode node;

  int close(TreeNav* treenav, double x, double y);
};

//! Item for an object in tree layout.
class TrItemTreeObject : public TrItemObject {
public:
  TrItemTreeObject(TreeNav* treenav, TreeNav_object* item, int index,
      brow_tNode dest, flow_eDest dest_code);
  virtual ~TrItemTreeObject();

  int idx;
};

//! Item for a tree node.
class TrItemNode : public TrItemBase {
public:
  TrItemNode(TreeNav* treenav, char* name, char* descr, int index,
      brow_tNode dest, flow_eDest dest_code);
  virtual ~TrItemNode();

  brow_tNode node;
  int idx;

  int open_children(TreeNav* treenav, double x, double y);
  int close(TreeNav* treenav, double x, double y);
};

#endif
