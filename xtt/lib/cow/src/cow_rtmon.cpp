/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* co_statusmon_nodelist.cpp -- Status Monitor */

#include <stdlib.h>

#include "co_cdh.h"
#include "co_string.h"
#include "co_time.h"

#include "rt_gdh.h"

#include "cow_wow.h"
#include "cow_rtmon.h"
#include "co_syi.h"
#include "rt_xnav_msg.h"

RtMon::RtMon(void* rtmon_parent_ctx, const char* rtmon_name,
    const char* rtmon_display, pwr_tStatus* status)
    : parent_ctx(rtmon_parent_ctx), nodelistnav(NULL), rtmon_displayed(0),
      help_cb(0), close_cb(0)
{
  pwr_tStatus sts;

  if (rtmon_display)
    strcpy(display, rtmon_display);
  else
    strcpy(display, "");
  syi_NodeName(&sts, nodename, sizeof(nodename));

  *status = 1;
}

//
//  Delete nodelist
//
RtMon::~RtMon()
{
}

void RtMon::activate_help()
{
  if (help_cb)
    (help_cb)(parent_ctx, "index /helpfile=\"$pwr_lang/rtmon_help.dat\"");
}

void RtMon::activate_start()
{
  char cmd[] = "rt_ini -i &";

  system(cmd);
}

void RtMon::activate_restart()
{
  char cmd[] = "rt_ini -r";

  system(cmd);
}

void RtMon::activate_stop()
{
  char nodename[40];
  char text[80] = "Do you want to stop Runtime Environment on ";
  pwr_tStatus sts;

  syi_NodeName(&sts, nodename, sizeof(nodename));
  strcat(text, nodename);

  wow->DisplayQuestion(this, "Stop Runtime", text, stop_ok_cb, 0, 0);
}

void RtMon::stop_ok_cb(void* ctx, void* data)
{
  char cmd[] = "rt_ini -s";

  system(cmd);
}

void RtMon::activate_reset()
{
  char nodename[40];
  char text[80] = "Do you want to reset Runtime Environment on ";
  pwr_tStatus sts;

  syi_NodeName(&sts, nodename, sizeof(nodename));
  strcat(text, nodename);

  wow->DisplayQuestion(this, "Reset Runtime", text, reset_ok_cb, 0, 0);
}

void RtMon::reset_ok_cb(void* ctx, void* data)
{
  char cmd[] = ". pwr_stop.sh";

  system(cmd);
}

void RtMon::activate_xtt()
{
  pwr_tCmd cmd;
  char displaystr[120] = "";

  if (!streq(display, ""))
    sprintf(displaystr, "--display %s", display);

  sprintf(cmd, "rt_xtt -q %s &", displaystr);
  system(cmd);
}

void RtMon::activate_op()
{
  pwr_tCmd cmd;
  char displaystr[120] = "";

  if (!streq(display, ""))
    sprintf(displaystr, "--display %s", display);

  sprintf(cmd, "rt_xtt -q -s -c %s &", displaystr);

  system(cmd);
}
