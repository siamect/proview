/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cow_msglist_h
#define cow_msglist_h

/* xtt_msglist.h -- Message list */

// Status is defined as int i xlib...
#ifdef Status
#undef Status
#endif

#include "flow_browapi.h"

typedef enum { msglist_eItemType_Msg } msglist_eItemType;

class MsgListBrow {
public:
  MsgListBrow(BrowCtx* brow_ctx, void* msgl) : ctx(brow_ctx), msglist(msgl)
  {
  }
  ~MsgListBrow();

  BrowCtx* ctx;
  void* msglist;
  brow_tNodeClass nc_info;
  brow_tNodeClass nc_error;
  brow_tNodeClass nc_warning;
  brow_tNodeClass nc_success;
  brow_tNodeClass nc_fatal;
  brow_tNodeClass nc_default;
  flow_sAnnotPixmap* pixmap_morehelp;

  void free_pixmaps();
  void allocate_pixmaps();
  void create_nodeclasses();
  void brow_setup();
};

class MsgList {
public:
  MsgList(void* ev_parent_ctx);
  virtual ~MsgList();

  void* parent_ctx;
  MsgListBrow* brow;
  void (*find_wnav_cb)(void*, pwr_tObjid);
  void (*find_plc_cb)(void*, pwr_tObjid);
  void (*find_ge_cb)(void*, char*, void*);

  virtual void set_input_focus()
  {
  }

  void zoom(double zoom_factor);
  void unzoom();
  void set_nodraw();
  void reset_nodraw();
  void remove_oldest();
  void clear();

  static int init_brow_cb(FlowCtx* fctx, void* client_data);
  static int brow_cb(FlowCtx* ctx, flow_tEvent event);
};

class ItemMsg {
public:
  ItemMsg(MsgList* msglist, const char* item_name, char* item_text,
      int item_severity, brow_tNode dest, flow_eDest dest_code);
  virtual ~ItemMsg();

  msglist_eItemType type;
  MsgList* msglist;
  brow_tNode node;
  pwr_tTime time;
  char text[200];
  int severity;

  virtual void find();
};

class ItemMsgObject : public ItemMsg {
public:
  ItemMsgObject(MsgList* msglist, const char* item_name, char* item_text,
      int item_severity, pwr_tOid item_oid, brow_tNode dest,
      flow_eDest dest_code);

  pwr_tOid oid;

  void find();
};

class ItemMsgObjectPlc : public ItemMsg {
public:
  ItemMsgObjectPlc(MsgList* msglist, const char* item_name, char* item_text,
      int item_severity, pwr_tOid item_oid, brow_tNode dest,
      flow_eDest dest_code);

  pwr_tOid oid;

  void find();
};

class ItemMsgObjectGe : public ItemMsg {
public:
  ItemMsgObjectGe(MsgList* msglist, const char* item_name, char* item_text,
      int item_severity, char* item_object, void* item_utility, brow_tNode dest,
      flow_eDest dest_code);

  char object[200];
  void* utility;

  void find();
};

#endif
