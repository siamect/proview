/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "co_cdh.h"
#include "co_string.h"
#include "co_time.h"

#include "cow_log.h"

CoLog* CoLog::m_default_log = 0;

CoLog::CoLog(const char* filename) : m_wow(0), m_level(1)
{
  dcli_translate_filename(m_filename, filename);
  strncpy(m_pid, syi_ProcessId(), sizeof(m_pid));
  m_recall = new CoWowRecall();
}

void CoLog::log(
    const char* category, const char* str, const char* cmt, unsigned int opt)
{
  std::ofstream fp;
  pwr_tStatus sts;
  char timstr[40];
  char username[80];
  char comment[200] = "";

  time_AtoAscii(0, time_eFormat_DateAndTime, timstr, sizeof(timstr));
  sts = syi_UserName(username, sizeof(username));
  if (EVEN(sts))
    strcpy(username, "Unknown");

  if (cmt)
    strncpy(comment, cmt, sizeof(comment));
  else if (m_level == 1 && m_wow && opt & log_mOption_Comment) {
    wow_sModalInputDialog* ret;

    ret = m_wow->CreateModalInputDialog("Log Comment", "Comment", "Ok",
        "Cancel", 0, 0, sizeof(comment) - 1, m_recall);
    if (ret->status == wow_eModalDialogReturn_Button1
        || ret->status == wow_eModalDialogReturn_ReturnPressed)
      strncpy(comment, ret->input_str, sizeof(comment));
    free(ret);
  }
  fp.open(m_filename, std::ios::out | std::ios::app);
  if (!fp) {
    fprintf(
        stderr, "Warning! CoLog::log could not open log file %s\n", m_filename);
    return;
  }

  if (m_level == 1)
    fp << "1  ";
  else
    fp << " " << m_level << " ";

  fp << timstr << " " << m_pid;
  for (int i = strlen(m_pid); i < 7; i++)
    fp << " ";
  fp << " " << category;
  for (int i = strlen(category); i < 11; i++)
    fp << " ";
  fp << " ";
  fp << " " << username;
  for (int i = strlen(username); i < 11; i++)
    fp << " ";
  fp << " ";
  fp << str;
  if (!streq(comment, ""))
    fp << " \"" << comment << "\"";
  fp << '\n';
  fp.close();
}

void CoLog::get(char categories[][20], char* item,
    void item_cb(void*, pwr_tTime, char*, char*, char*, char*), void* ctx)
{
  std::ifstream fp;
  char line[1024];
  char line_array[8][512];
  int parts;
  int num;
  unsigned int level;
  char timestr[80];
  pwr_tTime time;
  pwr_tStatus sts;

  fp.open(m_filename);

  while (fp.getline(line, sizeof(line))) {
    parts = dcli_parse(line, " ", "", (char*)line_array,
        sizeof(line_array) / sizeof(line_array[0]), sizeof(line_array[0]), 0);

    if (item
        && !(item[strlen(item) - 1] == '*'
               && str_NoCaseStrncmp(line_array[6], item, strlen(item) - 1) == 0)
        && str_NoCaseStrcmp(line_array[6], item) != 0)
      continue;

    int found = 0;
    if (categories) {
      for (int i = 0; !streq(categories[i], ""); i++) {
        if (streq(categories[i], line_array[4])) {
          found = 1;
          break;
        }
      }
    } else
      found = 1;

    if (!found)
      continue;

    num = sscanf(line_array[0], "%u", &level);
    if (num != 1)
      continue;

    strcpy(timestr, line_array[1]);
    strcat(timestr, " ");
    strcat(timestr, line_array[2]);
    sts = time_AsciiToA(timestr, &time);
    if (EVEN(sts))
      continue;

    if (parts > 7)
      item_cb(ctx, time, line_array[4], line_array[5], line_array[6],
          line_array[7]);
    else
      item_cb(ctx, time, line_array[4], line_array[5], line_array[6], 0);
  }
}
