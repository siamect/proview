/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cow_wow_qt_h
#define cow_wow_qt_h

/* cow_wow_qt.h -- useful windows */

#include "cow_wow.h"

#include <QDialog>
#include <QLineEdit>
#include <QTreeWidget>
#include <QWidget>

class CoWowEntryQt : public QLineEdit {
public:
  CoWowRecall* m_re;
  bool m_hide_on_esc;

  CoWowEntryQt(CoWowRecall* re = 0);

  void set_recall_buffer(CoWowRecall* re)
  {
    m_re = re;
  }

  void set_hide_on_esc(bool hide)
  {
    m_hide_on_esc = hide;
  }

protected:
  void keyPressEvent(QKeyEvent* event);
};

class CoWowModalDialogQt : public QDialog {
  Q_OBJECT

public:
  CoWowModalDialogQt(QWidget* parent, const char* title, const char* text,
      const char* button1, const char* button2, const char* button3,
      const char* image, int input_length = 0, CoWowRecall* recall = 0);
  QString text();

protected:
  void destroy(bool destroyWindow = true, bool destroySubWindows = true);

public slots:
  void modaldia_activate_cb();
  void modaldia_button1_cb();
  void modaldia_button2_cb();
  void modaldia_button3_cb();

private:
  QLineEdit* textinput;
};

class CoWowFocusTimerQt : public QObject {
  Q_OBJECT

public:
  CoWowFocusTimerQt();
  ~CoWowFocusTimerQt();
  void disable(int time);
  int disabled();

private:
  int set_focus_disabled;
  int request_cnt;
  QTimer* timer;

public slots:
  void enable_set_focus();
};

class CoWowTimerQtObject;
class CoWowTimerQt : public CoWowTimer {
public:
  CoWowTimerQt();
  ~CoWowTimerQt();
  void add(int time, void (*callback)(void* data), void* data);
  void remove();

private:
  QTimer* timer;
  CoWowTimerQtObject* object;
};

class CoWowTimerQtObject : public QObject {
  Q_OBJECT

public:
  CoWowTimerQtObject(CoWowTimerQt* parent) : QObject(), wow_timer(parent) {}

public slots:
  void timer_cb();

private:
  CoWowTimerQt* wow_timer;
};

class CoWowListWidgetQt : public QWidget {
  Q_OBJECT

public:
  CoWowListWidgetQt(QWidget* parent, const char* title, const char* texts,
      int textsize, void(action_cb)(void*, char*, int), void(cancel_cb)(void*),
      void* parent_ctx, int show_apply_button);

protected:
  void focusInEvent(QFocusEvent* event);
  void closeEvent(QCloseEvent* event);

private:
  QTreeWidget* list;
  void (*action_cb)(void*, char*, int);
  void (*cancel_cb)(void*);
  void* parent_ctx;
  int button_pressed = -1;

public slots:
  void list_row_activated_cb(QTreeWidgetItem* item, int i);
  void list_apply_cb();
  void list_ok_cb();
};

class CoWowQtObject;

class CoWowWarrantQt : public QDialog {
  Q_OBJECT

public:
  CoWowWarrantQt(CoWowQtObject* parent);

public slots:
  virtual void reject();

protected:
  void destroy(bool destroyWindow = true, bool destroySubWindows = true);
};

class CoWowQt : public CoWow {
public:
  CoWowQtObject* object;
  QTimer* m_wait_timerid;

  CoWowQt(QWidget* parent);
  ~CoWowQt();

  void DisplayQuestion(void* ctx, const char* title, const char* text,
      void (*questionbox_ok)(void*, void*),
      void (*questionbox_cancel)(void*, void*), void* data);
  void DisplayError(const char* title, const char* text,
      lng_eCoding coding = lng_eCoding_ISO8859_1);
  void DisplayText(
      const char* title, const char* text, int width = 0, int height = 0);
  void CreateInputDialog(void* ctx, const char* title, const char* text,
      void (*inputdialogbox_ok)(void*, void*, char*),
      void (*inputdialogbox_cancel)(void*, void*), int input_length,
      char* init_text, void* data);
  void* CreateList(const char* title, const char* texts, int textsize,
      void(action_cb)(void*, char*, int), void(cancel_cb)(void*), void* ctx,
      int show_apply_button = 0);
  void PopList(void* ctx);
  void DeleteList(void* ctx);
  void CreateFileSelDia(const char* title, void* parent_ctx,
      void (*file_selected_cb)(void*, char*, wow_eFileSelType),
      wow_eFileSelType file_type, wow_eFileSelAction action);
  int CreateModalDialog(const char* title, const char* text,
      const char* button1, const char* button2, const char* button3,
      const char* image);
  wow_sModalInputDialog* CreateModalInputDialog(const char* title,
      const char* text, const char* button1, const char* button2,
      const char* button3, const char* image, int input_length,
      CoWowRecall* recall = 0);

public:
  pwr_tStatus CreateMenuItem(
      const char* name, void* menu, int pixmap, int append, void* w);
  pwr_tStatus DeleteMenuItem(const char* name, void* menu);

  static pwr_tStatus CreateBrowPrintDialogQt(const char* title, void* flow_ctx, QWidget* brow_widget);
  static pwr_tStatus CreateFlowPrintDialogQt(const char* title, void* flow_ctx, QWidget* flow_widget);

  CoWowTimer* timer_new();

  void SetParent(QWidget* parent);

  void Wait(float time);

  static void PopupPosition(
      QWidget* parent, int x_event, int y_event, int* x, int* y);
  static int GetSelection(char* str, int size, const char* atom);
  static void SetWindowIcon(QWidget* w);

  static void update_title(QWidget* w, int editmode);
};

class CoWowQtObject : public QObject {
  Q_OBJECT

public:
  CoWowQtObject(QWidget* parent) : QObject(), parent_wid(parent) {}
  QWidget* parent_wid;

public slots:
  void DisplayWarranty();
  void DisplayLicense();

  void wait_cb();
};

#endif
