/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* cow_tree_gtk.cpp -- Tree viewer */

#include "co_cdh.h"
#include "co_time.h"
#include "co_dcli.h"
#include "cow_xhelp_gtk.h"

#include "cow_tree_gtk.h"
#include "cow_treenav_gtk.h"

#include "flow_browwidget_gtk.h"
#include "flow_msg.h"

#include "glow_curvectx.h"

void CowTreeGtk::message(char severity, const char* message)
{
  gtk_label_set_text(GTK_LABEL(msg_label), message);
}

static gint delete_event(GtkWidget* w, GdkEvent* event, gpointer data)
{
  CowTreeGtk* cowtree = (CowTreeGtk*)data;

  if (cowtree->close_cb)
    (cowtree->close_cb)(cowtree->parent_ctx);
  else
    delete cowtree;

  return FALSE;
}

static void destroy_event(GtkWidget* w, gpointer data)
{
  // CowTreeGtk *cowtree = (CowTreeGtk *)data;
  // delete cowtree;
}

static gboolean cowtree_focus_in_event(
    GtkWidget* w, GdkEvent* event, gpointer data)
{
  CowTreeGtk* cowtree = (CowTreeGtk*)data;

  if (cowtree->treenav)
    cowtree->treenav->set_inputfocus();

  return FALSE;
}

void CowTreeGtk::activate_print(GtkWidget* w, gpointer data)
{
  CowTree* cowtree = (CowTree*)data;

  cowtree->activate_print();
}

void CowTreeGtk::activate_close(GtkWidget* w, gpointer data)
{
  CowTree* cowtree = (CowTree*)data;
  if (cowtree->close_cb)
    (cowtree->close_cb)(cowtree);
  else
    delete cowtree;
}

void CowTreeGtk::activate_zoom_in(GtkWidget* w, gpointer data)
{
  CowTree* cowtree = (CowTree*)data;

  cowtree->activate_zoom_in();
}

void CowTreeGtk::activate_zoom_out(GtkWidget* w, gpointer data)
{
  CowTree* cowtree = (CowTree*)data;

  cowtree->activate_zoom_out();
}

void CowTreeGtk::activate_zoom_reset(GtkWidget* w, gpointer data)
{
  CowTree* cowtree = (CowTree*)data;

  cowtree->activate_zoom_reset();
}

void CowTreeGtk::activate_help(GtkWidget* w, gpointer data)
{
  CowTree* cowtree = (CowTree*)data;

  cowtree->activate_help();
}

void CowTreeGtk::activate_tree_layout(GtkWidget* w, gpointer data)
{
  CowTree* cowtree = (CowTree*)data;

  cowtree->treenav->show_tree();
}

void CowTreeGtk::activate_list_layout(GtkWidget* w, gpointer data)
{
  CowTree* cowtree = (CowTree*)data;

  cowtree->treenav->show_list();
}

void CowTreeGtk::activate_button_ok(GtkWidget* w, gpointer data)
{
  CowTree* cowtree = (CowTree*)data;
  pwr_tStatus sts;

  sts = cowtree->activate_button_ok();
  if (ODD(sts)) {
    if (cowtree->close_cb)
      (cowtree->close_cb)(cowtree->parent_ctx);
    else
      delete cowtree;
  }
}

void CowTreeGtk::activate_button_apply(GtkWidget* w, gpointer data)
{
  CowTree* cowtree = (CowTree*)data;
  pwr_tStatus sts;

  sts = cowtree->activate_button_ok();
}

void CowTreeGtk::activate_button_cancel(GtkWidget* w, gpointer data)
{
  CowTree* cowtree = (CowTree*)data;

  if (cowtree->close_cb)
    (cowtree->close_cb)(cowtree->parent_ctx);
  else
    delete cowtree;
}

void CowTreeGtk::pop()
{
  gtk_window_present(GTK_WINDOW(toplevel));
}

CowTreeGtk::CowTreeGtk(GtkWidget* a_parent_wid, void* a_parent_ctx,
    const char* title, pwr_tAttrRef* itemlist, int item_cnt,
    unsigned int options, pwr_tStatus (*get_object_info)(void*, pwr_tAttrRef*,
                              char*, int, char*, char*, int),
    pwr_tStatus (*get_node_info)(void*, char*, char*, int),
    pwr_tStatus (*action)(void*, pwr_tAttrRef*))
    : CowTree(a_parent_ctx, itemlist, item_cnt, options, get_object_info,
          get_node_info, action),
      parent_wid(a_parent_wid)
{
  int sts;
  pwr_tFileName fname;

  toplevel = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height", 400,
      "default-width", 600, "title", title, NULL);

  g_signal_connect(toplevel, "delete_event", G_CALLBACK(delete_event), this);
  g_signal_connect(toplevel, "destroy", G_CALLBACK(destroy_event), this);
  g_signal_connect(
      toplevel, "focus-in-event", G_CALLBACK(cowtree_focus_in_event), this);

  CoWowGtk::SetWindowIcon(toplevel);

  GtkWidget* vbox = gtk_vbox_new(FALSE, 0);

  // Menu
  // Accelerators
  GtkAccelGroup* accel_g
      = (GtkAccelGroup*)g_object_new(GTK_TYPE_ACCEL_GROUP, NULL);
  gtk_window_add_accel_group(GTK_WINDOW(toplevel), accel_g);

  GtkMenuBar* menu_bar = (GtkMenuBar*)g_object_new(GTK_TYPE_MENU_BAR, NULL);

  // File entry
  GtkWidget* file_print = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Print"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(file_print),
      gtk_image_new_from_stock("gtk-print", GTK_ICON_SIZE_MENU));
  g_signal_connect(file_print, "activate", G_CALLBACK(activate_print), this);

  GtkWidget* file_close
      = gtk_image_menu_item_new_from_stock(GTK_STOCK_CLOSE, accel_g);
  g_signal_connect(file_close, "activate", G_CALLBACK(activate_close), this);

  GtkMenu* file_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_print);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_close);

  GtkWidget* file = gtk_menu_item_new_with_mnemonic("_File");
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), file);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(file), GTK_WIDGET(file_menu));

  // View menu
  GtkWidget* view_tree_layout = gtk_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Tree Layout"));
  g_signal_connect(
      view_tree_layout, "activate", G_CALLBACK(activate_tree_layout), this);

  GtkWidget* view_list_layout = gtk_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_List Layout"));
  g_signal_connect(
      view_list_layout, "activate", G_CALLBACK(activate_list_layout), this);

  GtkWidget* view_zoom_in = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Zoom _In"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_in),
      gtk_image_new_from_stock("gtk-zoom-in", GTK_ICON_SIZE_MENU));
  g_signal_connect(
      view_zoom_in, "activate", G_CALLBACK(activate_zoom_in), this);
  gtk_widget_add_accelerator(view_zoom_in, "activate", accel_g, 'i',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_out = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Zoom _Out"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_out),
      gtk_image_new_from_stock("gtk-zoom-out", GTK_ICON_SIZE_MENU));
  g_signal_connect(
      view_zoom_out, "activate", G_CALLBACK(activate_zoom_out), this);
  gtk_widget_add_accelerator(view_zoom_out, "activate", accel_g, 'o',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_reset = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Zoom _Reset"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_reset),
      gtk_image_new_from_stock("gtk-zoom-100", GTK_ICON_SIZE_MENU));
  g_signal_connect(
      view_zoom_reset, "activate", G_CALLBACK(activate_zoom_reset), this);

  GtkMenu* view_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_tree_layout);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_list_layout);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_in);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_out);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_reset);

  GtkWidget* view
      = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_View"));
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), view);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(view), GTK_WIDGET(view_menu));

  // Help entry
  GtkWidget* help_overview = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Overview"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(help_overview),
      gtk_image_new_from_stock("gtk-help", GTK_ICON_SIZE_MENU));
  g_signal_connect(help_overview, "activate", G_CALLBACK(activate_help), this);
  gtk_widget_add_accelerator(help_overview, "activate", accel_g, 'h',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkMenu* help_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_overview);

  GtkWidget* help
      = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_Help"));
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), help);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(help), GTK_WIDGET(help_menu));

  // Toolbar
  GtkToolbar* tools = (GtkToolbar*)g_object_new(GTK_TYPE_TOOLBAR, NULL);

  GtkWidget* tools_zoom_in = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_in.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_in), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_zoom_in, "clicked", G_CALLBACK(activate_zoom_in), this);
  g_object_set(tools_zoom_in, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(
      tools, tools_zoom_in, CoWowGtk::translate_utf8("Zoom in"), "");

  GtkWidget* tools_zoom_out = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_out.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_out), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_zoom_out, "clicked", G_CALLBACK(activate_zoom_out), this);
  g_object_set(tools_zoom_out, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(
      tools, tools_zoom_out, CoWowGtk::translate_utf8("Zoom out"), "");

  GtkWidget* tools_zoom_reset = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_reset.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_reset), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_zoom_reset, "clicked", G_CALLBACK(activate_zoom_reset), this);
  g_object_set(tools_zoom_reset, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(
      tools, tools_zoom_reset, CoWowGtk::translate_utf8("Zoom reset"), "");

  // Ok can Cancel buttons
  GtkWidget* button_box = gtk_hbox_new(FALSE, 0);

  button_ok = gtk_button_new_with_label(CoWowGtk::translate_utf8("Ok"));
  g_object_set(button_ok, "can-focus", FALSE, NULL);
  gtk_widget_set_size_request(button_ok, 110, 25);
  g_signal_connect(button_ok, "clicked", G_CALLBACK(activate_button_ok), this);

  button_apply = gtk_button_new_with_label(CoWowGtk::translate_utf8("Apply"));
  g_object_set(button_apply, "can-focus", FALSE, NULL);
  gtk_widget_set_size_request(button_apply, 110, 25);
  g_signal_connect(
      button_apply, "clicked", G_CALLBACK(activate_button_apply), this);

  button_cancel = gtk_button_new_with_label(CoWowGtk::translate_utf8("Cancel"));
  g_object_set(button_cancel, "can-focus", FALSE, NULL);
  gtk_widget_set_size_request(button_cancel, 110, 25);
  g_signal_connect(
      button_cancel, "clicked", G_CALLBACK(activate_button_cancel), this);

  gtk_box_pack_start(GTK_BOX(button_box), button_ok, FALSE, FALSE, 20);
  gtk_box_pack_start(GTK_BOX(button_box), button_apply, FALSE, FALSE, 40);
  gtk_box_pack_end(GTK_BOX(button_box), button_cancel, FALSE, FALSE, 20);

  // Statusbar
  GtkWidget* statusbar = gtk_hbox_new(FALSE, 0);
  msg_label = gtk_label_new("");
  gtk_widget_set_size_request(msg_label, -1, 25);

  gtk_box_pack_start(GTK_BOX(statusbar), msg_label, FALSE, FALSE, 20);
  gtk_widget_show_all(statusbar);

  treenav = new TreeNavGtk(this, toplevel, itemlist, item_cnt, options,
      get_object_info, get_node_info, &brow_widget, &sts);
  treenav->message_cb = &CowTree::message;

  gtk_box_pack_start(GTK_BOX(vbox), GTK_WIDGET(menu_bar), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), GTK_WIDGET(tools), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), GTK_WIDGET(brow_widget), TRUE, TRUE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), GTK_WIDGET(button_box), FALSE, FALSE, 20);
  gtk_box_pack_start(GTK_BOX(vbox), GTK_WIDGET(statusbar), FALSE, FALSE, 3);

  gtk_container_add(GTK_CONTAINER(toplevel), vbox);

  gtk_widget_show_all(toplevel);

  wow = new CoWowGtk(toplevel);
}

CowTreeGtk::~CowTreeGtk()
{
  delete (TreeNavGtk*)treenav;

  gtk_widget_destroy(toplevel);
}
