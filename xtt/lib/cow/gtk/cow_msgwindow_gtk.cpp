/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* co_msgwindow_gtk.cpp -- Message window */

#include <stdlib.h>
#include <string.h>

#include "co_cdh.h"
#include "co_time.h"
#include "co_dcli.h"
#include "cow_xhelp.h"
#include "cow_msgwindow_gtk.h"
#include "cow_msglist_gtk.h"

static gint delete_event(GtkWidget* w, GdkEvent* event, gpointer msgw)
{
  MsgWindowGtk::activate_exit(w, msgw);

  return TRUE;
}

static void destroy_event(GtkWidget* w, gpointer data)
{
}

MsgWindowGtk::MsgWindowGtk(void* msg_parent_ctx, GtkWidget* msg_parent_wid,
    const char* msg_name, pwr_tStatus* status)
    : MsgWindow(msg_parent_ctx, msg_name, status), parent_wid(msg_parent_wid)
{
  const int window_width = 800;
  const int window_height = 600;

  toplevel = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height",
      window_height, "default-width", window_width, "title",
      CoWowGtk::translate_utf8(msg_name), NULL);

  g_signal_connect(toplevel, "delete_event", G_CALLBACK(delete_event), this);
  g_signal_connect(toplevel, "destroy", G_CALLBACK(destroy_event), this);
  g_signal_connect(toplevel, "focus-in-event",
      G_CALLBACK(MsgWindowGtk::action_inputfocus), this);

  CoWowGtk::SetWindowIcon(toplevel);

  GtkAccelGroup* accel_g
      = (GtkAccelGroup*)g_object_new(GTK_TYPE_ACCEL_GROUP, NULL);
  gtk_window_add_accel_group(GTK_WINDOW(toplevel), accel_g);

  GtkMenuBar* menu_bar = (GtkMenuBar*)g_object_new(GTK_TYPE_MENU_BAR, NULL);

  // File Entry
  GtkWidget* file_clear
      = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("C_lear"));
  g_signal_connect(
      file_clear, "activate", G_CALLBACK(MsgWindowGtk::activate_clear), this);

  GtkWidget* file_print = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Print"));
  g_signal_connect(
      file_print, "activate", G_CALLBACK(MsgWindowGtk::activate_print), this);

  GtkWidget* file_close = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Close"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(file_close),
      gtk_image_new_from_stock("gtk-close", GTK_ICON_SIZE_MENU));
  g_signal_connect(
      file_close, "activate", G_CALLBACK(MsgWindowGtk::activate_exit), this);
  gtk_widget_add_accelerator(file_close, "activate", accel_g, 'w',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkMenu* file_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_clear);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_print);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_close);

  GtkWidget* file
      = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_File"));
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), file);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(file), GTK_WIDGET(file_menu));

  // View menu
  GtkWidget* view_zoom_in = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Zoom _In"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_in),
      gtk_image_new_from_stock("gtk-zoom-in", GTK_ICON_SIZE_MENU));
  g_signal_connect(view_zoom_in, "activate",
      G_CALLBACK(MsgWindowGtk::activate_zoom_in), this);
  gtk_widget_add_accelerator(view_zoom_in, "activate", accel_g, 'i',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_out = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Zoom _Out"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_out),
      gtk_image_new_from_stock("gtk-zoom-out", GTK_ICON_SIZE_MENU));
  g_signal_connect(view_zoom_out, "activate",
      G_CALLBACK(MsgWindowGtk::activate_zoom_out), this);
  gtk_widget_add_accelerator(view_zoom_out, "activate", accel_g, 'o',
      GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_reset = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Zoom _Reset"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_reset),
      gtk_image_new_from_stock("gtk-zoom-100", GTK_ICON_SIZE_MENU));
  g_signal_connect(view_zoom_reset, "activate",
      G_CALLBACK(MsgWindowGtk::activate_zoom_reset), this);

  GtkMenu* view_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_in);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_out);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_reset);

  GtkWidget* view
      = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_View"));
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), view);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(view), GTK_WIDGET(view_menu));

  form = gtk_vbox_new(FALSE, 0);

  // Create msgnav
  msgnav = new MsgListGtk(this, form, &nav_widget);
  msgnav->find_wnav_cb = MsgWindow::msgw_find_wnav_cb;
  msgnav->find_plc_cb = MsgWindow::msgw_find_plc_cb;
  msgnav->find_ge_cb = MsgWindow::msgw_find_ge_cb;

  gtk_box_pack_start(GTK_BOX(form), GTK_WIDGET(menu_bar), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(form), GTK_WIDGET(nav_widget), TRUE, TRUE, 0);

  gtk_container_add(GTK_CONTAINER(toplevel), form);

  gtk_widget_show_all(toplevel);
  g_object_set(toplevel, "visible", FALSE, NULL);

  wow = new CoWowGtk(toplevel);
}

//
//  Delete window
//
MsgWindowGtk::~MsgWindowGtk()
{
  if (toplevel)
    gtk_widget_destroy(toplevel);
  if (msgnav)
    delete msgnav;
}

void MsgWindowGtk::map()
{
  if (nodraw) {
    deferred_map = 1;
    return;
  } else
    deferred_map = 0;

  if (maptimer.disabled())
    return;

  if (!displayed) {
    g_object_set(toplevel, "visible", TRUE, NULL);
    displayed = 1;
  } else {
    gtk_window_present(GTK_WINDOW(toplevel));
  }
  maptimer.disable(400);
}

void MsgWindowGtk::unmap()
{
  if (displayed) {
    g_object_set(toplevel, "visible", FALSE, NULL);
    displayed = 0;
  }
}

void MsgWindowGtk::print()
{
  pwr_tStatus sts;
  char title[80];

  strncpy(title, CoWowGtk::translate_utf8(name), sizeof(title));

  CoWowGtk::CreateBrowPrintDialogGtk(title, msgnav->brow->ctx,
      flow_eOrientation_Landscape, 1.4, (void*)toplevel, &sts);
}

gboolean MsgWindowGtk::action_inputfocus(
    GtkWidget* w, GdkEvent* event, gpointer data)
{
  MsgWindowGtk* msgw = (MsgWindowGtk*)data;

  if (msgw && msgw->displayed) {
    if (msgw->focustimer.disabled())
      return FALSE;

    msgw->msgnav->set_input_focus();
    msgw->focustimer.disable(400);
  }
  return FALSE;
}

void MsgWindowGtk::activate_exit(GtkWidget* w, gpointer data)
{
  MsgWindowGtk* msgw = (MsgWindowGtk*)data;

  g_object_set(msgw->toplevel, "visible", FALSE, NULL);
  msgw->displayed = 0;
}

void MsgWindowGtk::activate_print(GtkWidget* w, gpointer data)
{
  MsgWindow* msgw = (MsgWindow*)data;

  msgw->activate_print();
}

void MsgWindowGtk::activate_clear(GtkWidget* w, gpointer data)
{
  MsgWindow* msgw = (MsgWindow*)data;

  msgw->msgnav->clear();
  msgw->size = 0;
}

void MsgWindowGtk::activate_zoom_in(GtkWidget* w, gpointer data)
{
  MsgWindow* msgw = (MsgWindow*)data;

  msgw->msgnav->zoom(1.2);
}

void MsgWindowGtk::activate_zoom_out(GtkWidget* w, gpointer data)
{
  MsgWindow* msgw = (MsgWindow*)data;

  msgw->msgnav->zoom(5.0 / 6);
}

void MsgWindowGtk::activate_zoom_reset(GtkWidget* w, gpointer data)
{
  MsgWindow* msgw = (MsgWindow*)data;

  msgw->msgnav->unzoom();
}

void MsgWindowGtk::activate_help(GtkWidget* w, gpointer data)
{
  CoXHelp::dhelp("messagewindow_refman", 0, navh_eHelpFile_Other,
      "$pwr_lang/man_dg.dat", true);
}

void MsgWindowGtk::activate_help_message(GtkWidget* w, gpointer data)
{
  CoXHelp::dhelp("message window", 0, navh_eHelpFile_Base, 0, true);
}
