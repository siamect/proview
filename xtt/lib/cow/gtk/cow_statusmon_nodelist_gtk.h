/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cow_statusmon_nodelist_gtk_h
#define cow_statusmon_nodelist_gtk_h

/* cow_statusmon_nodelist_gtk.h -- Status Monitor */

#include "cow_statusmon_nodelist.h"

#include "cow_wow_gtk.h"

class NodelistGtk : public Nodelist {
public:
  NodelistGtk(void* nodelist_parent_ctx, GtkWidget* nodelist_parent_wid,
      const char* nodelist_name, int nodelist_mode,
      int nodelist_view_node_descr, int msgw_pop, pwr_tStatus* status);
  ~NodelistGtk();

  GtkWidget* parent_wid;
  GtkWidget* parent_wid_nodelist;
  GtkWidget* toplevel;
  GtkWidget* form_nodelist;
  GtkWidget* nodelistnav_widget;
  GdkCursor* clock_cursor;
  GtkWidget* add_india_widget;
  GtkWidget* add_india_label;
  GtkWidget* add_india_label2;
  GtkWidget* add_india_label3;
  GtkWidget* add_india_text;
  GtkWidget* add_india_text2;
  GtkWidget* add_india_text3;
  GtkWidget* mod_india_widget;
  GtkWidget* mod_india_label;
  GtkWidget* mod_india_label2;
  GtkWidget* mod_india_label3;
  GtkWidget* mod_india_text;
  GtkWidget* mod_india_text2;
  GtkWidget* mod_india_text3;
  CoWowFocusTimerGtk focustimer;

  void pop();
  void set_clock_cursor();
  void reset_cursor();
  void free_cursor();
  void create_add_input_dialog();
  void create_mod_input_dialog();
  void open_add_input_dialog(const char* text, const char* text2,
      const char* text3, const char* title, const char* init_text,
      void (*ok_cb)(Nodelist*, char*, char*, char*));
  void open_mod_input_dialog(const char* text, const char* text2,
      const char* text3, const char* title, const char* init_text,
      const char* init_text2, const char* init_text3,
      void (*ok_cb)(Nodelist*, char*, char*, char*));

  static gboolean action_inputfocus(
      GtkWidget* w, GdkEvent* event, gpointer data);
  static void activate_exit(GtkWidget* w, gpointer data);
  static void activate_add_node(GtkWidget* w, gpointer data);
  static void activate_modify_node(GtkWidget* w, gpointer data);
  static void activate_remove_node(GtkWidget* w, gpointer data);
  static void activate_open_xtt(GtkWidget* w, gpointer data);
  static void activate_open_opplace(GtkWidget* w, gpointer data);
  static void activate_open_rtmon(GtkWidget* w, gpointer data);
  static void activate_save(GtkWidget* w, gpointer data);
  static void activate_show_events(GtkWidget* w, gpointer data);
  static void activate_pop_events(GtkWidget* w, gpointer data);
  static void activate_gui_qt(GtkWidget* w, gpointer data);
  static void activate_gui_gtk(GtkWidget* w, gpointer data);
  static void activate_mode_systemstatus(GtkWidget* w, gpointer data);
  static void activate_mode_userstatus1(GtkWidget* w, gpointer data);
  static void activate_mode_userstatus2(GtkWidget* w, gpointer data);
  static void activate_mode_userstatus3(GtkWidget* w, gpointer data);
  static void activate_mode_userstatus4(GtkWidget* w, gpointer data);
  static void activate_mode_userstatus5(GtkWidget* w, gpointer data);
  static void activate_zoom_in(GtkWidget* w, gpointer data);
  static void activate_zoom_out(GtkWidget* w, gpointer data);
  static void activate_zoom_reset(GtkWidget* w, gpointer data);
  static void activate_help(GtkWidget* w, gpointer data);
  static void activate_add_india_ok(GtkWidget* w, gpointer data);
  static void activate_add_india_cancel(GtkWidget* w, gpointer data);
  static void activate_mod_india_ok(GtkWidget* w, gpointer data);
  static void activate_mod_india_cancel(GtkWidget* w, gpointer data);
};

#endif
