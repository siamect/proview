/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_methodtoolbar_gtk.cpp -- Display method toolbar */

#include <stdlib.h>

#include "co_cdh.h"
#include "co_dcli.h"
#include "co_string.h"

#include "cow_wow_gtk.h"

#include "ge_methods.h"

#include "xtt_methodtoolbar_gtk.h"
#include "xtt_xnav.h"

XttMethodToolbarGtk::XttMethodToolbarGtk(void* parent_ctx, void* xnav,
    unsigned int op_method_mask, unsigned int mnt_method_mask,
    const char* tooltip_suffix)
    : XttMethodToolbar(
          parent_ctx, xnav, op_method_mask, mnt_method_mask, tooltip_suffix),
      m_timerid(0)
{
  for (int i = 0; i < 64; i++) {
    m_cb[i].mt = this;
    m_cb[i].idx = i;
  }
}

XttMethodToolbarGtk::~XttMethodToolbarGtk()
{
  if (m_timerid)
    g_source_remove(m_timerid);
}

void XttMethodToolbarGtk::activate_button(GtkWidget* w, gpointer data)
{
  XttMethodToolbarGtk* mt = ((xtt_sMethodButtonCb*)data)->mt;
  int idx = ((xtt_sMethodButtonCb*)data)->idx;

  int sts = 0;
  int is_attr;
  pwr_sAttrRef aref;
  pwr_tAName aname;
  char cmd[512];
  xmenu_eItemType menu_type;

  if (mt->get_select_cb)
    sts = (mt->get_select_cb)(mt->m_parent_ctx, &aref, &is_attr);

  if (ODD(sts)) {
    if (aref.Flags.b.Object)
      menu_type = xmenu_eItemType_Object;
    else if (aref.Flags.b.ObjectAttr)
      menu_type = xmenu_eItemType_AttrObject;
    else
      menu_type = xmenu_eItemType_Attribute;

    sts = gdh_AttrrefToName(
        &aref, aname, sizeof(aname), cdh_mName_volumeStrict);
    if (idx < 32)
      sprintf(cmd, "call method/function=%s/object=%s",
          GeMethods::op_method[idx], aname);
    else
      sprintf(cmd, "call method/function=%s/object=%s",
          GeMethods::mnt_method[idx - 32], aname);

    mt->m_xnav->command(cmd);
  }
}

static int methods_command_cb(char* command, void* udata)
{
  XNav* xnav = (XNav*)udata;
  xnav->command(command);
  return xnav->get_command_sts();
}

GtkWidget* XttMethodToolbarGtk::build()
{
  pwr_tFileName fname;

  // Toolbar
  m_toolbar_w = (GtkWidget*)g_object_new(GTK_TYPE_TOOLBAR, NULL);

  for (int i = 0; i < GeMethods::opmeth_size; i++) {
    if (m_op_method_mask & (1 << i)
        && !streq(GeMethods::op_image[i], "")) {
      char tooltip[200];

      strcpy(tooltip, GeMethods::op_tooltip[i]);
      strcat(tooltip, m_tooltip_suffix);

      m_op_button_w[i] = gtk_button_new();
      dcli_translate_filename(fname, GeMethods::op_image[i]);
      gtk_container_add(
          GTK_CONTAINER(m_op_button_w[i]), gtk_image_new_from_file(fname));
      g_signal_connect(
          m_op_button_w[i], "clicked", G_CALLBACK(activate_button), &m_cb[i]);
      g_object_set(m_op_button_w[i], "can-focus", FALSE, NULL);
      gtk_toolbar_append_widget(GTK_TOOLBAR(m_toolbar_w), m_op_button_w[i],
          CoWowGtk::translate_utf8(tooltip), "");
    }
  }
  for (int i = 0; i < GeMethods::mntmeth_size; i++) {
    if (m_mnt_method_mask & (1 << i)
        && !streq(GeMethods::mnt_image[i], "")) {
      char tooltip[200];

      strcpy(tooltip, GeMethods::mnt_tooltip[i]);
      strcat(tooltip, m_tooltip_suffix);

      m_mnt_button_w[i] = gtk_button_new();
      dcli_translate_filename(fname, GeMethods::mnt_image[i]);
      gtk_container_add(
          GTK_CONTAINER(m_mnt_button_w[i]), gtk_image_new_from_file(fname));
      g_signal_connect(m_mnt_button_w[i], "clicked",
          G_CALLBACK(activate_button), &m_cb[32 + i]);
      g_object_set(m_mnt_button_w[i], "can-focus", FALSE, NULL);
      gtk_toolbar_append_widget(GTK_TOOLBAR(m_toolbar_w), m_mnt_button_w[i],
          CoWowGtk::translate_utf8(tooltip), "");
    }
  }
  return m_toolbar_w;
}

void XttMethodToolbarGtk::set_sensitive()
{
  if (m_timerid)
    g_source_remove(m_timerid);

  m_timerid = g_timeout_add(400, set_sensitive_cb, this);
}

gboolean XttMethodToolbarGtk::set_sensitive_cb(void* data)
{
  XttMethodToolbarGtk* toolbar = (XttMethodToolbarGtk*)data;

  toolbar->m_timerid = 0;
  toolbar->set_current_sensitive();
  return FALSE;
}

void XttMethodToolbarGtk::set_current_sensitive()
{
  if (m_disabled)
    return;

  int is_attr;
  pwr_sAttrRef aref;
  xmenu_eItemType menu_type;
  pwr_tStatus sts = 0;

  if (get_select_cb)
    sts = (get_select_cb)(m_parent_ctx, &aref, &is_attr);
  if (EVEN(sts)) {
    // Nothing selected
    for (int i = 0; i < GeMethods::opmeth_size; i++) {
      if (m_op_method_mask & (1 << i)
          && !streq(GeMethods::op_image[i], ""))
        gtk_widget_set_sensitive(m_op_button_w[i], FALSE);
    }
    for (int i = 0; i < GeMethods::mntmeth_size; i++) {
      if (m_mnt_method_mask & (1 << i)
          && !streq(GeMethods::mnt_image[i], ""))
        gtk_widget_set_sensitive(m_mnt_button_w[i], FALSE);
    }
  } else {
    gdh_sVolumeInfo info;

    // Skip extern volumes
    sts = gdh_GetVolumeInfo(aref.Objid.vid, &info);
    if (EVEN(sts))
      return;

    if (info.cid == pwr_eClass_ExternVolume) {
      for (int i = 0; i < GeMethods::opmeth_size; i++) {
        if (m_op_method_mask & (1 << i)
            && !streq(GeMethods::op_image[i], ""))
          gtk_widget_set_sensitive(m_op_button_w[i], FALSE);
      }
      for (int i = 0; i < GeMethods::mntmeth_size; i++) {
        if (m_mnt_method_mask & (1 << i)
            && !streq(GeMethods::mnt_image[i], ""))
          gtk_widget_set_sensitive(m_mnt_button_w[i], FALSE);
      }
      return;
    }

    if (aref.Flags.b.Object)
      menu_type = xmenu_eItemType_Object;
    else if (aref.Flags.b.ObjectAttr)
      menu_type = xmenu_eItemType_AttrObject;
    else
      menu_type = xmenu_eItemType_Attribute;

    pwr_tAName aname;
    pwr_sClass_XttMethodsMask xm_mask;
    int mask_store = 0;

    sts = gdh_AttrrefToName(
        &aref, aname, sizeof(aname), cdh_mName_volumeStrict);
    if (EVEN(sts))
      return;

    sts = GeMethods::get_xm_mask(
        0, aname, &xm_mask, &mask_store, methods_command_cb, m_xnav);

    for (int i = 0; i < GeMethods::opmeth_size; i++) {
      if (m_op_method_mask & (1 << i)
          && !streq(GeMethods::op_image[i], "")) {
        if (xm_mask.OpMethods & (1 << i))
          gtk_widget_set_sensitive(m_op_button_w[i], TRUE);
        else
          gtk_widget_set_sensitive(m_op_button_w[i], FALSE);
      }
    }
    for (int i = 0; i < GeMethods::mntmeth_size; i++) {
      if (m_mnt_method_mask & (1 << i)
          && !streq(GeMethods::mnt_image[i], "")) {
        if (xm_mask.MntMethods & (1 << i))
          gtk_widget_set_sensitive(m_mnt_button_w[i], TRUE);
        else
          gtk_widget_set_sensitive(m_mnt_button_w[i], FALSE);
      }
    }
    if (mask_store) {
      strcat(aname, ".XttMethodsMask");
      sts = gdh_SetObjectInfo(aname, &xm_mask, sizeof(xm_mask));
      if (EVEN(sts))
        printf("Set mask error %s\n", aname);
    }
  }
}
