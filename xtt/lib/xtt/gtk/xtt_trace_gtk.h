/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_trace_gtk_h
#define xtt_trace_gtk_h

#include "xtt_trace.h"

class RtTraceGtk : public RtTrace {
public:
  GtkWidget* parent_wid;
  GtkWidget* flow_widget;
  GtkWidget* toplevel;
  GtkWidget* form;
  GtkWidget* menu;
  GtkWidget* nav_shell;
  GtkWidget* nav_widget;

  RtTraceGtk(void* parent_ctx, GtkWidget* parent_wid, pwr_tObjid objid,
      pwr_tStatus* status);
  ~RtTraceGtk();

  void pop();
  void popup_menu_position(int event_x, int event_y, int* x, int* y);
  RtTrace* subwindow_new(void* ctx, pwr_tObjid oid, pwr_tStatus* sts);

  static void activate_close(GtkWidget* w, gpointer data);

private:
  static void activate_print(GtkWidget* w, gpointer data);
  static void activate_printselect(GtkWidget* w, gpointer data);
  static void activate_savetrace(GtkWidget* w, gpointer data);
  static void activate_restoretrace(GtkWidget* w, gpointer data);
  static void activate_cleartrace(GtkWidget* w, gpointer data);
  static void activate_parent_window(GtkWidget* w, gpointer data);
  static void activate_display_object(GtkWidget* w, gpointer data);
  static void activate_collect_insert(GtkWidget* w, gpointer data);
  static void activate_open_object(GtkWidget* w, gpointer data);
  static void activate_open_subwindow(GtkWidget* w, gpointer data);
  static void activate_show_cross(GtkWidget* w, gpointer data);
  static void activate_open_classgraph(GtkWidget* w, gpointer data);
  static void activate_trace(GtkWidget* w, gpointer data);
  static void activate_simulate(GtkWidget* w, gpointer data);
  static void activate_view(GtkWidget* w, gpointer data);
  static void activate_zoomin(GtkWidget* w, gpointer data);
  static void activate_zoomout(GtkWidget* w, gpointer data);
  static void activate_zoomreset(GtkWidget* w, gpointer data);
  static void activate_scantime1(GtkWidget* w, gpointer data);
  static void activate_scantime2(GtkWidget* w, gpointer data);
  static void activate_scantime3(GtkWidget* w, gpointer data);
  static void activate_scantime4(GtkWidget* w, gpointer data);
  static void activate_scantime5(GtkWidget* w, gpointer data);
  static void activate_help(GtkWidget* w, gpointer data);
  static void activate_helpplc(GtkWidget* w, gpointer data);
  static void activate_helpplclist(GtkWidget* w, gpointer data);
};
#endif
