/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_op_gtk_h
#define xtt_op_gtk_h

/* xtt_op_gtk.h -- Operator window in xtt */

#include "xtt_op.h"

#include "cow_wow_gtk.h"

class OpCmd {
public:
  GtkWidget* w;
  pwr_tCmd cmd;

  OpCmd(GtkWidget* widget, const char* command) : w(widget)
  {
    strncpy(cmd, command, sizeof(cmd));
  }
};

class OpGtk : public Op {
public:
  OpGtk(void* op_parent_ctx, GtkWidget* op_parent_wid, char* opplace,
      pwr_tStatus* status);
  ~OpGtk();

  GtkWidget* parent_wid;
  GtkWidget* parent_wid_op;
  GtkWidget* toplevel;
  GtkWidget* alarmcnt_label;
  GtkWidget* aalarm_mark;
  GtkWidget* aalarm_label[5];
  GtkWidget* aalarm_active[5];
  GtkWidget* aalarm_active_box[5];
  GtkWidget* aalarm_info[5];
  GtkWidget* aalarm_filler[5];
  GtkWidget* aalarm_box[5];
  GtkWidget* balarm_label;
  GtkWidget* balarm_active;
  GtkWidget* balarm_active_box;
  GtkWidget* balarm_info;
  GtkWidget* balarm_box;
  GtkWidget* balarm_ebox;
  GtkWidget* balarm_mark;
  GtkWidget* appl_form;
  GtkWidget* decr_button;
  GtkWidget* tools_close;
  GtkWidget* functions_close;
  GtkWidget* funcbox[5];
  GtkMenuBar* menu_bar;
  GtkWidget* title_label;
  GtkWidget* appl_buttons[25];
  GtkWidget* tools;
  GtkWidget* tools2;
  GdkColor red_color;
  GdkColor yellow_color;
  GdkColor green_color;
  GdkColor gray_color;
  GdkColor white_color;
  GdkRectangle monitor_geometry;
  int a_height;
  int a_exist[5];
  int a_active[5];
  char a_alarm_moretext[5][256];
  char b_alarm_moretext[256];
  int text_size;
  CoWowFocusTimerGtk poptimer;
  std::vector<OpCmd> cmd_vect;

  void map();
  int configure(char* opplace_str);
  void update_alarm_info();
  void add_close_button();
  int get_cmd(GtkWidget* w, char* cmd);
  int create_menu_item(
      const char* name, int pixmap, int append, const char* cmd);
  int delete_menu_item(const char* name);
  void change_sup_color(void* imagew, op_eSupColor color);
  void set_title(char* user);
  void set_color_theme(int idx);
  void set_text_size();

  static void activate_exit(GtkWidget* w, gpointer data);
  static void activate_aalarm_ack(GtkWidget* w, gpointer data);
  static void activate_balarm_ack(GtkWidget* w, gpointer data);
  static void activate_aalarm_incr(GtkWidget* w, gpointer data);
  static void activate_aalarm_decr(GtkWidget* w, gpointer data);
  static void activate_zoom_in(GtkWidget* w, gpointer data);
  static void activate_zoom_out(GtkWidget* w, gpointer data);
  static void activate_colortheme(GtkWidget* w, gpointer data);
  static void activate_alarmlist(GtkWidget* w, gpointer data);
  static void activate_eventlist(GtkWidget* w, gpointer data);
  static void activate_eventlog(GtkWidget* w, gpointer data);
  static void activate_blocklist(GtkWidget* w, gpointer data);
  static void activate_navigator(GtkWidget* w, gpointer data);
  static void activate_help(GtkWidget* w, gpointer data);
  static void activate_help_overview(GtkWidget* w, gpointer data);
  static void activate_help_opwin(GtkWidget* w, gpointer data);
  static void activate_help_proview(GtkWidget* w, gpointer data);
  static void activate_trend(GtkWidget* w, gpointer data);
  static void activate_fast(GtkWidget* w, gpointer data);
  static void activate_history(GtkWidget* w, gpointer data);
  static void activate_switch_user(GtkWidget* w, gpointer data);
  static void activate_show_user(GtkWidget* w, gpointer data);
  static void activate_logout(GtkWidget* w, gpointer data);
  static void activate_cmd_menu_item(GtkWidget* w, gpointer data);
  static void activate_sup_node(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_graph(GtkWidget* w, gpointer data);
  static void activate_appl1(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl2(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl3(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl4(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl5(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl6(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl7(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl8(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl9(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl10(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl11(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl12(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl13(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl14(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl15(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl16(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl17(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl18(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl19(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl20(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl21(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl22(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl23(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl24(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_appl25(GtkWidget* w, GdkEventButton* b, gpointer data);
  static void activate_info(GtkWidget* w, gpointer data);
};

#endif
