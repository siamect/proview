/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <stdlib.h>

#include "pwr.h"
#include "pwr_baseclasses.h"
#include "co_cdh.h"
#include "rt_gdh_msg.h"
#include "rt_xnav_msg.h"

#include "glow_curveapi.h"

#include "ge_curve_gtk.h"

#include "xtt_otree_gtk.h"
#include "xtt_trend_gtk.h"
#include "xtt_xnav.h"

XttTrendGtk::XttTrendGtk(void* parent_ctx, GtkWidget* parent_wid, char* name,
    GtkWidget** w, pwr_sAttrRef* trend_list, pwr_sAttrRef* plotgroup, int width,
    int height, unsigned int x_options, int x_color_theme, void* basewidget,
    int* sts)
    : XttTrend(parent_ctx, name, trend_list, plotgroup, x_options,
          x_color_theme, sts),
      parent_widget(parent_wid)
{
  if (EVEN(*sts))
    return;
  *sts = XNAV__SUCCESS;

  curve = new GeCurveGtk(this, parent_widget, name, NULL, gcd, 1, width, height,
      options, color_theme, basewidget);
  curve->close_cb = trend_close_cb;
  curve->help_cb = trend_help_cb;
  curve->snapshot_cb = trend_snapshot_cb;
  curve->add_cb = trend_add_cb;
  curve->madd_cb = trend_madd_cb;
  if (w)
    *w = (GtkWidget*)curve->get_widget();

  if (trend_tid == pwr_cClass_DsTrendCurve)
    curve->enable(curve_mEnable_Snapshot | curve_mEnable_Add
        | curve_mEnable_CurveType | curve_mEnable_FillCurve);
  else
    curve->enable(
        curve_mEnable_Add | curve_mEnable_CurveType | curve_mEnable_FillCurve);

  wow = new CoWowGtk(parent_widget);
  timerid = wow->timer_new();
  timerid->add(1000, trend_scan, this);
}

XttTrendGtk::~XttTrendGtk()
{
  if (timerid)
    timerid->remove();

  for (int i = 0; i < trend_cnt; i++) {
    gdh_UnrefObjectInfo(subid[i]);
  }
  delete curve;
  if (gcd)
    delete gcd;
  if (otree)
    delete otree;
  delete wow;
}

XttOTree* XttTrendGtk::tree_new(const char* title, pwr_tAttrRef* itemlist,
    int itemcnt, unsigned int layout,
    pwr_tStatus (*action_cb)(void*, pwr_tAttrRef*))
{
  return new XttOTreeGtk(
      parent_widget, this, title, itemlist, itemcnt, layout, action_cb);
}
