/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_ev_gtk.cpp -- Alarm and event window in xtt */

#include <stdlib.h>

#include "co_cdh.h"
#include "co_time.h"
#include "co_dcli.h"
#include "rt_gdh.h"
#include "rt_mh_util.h"
#include "rt_xnav_msg.h"

#include "cow_wow_gtk.h"

#include "xtt_ev.h"
#include "xtt_evala_gtk.h"
#include "xtt_evlist_gtk.h"
#include "xtt_methodtoolbar_gtk.h"

static gint ala_delete_event(GtkWidget* w, GdkEvent* event, gpointer data)
{
  EvAlaGtk::ala_activate_exit(w, data);
  return TRUE;
}

static void ala_destroy_event(GtkWidget* w, gpointer data)
{
}

EvAlaGtk::EvAlaGtk(void* ev_parent_ctx, GtkWidget* ev_parent_wid,
    char* ala_name, pwr_tObjid ev_user, int ev_eventname_seg, int ev_width,
    int ev_height, int ev_x, int ev_y, pwr_tObjid ev_view,
    unsigned int ev_options, void* widget, pwr_tStatus* status)
    : EvAla(ev_parent_ctx, ala_name, ev_user, ev_eventname_seg, ev_width,
          ev_height, ev_x, ev_y, ev_view, ev_options, status),
      parent_wid(ev_parent_wid), toplevel(0)
{
  pwr_tStatus sts;
  pwr_sClass_OpPlace* opp;
  pwr_tFileName fname;
  int ala_width = 700;
  int ala_height = 300;

  *status = 1;

  if (ev_width != 0 && ev_height != 0) {
    ala_width = ev_width;
    ala_height = ev_height;
  }

  // Check user object
  if (cdh_ObjidIsNull(user)) {
    *status = XNAV__NOUSER;
    return;
  }

  sts = gdh_ObjidToPointer(user, (pwr_tAddress*)&opp);
  if (EVEN(sts)) {
    *status = XNAV__NOUSER;
    return;
  }
  ala_size = opp->MaxNoOfAlarms;
  // create_aliaslist( opp);

  // Ala Window

  if (!(options & ev_mAlaOptions_Embedded)) {
    toplevel = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height",
        ala_height, "default-width", ala_width, "title",
        CoWowGtk::translate_utf8(ala_name), NULL);
    parent_wid_ala = toplevel;
    g_signal_connect(
        parent_wid_ala, "delete_event", G_CALLBACK(ala_delete_event), this);
    g_signal_connect(
        parent_wid_ala, "destroy", G_CALLBACK(ala_destroy_event), this);
    g_signal_connect(parent_wid_ala, "focus-in-event",
        G_CALLBACK(ala_action_inputfocus), this);

    CoWowGtk::SetWindowIcon(parent_wid_ala);
  } else
    parent_wid_ala = (GtkWidget*)widget;

  ala_vbox = gtk_vbox_new(FALSE, 0);

  // Menu
  // Accelerators
  GtkAccelGroup* accel_g
      = (GtkAccelGroup*)g_object_new(GTK_TYPE_ACCEL_GROUP, NULL);
  gtk_window_add_accel_group(GTK_WINDOW(parent_wid_ala), accel_g);

  GtkMenuBar* menu_bar = (GtkMenuBar*)g_object_new(GTK_TYPE_MENU_BAR, NULL);

  // File entry
  GtkWidget* file_print = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Print"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(file_print),
      gtk_image_new_from_stock("gtk-print", GTK_ICON_SIZE_MENU));
  g_signal_connect(
      file_print, "activate", G_CALLBACK(ala_activate_print), this);

  GtkWidget* file_close = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Close"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(file_close),
      gtk_image_new_from_stock("gtk-close", GTK_ICON_SIZE_MENU));
  g_signal_connect(file_close, "activate", G_CALLBACK(ala_activate_exit), this);
  gtk_widget_add_accelerator(file_close, "activate", accel_g, 'w',
      GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

  GtkMenu* file_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_print);
  gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_close);

  GtkWidget* file
      = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_File"));
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), file);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(file), GTK_WIDGET(file_menu));

  // Functions entry
  GtkWidget* functions_ack_last = gtk_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Acknowledge"));
  g_signal_connect(
      functions_ack_last, "activate", G_CALLBACK(ala_activate_ack_last), this);
  gtk_widget_add_accelerator(functions_ack_last, "activate", accel_g, 'k',
      GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

  GtkWidget* functions_ack_all = gtk_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("A_cknowledge All"));
  g_signal_connect(
      functions_ack_all, "activate", G_CALLBACK(ala_activate_ack_all), this);

  GtkWidget* functions_open_plc = gtk_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Open _Program"));
  g_signal_connect(
      functions_open_plc, "activate", G_CALLBACK(ala_activate_open_plc), this);
  gtk_widget_add_accelerator(functions_open_plc, "activate", accel_g, 'l',
      GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

  GtkWidget* functions_display_object = gtk_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Display object in Navigator"));
  g_signal_connect(functions_display_object, "activate",
      G_CALLBACK(ala_activate_display_in_xnav), this);
  gtk_widget_add_accelerator(functions_display_object, "activate", accel_g, 'd',
      GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

  GtkMenu* func_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_ack_last);
  gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_ack_all);
  gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_open_plc);
  gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_display_object);

  GtkWidget* functions
      = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_Functions"));
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), functions);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(functions), GTK_WIDGET(func_menu));

  // View entry
  GtkWidget* view_shift_view = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("S_hift View"));
  g_signal_connect(
      view_shift_view, "activate", G_CALLBACK(ala_activate_shift_view), this);
  gtk_widget_add_accelerator(view_shift_view, "activate", accel_g, 'n',
      GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_in = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Zoom _In"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_in),
      gtk_image_new_from_stock("gtk-zoom-in", GTK_ICON_SIZE_MENU));
  g_signal_connect(
      view_zoom_in, "activate", G_CALLBACK(ala_activate_zoom_in), this);
  gtk_widget_add_accelerator(view_zoom_in, "activate", accel_g, 'i',
      GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_out = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Zoom _Out"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_out),
      gtk_image_new_from_stock("gtk-zoom-out", GTK_ICON_SIZE_MENU));
  g_signal_connect(
      view_zoom_out, "activate", G_CALLBACK(ala_activate_zoom_out), this);
  gtk_widget_add_accelerator(view_zoom_out, "activate", accel_g, 'o',
      GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

  GtkWidget* view_zoom_reset = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Zoom _Reset"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_reset),
      gtk_image_new_from_stock("gtk-zoom-100", GTK_ICON_SIZE_MENU));
  g_signal_connect(
      view_zoom_reset, "activate", G_CALLBACK(ala_activate_zoom_reset), this);
  gtk_widget_add_accelerator(view_zoom_reset, "activate", accel_g, 'b',
      GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

  GtkWidget* view_disp_hundredth = gtk_check_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Display hundredth"));
  g_signal_connect(view_disp_hundredth, "activate",
      G_CALLBACK(ala_activate_disp_hundredth), this);

  GtkWidget* view_hide_object = gtk_check_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Hide Event Name"));
  g_signal_connect(
      view_hide_object, "activate", G_CALLBACK(ala_activate_hide_object), this);

  GtkWidget* view_hide_text = gtk_check_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Hide _Event Text"));
  g_signal_connect(
      view_hide_text, "activate", G_CALLBACK(ala_activate_hide_text), this);

  // Submenu Select View
  GtkWidget* view_select_flat = gtk_menu_item_new_with_mnemonic("_Flat");
  g_signal_connect(
      view_select_flat, "activate", G_CALLBACK(ala_activate_select_flat), this);

  GtkWidget* view_select = gtk_menu_item_new_with_mnemonic("_Select View");
  GtkMenu* view_select_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_select_menu), view_select_flat);

  for (unsigned int i = 0;
       i < sizeof(opp->AlarmViews) / sizeof(opp->AlarmViews[0]); i++) {
    pwr_sClass_AlarmView* viewp;

    if (cdh_ObjidIsNull(opp->AlarmViews[i]))
      break;

    sts = gdh_ObjidToPointer(opp->AlarmViews[i], (void**)&viewp);
    if (ODD(sts)) {
      alarm_views[i] = opp->AlarmViews[i];
      GtkWidget* view_select_view = gtk_menu_item_new_with_mnemonic(
          CoWowGtk::translate_utf8(viewp->Name));
      switch (i) {
      case 0:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view1), this);
        break;
      case 1:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view2), this);
        break;
      case 2:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view3), this);
        break;
      case 3:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view4), this);
        break;
      case 4:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view5), this);
        break;
      case 5:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view6), this);
        break;
      case 6:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view7), this);
        break;
      case 7:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view8), this);
        break;
      case 8:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view9), this);
        break;
      case 9:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view10), this);
        break;
      case 10:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view11), this);
        break;
      case 11:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view12), this);
        break;
      case 12:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view13), this);
        break;
      case 13:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view14), this);
        break;
      case 14:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view15), this);
        break;
      case 15:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view16), this);
        break;
      case 16:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view17), this);
        break;
      case 17:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view18), this);
        break;
      case 18:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view19), this);
        break;
      case 19:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view20), this);
        break;
      case 20:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view21), this);
        break;
      case 21:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view22), this);
        break;
      case 22:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view23), this);
        break;
      case 23:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view24), this);
        break;
      case 24:
        g_signal_connect(view_select_view, "activate",
            G_CALLBACK(ala_activate_select_view25), this);
        break;
      }
      gtk_menu_shell_append(GTK_MENU_SHELL(view_select_menu), view_select_view);
    }
  }

  gtk_menu_item_set_submenu(
      GTK_MENU_ITEM(view_select), GTK_WIDGET(view_select_menu));

  GtkMenu* view_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_shift_view);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_select);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_in);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_out);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_reset);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_disp_hundredth);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_hide_object);
  gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_hide_text);

  GtkWidget* view
      = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_View"));
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), view);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(view), GTK_WIDGET(view_menu));

  // Help entry
  GtkWidget* help_help = gtk_image_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("_Help"));
  gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(help_help),
      gtk_image_new_from_stock("gtk-help", GTK_ICON_SIZE_MENU));
  g_signal_connect(help_help, "activate", G_CALLBACK(ala_activate_help), this);
  gtk_widget_add_accelerator(
      help_help, "activate", accel_g, 'h', GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

  GtkWidget* help_helpevent = gtk_menu_item_new_with_mnemonic(
      CoWowGtk::translate_utf8("Help Selected Event"));
  g_signal_connect(
      help_helpevent, "activate", G_CALLBACK(ala_activate_helpevent), this);

  GtkMenu* help_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
  gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_help);
  gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_helpevent);

  GtkWidget* help
      = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_Help"));
  gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), help);
  gtk_menu_item_set_submenu(GTK_MENU_ITEM(help), GTK_WIDGET(help_menu));

  // Create ala evlist
  ala = new EvListGtk(this, ala_vbox, ev_eType_AlarmList, ala_size,
      eventname_seg, &ala_widget, ala_init_cb);
  ala->start_trace_cb = &ala_start_trace_cb;
  ala->display_in_xnav_cb = &ala_display_in_xnav_cb;
  ala->name_to_alias_cb = &ala_name_to_alias_cb;
  ala->popup_menu_cb = &ala_popup_menu_cb;
  ala->sound_cb = &ala_sound_cb;
  ala->help_event_cb = &help_event_cb;
  ala->selection_changed_cb = &ala_selection_changed_cb;

  // Toolbar
  GtkToolbar* tools = (GtkToolbar*)g_object_new(GTK_TYPE_TOOLBAR, NULL);

  GtkWidget* tools_ack = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_acknowledge.png");
  gtk_container_add(GTK_CONTAINER(tools_ack), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_ack, "clicked", G_CALLBACK(ala_activate_ack_last), this);
  g_object_set(tools_ack, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(
      tools, tools_ack, CoWowGtk::translate_utf8("Acknowledge"), "");

  GtkWidget* tools_zoom_in = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_in.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_in), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_zoom_in, "clicked", G_CALLBACK(ala_activate_zoom_in), this);
  g_object_set(tools_zoom_in, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(
      tools, tools_zoom_in, CoWowGtk::translate_utf8("Zoom in"), "");

  GtkWidget* tools_zoom_out = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_out.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_out), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_zoom_out, "clicked", G_CALLBACK(ala_activate_zoom_out), this);
  g_object_set(tools_zoom_out, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(
      tools, tools_zoom_out, CoWowGtk::translate_utf8("Zoom out"), "");

  GtkWidget* tools_zoom_reset = gtk_button_new();
  dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_reset.png");
  gtk_container_add(
      GTK_CONTAINER(tools_zoom_reset), gtk_image_new_from_file(fname));
  g_signal_connect(
      tools_zoom_reset, "clicked", G_CALLBACK(ala_activate_zoom_reset), this);
  g_object_set(tools_zoom_reset, "can-focus", FALSE, NULL);
  gtk_toolbar_append_widget(
      tools, tools_zoom_reset, CoWowGtk::translate_utf8("Zoom reset"), "");

  ala_methodtoolbar = new XttMethodToolbarGtk(
      0, 0, ~pwr_mXttOpMethodsMask_ParentObjectGraph, ~0, "");
  GtkToolbar* tools_meth
      = (GtkToolbar*)((XttMethodToolbarGtk*)ala_methodtoolbar)->build();

  ala_methodtoolbar->m_xnav = (XNav*)((Ev*)parent_ctx)->parent_ctx;
  ala_methodtoolbar->m_parent_ctx = ala;
  ala_methodtoolbar->get_select_cb = ala->get_select;

  ala_sup_methodtoolbar = new XttMethodToolbarGtk(0, 0, 0,
      pwr_mXttMntMethodsMask_OpenTrace | pwr_mXttMntMethodsMask_RtNavigator,
      " for supervisory object");
  GtkToolbar* tools_sup
      = (GtkToolbar*)((XttMethodToolbarGtk*)ala_sup_methodtoolbar)->build();
  ala_sup_methodtoolbar->m_xnav = (XNav*)((Ev*)parent_ctx)->parent_ctx;
  ala_sup_methodtoolbar->m_parent_ctx = ala;
  ala_sup_methodtoolbar->get_select_cb = ala->get_select_supobject;

  GtkWidget* ala_toolsbox = gtk_hbox_new(FALSE, 0);
  gtk_box_pack_start(GTK_BOX(ala_toolsbox), GTK_WIDGET(tools), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(ala_toolsbox),
      GTK_WIDGET(gtk_separator_tool_item_new()), FALSE, FALSE, 4);
  gtk_box_pack_start(
      GTK_BOX(ala_toolsbox), GTK_WIDGET(tools_sup), FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(ala_toolsbox),
      GTK_WIDGET(gtk_separator_tool_item_new()), FALSE, FALSE, 4);
  gtk_box_pack_start(
      GTK_BOX(ala_toolsbox), GTK_WIDGET(tools_meth), FALSE, FALSE, 0);

  gtk_box_pack_start(GTK_BOX(ala_vbox), GTK_WIDGET(menu_bar), FALSE, FALSE, 0);
  gtk_box_pack_start(
      GTK_BOX(ala_vbox), GTK_WIDGET(ala_toolsbox), FALSE, FALSE, 0);
  gtk_box_pack_end(GTK_BOX(ala_vbox), GTK_WIDGET(ala_widget), TRUE, TRUE, 0);

  if (!(options & ev_mAlaOptions_Embedded)) {
    gtk_container_add(GTK_CONTAINER(parent_wid_ala), ala_vbox);
  }
  // gtk_widget_show_all( parent_wid_ala);

  ala_methodtoolbar->set_sensitive();
  ala_sup_methodtoolbar->set_sensitive();
  // }

  if (!(options & ev_mAlaOptions_Embedded)) {
    gtk_widget_show_all(parent_wid_ala);
    if (!(x == 0 && y == 0)) {
      // Set position
      gtk_window_move(GTK_WINDOW(parent_wid_ala), x, y);
    }
  } else
    gtk_widget_set_size_request(ala_vbox, ala_width, ala_height);

  ala_displayed = 1;

  wow = new CoWowGtk(parent_wid_ala);

  *status = 1;
}

//
//  Delete ev
//
EvAlaGtk::~EvAlaGtk()
{
  if (ala)
    delete ala;
  ala = NULL;

  delete ala_methodtoolbar;
  delete ala_sup_methodtoolbar;

  if (toplevel)
    gtk_widget_destroy(toplevel);
}

void EvAlaGtk::map_ala()
{
  gtk_window_present(GTK_WINDOW(parent_wid_ala));
  ala_displayed = 1;
}

void EvAlaGtk::unmap_ala()
{
  if (ala_displayed) {
    g_object_set(parent_wid_ala, "visible", FALSE, NULL);
    ala_displayed = 0;
  }
}

void EvAlaGtk::set_title_ala(char* title)
{
  if (!(options & ev_mAlaOptions_Embedded))
    g_object_set(parent_wid_ala, "title", title, NULL);
}

gboolean EvAlaGtk::ala_action_inputfocus(
    GtkWidget* w, GdkEvent* event, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  if (ev && ev->ala_displayed)
    ev->ala->set_input_focus();

  return FALSE;
}

void EvAlaGtk::ala_activate_exit(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  if (ev->options & ev_mAlaOptions_Embedded)
    return;

  // ev->unmap_ala();
  // ev->ala_displayed = 0;

  delete ev;
}

void EvAlaGtk::ala_activate_print(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->ala_activate_print();
}

void EvAlaGtk::ala_activate_ack_last(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->ala_activate_ack_last();
}

void EvAlaGtk::ala_activate_ack_all(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->ala_activate_ack_all();
}

void EvAlaGtk::ala_activate_shift_view(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->view_shift();
}

void EvAlaGtk::ala_activate_select_flat(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->set_view(pwr_cNObjid);
}

void EvAlaGtk::ala_activate_select_view1(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[0]);
}
void EvAlaGtk::ala_activate_select_view2(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[1]);
}
void EvAlaGtk::ala_activate_select_view3(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[2]);
}
void EvAlaGtk::ala_activate_select_view4(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[3]);
}
void EvAlaGtk::ala_activate_select_view5(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[4]);
}
void EvAlaGtk::ala_activate_select_view6(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[5]);
}
void EvAlaGtk::ala_activate_select_view7(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[6]);
}
void EvAlaGtk::ala_activate_select_view8(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[7]);
}
void EvAlaGtk::ala_activate_select_view9(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[8]);
}
void EvAlaGtk::ala_activate_select_view10(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[9]);
}
void EvAlaGtk::ala_activate_select_view11(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[10]);
}
void EvAlaGtk::ala_activate_select_view12(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[11]);
}
void EvAlaGtk::ala_activate_select_view13(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[12]);
}
void EvAlaGtk::ala_activate_select_view14(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[13]);
}
void EvAlaGtk::ala_activate_select_view15(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[14]);
}
void EvAlaGtk::ala_activate_select_view16(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[15]);
}
void EvAlaGtk::ala_activate_select_view17(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[16]);
}
void EvAlaGtk::ala_activate_select_view18(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[17]);
}
void EvAlaGtk::ala_activate_select_view19(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[18]);
}
void EvAlaGtk::ala_activate_select_view20(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[19]);
}
void EvAlaGtk::ala_activate_select_view21(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[20]);
}
void EvAlaGtk::ala_activate_select_view22(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[21]);
}
void EvAlaGtk::ala_activate_select_view23(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[22]);
}
void EvAlaGtk::ala_activate_select_view24(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[23]);
}
void EvAlaGtk::ala_activate_select_view25(GtkWidget* w, gpointer ev)
{
  ((EvAla*)ev)->set_view(((EvAlaGtk*)ev)->alarm_views[24]);
}

void EvAlaGtk::ala_activate_zoom_in(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->ala->zoom(1.2);
}

void EvAlaGtk::ala_activate_zoom_out(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->ala->zoom(5.0 / 6);
}

void EvAlaGtk::ala_activate_zoom_reset(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->ala->unzoom();
}

void EvAlaGtk::ala_activate_open_plc(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->ala->start_trace();
}

void EvAlaGtk::ala_activate_display_in_xnav(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->ala->display_in_xnav();
}

void EvAlaGtk::ala_activate_disp_hundredth(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;
  int set = (int)gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(w));

  ev->ala->set_display_hundredth(set);
}

void EvAlaGtk::ala_activate_hide_object(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;
  int set = (int)gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(w));

  ev->ala->set_hide_object(set);
}

void EvAlaGtk::ala_activate_hide_text(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;
  int set = (int)gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(w));

  ev->ala->set_hide_text(set);
}

void EvAlaGtk::ala_activate_help(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->ala_activate_help();
}

void EvAlaGtk::ala_activate_helpevent(GtkWidget* w, gpointer data)
{
  EvAla* ev = (EvAla*)data;

  ev->ala_activate_helpevent();
}
