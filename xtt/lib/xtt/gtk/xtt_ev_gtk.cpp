/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_ev_gtk.cpp -- Alarm and event window in xtt */

#include <stdlib.h>

#include "co_cdh.h"
#include "co_dcli.h"
#include "co_time.h"
#include "rt_gdh.h"
#include "rt_mh_util.h"
#include "rt_xnav_msg.h"

#include "cow_wow_gtk.h"

#include "xtt_ev_gtk.h"
#include "xtt_evala_gtk.h"
#include "xtt_eveve_gtk.h"
#include "xtt_evlist_gtk.h"
#include "xtt_methodtoolbar_gtk.h"

static gint eve_delete_event(GtkWidget* w, GdkEvent* event, gpointer data)
{
  EvGtk::eve_activate_exit(w, data);
  return TRUE;
}

static void eve_destroy_event(GtkWidget* w, gpointer data)
{
}

static gint ala_delete_event(GtkWidget* w, GdkEvent* event, gpointer data)
{
  EvGtk::ala_activate_exit(w, data);
  return TRUE;
}

static void ala_destroy_event(GtkWidget* w, gpointer data)
{
}

static gint blk_delete_event(GtkWidget* w, GdkEvent* event, gpointer data)
{
  EvGtk::blk_activate_exit(w, data);
  return TRUE;
}

static void blk_destroy_event(GtkWidget* w, gpointer data)
{
}

EvGtk::EvGtk(void* ev_parent_ctx, GtkWidget* ev_parent_wid, char* eve_name,
    char* ala_name, char* blk_name, pwr_tObjid ev_user, int display_ala,
    int display_eve, int display_blk, int display_return, int display_ack,
    int ev_beep, pwr_tMask ev_pop_mask, int ev_eventname_seg,
    pwr_tStatus* status)
    : Ev(ev_parent_ctx, eve_name, ala_name, blk_name, ev_user, display_ala,
          display_eve, display_blk, display_return, display_ack, ev_beep,
          ev_pop_mask, ev_eventname_seg, status),
      parent_wid(ev_parent_wid), parent_wid_eve(0), parent_wid_ala(0),
      parent_wid_blk(0)
{
  pwr_tStatus sts;
  pwr_sClass_OpPlace* opp;
  pwr_tFileName fname;
  const int eve_width = 700;
  const int eve_height = 600;
  const int ala_width = 700;
  const int ala_height = 300;
  const int blk_width = 700;
  const int blk_height = 300;

  *status = 1;

  // Check user object
  if (cdh_ObjidIsNull(user)) {
    *status = XNAV__NOUSER;
    return;
  }

  sts = gdh_ObjidToPointer(user, (pwr_tAddress*)&opp);
  if (EVEN(sts)) {
    *status = XNAV__NOUSER;
    return;
  }
  ala_size = opp->MaxNoOfAlarms;
  eve_size = opp->MaxNoOfEvents;
  blk_size = 0;
  create_aliaslist(opp);

  // Gtk
  // Eve Window
  {
    parent_wid_eve = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height",
        eve_height, "default-width", eve_width, "title",
        CoWowGtk::translate_utf8(eve_name), NULL);

    g_signal_connect(
        parent_wid_eve, "delete_event", G_CALLBACK(eve_delete_event), this);
    g_signal_connect(
        parent_wid_eve, "destroy", G_CALLBACK(eve_destroy_event), this);
    g_signal_connect(parent_wid_eve, "focus-in-event",
        G_CALLBACK(eve_action_inputfocus), this);

    CoWowGtk::SetWindowIcon(parent_wid_eve);

    GtkWidget* eve_vbox = gtk_vbox_new(FALSE, 0);

    // Menu
    // Accelerators
    GtkAccelGroup* accel_g
        = (GtkAccelGroup*)g_object_new(GTK_TYPE_ACCEL_GROUP, NULL);
    gtk_window_add_accel_group(GTK_WINDOW(parent_wid_eve), accel_g);

    GtkMenuBar* menu_bar = (GtkMenuBar*)g_object_new(GTK_TYPE_MENU_BAR, NULL);

    // File entry
    GtkWidget* file_print = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Print"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(file_print),
        gtk_image_new_from_stock("gtk-print", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        file_print, "activate", G_CALLBACK(eve_activate_print), this);

    GtkWidget* file_export = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Export"));
    g_signal_connect(
        file_export, "activate", G_CALLBACK(eve_activate_export), this);

    GtkWidget* file_analyse = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Open _Analyser"));
    g_signal_connect(
        file_analyse, "activate", G_CALLBACK(eve_activate_analyse), this);

    GtkWidget* file_close = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Close"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(file_close),
        gtk_image_new_from_stock("gtk-close", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        file_close, "activate", G_CALLBACK(eve_activate_exit), this);
    gtk_widget_add_accelerator(file_close, "activate", accel_g, 'w',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkMenu* file_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_print);
    gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_export);
    gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_analyse);
    gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_close);

    GtkWidget* file
        = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_File"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), file);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(file), GTK_WIDGET(file_menu));

    // Functions entry
    GtkWidget* functions_ack_last = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Acknowledge"));
    g_signal_connect(functions_ack_last, "activate",
        G_CALLBACK(eve_activate_ack_last), this);
    gtk_widget_add_accelerator(functions_ack_last, "activate", accel_g, 'k',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* functions_open_plc = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Open _Program"));
    g_signal_connect(functions_open_plc, "activate",
        G_CALLBACK(eve_activate_open_plc), this);
    gtk_widget_add_accelerator(functions_open_plc, "activate", accel_g, 'l',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* functions_display_object = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Display object in Navigator"));
    g_signal_connect(functions_display_object, "activate",
        G_CALLBACK(eve_activate_display_in_xnav), this);
    gtk_widget_add_accelerator(functions_display_object, "activate", accel_g,
        'd', GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkMenu* func_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    // gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_ack_last);
    gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_open_plc);
    gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_display_object);

    GtkWidget* functions = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Functions"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), functions);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(functions), GTK_WIDGET(func_menu));

    // View entry
    GtkWidget* view_zoom_in = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Zoom _In"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_in),
        gtk_image_new_from_stock("gtk-zoom-in", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        view_zoom_in, "activate", G_CALLBACK(eve_activate_zoom_in), this);
    gtk_widget_add_accelerator(view_zoom_in, "activate", accel_g, 'i',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* view_zoom_out = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Zoom _Out"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_out),
        gtk_image_new_from_stock("gtk-zoom-out", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        view_zoom_out, "activate", G_CALLBACK(eve_activate_zoom_out), this);
    gtk_widget_add_accelerator(view_zoom_out, "activate", accel_g, 'o',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* view_zoom_reset = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Zoom _Reset"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_reset),
        gtk_image_new_from_stock("gtk-zoom-100", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        view_zoom_reset, "activate", G_CALLBACK(eve_activate_zoom_reset), this);
    gtk_widget_add_accelerator(view_zoom_reset, "activate", accel_g, 'b',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* view_disp_hundredth = gtk_check_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Display hundredth"));
    g_signal_connect(view_disp_hundredth, "activate",
        G_CALLBACK(eve_activate_disp_hundredth), this);

    GtkWidget* view_hide_object = gtk_check_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Hide Event Name"));
    g_signal_connect(view_hide_object, "activate",
        G_CALLBACK(eve_activate_hide_object), this);

    GtkWidget* view_hide_text = gtk_check_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Hide _Event Text"));
    g_signal_connect(
        view_hide_text, "activate", G_CALLBACK(eve_activate_hide_text), this);

    GtkMenu* view_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_in);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_out);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_reset);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_disp_hundredth);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_hide_object);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_hide_text);

    GtkWidget* view
        = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_View"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), view);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(view), GTK_WIDGET(view_menu));

    // Help entry
    GtkWidget* help_help = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Help"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(help_help),
        gtk_image_new_from_stock("gtk-help", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        help_help, "activate", G_CALLBACK(eve_activate_help), this);
    gtk_widget_add_accelerator(help_help, "activate", accel_g, 'h',
        GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

    GtkWidget* help_helpevent = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Help Selected Event"));
    g_signal_connect(
        help_helpevent, "activate", G_CALLBACK(eve_activate_helpevent), this);

    GtkMenu* help_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_help);
    gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_helpevent);

    GtkWidget* help
        = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_Help"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), help);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(help), GTK_WIDGET(help_menu));

    // Create eve evlist
    eve = new EvListGtk(this, eve_vbox, ev_eType_EventList, eve_size,
        eventname_seg, &eve_widget);
    eve->start_trace_cb = &eve_start_trace_cb;
    eve->display_in_xnav_cb = &eve_display_in_xnav_cb;
    eve->name_to_alias_cb = &ev_name_to_alias_cb;
    eve->popup_menu_cb = &ev_popup_menu_cb;
    eve->selection_changed_cb = &eve_selection_changed_cb;
    eve->help_event_cb = &help_event_cb;

    // Toolbar
    GtkToolbar* tools = (GtkToolbar*)g_object_new(GTK_TYPE_TOOLBAR, NULL);

    GtkWidget* tools_zoom_in = gtk_button_new();
    dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_in.png");
    gtk_container_add(
        GTK_CONTAINER(tools_zoom_in), gtk_image_new_from_file(fname));
    g_signal_connect(
        tools_zoom_in, "clicked", G_CALLBACK(eve_activate_zoom_in), this);
    g_object_set(tools_zoom_in, "can-focus", FALSE, NULL);
    gtk_toolbar_append_widget(
        tools, tools_zoom_in, CoWowGtk::translate_utf8("Zoom in"), "");

    GtkWidget* tools_zoom_out = gtk_button_new();
    dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_out.png");
    gtk_container_add(
        GTK_CONTAINER(tools_zoom_out), gtk_image_new_from_file(fname));
    g_signal_connect(
        tools_zoom_out, "clicked", G_CALLBACK(eve_activate_zoom_out), this);
    g_object_set(tools_zoom_out, "can-focus", FALSE, NULL);
    gtk_toolbar_append_widget(
        tools, tools_zoom_out, CoWowGtk::translate_utf8("Zoom out"), "");

    GtkWidget* tools_zoom_reset = gtk_button_new();
    dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_reset.png");
    gtk_container_add(
        GTK_CONTAINER(tools_zoom_reset), gtk_image_new_from_file(fname));
    g_signal_connect(
        tools_zoom_reset, "clicked", G_CALLBACK(eve_activate_zoom_reset), this);
    g_object_set(tools_zoom_reset, "can-focus", FALSE, NULL);
    gtk_toolbar_append_widget(
        tools, tools_zoom_reset, CoWowGtk::translate_utf8("Zoom reset"), "");

    eve_methodtoolbar = new XttMethodToolbarGtk(
        0, 0, ~pwr_mXttOpMethodsMask_ParentObjectGraph, ~0, "");
    GtkToolbar* tools_meth
        = (GtkToolbar*)((XttMethodToolbarGtk*)eve_methodtoolbar)->build();
    eve_methodtoolbar->m_xnav = (XNav*)parent_ctx;
    eve_methodtoolbar->m_parent_ctx = eve;
    eve_methodtoolbar->get_select_cb = eve->get_select;

    eve_sup_methodtoolbar = new XttMethodToolbarGtk(0, 0, 0,
        pwr_mXttMntMethodsMask_OpenTrace | pwr_mXttMntMethodsMask_RtNavigator,
        " for supervisory object");
    GtkToolbar* tools_sup
        = (GtkToolbar*)((XttMethodToolbarGtk*)eve_sup_methodtoolbar)->build();
    eve_sup_methodtoolbar->m_xnav = (XNav*)parent_ctx;
    eve_sup_methodtoolbar->m_parent_ctx = eve;
    eve_sup_methodtoolbar->get_select_cb = eve->get_select_supobject;

    GtkWidget* eve_toolsbox = gtk_hbox_new(FALSE, 0);
    gtk_box_pack_start(
        GTK_BOX(eve_toolsbox), GTK_WIDGET(tools), FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(eve_toolsbox),
        GTK_WIDGET(gtk_separator_tool_item_new()), FALSE, FALSE, 4);
    gtk_box_pack_start(
        GTK_BOX(eve_toolsbox), GTK_WIDGET(tools_sup), FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(eve_toolsbox),
        GTK_WIDGET(gtk_separator_tool_item_new()), FALSE, FALSE, 4);
    gtk_box_pack_start(
        GTK_BOX(eve_toolsbox), GTK_WIDGET(tools_meth), FALSE, FALSE, 0);

    gtk_box_pack_start(
        GTK_BOX(eve_vbox), GTK_WIDGET(menu_bar), FALSE, FALSE, 0);
    gtk_box_pack_start(
        GTK_BOX(eve_vbox), GTK_WIDGET(eve_toolsbox), FALSE, FALSE, 0);
    gtk_box_pack_end(GTK_BOX(eve_vbox), GTK_WIDGET(eve_widget), TRUE, TRUE, 0);

    gtk_container_add(GTK_CONTAINER(parent_wid_eve), eve_vbox);
    // gtk_widget_show_all( parent_wid_eve);

    eve_methodtoolbar->set_sensitive();
    eve_sup_methodtoolbar->set_sensitive();
  }

  // Ala Window
  {
    parent_wid_ala = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height",
        ala_height, "default-width", ala_width, "title",
        CoWowGtk::translate_utf8(ala_name), NULL);
    g_signal_connect(
        parent_wid_ala, "delete_event", G_CALLBACK(ala_delete_event), this);
    g_signal_connect(
        parent_wid_ala, "destroy", G_CALLBACK(ala_destroy_event), this);
    g_signal_connect(parent_wid_ala, "focus-in-event",
        G_CALLBACK(ala_action_inputfocus), this);

    CoWowGtk::SetWindowIcon(parent_wid_ala);

    GtkWidget* ala_vbox = gtk_vbox_new(FALSE, 0);

    // Menu
    // Accelerators
    GtkAccelGroup* accel_g
        = (GtkAccelGroup*)g_object_new(GTK_TYPE_ACCEL_GROUP, NULL);
    gtk_window_add_accel_group(GTK_WINDOW(parent_wid_ala), accel_g);

    GtkMenuBar* menu_bar = (GtkMenuBar*)g_object_new(GTK_TYPE_MENU_BAR, NULL);

    // File entry
    GtkWidget* file_print = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Print"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(file_print),
        gtk_image_new_from_stock("gtk-print", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        file_print, "activate", G_CALLBACK(ala_activate_print), this);

    GtkWidget* file_close = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Close"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(file_close),
        gtk_image_new_from_stock("gtk-close", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        file_close, "activate", G_CALLBACK(ala_activate_exit), this);
    gtk_widget_add_accelerator(file_close, "activate", accel_g, 'w',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkMenu* file_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_print);
    gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_close);

    GtkWidget* file
        = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_File"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), file);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(file), GTK_WIDGET(file_menu));

    // Functions entry
    GtkWidget* functions_ack_last = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Acknowledge"));
    g_signal_connect(functions_ack_last, "activate",
        G_CALLBACK(ala_activate_ack_last), this);
    gtk_widget_add_accelerator(functions_ack_last, "activate", accel_g, 'k',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* functions_ack_all = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("A_cknowledge All"));
    g_signal_connect(
        functions_ack_all, "activate", G_CALLBACK(ala_activate_ack_all), this);

    GtkWidget* functions_open_plc = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Open _Program"));
    g_signal_connect(functions_open_plc, "activate",
        G_CALLBACK(ala_activate_open_plc), this);
    gtk_widget_add_accelerator(functions_open_plc, "activate", accel_g, 'l',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* functions_display_object = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Display object in Navigator"));
    g_signal_connect(functions_display_object, "activate",
        G_CALLBACK(ala_activate_display_in_xnav), this);
    gtk_widget_add_accelerator(functions_display_object, "activate", accel_g,
        'd', GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkMenu* func_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_ack_last);
    gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_ack_all);
    gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_open_plc);
    gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_display_object);

    GtkWidget* functions = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Functions"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), functions);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(functions), GTK_WIDGET(func_menu));

    // View entry
    GtkWidget* view_shift_view = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("S_hift View"));
    g_signal_connect(
        view_shift_view, "activate", G_CALLBACK(ala_activate_shift_view), this);
    gtk_widget_add_accelerator(view_shift_view, "activate", accel_g, 'n',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* view_zoom_in = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Zoom _In"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_in),
        gtk_image_new_from_stock("gtk-zoom-in", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        view_zoom_in, "activate", G_CALLBACK(ala_activate_zoom_in), this);
    gtk_widget_add_accelerator(view_zoom_in, "activate", accel_g, 'i',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* view_zoom_out = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Zoom _Out"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_out),
        gtk_image_new_from_stock("gtk-zoom-out", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        view_zoom_out, "activate", G_CALLBACK(ala_activate_zoom_out), this);
    gtk_widget_add_accelerator(view_zoom_out, "activate", accel_g, 'o',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* view_zoom_reset = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Zoom _Reset"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_reset),
        gtk_image_new_from_stock("gtk-zoom-100", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        view_zoom_reset, "activate", G_CALLBACK(ala_activate_zoom_reset), this);
    gtk_widget_add_accelerator(view_zoom_reset, "activate", accel_g, 'b',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* view_disp_hundredth = gtk_check_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Display hundredth"));
    g_signal_connect(view_disp_hundredth, "activate",
        G_CALLBACK(ala_activate_disp_hundredth), this);

    GtkWidget* view_hide_object = gtk_check_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Hide Event Name"));
    g_signal_connect(view_hide_object, "activate",
        G_CALLBACK(ala_activate_hide_object), this);

    GtkWidget* view_hide_text = gtk_check_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Hide _Event Text"));
    g_signal_connect(
        view_hide_text, "activate", G_CALLBACK(ala_activate_hide_text), this);

    // Submenu Select View
    GtkWidget* view_select_flat = gtk_menu_item_new_with_mnemonic("_Flat");
    g_signal_connect(view_select_flat, "activate",
        G_CALLBACK(ala_activate_select_flat), this);

    GtkWidget* view_select = gtk_menu_item_new_with_mnemonic("_Select View");
    GtkMenu* view_select_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_select_menu), view_select_flat);

    for (unsigned int i = 0;
         i < sizeof(opp->AlarmViews) / sizeof(opp->AlarmViews[0]); i++) {
      pwr_sClass_AlarmView* viewp;

      if (cdh_ObjidIsNull(opp->AlarmViews[i]))
        break;

      sts = gdh_ObjidToPointer(opp->AlarmViews[i], (void**)&viewp);
      if (ODD(sts)) {
        alarm_views[i] = opp->AlarmViews[i];
        GtkWidget* view_select_view = gtk_menu_item_new_with_mnemonic(
            CoWowGtk::translate_utf8(viewp->Name));
        switch (i) {
        case 0:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view1), this);
          break;
        case 1:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view2), this);
          break;
        case 2:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view3), this);
          break;
        case 3:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view4), this);
          break;
        case 4:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view5), this);
          break;
        case 5:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view6), this);
          break;
        case 6:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view7), this);
          break;
        case 7:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view8), this);
          break;
        case 8:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view9), this);
          break;
        case 9:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view10), this);
          break;
        case 10:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view11), this);
          break;
        case 11:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view12), this);
          break;
        case 12:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view13), this);
          break;
        case 13:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view14), this);
          break;
        case 14:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view15), this);
          break;
        case 15:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view16), this);
          break;
        case 16:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view17), this);
          break;
        case 17:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view18), this);
          break;
        case 18:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view19), this);
          break;
        case 19:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view20), this);
          break;
        case 20:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view21), this);
          break;
        case 21:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view22), this);
          break;
        case 22:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view23), this);
          break;
        case 23:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view24), this);
          break;
        case 24:
          g_signal_connect(view_select_view, "activate",
              G_CALLBACK(ala_activate_select_view25), this);
          break;
        }
        gtk_menu_shell_append(
            GTK_MENU_SHELL(view_select_menu), view_select_view);
      }
    }

    gtk_menu_item_set_submenu(
        GTK_MENU_ITEM(view_select), GTK_WIDGET(view_select_menu));

    GtkMenu* view_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_shift_view);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_select);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_in);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_out);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_reset);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_disp_hundredth);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_hide_object);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_hide_text);

    GtkWidget* view
        = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_View"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), view);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(view), GTK_WIDGET(view_menu));

    // Help entry
    GtkWidget* help_help = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Help"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(help_help),
        gtk_image_new_from_stock("gtk-help", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        help_help, "activate", G_CALLBACK(ala_activate_help), this);
    gtk_widget_add_accelerator(help_help, "activate", accel_g, 'h',
        GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

    GtkWidget* help_helpevent = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Help Selected Event"));
    g_signal_connect(
        help_helpevent, "activate", G_CALLBACK(ala_activate_helpevent), this);

    GtkMenu* help_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_help);
    gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_helpevent);

    GtkWidget* help
        = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_Help"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), help);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(help), GTK_WIDGET(help_menu));

    // Create ala evlist
    ala = new EvListGtk(this, ala_vbox, ev_eType_AlarmList, ala_size,
        eventname_seg, &ala_widget);
    ala->start_trace_cb = &ala_start_trace_cb;
    ala->display_in_xnav_cb = &ala_display_in_xnav_cb;
    ala->name_to_alias_cb = &ev_name_to_alias_cb;
    ala->popup_menu_cb = &ev_popup_menu_cb;
    ala->sound_cb = &ev_sound_cb;
    ala->selection_changed_cb = &ala_selection_changed_cb;
    ala->help_event_cb = &help_event_cb;

    // Toolbar
    GtkToolbar* tools = (GtkToolbar*)g_object_new(GTK_TYPE_TOOLBAR, NULL);

    GtkWidget* tools_ack = gtk_button_new();
    dcli_translate_filename(fname, "$pwr_exe/xtt_acknowledge.png");
    gtk_container_add(GTK_CONTAINER(tools_ack), gtk_image_new_from_file(fname));
    g_signal_connect(
        tools_ack, "clicked", G_CALLBACK(ala_activate_ack_last), this);
    g_object_set(tools_ack, "can-focus", FALSE, NULL);
    gtk_toolbar_append_widget(
        tools, tools_ack, CoWowGtk::translate_utf8("Acknowledge"), "");

    GtkWidget* tools_zoom_in = gtk_button_new();
    dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_in.png");
    gtk_container_add(
        GTK_CONTAINER(tools_zoom_in), gtk_image_new_from_file(fname));
    g_signal_connect(
        tools_zoom_in, "clicked", G_CALLBACK(ala_activate_zoom_in), this);
    g_object_set(tools_zoom_in, "can-focus", FALSE, NULL);
    gtk_toolbar_append_widget(
        tools, tools_zoom_in, CoWowGtk::translate_utf8("Zoom in"), "");

    GtkWidget* tools_zoom_out = gtk_button_new();
    dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_out.png");
    gtk_container_add(
        GTK_CONTAINER(tools_zoom_out), gtk_image_new_from_file(fname));
    g_signal_connect(
        tools_zoom_out, "clicked", G_CALLBACK(ala_activate_zoom_out), this);
    g_object_set(tools_zoom_out, "can-focus", FALSE, NULL);
    gtk_toolbar_append_widget(
        tools, tools_zoom_out, CoWowGtk::translate_utf8("Zoom out"), "");

    GtkWidget* tools_zoom_reset = gtk_button_new();
    dcli_translate_filename(fname, "$pwr_exe/xtt_zoom_reset.png");
    gtk_container_add(
        GTK_CONTAINER(tools_zoom_reset), gtk_image_new_from_file(fname));
    g_signal_connect(
        tools_zoom_reset, "clicked", G_CALLBACK(ala_activate_zoom_reset), this);
    g_object_set(tools_zoom_reset, "can-focus", FALSE, NULL);
    gtk_toolbar_append_widget(
        tools, tools_zoom_reset, CoWowGtk::translate_utf8("Zoom reset"), "");

    ala_methodtoolbar = new XttMethodToolbarGtk(
        0, 0, ~pwr_mXttOpMethodsMask_ParentObjectGraph, ~0, "");
    GtkToolbar* tools_meth
        = (GtkToolbar*)((XttMethodToolbarGtk*)ala_methodtoolbar)->build();

    ala_methodtoolbar->m_xnav = (XNav*)parent_ctx;
    ala_methodtoolbar->m_parent_ctx = ala;
    ala_methodtoolbar->get_select_cb = ala->get_select;

    ala_sup_methodtoolbar = new XttMethodToolbarGtk(0, 0, 0,
        pwr_mXttMntMethodsMask_OpenTrace | pwr_mXttMntMethodsMask_RtNavigator,
        " for supervisory object");
    GtkToolbar* tools_sup
        = (GtkToolbar*)((XttMethodToolbarGtk*)ala_sup_methodtoolbar)->build();
    ala_sup_methodtoolbar->m_xnav = (XNav*)parent_ctx;
    ala_sup_methodtoolbar->m_parent_ctx = ala;
    ala_sup_methodtoolbar->get_select_cb = ala->get_select_supobject;

    GtkWidget* ala_toolsbox = gtk_hbox_new(FALSE, 0);
    gtk_box_pack_start(
        GTK_BOX(ala_toolsbox), GTK_WIDGET(tools), FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(ala_toolsbox),
        GTK_WIDGET(gtk_separator_tool_item_new()), FALSE, FALSE, 4);
    gtk_box_pack_start(
        GTK_BOX(ala_toolsbox), GTK_WIDGET(tools_sup), FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(ala_toolsbox),
        GTK_WIDGET(gtk_separator_tool_item_new()), FALSE, FALSE, 4);
    gtk_box_pack_start(
        GTK_BOX(ala_toolsbox), GTK_WIDGET(tools_meth), FALSE, FALSE, 0);

    gtk_box_pack_start(
        GTK_BOX(ala_vbox), GTK_WIDGET(menu_bar), FALSE, FALSE, 0);
    gtk_box_pack_start(
        GTK_BOX(ala_vbox), GTK_WIDGET(ala_toolsbox), FALSE, FALSE, 0);
    gtk_box_pack_end(GTK_BOX(ala_vbox), GTK_WIDGET(ala_widget), TRUE, TRUE, 0);

    gtk_container_add(GTK_CONTAINER(parent_wid_ala), ala_vbox);
    // gtk_widget_show_all( parent_wid_ala);

    ala_methodtoolbar->set_sensitive();
    ala_sup_methodtoolbar->set_sensitive();
    ala->get_alarm_tables(user);
  }

  // Blk Window
  {
    parent_wid_blk = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height",
        blk_height, "default-width", blk_width, "title",
        CoWowGtk::translate_utf8(blk_name), NULL);

    g_signal_connect(
        parent_wid_blk, "delete_event", G_CALLBACK(blk_delete_event), this);
    g_signal_connect(
        parent_wid_blk, "destroy", G_CALLBACK(blk_destroy_event), this);
    g_signal_connect(parent_wid_blk, "focus-in-event",
        G_CALLBACK(blk_action_inputfocus), this);

    CoWowGtk::SetWindowIcon(parent_wid_blk);

    GtkWidget* blk_vbox = gtk_vbox_new(FALSE, 0);

    // Menu
    // Accelerators
    GtkAccelGroup* accel_g
        = (GtkAccelGroup*)g_object_new(GTK_TYPE_ACCEL_GROUP, NULL);
    gtk_window_add_accel_group(GTK_WINDOW(parent_wid_blk), accel_g);

    GtkMenuBar* menu_bar = (GtkMenuBar*)g_object_new(GTK_TYPE_MENU_BAR, NULL);

    // File entry
    GtkWidget* file_print = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Print"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(file_print),
        gtk_image_new_from_stock("gtk-print", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        file_print, "activate", G_CALLBACK(blk_activate_print), this);

    GtkWidget* file_close = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Close"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(file_close),
        gtk_image_new_from_stock("gtk-close", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        file_close, "activate", G_CALLBACK(blk_activate_exit), this);
    gtk_widget_add_accelerator(file_close, "activate", accel_g, 'w',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkMenu* file_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_print);
    gtk_menu_shell_append(GTK_MENU_SHELL(file_menu), file_close);

    GtkWidget* file
        = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_File"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), file);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(file), GTK_WIDGET(file_menu));

    // Functions entry
    GtkWidget* functions_block_remove = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Remove Blocking"));
    g_signal_connect(functions_block_remove, "activate",
        G_CALLBACK(blk_activate_block_remove), this);

    GtkWidget* functions_open_plc = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Open _Program"));
    g_signal_connect(functions_open_plc, "activate",
        G_CALLBACK(blk_activate_open_plc), this);
    gtk_widget_add_accelerator(functions_open_plc, "activate", accel_g, 'l',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* functions_display_object = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Display object in Navigator"));
    g_signal_connect(functions_display_object, "activate",
        G_CALLBACK(blk_activate_display_in_xnav), this);
    gtk_widget_add_accelerator(functions_display_object, "activate", accel_g,
        'd', GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkMenu* func_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_block_remove);
    gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_open_plc);
    gtk_menu_shell_append(GTK_MENU_SHELL(func_menu), functions_display_object);

    GtkWidget* functions = gtk_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Functions"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), functions);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(functions), GTK_WIDGET(func_menu));

    // View entry
    GtkWidget* view_zoom_in = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Zoom _In"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_in),
        gtk_image_new_from_stock("gtk-zoom-in", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        view_zoom_in, "activate", G_CALLBACK(blk_activate_zoom_in), this);
    gtk_widget_add_accelerator(view_zoom_in, "activate", accel_g, 'i',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* view_zoom_out = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Zoom _Out"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_out),
        gtk_image_new_from_stock("gtk-zoom-out", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        view_zoom_out, "activate", G_CALLBACK(blk_activate_zoom_out), this);
    gtk_widget_add_accelerator(view_zoom_out, "activate", accel_g, 'o',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkWidget* view_zoom_reset = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("Zoom _Reset"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(view_zoom_reset),
        gtk_image_new_from_stock("gtk-zoom-100", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        view_zoom_reset, "activate", G_CALLBACK(blk_activate_zoom_reset), this);
    gtk_widget_add_accelerator(view_zoom_reset, "activate", accel_g, 'b',
        GdkModifierType(GDK_CONTROL_MASK), GTK_ACCEL_VISIBLE);

    GtkMenu* view_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_in);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_out);
    gtk_menu_shell_append(GTK_MENU_SHELL(view_menu), view_zoom_reset);

    GtkWidget* view
        = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_View"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), view);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(view), GTK_WIDGET(view_menu));

    // Help entry
    GtkWidget* help_help = gtk_image_menu_item_new_with_mnemonic(
        CoWowGtk::translate_utf8("_Help"));
    gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(help_help),
        gtk_image_new_from_stock("gtk-help", GTK_ICON_SIZE_MENU));
    g_signal_connect(
        help_help, "activate", G_CALLBACK(blk_activate_help), this);
    gtk_widget_add_accelerator(help_help, "activate", accel_g, 'h',
        GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);

    GtkMenu* help_menu = (GtkMenu*)g_object_new(GTK_TYPE_MENU, NULL);
    gtk_menu_shell_append(GTK_MENU_SHELL(help_menu), help_help);

    GtkWidget* help
        = gtk_menu_item_new_with_mnemonic(CoWowGtk::translate_utf8("_Help"));
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), help);
    gtk_menu_item_set_submenu(GTK_MENU_ITEM(help), GTK_WIDGET(help_menu));

    // Create blk evlist
    blk = new EvListGtk(this, blk_vbox, ev_eType_BlockList, blk_size,
        eventname_seg, &blk_widget);
    blk->start_trace_cb = &blk_start_trace_cb;
    blk->display_in_xnav_cb = &blk_display_in_xnav_cb;
    blk->name_to_alias_cb = &ev_name_to_alias_cb;
    blk->popup_menu_cb = &ev_popup_menu_cb;

    gtk_box_pack_start(
        GTK_BOX(blk_vbox), GTK_WIDGET(menu_bar), FALSE, FALSE, 0);
    gtk_box_pack_end(GTK_BOX(blk_vbox), GTK_WIDGET(blk_widget), TRUE, TRUE, 0);

    gtk_container_add(GTK_CONTAINER(parent_wid_blk), blk_vbox);
    // gtk_widget_show_all( parent_wid_blk);
  }

  // Store this for the mh callbacks
  ev = this;

  if (display_eve) {
    gtk_widget_show_all(parent_wid_eve);
    eve_displayed = 1;
  } else {
    gtk_widget_show_all(parent_wid_eve);
    g_object_set(parent_wid_eve, "visible", FALSE, NULL);
  }

  if (display_ala) {
    gtk_widget_show_all(parent_wid_ala);
    ala_displayed = 1;
  } else {
    gtk_widget_show_all(parent_wid_ala);
    g_object_set(parent_wid_ala, "visible", FALSE, NULL);
  }

  if (display_blk) {
    gtk_widget_show_all(parent_wid_blk);
    blk_displayed = 1;
  } else {
    gtk_widget_show_all(parent_wid_blk);
    g_object_set(parent_wid_blk, "visible", FALSE, NULL);
  }

  wow = new CoWowGtk(parent_wid_ala);

  sts = outunit_connect(user);
  if (EVEN(sts))
    *status = sts;
}

EvAla* EvGtk::open_alarmlist_satellite(const char* title, pwr_tStatus* sts,
    int width, int height, int x, int y, pwr_tObjid view, unsigned int options,
    void* widget)
{
  if (sala_cnt >= (int)(sizeof(sala) / sizeof(sala[0])))
    return 0;

  sala[sala_cnt++] = new EvAlaGtk(this, parent_wid, (char*)title, user,
      eventname_seg, width, height, x, y, view, options, widget, sts);
  if (EVEN(*sts))
    return 0;

  sala[sala_cnt - 1]->start_trace_cb = ala_start_trace_cb;
  sala[sala_cnt - 1]->display_in_xnav_cb = ala_display_in_xnav_cb;
  sala[sala_cnt - 1]->help_cb = ala_help_cb;
  sala[sala_cnt - 1]->popup_menu_cb = ev_popup_menu_cb;
  sala[sala_cnt - 1]->sound_cb = ev_sound_cb;
  sala[sala_cnt - 1]->is_authorized_cb = ala_is_authorized_cb;
  sala[sala_cnt - 1]->acknowledge_cb = sala_acknowledge_cb;
  sala[sala_cnt - 1]->name_to_alias_cb = ev_name_to_alias_cb;
  sala[sala_cnt - 1]->copy_list_cb = sala_copy_list_cb;
  sala[sala_cnt - 1]->close_cb = sala_close_cb;
  sala[sala_cnt - 1]->init();

  return sala[sala_cnt - 1];
}

EvEve* EvGtk::open_eventlist_satellite(const char* title, pwr_tStatus* sts,
    int width, int height, int x, int y, pwr_tObjid view, unsigned int options,
    void* widget)
{
  if (seve_cnt >= (int)(sizeof(seve) / sizeof(seve[0])))
    return 0;

  seve[seve_cnt++] = new EvEveGtk(this, parent_wid, (char*)title, user,
      eventname_seg, width, height, x, y, view, options, widget, sts);
  if (EVEN(*sts))
    return 0;

  seve[seve_cnt - 1]->start_trace_cb = eve_start_trace_cb;
  seve[seve_cnt - 1]->display_in_xnav_cb = eve_display_in_xnav_cb;
  seve[seve_cnt - 1]->help_cb = ala_help_cb;
  seve[seve_cnt - 1]->popup_menu_cb = ev_popup_menu_cb;
  seve[seve_cnt - 1]->sound_cb = ev_sound_cb;
  seve[seve_cnt - 1]->is_authorized_cb = ala_is_authorized_cb;
  seve[seve_cnt - 1]->acknowledge_cb = seve_acknowledge_cb;
  seve[seve_cnt - 1]->name_to_alias_cb = ev_name_to_alias_cb;
  seve[seve_cnt - 1]->copy_list_cb = seve_copy_list_cb;
  seve[seve_cnt - 1]->close_cb = seve_close_cb;
  seve[seve_cnt - 1]->init();

  return seve[seve_cnt - 1];
}

//
//  Delete ev
//
EvGtk::~EvGtk()
{
  if (connected)
    mh_OutunitDisconnect();
  for (int i = 0; i < seve_cnt; i++) {
    if (seve[i])
      delete seve[i];
  }
  for (int i = 0; i < sala_cnt; i++) {
    if (sala[i])
      delete sala[i];
  }

  if (eve)
    delete eve;
  if (ala)
    delete ala;
  if (blk)
    delete blk;
  ala = NULL;
  ev = NULL;
  blk = NULL;
  if (parent_wid_eve)
    gtk_widget_destroy(parent_wid_eve);
  if (parent_wid_ala)
    gtk_widget_destroy(parent_wid_ala);
  if (parent_wid_blk)
    gtk_widget_destroy(parent_wid_blk);
}

void EvGtk::map_eve(unsigned int options)
{
  gtk_window_present(GTK_WINDOW(parent_wid_eve));
  eve_displayed = 1;

  if (options & ev_mAlaOptions_FullScreen)
    gtk_window_fullscreen(GTK_WINDOW(parent_wid_eve));
  else if (options & ev_mAlaOptions_Maximize)
    gtk_window_maximize(GTK_WINDOW(parent_wid_eve)); // TODO
  else if (options & ev_mAlaOptions_FullMaximize)
    gtk_window_maximize(GTK_WINDOW(parent_wid_eve));
}

void EvGtk::map_ala(unsigned int options)
{
  gtk_window_present(GTK_WINDOW(parent_wid_ala));
  ala_displayed = 1;

  if (options & ev_mAlaOptions_FullScreen)
    gtk_window_fullscreen(GTK_WINDOW(parent_wid_ala));
  else if (options & ev_mAlaOptions_Maximize)
    gtk_window_maximize(GTK_WINDOW(parent_wid_ala)); // TODO
  else if (options & ev_mAlaOptions_FullMaximize)
    gtk_window_maximize(GTK_WINDOW(parent_wid_ala));
}

void EvGtk::map_blk(unsigned int options)
{
  gtk_window_present(GTK_WINDOW(parent_wid_blk));
  blk_displayed = 1;

  if (options & ev_mAlaOptions_FullScreen)
    gtk_window_fullscreen(GTK_WINDOW(parent_wid_blk));
  else if (options & ev_mAlaOptions_Maximize)
    gtk_window_maximize(GTK_WINDOW(parent_wid_blk)); // TODO
  else if (options & ev_mAlaOptions_FullMaximize)
    gtk_window_maximize(GTK_WINDOW(parent_wid_blk));
}

void EvGtk::unmap_eve()
{
  if (eve_displayed) {
    g_object_set(parent_wid_eve, "visible", FALSE, NULL);
    eve_displayed = 0;
  }
}

void EvGtk::unmap_ala()
{
  if (ala_displayed) {
    g_object_set(parent_wid_ala, "visible", FALSE, NULL);
    ala_displayed = 0;
  }
}

void EvGtk::unmap_blk()
{
  if (blk_displayed) {
    g_object_set(parent_wid_blk, "visible", FALSE, NULL);
    blk_displayed = 0;
  }
}

void EvGtk::set_transient_eve(void* basewidget)
{
  gtk_window_set_transient_for(
      GTK_WINDOW(parent_wid_eve), GTK_WINDOW(basewidget));
}

void EvGtk::set_transient_ala(void* basewidget)
{
  gtk_window_set_transient_for(
      GTK_WINDOW(parent_wid_ala), GTK_WINDOW(basewidget));
}

void EvGtk::set_transient_blk(void* basewidget)
{
  gtk_window_set_transient_for(
      GTK_WINDOW(parent_wid_blk), GTK_WINDOW(basewidget));
}

void EvGtk::set_title_ala(char* title)
{
  g_object_set(parent_wid_ala, "title", title, NULL);
}

gboolean EvGtk::eve_action_inputfocus(
    GtkWidget* w, GdkEvent* event, gpointer data)
{
  Ev* ev = (Ev*)data;

  if (ev && ev->eve_displayed)
    ev->eve->set_input_focus();

  return FALSE;
}

gboolean EvGtk::ala_action_inputfocus(
    GtkWidget* w, GdkEvent* event, gpointer data)
{
  Ev* ev = (Ev*)data;

  if (ev && ev->ala_displayed)
    ev->ala->set_input_focus();

  return FALSE;
}

gboolean EvGtk::blk_action_inputfocus(
    GtkWidget* w, GdkEvent* event, gpointer data)
{
  Ev* ev = (Ev*)data;

  if (ev && ev->blk_displayed)
    ev->blk->set_input_focus();

  return FALSE;
}

void EvGtk::eve_activate_exit(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->unmap_eve();
  ev->eve_displayed = 0;
}

void EvGtk::ala_activate_exit(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->unmap_ala();
  ev->ala_displayed = 0;
}

void EvGtk::blk_activate_exit(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->unmap_blk();
  ev->blk_displayed = 0;
}

void EvGtk::eve_activate_print(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->eve_activate_print();
}

void EvGtk::ala_activate_print(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->ala_activate_print();
}

void EvGtk::blk_activate_print(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->blk_activate_print();
}

void EvGtk::eve_activate_export(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->eve_activate_export();
}

void EvGtk::eve_activate_analyse(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->eve_activate_analyse();
}

void EvGtk::eve_activate_ack_last(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->eve_activate_ack_last();
}

void EvGtk::ala_activate_ack_last(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->ala_activate_ack_last();
}

void EvGtk::ala_activate_ack_all(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->eve_activate_ack_all();
}

void EvGtk::ala_activate_shift_view(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->view_shift();
}

void EvGtk::ala_activate_select_flat(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->set_view(pwr_cNObjid);
}

void EvGtk::ala_activate_select_view1(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[0]);
}
void EvGtk::ala_activate_select_view2(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[1]);
}
void EvGtk::ala_activate_select_view3(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[2]);
}
void EvGtk::ala_activate_select_view4(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[3]);
}
void EvGtk::ala_activate_select_view5(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[4]);
}
void EvGtk::ala_activate_select_view6(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[5]);
}
void EvGtk::ala_activate_select_view7(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[6]);
}
void EvGtk::ala_activate_select_view8(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[7]);
}
void EvGtk::ala_activate_select_view9(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[8]);
}
void EvGtk::ala_activate_select_view10(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[9]);
}
void EvGtk::ala_activate_select_view11(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[10]);
}
void EvGtk::ala_activate_select_view12(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[11]);
}
void EvGtk::ala_activate_select_view13(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[12]);
}
void EvGtk::ala_activate_select_view14(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[13]);
}
void EvGtk::ala_activate_select_view15(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[14]);
}
void EvGtk::ala_activate_select_view16(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[15]);
}
void EvGtk::ala_activate_select_view17(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[16]);
}
void EvGtk::ala_activate_select_view18(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[17]);
}
void EvGtk::ala_activate_select_view19(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[18]);
}
void EvGtk::ala_activate_select_view20(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[19]);
}
void EvGtk::ala_activate_select_view21(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[20]);
}
void EvGtk::ala_activate_select_view22(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[21]);
}
void EvGtk::ala_activate_select_view23(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[22]);
}
void EvGtk::ala_activate_select_view24(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[23]);
}
void EvGtk::ala_activate_select_view25(GtkWidget* w, gpointer ev)
{
  ((Ev*)ev)->set_view(((EvGtk*)ev)->alarm_views[24]);
}

void EvGtk::eve_activate_zoom_in(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->eve->zoom(1.2);
}

void EvGtk::ala_activate_zoom_in(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->ala->zoom(1.2);
}

void EvGtk::blk_activate_zoom_in(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->blk->zoom(1.2);
}

void EvGtk::eve_activate_zoom_out(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->eve->zoom(5.0 / 6);
}

void EvGtk::ala_activate_zoom_out(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->ala->zoom(5.0 / 6);
}

void EvGtk::blk_activate_zoom_out(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->blk->zoom(5.0 / 6);
}

void EvGtk::eve_activate_zoom_reset(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->eve->unzoom();
}

void EvGtk::ala_activate_zoom_reset(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->ala->unzoom();
}

void EvGtk::blk_activate_zoom_reset(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->blk->unzoom();
}

void EvGtk::blk_activate_block_remove(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->blk->block_remove();
}

void EvGtk::eve_activate_open_plc(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->eve->start_trace();
}

void EvGtk::ala_activate_open_plc(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->ala->start_trace();
}

void EvGtk::blk_activate_open_plc(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->blk->start_trace();
}

void EvGtk::eve_activate_display_in_xnav(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->eve->display_in_xnav();
}

void EvGtk::ala_activate_display_in_xnav(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->ala->display_in_xnav();
}

void EvGtk::blk_activate_display_in_xnav(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->blk->display_in_xnav();
}

void EvGtk::eve_activate_disp_hundredth(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;
  int set = (int)gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(w));

  ev->eve->set_display_hundredth(set);
}

void EvGtk::ala_activate_disp_hundredth(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;
  int set = (int)gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(w));

  ev->ala->set_display_hundredth(set);
}

void EvGtk::eve_activate_hide_object(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;
  int set = (int)gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(w));

  ev->eve->set_hide_object(set);
}

void EvGtk::ala_activate_hide_object(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;
  int set = (int)gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(w));

  ev->ala->set_hide_object(set);
}

void EvGtk::eve_activate_hide_text(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;
  int set = (int)gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(w));

  ev->eve->set_hide_text(set);
}

void EvGtk::ala_activate_hide_text(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;
  int set = (int)gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(w));

  ev->ala->set_hide_text(set);
}

void EvGtk::eve_activate_help(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->eve_activate_help();
}

void EvGtk::eve_activate_helpevent(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->eve_activate_helpevent();
}

void EvGtk::ala_activate_help(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->ala_activate_help();
}

void EvGtk::ala_activate_helpevent(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->ala_activate_helpevent();
}

void EvGtk::blk_activate_help(GtkWidget* w, gpointer data)
{
  Ev* ev = (Ev*)data;

  ev->blk_activate_help();
}
