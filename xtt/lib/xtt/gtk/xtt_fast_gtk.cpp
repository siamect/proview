/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <stdlib.h>

#include "co_cdh.h"
#include "co_string.h"

#include "rt_gdh_msg.h"
#include "rt_xnav_msg.h"

#include "glow_curveapi.h"

#include "ge_curve_gtk.h"

#include "xtt_fast_gtk.h"
#include "xtt_xnav.h"

XttFastGtk::XttFastGtk(void* parent_ctx, GtkWidget* parent_wid, char* name,
    GtkWidget** w, pwr_sAttrRef* fast_arp, int width, int height,
    unsigned int options, int xn_color_theme, void* basewidget, int* sts)
    : XttFast(parent_ctx, name, fast_arp, xn_color_theme, sts),
      parent_widget(parent_wid)
{
  char title[250];

  if (EVEN(*sts))
    return;

  *sts = XNAV__SUCCESS;

  if (!streq(name, ""))
    strncpy(title, name, sizeof(title));
  else
    gdh_AttrrefToName(fast_arp, title, sizeof(title), cdh_mNName);

  curve = new GeCurveGtk(this, parent_widget, title, NULL, gcd, 0, width,
      height, options, color_theme, basewidget);
  curve->close_cb = fast_close_cb;
  curve->help_cb = fast_help_cb;
  curve->export_cb = fast_export_cb;
  setup();

  wow = new CoWowGtk(parent_widget);
  timerid = wow->timer_new();

  timerid->add(1000, fast_scan, this);
}

XttFastGtk::XttFastGtk(void* parent_ctx, GtkWidget* parent_wid,
    const char* name, GtkWidget** w, char* filename, int xn_color_theme,
    void* basewidget, int* sts)
    : XttFast(parent_ctx, name, filename, xn_color_theme, sts),
      parent_widget(parent_wid)
{
  char title[250];
  strncpy(title, filename, sizeof(title));

  if (EVEN(*sts))
    // Error from XttFast
    return;

  *sts = XNAV__SUCCESS;

  curve = new GeCurveGtk(this, parent_widget, title, NULL, gcd, 1, 0, 0, 0,
      color_theme, basewidget);
  curve->close_cb = fast_close_cb;
  curve->help_cb = fast_help_cb;
  curve->enable(0);

  wow = new CoWowGtk(parent_widget);
  timerid = wow->timer_new();

  // timerid->add( 1000, fast_scan, this);
}

XttFastGtk::~XttFastGtk()
{
  if (timerid)
    timerid->remove();

  for (int i = 0; i < fast_cnt; i++) {
    gdh_UnrefObjectInfo(new_subid);
  }
  if (curve)
    delete curve;
  if (gcd)
    delete gcd;
  delete wow;
}
