/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_clog_gtk_h
#define xtt_clog_gtk_h

/* xtt_clog_gtk.h -- Alarm and event windows in xtt */

#include "xtt_clog.h"

class CLogGtk : public CLog {
public:
  CLogGtk(void* clog_parent_ctx, GtkWidget* clog_parent_wid,
      const char* clog_name, pwr_tStatus* status);
  ~CLogGtk();

  GtkWidget* parent_wid;
  GtkWidget* parent_wid_clog;
  GtkWidget* toplevel;
  GtkWidget* form_clog;
  GtkWidget* clognav_widget;
  GtkWidget* filter_form;
  GtkWidget* show_success_w;
  GtkWidget* show_info_w;
  GtkWidget* show_warning_w;
  GtkWidget* show_error_w;
  GtkWidget* show_fatal_w;
  GtkWidget* show_text_w;
  GtkWidget* filter_string_w;
  GtkWidget* filesel_form;
  GtkWidget* filesel_list_w;
  GdkCursor* clock_cursor;

  void pop();
  void set_clock_cursor();
  void reset_cursor();
  void free_cursor();
  void create_filter_dialog();
  void print();

  static gboolean action_inputfocus(
      GtkWidget* w, GdkEvent* event, gpointer data);
  static void activate_exit(GtkWidget* w, gpointer data);
  static void activate_select_file(GtkWidget* w, gpointer data);
  static void activate_next_file(GtkWidget* w, gpointer data);
  static void activate_prev_file(GtkWidget* w, gpointer data);
  static void activate_update(GtkWidget* w, gpointer data);
  static void activate_print(GtkWidget* w, gpointer data);
  static void activate_zoom_in(GtkWidget* w, gpointer data);
  static void activate_zoom_out(GtkWidget* w, gpointer data);
  static void activate_zoom_reset(GtkWidget* w, gpointer data);
  static void activate_filter(GtkWidget* w, gpointer data);
  static void activate_help(GtkWidget* w, gpointer data);
  static void activate_helpmsg(GtkWidget* w, gpointer data);
  static void filter_ok_cb(GtkWidget* w, gpointer data);
  static void filter_apply_cb(GtkWidget* w, gpointer data);
  static void filter_cancel_cb(GtkWidget* w, gpointer data);
  static void file_selected_cb(void* ctx, char* text, int ok_pressed);
};

#endif
