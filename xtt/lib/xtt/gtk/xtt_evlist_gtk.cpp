/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_evlist_gtk.cpp -- Alarm or event list in xtt */

#include "co_cdh.h"
#include "co_dcli.h"
#include "co_syi.h"
#include "co_time.h"
#include "rt_gdh.h"

#include "cow_wow_gtk.h"

#include "flow_browwidget_gtk.h"

#include "xtt_evlist_gtk.h"

EvListGtk::EvListGtk(void* ev_parent_ctx, GtkWidget* ev_parent_wid,
    ev_eType ev_type, int ev_size, int ev_eventname_seg, GtkWidget** w,
    void (*ev_init_cb)(void*))
    : EvList(ev_parent_ctx, ev_type, ev_size, ev_eventname_seg, ev_init_cb),
      parent_wid(ev_parent_wid)
{
  form_widget = scrolledbrowwidgetgtk_new(init_brow_cb, this, &brow_widget);

  gtk_widget_show_all(brow_widget);

  *w = form_widget;
}

//
//  Delete ev
//
EvListGtk::~EvListGtk()
{
  if (browtree)
    delete browtree->ctx;
  if (browtree && browtree != brow)
    delete browtree;
  if (browbase && browbase != brow)
    delete browbase;
  delete brow;

  gtk_widget_destroy(form_widget);
}

void EvListGtk::set_input_focus()
{
  gtk_widget_grab_focus(brow_widget);
}

void EvListGtk::bell()
{
  gdk_display_beep(gtk_widget_get_display(brow_widget));
}

void EvListGtk::popup_position(int x_event, int y_event, int* x, int* y)
{
  CoWowGtk::PopupPosition(brow_widget, x_event, y_event, x, y);
}

void EvListGtk::print(const char* title)
{
  char nodename[80];
  pwr_tStatus sts;
  char print_title[120];

  strcpy(print_title, title);
  syi_NodeName(&sts, nodename, sizeof(nodename));
  if (ODD(sts)) {
    strcat(print_title, " ");
    strcat(print_title, nodename);
  }

  CoWowGtk::CreateBrowPrintDialogGtk(print_title, brow->ctx,
      flow_eOrientation_Landscape, 1.0, 0 /* GTK_WINDOW(parent_wid) */, &sts);
  if (sts == WOW__PRINTDIALOGDISABLED) {
    pwr_tFileName filename;
    pwr_tCmd cmd;

    dcli_translate_filename(filename, "$pwrp_tmp/xnav.ps");
    print_nodia(filename);

    sprintf(cmd, "$pwr_exe/rt_print.sh %s", filename);
    system(cmd);
  }
}
