/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_ev_gtk_h
#define xtt_ev_gtk_h

/* xtt_ev_gtk.h -- Alarm and event windows in xtt */

#include "xtt_ev.h"

class EvGtk : public Ev {
public:
  EvGtk(void* ev_parent_ctx, GtkWidget* ev_parent_wid, char* eve_name,
      char* ala_name, char* blk_name, pwr_tObjid ev_user, int display_ala,
      int display_eve, int display_blk, int display_return, int display_ack,
      int ev_beep, pwr_tMask ev_pop_mask, int ev_eventname_seg,
      pwr_tStatus* status);
  ~EvGtk();

  GtkWidget* parent_wid;
  GtkWidget* parent_wid_eve;
  GtkWidget* parent_wid_ala;
  GtkWidget* parent_wid_blk;
  GtkWidget* toplevel_ala;
  GtkWidget* toplevel_eve;
  GtkWidget* toplevel_blk;
  GtkWidget* form_ala;
  GtkWidget* form_eve;
  GtkWidget* form_blk;
  GtkWidget* eve_widget;
  GtkWidget* ala_widget;
  GtkWidget* blk_widget;
  pwr_tObjid alarm_views[25];

  void map_eve(unsigned int options);
  void map_ala(unsigned int options);
  void map_blk(unsigned int options);
  void unmap_eve();
  void unmap_ala();
  void unmap_blk();
  void set_transient_eve(void* basewidget);
  void set_transient_ala(void* basewidget);
  void set_transient_blk(void* basewidget);
  void set_title_ala(char* title);
  EvAla* open_alarmlist_satellite(const char* title, pwr_tStatus* sts,
      int width, int height, int x, int y, pwr_tObjid view,
      unsigned int options = 0, void* widget = 0);
  EvEve* open_eventlist_satellite(const char* title, pwr_tStatus* sts,
      int width, int height, int x, int y, pwr_tObjid view,
      unsigned int options = 0, void* widget = 0);

  static gboolean eve_action_inputfocus(
      GtkWidget* w, GdkEvent* event, gpointer data);
  static gboolean ala_action_inputfocus(
      GtkWidget* w, GdkEvent* event, gpointer data);
  static gboolean blk_action_inputfocus(
      GtkWidget* w, GdkEvent* event, gpointer data);
  static void eve_activate_exit(GtkWidget* w, gpointer data);
  static void ala_activate_exit(GtkWidget* w, gpointer data);
  static void blk_activate_exit(GtkWidget* w, gpointer data);
  static void eve_activate_print(GtkWidget* w, gpointer data);
  static void ala_activate_print(GtkWidget* w, gpointer data);
  static void blk_activate_print(GtkWidget* w, gpointer data);
  static void eve_activate_export(GtkWidget* w, gpointer data);
  static void eve_activate_analyse(GtkWidget* w, gpointer data);
  static void eve_activate_ack_last(GtkWidget* w, gpointer data);
  static void ala_activate_ack_last(GtkWidget* w, gpointer data);
  static void ala_activate_ack_all(GtkWidget* w, gpointer data);
  static void eve_activate_zoom_in(GtkWidget* w, gpointer data);
  static void ala_activate_zoom_in(GtkWidget* w, gpointer data);
  static void blk_activate_zoom_in(GtkWidget* w, gpointer data);
  static void eve_activate_zoom_out(GtkWidget* w, gpointer data);
  static void ala_activate_zoom_out(GtkWidget* w, gpointer data);
  static void blk_activate_zoom_out(GtkWidget* w, gpointer data);
  static void eve_activate_zoom_reset(GtkWidget* w, gpointer data);
  static void ala_activate_zoom_reset(GtkWidget* w, gpointer data);
  static void blk_activate_zoom_reset(GtkWidget* w, gpointer data);
  static void blk_activate_block_remove(GtkWidget* w, gpointer data);
  static void eve_activate_open_plc(GtkWidget* w, gpointer data);
  static void ala_activate_open_plc(GtkWidget* w, gpointer data);
  static void blk_activate_open_plc(GtkWidget* w, gpointer data);
  static void eve_activate_display_in_xnav(GtkWidget* w, gpointer data);
  static void ala_activate_display_in_xnav(GtkWidget* w, gpointer data);
  static void blk_activate_display_in_xnav(GtkWidget* w, gpointer data);
  static void eve_activate_disp_hundredth(GtkWidget* w, gpointer data);
  static void ala_activate_disp_hundredth(GtkWidget* w, gpointer data);
  static void eve_activate_hide_object(GtkWidget* w, gpointer data);
  static void ala_activate_hide_object(GtkWidget* w, gpointer data);
  static void eve_activate_hide_text(GtkWidget* w, gpointer data);
  static void ala_activate_hide_text(GtkWidget* w, gpointer data);
  static void eve_activate_help(GtkWidget* w, gpointer data);
  static void ala_activate_help(GtkWidget* w, gpointer data);
  static void blk_activate_help(GtkWidget* w, gpointer data);
  static void eve_activate_helpevent(GtkWidget* w, gpointer data);
  static void ala_activate_helpevent(GtkWidget* w, gpointer data);
  static void ala_activate_shift_view(GtkWidget* w, gpointer data);
  static void ala_activate_select_flat(GtkWidget* w, gpointer data);
  static void ala_activate_select_view1(GtkWidget* w, gpointer data);
  static void ala_activate_select_view2(GtkWidget* w, gpointer data);
  static void ala_activate_select_view3(GtkWidget* w, gpointer data);
  static void ala_activate_select_view4(GtkWidget* w, gpointer data);
  static void ala_activate_select_view5(GtkWidget* w, gpointer data);
  static void ala_activate_select_view6(GtkWidget* w, gpointer data);
  static void ala_activate_select_view7(GtkWidget* w, gpointer data);
  static void ala_activate_select_view8(GtkWidget* w, gpointer data);
  static void ala_activate_select_view9(GtkWidget* w, gpointer data);
  static void ala_activate_select_view10(GtkWidget* w, gpointer data);
  static void ala_activate_select_view11(GtkWidget* w, gpointer data);
  static void ala_activate_select_view12(GtkWidget* w, gpointer data);
  static void ala_activate_select_view13(GtkWidget* w, gpointer data);
  static void ala_activate_select_view14(GtkWidget* w, gpointer data);
  static void ala_activate_select_view15(GtkWidget* w, gpointer data);
  static void ala_activate_select_view16(GtkWidget* w, gpointer data);
  static void ala_activate_select_view17(GtkWidget* w, gpointer data);
  static void ala_activate_select_view18(GtkWidget* w, gpointer data);
  static void ala_activate_select_view19(GtkWidget* w, gpointer data);
  static void ala_activate_select_view20(GtkWidget* w, gpointer data);
  static void ala_activate_select_view21(GtkWidget* w, gpointer data);
  static void ala_activate_select_view22(GtkWidget* w, gpointer data);
  static void ala_activate_select_view23(GtkWidget* w, gpointer data);
  static void ala_activate_select_view24(GtkWidget* w, gpointer data);
  static void ala_activate_select_view25(GtkWidget* w, gpointer data);
};

#endif
