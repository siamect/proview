/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_stream_gtk_h
#define xtt_stream_gtk_h

#include "xtt_stream.h"

#include "cow_wow_gtk.h"

#if defined PWRE_CONF_GST

#include <gst/gst.h>

class XttStreamGtk : public XttStream {
public:
  GstElement* playbin2; /* Our one and only pipeline */
  gulong slider_update_signal_id; /* Signal ID for the slider update signal */
  GstState state; /* Current state of the pipeline */
  gint64 duration; /* Duration of the clip, in nanoseconds */
  pwr_tTime mb_press_time;
  int mb_press_x;
  int mb_press_y;
  int scroll_x;
  int scroll_y;
  int scroll_direction;
  int scroll_cnt;
  int popupmenu_x;
  int popupmenu_y;
  int ptz_box_displayed;
  int is_live;
  pwr_tTime buftime;

  GtkWidget* slider; /* Slider widget to keep track of current position */
  GtkWidget* parent_wid;
  GtkWidget* toplevel;
  GtkWidget* video_form;
  GtkWidget* main_box;
  GtkWidget* ptz_box;
  GtkWidget* ptz_pan;
  GtkWidget* ptz_tilt;
  GtkWidget* ptz_zoom;
  GtkWidget* tools;

  void* overlay;
  CoWowTimer* reconnect_timerid;
  int no_uri;

  static int gst_initialized;

  XttStreamGtk(GtkWidget* parent_wid, void* parent_ctx, const char* name,
      const char* uri, int width, int height, int x, int y, double scan_time,
      unsigned int options, int embedded, pwr_tAttrRef* arp, pwr_tStatus* sts);
  ~XttStreamGtk();

  void pop();
  void set_size(int width, int height);
  void setup();
  void* get_widget()
  {
    return main_box;
  }
  void create_popup_menu(int x, int y);
  void erase_window();

  static void scroll_cb(void* data);
  static void refresh(void* data);
  static void refresh_ui(XttStreamGtk* strm);

  static void activate_exit(GtkWidget* w, gpointer data);

  static void realize_cb(GtkWidget* widget, void* data);
  static void play_cb(GtkButton* button, void* data);
  static void pause_cb(GtkButton* button, void* data);
  static void stop_cb(GtkButton* button, void* data);
  static void delete_event_cb(GtkWidget* widget, GdkEvent* event, void* data);
  static gboolean expose_cb(
      GtkWidget* widget, GdkEventExpose* event, void* data);
  static void slider_cb(GtkRange* range, void* data);
  static void tags_cb(GstElement* playbin2, gint stream, void* data);
  static void error_cb(GstBus* bus, GstMessage* msg, void* data);
  static void eos_cb(GstBus* bus, GstMessage* msg, void* data);
  static void state_changed_cb(GstBus* bus, GstMessage* msg, void* data);
  static void application_cb(GstBus* bus, GstMessage* msg, void* data);
  static void resize_cb(GtkWidget* w, GtkAllocation* allocation, gpointer data);
  static void source_setup_cb(
      GstElement* playbin2, GstElement* src, gpointer data);
  static gboolean mousebutton_cb(
      GtkWidget* widget, GdkEvent* event, void* data);
  static void reconnect(void* data);
  static void menu_position_func(
      GtkMenu* menu, gint* x, gint* y, gboolean* push_in, gpointer data);
  static void activate_zoomreset(GtkWidget* w, gpointer data);
  static void activate_zoomin(GtkWidget* w, gpointer data);
  static void activate_zoomout(GtkWidget* w, gpointer data);
  static void activate_scroll_left(GtkWidget* w, gpointer data);
  static void activate_scroll_right(GtkWidget* w, gpointer data);
  static void activate_page_left(GtkWidget* w, gpointer data);
  static void activate_page_right(GtkWidget* w, gpointer data);
  static void activate_scroll_down(GtkWidget* w, gpointer data);
  static void activate_scroll_up(GtkWidget* w, gpointer data);
  static void activate_page_down(GtkWidget* w, gpointer data);
  static void activate_page_up(GtkWidget* w, gpointer data);
  static void activate_preset_position1(GtkWidget* w, gpointer data);
  static void activate_preset_position2(GtkWidget* w, gpointer data);
  static void activate_preset_position3(GtkWidget* w, gpointer data);
  static void activate_preset_position4(GtkWidget* w, gpointer data);
  static void activate_preset_position5(GtkWidget* w, gpointer data);
  static void activate_preset_position6(GtkWidget* w, gpointer data);
  static void activate_preset_position7(GtkWidget* w, gpointer data);
  static void activate_preset_position8(GtkWidget* w, gpointer data);
  static void activate_preset_position9(GtkWidget* w, gpointer data);
  static void activate_preset_position10(GtkWidget* w, gpointer data);
  static void activate_preset_store_pos1(GtkWidget* w, gpointer data);
  static void activate_preset_store_pos2(GtkWidget* w, gpointer data);
  static void activate_preset_store_pos3(GtkWidget* w, gpointer data);
  static void activate_preset_store_pos4(GtkWidget* w, gpointer data);
  static void activate_preset_store_pos5(GtkWidget* w, gpointer data);
  static void activate_preset_store_pos6(GtkWidget* w, gpointer data);
  static void activate_preset_store_pos7(GtkWidget* w, gpointer data);
  static void activate_preset_store_pos8(GtkWidget* w, gpointer data);
  static void activate_preset_store_pos9(GtkWidget* w, gpointer data);
  static void activate_preset_store_pos10(GtkWidget* w, gpointer data);
  static void activate_get_position(GtkWidget* w, gpointer data);
};

#else
class XttStreamGtk : public XttStream {
public:
  XttStreamGtk(GtkWidget* parent_wid, void* parent_ctx, const char* name,
      const char* uri, int width, int height, int x, int y, double scan_time,
      unsigned int options, int embedded, pwr_tAttrRef* arp, pwr_tStatus* sts);
  ~XttStreamGtk();

  void pop()
  {
  }
  void set_size(int width, int height)
  {
  }
  void* get_widget()
  {
    return 0;
  }
};
#endif

#endif
