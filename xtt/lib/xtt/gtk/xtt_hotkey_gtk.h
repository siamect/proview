/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_hotkey_gtk_h
#define xtt_hotkey_gtk_h

#if defined OS_LINUX

#include <vector>
#include "pwr.h"

class HotkeyAction {
public:
  char m_name[80];
  void (*m_action)(char*, char *, void*);
  HotkeyAction(const char* name, void (*action)(char*, char*, void*));
  HotkeyAction(const HotkeyAction& x);
};

class HotkeyKey {
public:
  int m_mod;
  int m_keysym;
  char m_action_name[80];
  char m_action_arg1[200];
  char m_action_arg2[200];
  void (*m_action)(char*, char*, void*);
  void* m_userdata;

  HotkeyKey(int mod, int keysym, char* action_name, char* action_arg1, char *action_arg2);
  HotkeyKey(const HotkeyKey& x);
  void set_action(HotkeyAction* action, void* userdata);
};

class XttHotkey {
public:
  pwr_tFileName m_filename;
  std::vector<HotkeyAction> m_actions;
  std::vector<HotkeyKey> m_keys;
  XttHotkey(const char* filename);
  ~XttHotkey();
  void register_action(
     const char* name, void (*action)(char*, char *, void*), void* userdata);
  int read_file();
  int grab_key(int keysym, int modifier);
  static int event_handler(GdkXEvent* xevent, gpointer data);
};

#else
// Dummy for other platforms than OS_LINUX

class XttHotkey {
public:
  // pwr_tFileName m_filename;
  // std::vector<HotkeyAction> m_actions;
  // std::vector<HotkeyKey> m_keys;
  XttHotkey(const char* filename)
  {
  }
  ~XttHotkey()
  {
  }
  void register_action(
      const char* name, void (*action)(char*, void*), void* userdata)
  {
  }
  //  int read_file()
  //  int grab_key( int keysym, int modifier);
  static int event_handler(GdkXEvent* xevent, gpointer data)
  {
    return 1;
  }
};
#endif

#endif
