/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_multiview_gtk_h
#define xtt_multiview_gtk_h

#include "xtt_multiview.h"

#include "cow_wow_gtk.h"

class EvAlaGtk;
class EvEveGtk;
class XttTrendGtk;
class XttSevHistGtk;
class XttStreamGtk;

class XttMultiViewGtk : public XttMultiView {
public:
  GtkWidget* parent_wid;
  GtkWidget* comp_widget[MV_SIZE];
  GtkWidget* exchange_widget[MV_SIZE];
  GtkWidget* box_widget;
  GtkWidget* toplevel;
  GtkWidget* col_widget;
  XttGeGtk* gectx[MV_SIZE];
  XttMultiViewGtk* mvctx[MV_SIZE];
  EvAlaGtk* sala[MV_SIZE];
  EvEveGtk* seve[MV_SIZE];
  XttTrendGtk* trend[MV_SIZE];
  XttSevHistGtk* sevhist[MV_SIZE];
  XttStreamGtk* strmctx[MV_SIZE];
  int comp_width[MV_SIZE];
  int comp_height[MV_SIZE];
  int comp_x[MV_SIZE];
  int comp_y[MV_SIZE];
  int orig_width;
  int orig_height;
  CoWowFocusTimerGtk focustimer;

  XttMultiViewGtk(GtkWidget* parent_wid, void* parent_ctx, const char* name,
      pwr_tAttrRef* aref, int width, int height, int x, int y,
      unsigned int options, void* basewidget, int color_theme, pwr_tStatus* sts,
      int (*mv_command_cb)(void*, char*, char*, void*),
      int (*mv_get_current_objects_cb)(void*, pwr_sAttrRef**, int**),
      int (*mv_is_authorized_cb)(void*, unsigned int),
      void (*mv_keyboard_cb)(void*, void*, int, int));
  ~XttMultiViewGtk();

  void pop();
  void set_size(int width, int height);
  void create_confirm_dialog();
  void confirm_reply(int ok);
  void* get_widget();
  int set_subwindow_source(const char* name, char* source, char* object,
      double* borders, int insert = 1, int more = 0);
  int key_pressed(int key);
  void close_input_all();
  void signal_send(char* signalname);
  GtkWidget* error_msg(const char* msg, pwr_tStatus sts);

  static void ge_change_value_cb(void* ge_ctx, void* value_object, char* text);
  static void confirm_cb(void* ge_ctx, void* confirm_object, char* text);
  static void message_dialog_cb(void* ge_ctx, const char* text);

  static gboolean action_inputfocus(
      GtkWidget* w, GdkEvent* event, gpointer data);
  static void activate_value_input(GtkWidget* w, gpointer data);
  static void activate_confirm_ok(GtkWidget* w, gpointer data);
  static void activate_confirm_cancel(GtkWidget* w, gpointer data);
  static void activate_exit(GtkWidget* w, gpointer data);
  static void activate_zoom_in(GtkWidget* w, gpointer data);
  static void activate_zoom_out(GtkWidget* w, gpointer data);
  static void activate_zoom_reset(GtkWidget* w, gpointer data);
  static void activate_help(GtkWidget* w, gpointer data);
  static void create_graph_form(GtkWidget* w, gpointer data);
  static void create_message_dia(GtkWidget* w, gpointer data);
  static void create_menu(GtkWidget* w, gpointer data);
  static void create_value_input(GtkWidget* w, gpointer data);
  static void action_resize(
      GtkWidget* w, GtkAllocation* allocation, gpointer data);
};

#endif
