/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_keyboard_gtk.cpp -- Virtual keyboard */

typedef void* Widget;

#include <iostream>
#include <vector>

#include "rt_xnav_msg.h"

#include "cow_wow_gtk.h"

#include "glow_keyboardwidget_gtk.h"

#include "xtt_keyboard_gtk.h"

static gint delete_event(GtkWidget* w, GdkEvent* event, gpointer data)
{
  XttKeyboardGtk* keyboard = (XttKeyboardGtk*)data;

  if (keyboard->close_cb)
    (keyboard->close_cb)(keyboard->parent_ctx);
  else
    delete keyboard;
  return TRUE;
}

static void destroy_event(GtkWidget* w, gpointer data)
{
}

//
// Create the keyboard widget
//
XttKeyboardGtk::XttKeyboardGtk(void* xn_parent_ctx, GtkWidget* xn_parent_wid,
    const char* xn_name, GtkWidget** w, keyboard_eKeymap xn_keymap,
    keyboard_eType xn_type, int xn_color_theme, pwr_tStatus* status)
    : XttKeyboard(
          xn_parent_ctx, xn_name, xn_keymap, xn_type, xn_color_theme, status),
      parent_wid(xn_parent_wid), displayed(0), closing_down(0)
{
  int width = 1145;
  int height = 161;

  toplevel = (GtkWidget*)g_object_new(GTK_TYPE_WINDOW, "default-height", height,
      "default-width", width, "title", CoWowGtk::translate_utf8(xn_name), NULL);

  g_signal_connect(toplevel, "delete_event", G_CALLBACK(delete_event), this);
  g_signal_connect(toplevel, "destroy", G_CALLBACK(destroy_event), this);
  g_signal_connect(
      toplevel, "focus-in-event", G_CALLBACK(action_inputfocus), this);

  keyboard_widget = keyboardwidgetgtk_new(init_keyboard_cb, this);

  GtkWidget* vbox = gtk_vbox_new(FALSE, 0);

  gtk_box_pack_end(GTK_BOX(vbox), GTK_WIDGET(keyboard_widget), TRUE, TRUE, 0);

  gtk_container_add(GTK_CONTAINER(toplevel), vbox);
  gtk_widget_show_all(toplevel);

  // Set position
  keyboard_GetSize(keyboardctx, &width, &height);

  GtkWindow* window = GTK_WINDOW(toplevel);
  GdkScreen* screen = gtk_window_get_screen(window);

  int screen_width = gdk_screen_get_width(screen);
  int screen_height = gdk_screen_get_height(screen);

  if (width > screen_width) {
    height = ((float)screen_width) * 0.9 / width * height;
    width = screen_width * 0.9;
    keyboard_SetSize(keyboardctx, width, height);
  }

  gtk_window_resize(GTK_WINDOW(toplevel), width, height);

  int x = screen_width / 2 - width / 2;
  int y = screen_height - height;

  gtk_window_move(GTK_WINDOW(toplevel), x, y);

  displayed = 1;

  *status = 1;
}

//
//  Delete a keyboard context
//
XttKeyboardGtk::~XttKeyboardGtk()
{
  closing_down = 1;

  gtk_widget_destroy(toplevel);
}

void XttKeyboardGtk::set_inputfocus()
{
  if (displayed) {
    gtk_widget_grab_focus(keyboard_widget);
  }
}

gboolean XttKeyboardGtk::action_inputfocus(
    GtkWidget* w, GdkEvent* event, gpointer data)
{
  XttKeyboardGtk* keyboard = (XttKeyboardGtk*)data;

  if (keyboard && keyboard->displayed) {
    // set_input_focus();
  }
  return FALSE;
}

//
//  Pop keyboard window
//
void XttKeyboardGtk::pop()
{
  gtk_window_present(GTK_WINDOW(toplevel));
}

void XttKeyboardGtk::set_transient(void* basewidget)
{
  gtk_window_set_transient_for(GTK_WINDOW(toplevel), GTK_WINDOW(basewidget));
}
