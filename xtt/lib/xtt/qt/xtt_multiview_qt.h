/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_multiview_qt_h
#define xtt_multiview_qt_h

#include "xtt_multiview.h"

#include "cow_wow_qt.h"

#include <QHBoxLayout>

class XttMultiViewQtWidget;

typedef struct {
  int tag;
  void* data;
} View;

class XttMultiViewQt : public XttMultiView {
public:
  std::vector<QWidget*> comp_widget;
  std::vector<QWidget*> exchange_widget;
  std::vector<QHBoxLayout*> exchange_widget_layout;
  std::vector<View> views;
  CoWowFocusTimerQt focustimer;

  XttMultiViewQt(void* parent_ctx, const char* name, pwr_tAttrRef* aref,
      int width, int height, int x, int y, unsigned int options,
      void* basewidget, int color_theme, pwr_tStatus* sts,
      int (*mv_command_cb)(void*, char*, char*, void*),
      int (*mv_get_current_objects_cb)(void*, pwr_sAttrRef**, int**),
      int (*mv_is_authorized_cb)(void*, unsigned int),
      void (*mv_keyboard_cb)(void*, void*, int, int));
  ~XttMultiViewQt();

  void pop();
  void set_size(int width, int height);
  void* get_widget();
  int set_subwindow_source(const char* name, char* source, char* object,
      double* borders, int insert = 1, int more = 0);
  int key_pressed(int key);
  void close_input_all();
  void signal_send(char* signalname);

private:
  void setDataAndTag(int idx, int tag, void* data);

  XttMultiViewQtWidget* toplevel;
};

class XttMultiViewQtWidget : public QWidget {
public:
  XttMultiViewQtWidget(XttMultiViewQt* parent) : QWidget(), multiview(parent) {}

protected:
  void focusInEvent(QFocusEvent* event);
  void closeEvent(QCloseEvent* event);

private:
  XttMultiViewQt* multiview;
};

#endif
