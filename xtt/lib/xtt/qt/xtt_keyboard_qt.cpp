/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_keyboard_qt.cpp -- Virtual keyboard */

#include "cow_qt_helpers.h"

#include "glow_keyboardwidget_qt.h"

#include "xtt_keyboard_qt.h"

#include <QApplication>
#include <QDesktopWidget>
#include <QResizeEvent>
#include <QVBoxLayout>

void XttKeyboardQtWidget::closeEvent(QCloseEvent* event)
{
  if (kb->close_cb) {
    (kb->close_cb)(kb->parent_ctx);
  } else {
    delete kb;
  }
  QWidget::closeEvent(event);
}

XttKeyboardQt::XttKeyboardQt(void* xn_parent_ctx, QWidget* xn_parent_wid,
    const char* xn_name, QWidget** w, keyboard_eKeymap xn_keymap,
    keyboard_eType xn_type, int xn_color_theme, pwr_tStatus* status)
    : XttKeyboard(
          xn_parent_ctx, xn_name, xn_keymap, xn_type, xn_color_theme, status)
{
  int width = 1145;
  int height = 161;

  toplevel = new XttKeyboardQtWidget(this, xn_parent_wid);
  toplevel->setWindowTitle(translate_utf8(xn_name));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  keyboard_widget = keyboardwidgetqt_new(init_keyboard_cb, this);

  QVBoxLayout* vbox = new QVBoxLayout(toplevel);
  add_expanding(vbox, keyboard_widget);
  toplevel->setLayout(vbox);
  toplevel->show();

  // Set position
  keyboard_GetSize(keyboardctx, &width, &height);

  QRect rec = QApplication::desktop()->screenGeometry();
  int screen_width = rec.width();
  int screen_height = rec.height();

  if (width > screen_width) {
    height = ((float)screen_width) * 0.9 / width * height;
    width = screen_width * 0.9;
    keyboard_SetSize(keyboardctx, width, height);
  }

  aspectRatio = width / ((double) height);
  toplevel->resize(width, height);
  toplevel->move(screen_width / 2 - width / 2, screen_height - height);

  *status = 1;
}

void XttKeyboardQt::set_inputfocus()
{
  if (toplevel->isVisible()) {
    keyboard_widget->setFocus();
  }
}

void XttKeyboardQtWidget::focusInEvent(QFocusEvent* event)
{
  if (isVisible()) {
    // kb->set_input_focus();
  }

  QWidget::focusInEvent(event);
}

void XttKeyboardQtWidget::resizeEvent(QResizeEvent *event)
{
  if (kb->aspectRatio == 0) {
    return;
  }

  if (event->size().width() == prevWidth) {
    QWidget::resize(event->size().height() * kb->aspectRatio, event->size().height());
  } else {
    QWidget::resize(event->size().width(), event->size().width() / kb->aspectRatio);
  }
  keyboard_SetSize(kb->keyboardctx, width(), height());
  prevWidth = width();
}

void XttKeyboardQt::pop()
{
  ::pop(toplevel);
}

void XttKeyboardQt::set_transient(void* basewidget)
{
  toplevel->setParent((QWidget*)basewidget);
  toplevel->setModal(true);
}
