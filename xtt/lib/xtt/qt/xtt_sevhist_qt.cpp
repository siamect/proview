/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <stdlib.h>

#include "rt_xnav_msg.h"

#include "cow_qt_helpers.h"

#include "ge_curve_qt.h"

#include "xtt_otree_qt.h"
#include "xtt_sevhist_qt.h"

XttSevHistQt::XttSevHistQt(void* parent_ctx, const char* name, QWidget** w,
    pwr_tOid* xn_oidv, pwr_tOName* xn_anamev, pwr_tOName* xn_onamev,
    bool* sevhistobjectv, sevcli_tCtx xn_scctx, int xn_width, int xn_height,
    unsigned int xn_options, int xn_color_theme, time_ePeriod xn_time_range,
    void* basewidget, int* sts)
    : XttSevHist(parent_ctx, name, xn_oidv, xn_anamev, xn_onamev,
        sevhistobjectv, xn_scctx, xn_color_theme, xn_time_range, sts)
{
  char title[250];
  strncpy(title, name, sizeof(title));

  if (EVEN(*sts)) {
    // Error from XttSevHist constructor
    return;
  }
  *sts = XNAV__SUCCESS;

  curve = new GeCurveQt(this, title, NULL, gcd, 1, xn_width,
      xn_height, xn_options, color_theme, basewidget);
  curve->close_cb = sevhist_close_cb;
  curve->help_cb = sevhist_help_cb;
  curve->increase_period_cb = sevhist_increase_period_cb;
  curve->decrease_period_cb = sevhist_decrease_period_cb;
  curve->reload_cb = sevhist_reload_cb;
  curve->prev_period_cb = sevhist_prev_period_cb;
  curve->next_period_cb = sevhist_next_period_cb;
  curve->add_cb = sevhist_add_cb;
  curve->remove_cb = sevhist_remove_cb;
  curve->export_cb = sevhist_export_cb;
  curve->enable(curve_mEnable_Timebox | curve_mEnable_Export
      | curve_mEnable_ExportTime | curve_mEnable_CurveType
      | curve_mEnable_CurveTypeSquare | curve_mEnable_FillCurve
      | curve_mEnable_DigitalSplit);
  if (initial_period != time_ePeriod_) {
    curve->set_period(initial_period, 1);
  }

  if (w) {
    *w = (QWidget*)curve->get_widget();
  }

  wow = new CoWowQt(((GeCurveQt*)curve)->toplevel);
  timerid = wow->timer_new();

  timerid->add(1000, sevhist_scan, this);
}

XttSevHistQt::XttSevHistQt(void* parent_ctx, const char* name, QWidget** w,
    char* filename, int xn_color_theme, void* basewidget, int* sts)
    : XttSevHist(parent_ctx, name, filename, xn_color_theme, sts)
{
  char title[250];
  strncpy(title, name, sizeof(title));

  if (EVEN(*sts)) {
    // Error from XttSevHist constructor
    return;
  }
  *sts = XNAV__SUCCESS;

  curve = new GeCurveQt(this, title, NULL, gcd, 1, 0, 0, 0, color_theme,
      basewidget);
  curve->close_cb = sevhist_close_cb;
  curve->help_cb = sevhist_help_cb;
  curve->enable(0);

  wow = new CoWowQt(((GeCurveQt*)curve)->toplevel);
  timerid = wow->timer_new();

  timerid->add(1000, sevhist_scan, this);
}

XttSevHistQt::~XttSevHistQt()
{
  if (otree) {
    delete otree;
  }
  if (timerid) {
    timerid->remove();
  }
  if (curve) {
    delete curve;
  }
  if (gcd) {
    delete gcd;
  }
  if (wow) {
    delete wow;
  }
}

XttOTree* XttSevHistQt::tree_new(const char* title, pwr_tAttrRef* itemlist,
    int itemcnt, unsigned int layout,
    pwr_tStatus (*action_cb)(void*, pwr_tAttrRef*))
{
  return new XttOTreeQt(this, title, itemlist, itemcnt, layout, action_cb);
}
