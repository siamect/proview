/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_keyboard.cpp -- Virtual keyboard */

#include <string.h>

#include "xtt_keyboard.h"
#include "glow_growapi.h"

//
// Create the keyboard widget
//
XttKeyboard::XttKeyboard(void* xn_parent_ctx, const char* xn_name,
    keyboard_eKeymap xn_keymap, keyboard_eType xn_type, int xn_color_theme,
    pwr_tStatus* status)
    : parent_ctx(xn_parent_ctx), keymap(xn_keymap), type(xn_type),
      color_theme(xn_color_theme), key_pressed_cb(0), close_cb(0)
{
  strcpy(name, xn_name);

  char color_theme_file[80];
  sprintf(color_theme_file, "pwr_colortheme%d", color_theme);
  grow_SetDefaultColorTheme(color_theme_file);
  keyboard_SetDefaultConfig(keymap, type);

  *status = 1;
}

//
//  Delete a keyboard context
//
XttKeyboard::~XttKeyboard()
{
}

//
// Backcall routine called at creation of the brow widget
// Enable event, create nodeclasses and insert the root objects.
//
int XttKeyboard::event_cb(GlowCtx* ctx, glow_tEvent event)
{
  XttKeyboard* keyboard;

  keyboard_GetCtxUserData((KeyboardCtx*)ctx, (void**)&keyboard);

  if (!keyboard)
    return 1;

  switch (event->event) {
  case glow_eEvent_Key_Ascii:

    if (keyboard->key_pressed_cb)
      (keyboard->key_pressed_cb)(keyboard->parent_ctx, event->key.ascii);
    break;
  default:;
  }

  return 1;
}

int XttKeyboard::init_keyboard_cb(GlowCtx* gctx, void* client_data)
{
  XttKeyboard* keyboard = (XttKeyboard*)client_data;
  KeyboardCtx* ctx = (KeyboardCtx*)gctx;
  grow_sAttributes grow_attr;
  unsigned long mask;
  char path[2][80] = { "$pwrp_exe/", "$pwr_exe/" };

  mask = grow_eAttr_color_theme;
  strcpy(grow_attr.color_theme, "$default");
  grow_SetAttributes(ctx, &grow_attr, mask);

  keyboard_SetCtxUserData(ctx, (void*)keyboard);

  keyboard_EnableEvent(
      ctx, glow_eEvent_Key_Ascii, glow_eEventType_KeyAscii, event_cb);

  grow_SetPath(ctx, 2, (char*)path);
  grow_ReadCustomColorFile(ctx, 0);

  grow_SetBackgroundColor(ctx, glow_eCtColor_Background);
  grow_Redraw(ctx);

  keyboard->keyboardctx = ctx;

  return 1;
}

void XttKeyboard::update_color_theme(int ct)
{
  char color_theme_file[80];
  int sts;

  sprintf(color_theme_file, "pwr_colortheme%d", ct);

  sts = grow_ReadCustomColorFile(keyboardctx, color_theme_file);
  if (EVEN(sts))
    return;

  grow_SetDefaultColorTheme(color_theme_file);

  color_theme = ct;
}

void XttKeyboard::set_shift(int shift)
{
  keyboard_SetShift(keyboardctx, shift);
}
