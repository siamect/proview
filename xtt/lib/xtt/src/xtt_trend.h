/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_trend_h
#define xtt_trend_h

/* xtt_trend.h -- DsTrend curves */

#include "rt_cbuf.h"

#include "ge_curve.h"

#include "xtt_otree.h"

#define XTT_TREND_MAX 20

class CoWow;
class CoWowTimer;

class XttTrend {
public:
  void* xnav;
  int trend_cnt;
  GeCurveData* gcd;
  GeCurve* curve;
  pwr_tRefId subid[XTT_TREND_MAX];
  pwr_sClass_DsTrend* trend_p[XTT_TREND_MAX];
  int element_size[XTT_TREND_MAX];
  pwr_eType element_type[XTT_TREND_MAX];
  int interval[XTT_TREND_MAX];
  pwr_tAName trend_name[XTT_TREND_MAX];
  int max_time;
  int min_interval;
  int min_interval_idx;
  int max_points;
  pwr_tTid trend_tid;
  int update_time;
  unsigned int options;
  cbuf_sCircBuffInfo cb_info[XTT_TREND_MAX];
  CoWowTimer* timerid;
  int last_buffer[XTT_TREND_MAX];
  int last_next_index[XTT_TREND_MAX];
  void (*close_cb)(void*, XttTrend*);
  void (*help_cb)(void*, const char*);
  void (*command_cb)(void*, const char*);
  int (*get_select_cb)(
      void*, pwr_tAttrRef*, int*); //!< Get selected trend object.
  CoWow* wow;
  int color_theme;
  XttOTree* otree;

  XttTrend(void* xn_parent_ctx, char* xn_name, pwr_sAttrRef* objid,
      pwr_sAttrRef* plotgroup, unsigned int options, int xn_color_theme,
      int* sts);
  virtual ~XttTrend();
  void pop();
  void setup();
  void curve_add(pwr_tAttrRef* arp, pwr_tAttrRef* trend_arp, pwr_tStatus* sts);
  void update_color_theme(int ct)
  {
    curve->update_color_theme(ct);
  }
  virtual XttOTree* tree_new(const char* title, pwr_tAttrRef* itemlist,
      int itemcnt, unsigned int layout,
      pwr_tStatus (*action_cb)(void*, pwr_tAttrRef*))
  {
    return 0;
  }

  static pwr_tStatus trend_otree_action_cb(void* ctx, pwr_tAttrRef* aref);
  static void trend_otree_close_cb(void* ctx);
  static void trend_close_cb(void* ctx);
  static void trend_help_cb(void* ctx);
  static void trend_snapshot_cb(void* ctx);
  static void trend_add_cb(void* ctx);
  static void trend_madd_cb(void* ctx);
  static void trend_scan(void* data);
};

#endif
