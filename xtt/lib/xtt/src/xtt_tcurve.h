/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_tcurve_h
#define xtt_tcurve_h

/* xtt_tcurve.h -- Tcurve curves */

#include "rt_sevcli.h"

#include "ge_curve.h"

/*! \file xtt_tcurve.h
    \brief Contains the XttTCurve class. */
/*! \addtogroup Xtt */
/*@{*/

#define XTT_TCURVE_MAX 10

class CoWow;
class CoWowTimer;

typedef struct {
  pwr_tAName name[XTT_TCURVE_MAX];
  pwr_tAttrRef buf_aref[XTT_TCURVE_MAX];
  pwr_tAttrRef timebuf_aref;
  int element_size[XTT_TCURVE_MAX];
  pwr_eType type[XTT_TCURVE_MAX];
  int buf_size[XTT_TCURVE_MAX];
  int buf_bsize[XTT_TCURVE_MAX];
  int buf_samples[XTT_TCURVE_MAX];
  char* vbuf[XTT_TCURVE_MAX];
  int bufcnt;
  int timeelement_size;
  int timebuf_size;
  int timebuf_bsize;
  int timebuf_samples;
  int time_resolution;
  pwr_tTime first_time;
  pwr_tTime last_time;
  char* tbuf;
} tcurve_sTc;

//! Window that displays tcurve curve in a TCurve object.
/*!
  A TCurveCurve references a data array for the time axis, and up to 10 data
  arrays
  with stored data. These arrays are displayed in the XttTCurve window. The
  measurement
  of these curves are triggered manually, on a digital signal, or on a level of
  one of
  the attributes. When the measurement is completed this is signaled with the
  New attribute
  in the TCurveCurve object. The XttTCurve window then has to read the new data
  and
  reconfigure the curves. XttTCurve uses the GeCurve class to display the
  curves.
*/
class XttTCurve {
public:
  void* xnav; //!< Pointer to parent XNav.
  GeCurveData* gcd; //!< Curve data for GeCurve object.
  GeCurve* curve; //!< Curve window.
  int rows; //!< Max number of points in curves.
  pwr_eType vtype;
  unsigned int vsize;
  CoWowTimer* timerid; //!< Time id for scan.
  void (*close_cb)(void*, XttTCurve*); //!< Close callback to parent.
  void (*help_cb)(void*, const char*); //!< Open help window.
  int (*get_select_cb)(
      void*, pwr_tOid*, char*, char*); //!< Get selected TCurve object.
  void (*command_cb)(void*, const char*); //!< Command callback to parent.
  bool first_scan; //!< Indicates that this is the first scan.
  char title[250]; //!< Window title
  pwr_tAttrRef arefv[XTT_TCURVE_MAX];
  int aref_cnt;
  CoWow* wow;
  long int time_low_old;
  long int time_high_old;
  tcurve_sTc tc;
  int color_theme;

  //! Constructor
  XttTCurve(void* xn_parent_ctx, const char* xn_name, pwr_tAttrRef* xn_arefv,
      int xn_color_theme, int* sts);

  //! Destructor
  virtual ~XttTCurve();

  //! Pop tcurve window.
  void pop();
  int get_data(pwr_tStatus* sts, pwr_tTime from, pwr_tTime to);
  int get_multidata(pwr_tStatus* sts, pwr_tTime from, pwr_tTime to);
  void curve_add(pwr_tAttrRef aref);
  int load_data(pwr_tStatus* sts, pwr_tAttrRef* aref);
  void save(char* filename);
  void open(char* filename);
  void set_title(const char* str);
  void update_color_theme(int ct)
  {
    curve->update_color_theme(ct);
  }

  static void tcurve_close_cb(void* ctx);
  static void tcurve_new_cb(void* ctx);
  static void tcurve_save_cb(void* ctx);
  static void tcurve_open_cb(void* ctx);
  static void tcurve_increase_period_cb(void* ctx);
  static void tcurve_decrease_period_cb(void* ctx);
  static void tcurve_reload_cb(void* ctx);
  static void tcurve_prev_period_cb(void* ctx);
  static void tcurve_next_period_cb(void* ctx);
  static void tcurve_add_cb(void* ctx);
  static void tcurve_remove_cb(void* ctx);
  static int tcurve_export_cb(void* ctx, pwr_tTime* from, pwr_tTime* to,
      int rows, int idx, char* filename);
  static void tcurve_help_cb(void* ctx);
  static void tcurve_file_selected_cb(void* ctx, void* data, char* text);
  static void tcurve_open_file_cb(void* ctx, char* text, int ok_pressed);
  static void tcurve_scan(void* data);
};

/*@}*/
#endif
