/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_hist_h
#define xtt_hist_h

/* xtt_hist.h -- Historical event window in xtt */

#if defined PWRE_CONF_LIBDB

#if defined __cplusplus
extern "C" {
#include "rt_elog.h"
}
#endif

#ifndef xtt_evlist
#include "xtt_evlist.h"
#endif
#ifndef cow_wow
#include "cow_wow.h"
#endif
#define ERROR_TIME_CONVERT -99

class CoWow;
class XttMethodToolbar;

class Hist {
public:
  Hist(void* hist_parent_ctx, char* hist_name, pwr_tAttrRef* arp,
      pwr_tStatus* status);
  virtual ~Hist();

  void* parent_ctx;
  char name[80];
  pwr_tObjid user;
  int hist_display_ack;
  int hist_display_return;
  void (*close_cb)(void*);
  void (*start_trace_cb)(void*, pwr_tObjid, char*);
  void (*display_in_xnav_cb)(void*, pwr_sAttrRef*);
  void (*update_info_cb)(void*);
  void (*help_cb)(void*, const char*);
  void (*popup_menu_cb)(
      void*, pwr_sAttrRef, unsigned long, unsigned long, char*, int x, int y);
  EvList* hist;

  int hist_size;
  char* minTime_str;
  char* maxTime_str;
  char* eventName_str;
  char* eventText_str;

  bool eventPrio_A;
  bool eventPrio_B;
  bool eventPrio_C;
  bool eventPrio_D;

  bool eventType_Ack;
  bool eventType_Alarm;
  bool eventType_Info;
  bool eventType_InfoSuccess;
  bool eventType_MaintenanceAlarm;
  bool eventType_SystemAlarm;
  bool eventType_UserAlarm1;
  bool eventType_UserAlarm2;
  bool eventType_UserAlarm3;
  bool eventType_UserAlarm4;
  bool eventType_Return;
  bool eventType_Cancel;
  bool eventType_Block;
  bool eventType_Unblock;
  bool eventType_Reblock;
  bool eventType_CancelBlock;
  CoWow* wow;
  pwr_tAttrRef aref;

  void get_hist_list();
  pwr_tStatus hist_add_ack_mess(mh_sAck* MsgP);
  pwr_tStatus hist_add_return_mess(mh_sReturn* MsgP);
  pwr_tStatus hist_add_alarm_mess(mh_sMessage* MsgP);
  pwr_tStatus hist_add_info_mess(mh_sMessage* MsgP);
  pwr_tStatus hist_clear_histlist();
  int check_conditions(sEvent* evp);
  int compareStr(char*, char*);
  void printSearchStr();
  XttMethodToolbar* methodtoolbar;
  XttMethodToolbar* sup_methodtoolbar;

  virtual void set_num_of_events(int nrOfEvents)
  {
  }
  virtual void set_search_string(
      const char* s1, const char* s2, const char* s3, const char* s4)
  {
  }
  virtual void SetListTime(
      pwr_tTime StartTime, pwr_tTime StopTime, int Sensitive)
  {
  }
  virtual void insert_eventname(const char* name)
  {
  }

  void activate_print();
  void activate_export();
  void activate_analyse();
  void activate_help();
  void activate_helpevent();
  void time_cb(time_ePeriod period);
  void stat();
  int export_events(const char *filename);

  static int GoBackMonth(
      pwr_tTime TimeIn, pwr_tTime* FromTime, pwr_tTime* ToTime);
  static int GoBackWeek(
      pwr_tTime TimeIn, pwr_tTime* FromTime, pwr_tTime* ToTime);
  static void SetListTime(
      Hist* histOP, pwr_tTime StartTime, pwr_tTime StopTime, int Sensitive);
  static pwr_tStatus AdjustForDayBreak(
      Hist* histOP, pwr_tTime* Time, pwr_tTime* NewTime);

  static void hist_display_in_xnav_cb(void* ctx, pwr_sAttrRef* arp);
  static void hist_start_trace_cb(void* ctx, pwr_tObjid objid, char* name);
  static void hist_popup_menu_cb(void* ctx, pwr_sAttrRef attrref,
      unsigned long item_type, unsigned long utility, char* arg, int x, int y);
  static void help_event_cb(void* ctx, void* item);
  static void selection_changed_cb(void* ctx);
  static void hist_init_cb(void* ctx);
  static void export_file_selected_cb(void *ctx, char *filename, wow_eFileSelType file_type);
};

#else
// Dummy for other platforms then OS_LINUX
class Hist {
public:
  Hist(void* hist_parent_ctx, char* hist_name, pwr_tAttrRef* arp,
      pwr_tStatus* status)
      : parent_ctx(hist_parent_ctx)
  {
  }
  void* parent_ctx;
  void (*close_cb)(void*);
  void (*start_trace_cb)(void*, pwr_tObjid, char*);
  void (*display_in_xnav_cb)(void*, pwr_sAttrRef*);
  void (*update_info_cb)(void*);
  void (*help_cb)(void*, const char*);
  void (*popup_menu_cb)(
      void*, pwr_sAttrRef, unsigned long, unsigned long, char*, int x, int y);
};

#endif

#endif
