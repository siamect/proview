/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_logging_h
#define xtt_logging_h

/* xtt_logging.h -- Logging in xtt */

#include "co_ccm.h"

#include "rt_gdh.h"

#define RTT_LOGG_MAXENTRY 10
#define RTT_LOGG_MAXPAR 100
#define RTT_BUFFER_DEFSIZE 100
#define RTT_LOGG_LINE_DEFSIZE 512

typedef enum { xtt_LoggType_Cont = 1, xtt_LoggType_Mod = 2 } xtt_LoggType;
typedef enum { 
  xtt_eLoggFormat_Std, 
  xtt_eLoggFormat_Py
} xtt_eLoggFormat;

class XttLogging {
public:
  XttLogging();
  ~XttLogging();

  void* xnav;
  int index;
  int active;
  int intern;
  int stop_logg;
  int logg_type;
  int logg_priority;
  xtt_eLoggFormat logg_format;
  pwr_tAName parameterstr[RTT_LOGG_MAXPAR];
  pwr_tAName shortname[RTT_LOGG_MAXPAR];
  char* parameter_ptr[RTT_LOGG_MAXPAR];
  gdh_tDlid parameter_subid[RTT_LOGG_MAXPAR];
  unsigned long parameter_type[RTT_LOGG_MAXPAR];
  unsigned long parameter_size[RTT_LOGG_MAXPAR];
  pwr_tAName conditionstr;
  char* condition_ptr;
  gdh_tDlid condition_subid;
  float logg_time;
  pwr_tFileName logg_filename;
  FILE* logg_file;
  char old_value[RTT_LOGG_MAXPAR][80];
  pwr_tTime starttime;
  pthread_t thread;
  int line_size;
  int parameter_count;
  int print_shortname;
  int buffer_size;
  int wanted_buffer_size;
  int buffer_count;
  char* buffer_ptr;
  ccm_tSingleLineCtx cond_ccm_ctx;

  void init(int logg_index, void* logg_xnav);
  int logging_set(float logg_time, char* filename, char* parameterstr,
      char* conditionstr, int logg_type, int logg_format, int insert, int buffer_size, int stop,
      int priority, int create, int line_size, int shortname);
  int show();
  int show_entry(char* buff, int* buff_cnt);
  int analyse();
  int store(char* filename);
  int start();
  int stop();
  int entry_stop();
  int remove(char* parameterstr);
  int log_print(const char* format, ...);
  int print_buffer();
  int close_files();
  int set_prio(int prio)
  {
    return 1;
  }
  int set_default_prio()
  {
    return 1;
  }
  void message(char severity, const char* msg);
};

#endif
