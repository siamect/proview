/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_jop.cpp -- Handling of java process jop from xtt */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

extern "C" {
#include "co_cdh.h"
#include "co_time.h"
#include "pwr_baseclasses.h"
#include "rt_gdh.h"
}

#include "xtt_jop.h"
#include "rt_xnav_msg.h"

Jop::Jop(void* jop_parent_ctx) : parent_ctx(jop_parent_ctx), command_cb(NULL)
{
  jop_qcom_qid.qix = qcom_cNQix;
  qcom_qid.qix = qcom_cNQix;
  create_que();
  create_process();
}

Jop::~Jop()
{
  close();
}

void Jop::scan()
{
  char* command;
  int sts;

  sts = que_get(&command);
  while (ODD(sts)) {
    printf("Jop received : %s\n", command);
    if (command_cb)
      (command_cb)(parent_ctx, command);
    que_free(command);
    sts = que_get(&command);
  }
}

int Jop::create_que()
{
  int sts;
  qcom_sQattr attr;
  qcom_qid = qcom_cNQid;

  attr.type = qcom_eQtype_private;
  attr.quota = 100;
  if (!qcom_CreateQ(&sts, &qcom_qid, &attr, "XttCommands")) {
    printf("Failed to create QCOM que %d\n", sts);
    return sts;
  }
  printf("Qcom que qix : %d, nid: %d\n", qcom_qid.qix, qcom_qid.nid);
  return XNAV__SUCCESS;
}

void Jop::que_free(char* data)
{
  int sts;
  qcom_Free(&sts, data);
}

int Jop::que_get(char** data)
{
  pwr_tStatus sts;
  qcom_sGet get;

  if (qcom_qid.qix == qcom_cNQix)
    return XNAV__NOTCONNECTED;

  memset(&get, 0, sizeof(get));
  qcom_Get(&sts, &qcom_qid, &get, 0);
  if (EVEN(sts))
    return sts;
  *data = (char*)get.data;
  return XNAV__SUCCESS;
}

int Jop::que_put(const char* d)
{
  pwr_tStatus sts;
  qcom_sPut put;
  static char data[200];

  strcpy(data, d);
  printf("qcom_put: %s\n", data);
  put.data = data;
  put.size = strlen(data) + 1;
  put.type.b = qcom_eBtype__;
  put.type.s = qcom_eStype__;
  put.reply.qix = 0;
  put.reply.nid = 0;

  if (jop_qcom_qid.qix == qcom_cNQix)
    return XNAV__NOTCONNECTED;

  qcom_Put(&sts, &jop_qcom_qid, &put);
  return sts;
}

void Jop::set_jop_qid(int qix)
{
  jop_qcom_qid.qix = qix;
  jop_qcom_qid.nid = qcom_qid.nid;
}

int Jop::command(char* command)
{
  printf("Jop command : %s\n", command);
  return que_put(command);
}

void Jop::close()
{
  printf("Jop closeing down\n");
  que_put("exit");
}

void Jop::create_process()
{
#if defined OS_LINUX
  int pid;

  pid = fork();
  if (!pid) {
    char filename[80];
    char qid_str[20];
    char* s;

    if ((s = getenv("pwr_exe")) == NULL) {
      printf("** pwr_exe is not defined\n");
      exit(0);
    }
    sprintf(filename, "%s/jop_start.sh", s);
    sprintf(qid_str, "%d", qcom_qid.qix);

    execlp(filename, filename, qid_str, NULL);
    exit(0);
  }
#endif
}
