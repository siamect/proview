/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_sevhist_h
#define xtt_sevhist_h

/* xtt_sevhist.h -- Sevhist curves */

#include "rt_sevcli.h"

#include "ge_curve.h"

/*! \file xtt_sevhist.h
    \brief Contains the XttSevHist class. */
/*! \addtogroup Xtt */
/*@{*/

#define XTT_SEVHIST_MAX 20

class CoWow;
class CoWowTimer;
class XttOTree;

//! Window that displays sevhist curve in a SevHistCurve object.
/*!
  A SevHistCurve references a data array for the time axis, and up to 10 data
  arrays
  with stored data. These arrays are displayed in the XttSevHist window. The
  measurement
  of these curves are triggered manually, on a digital signal, or on a level of
  one of
  the attributes. When the measurement is completed this is signaled with the
  New attribute
  in the SevHistCurve object. The XttSevHist window then has to read the new
  data and
  reconfigure the curves. XttSevHist uses the GeCurve class to display the
  curves.
*/
class XttSevHist {
public:
  void* xnav; //!< Pointer to parent XNav.
  GeCurveData* gcd; //!< Curve data for GeCurve object.
  GeCurve* curve; //!< Curve window.
  int rows; //!< Max number of points in curves.
  pwr_eType vtype;
  unsigned int vsize;
  CoWowTimer* timerid; //!< Time id for scan.
  void (*close_cb)(void*, XttSevHist*); //!< Close callback to parent.
  void (*help_cb)(void*, const char*); //!< Open help window.
  int (*get_select_cb)(
      void*, pwr_tOid*, char*, char*); //!< Get selected SevHist object.
  bool first_scan; //!< Indicates that this is the first scan.
  char title[250]; //!< Window title
  sevcli_tCtx scctx;
  pwr_tOName anamev[XTT_SEVHIST_MAX];
  pwr_tOName onamev[XTT_SEVHIST_MAX];
  pwr_tOid oidv[XTT_SEVHIST_MAX];
  int oid_cnt;
  CoWow* wow;
  long int time_low_old;
  long int time_high_old;
  bool
      sevhistobjectv[XTT_SEVHIST_MAX]; //!< Indicates that it is a SevHistObject
  time_ePeriod initial_period;
  int color_theme;
  XttOTree* otree;

  //! Constructor
  XttSevHist(void* xn_parent_ctx, const char* xn_name, pwr_tOid* xn_oidv,
      pwr_tOName* xn_aname, pwr_tOName* xn_oname, bool* sevhistobjectv,
      sevcli_tCtx xn_scctx, int xn_color_theme, time_ePeriod xn_time_range,
      int* sts);
  XttSevHist(void* parent_ctx, const char* name, char* filename,
      int xn_color_theme, int* sts);

  //! Destructor
  virtual ~XttSevHist();

  //! Pop sevhist window.
  void pop();
  int get_data(pwr_tStatus* sts, pwr_tTime from, pwr_tTime to);
  int get_objectdata(pwr_tStatus* sts, pwr_tTime from, pwr_tTime to);
  int get_multidata(pwr_tStatus* sts, pwr_tTime from, pwr_tTime to);
  void curve_add(
      pwr_tOid oid, pwr_tOName aname, pwr_tOName oname, bool sevhistobject);
  int read_export(char* filename);
  void setup();
  void update_color_theme(int ct)
  {
    curve->update_color_theme(ct);
  }

  virtual XttOTree* tree_new(const char* title, pwr_tAttrRef* itemlist,
      int itemcnt, unsigned int layout,
      pwr_tStatus (*action_cb)(void*, pwr_tAttrRef*))
  {
    return 0;
  }

  static pwr_tStatus sevhist_otree_action_cb(void* ctx, pwr_tAttrRef* aref);
  static void sevhist_otree_close_cb(void* ctx);
  static void sevhist_close_cb(void* ctx);
  static void sevhist_increase_period_cb(void* ctx);
  static void sevhist_decrease_period_cb(void* ctx);
  static void sevhist_reload_cb(void* ctx);
  static void sevhist_prev_period_cb(void* ctx);
  static void sevhist_next_period_cb(void* ctx);
  static void sevhist_add_cb(void* ctx);
  static void sevhist_remove_cb(void* ctx);
  static int sevhist_export_cb(void* ctx, pwr_tTime* from, pwr_tTime* to,
      int rows, int idx, char* filename);
  static void sevhist_help_cb(void* ctx);
  static void sevhist_scan(void* data);
};

/*@}*/
#endif
