/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_menu_h
#define xtt_menu_h

#include "pwr_class.h"

#define MENU_BAR 1
#define MENU_PULLDOWN 2
#define MENU_POPUP 3
#define MENU_OPTION 4

typedef struct xmenu_s_MenuItem xmenu_sMenuItem;
typedef struct xmenu_s_MenuCall xmenu_sMenuCall;
typedef union xmenu_m_MenuFlags xmenu_mMenuFlags;

typedef enum {
  xmenu_mUtility_XNav = 1 << 0,
  xmenu_mUtility_Trace = 1 << 1,
  xmenu_mUtility_Simulate = 1 << 2,
  xmenu_mUtility_EventList = 1 << 3,
  xmenu_mUtility_EventLog = 1 << 4,
  xmenu_mUtility_Ge = 1 << 5,
  xmenu_mUtility_AttrEditor = 1 << 6
} xmenu_mUtility;

typedef enum {
  xmenu_eItemType_Object = 1,
  xmenu_eItemType_AttrObject = 2,
  xmenu_eItemType_Attribute = 3,
  xmenu_eItemType_Crossref = 4
} xmenu_eItemType;

typedef enum {
  xmenu_eMenuItem__ = 0,
  xmenu_eMenuItem_Button,
  xmenu_eMenuItem_Cascade,
  xmenu_eMenuItem_Separator,
  xmenu_eMenuItem_Ref,
  xmenu_eMenuItem_
} xmenu_eMenuItem;

typedef enum {
  xmenu_eMenuSet__ = 0,
  xmenu_eMenuSet_Attribute,
  xmenu_eMenuSet_Class,
  xmenu_eMenuSet_Many,
  xmenu_eMenuSet_None,
  xmenu_eMenuSet_Object,
  xmenu_eMenuSet_
} xmenu_eMenuSet;

union xmenu_m_MenuFlags {
  struct {
    pwr_tBit Sensitive : 1;
  } f;

  pwr_tBitMask m;

#define xmenu_mMenuFlags_Sensitive 1
};

struct xmenu_s_MenuItem {
  pwr_tString80 Name;
  pwr_tUInt32 Level;
  xmenu_eMenuItem Item;
  xmenu_mMenuFlags Flags;
  pwr_tString80 Method;
  pwr_tString80 Filter;
  pwr_sAttrRef CurrentObject;
  pwr_tObjid MenuObject;
  pwr_tString40 MethodArguments[5];
  pwr_tString40 FilterArguments[5];
};

struct xmenu_s_MenuCall {
  void* EditorContext;
  void* WindowContext;
  xmenu_eMenuSet PointedSet;
  pwr_sAttrRef Pointed;
  xmenu_eMenuSet SelectedSet;
  pwr_sAttrRef* Selected;
  pwr_tUInt32 SelectCount;
  xmenu_sMenuItem* ItemList;
  pwr_tUInt32 ItemCount;
  pwr_tUInt32 ChosenItem;
  xmenu_mUtility Caller;
  xmenu_eItemType ItemType;
  unsigned long Priv;
  char Arg[80];
};

typedef struct {
  pwr_tObjName MethodName;
  pwr_tStatus (*Method)(xmenu_sMenuCall*);
} xtt_sMethodBinding;

typedef struct {
  pwr_tObjName ClassName;
  xtt_sMethodBinding (*Methods)[];
} xtt_sClassBinding;

/* Base methods */
#define pwr_BindXttMethods(Class) xtt_sMethodBinding pwr_g##Class##_XttMethods[]
#define pwr_BindXttClasses(Type)                                               \
  xtt_sClassBinding pwr_g##Type##_XttClassMethods[]
#if __GNUC__ < 3 || (__GNUC__ == 3 && __GNUC_MINOR__ < 4)
#define pwr_BindXttClass(Class)                                                \
  {                                                                            \
    #Class, (xtt_sMethodBinding(*)[0]) pwr_g##Class##_XttMethods               \
  }
#else
#define pwr_BindXttClass(Class)                                                \
  {                                                                            \
    #Class, (xtt_sMethodBinding(*)[]) pwr_g##Class##_XttMethods                \
  }
#endif
#define pwr_BindXttMethod(Method)                                              \
  {                                                                            \
    #Method, (pwr_tStatus(*)(xmenu_sMenuCall*)) Method                         \
  }

#define pwr_NullMethod                                                         \
  {                                                                            \
    "", NULL                                                                   \
  }

#define pwr_NullClass                                                          \
  {                                                                            \
    "", NULL                                                                   \
  }

#endif
