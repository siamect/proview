/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_stream_h
#define xtt_stream_h

#include "pwr.h"

class CoWow;
class CoWowTimer;

typedef enum {
  strm_mOptions_FullScreen = 1,
  strm_mOptions_Maximize = 2,
  strm_mOptions_FullMaximize = 4,
  strm_mOptions_Iconify = 8,
  strm_mOptions_CameraControlPanel = 16,
  strm_mOptions_VideoControlPanel = 32,
  strm_mOptions_VideoProgressBar = 64,
  strm_mOptions_HttpBasicAuthentication = 128,
  strm_mOptions_CgiParameterAuthentication = 256,
} strm_mOptions;

class XttCameraControl {
public:
  pwr_tURL url;
  XttCameraControl(char* x_url);
  virtual ~XttCameraControl();
  virtual void zoom_relative(double factor);
  virtual void zoom_absolute(double factor);
  virtual void pan_relative(double value);
  virtual void pan_absolute(double value);
  virtual void tilt_relative(double value);
  virtual void tilt_absolute(double value);
  virtual void pan_tilt_zoom_absolute(double pan, double tilt, double zoom);
  virtual void center(
      int x, int y, int width, int height, int stream_width, int stream_height);
  virtual void area_zoom(int x, int y, int width, int height, int window_width,
      int window_height, int stream_width, int stream_height);
  virtual int get_position(double* pan, double* tilt, double* zoom);
};

class XttCameraControlVapix : public XttCameraControl {
public:
  char outstr[20];
  char authstr[100];

  XttCameraControlVapix(char* x_url, char* x_user, char* x_password);
  ~XttCameraControlVapix();
  void zoom_relative(double factor);
  void zoom_absolute(double factor);
  void pan_relative(double value);
  void pan_absolute(double value);
  void tilt_relative(double value);
  void tilt_absolute(double value);
  void pan_tilt_zoom_absolute(double pan, double tilt, double zoom);
  void center(
      int x, int y, int width, int height, int stream_width, int stream_height);
  void area_zoom(int x, int y, int width, int height, int window_width,
      int window_height, int stream_width, int stream_height);
  int get_position(double* pan, double* tilt, double* zoom);
};

class XttStream {
public:
  void* parent_ctx;
  unsigned int options;
  int embedded;
  pwr_tURL uri;
  CoWowTimer* timerid;
  CoWowTimer* scroll_timerid;
  CoWow* wow;
  int scan_time;
  int x_offset;
  int y_offset;
  int width;
  int height;
  int stream_width;
  int stream_height;
  double stream_ratio;
  pwr_tString40 user;
  pwr_tString40 password;
  void (*close_cb)(void*, XttStream*);
  XttCameraControl* camera_control;
  pwr_tEnum control_protocol;
  pwr_tAttrRef aref;
  float connection_timeout;
  float reconnect_time;

  XttStream(void* st_parent_ctx, const char* name, const char* st_uri,
      int st_width, int st_height, int x, int y, double st_scan_time,
      unsigned int st_options, int st_embedded, pwr_tAttrRef* st_arp);
  virtual ~XttStream();

  void position(double pan, double tilt, double zoom);
  void action_click(int x, int y);
  void action_mb2click(int x, int y);
  void action_mb3click(int x, int y);
  void action_areaselect(int x, int y, int w, int h);
  void action_scroll(int direction, int x, int y, int cnt);
  void activate_preset_position(int idx);
  void activate_preset_store_pos(int idx);

  virtual void pop();
  virtual void set_size(int width, int height);
  virtual void setup();
  virtual void* get_widget();
  virtual void create_popup_menu(int x, int y);
};

#endif
