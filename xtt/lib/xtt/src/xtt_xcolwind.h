/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_xcolwind_h
#define xtt_xcolwind_h

/* xtt_xcolwind.h -- Object attribute editor */

#include "co_nav_crr.h"

#include "cow_wow.h"

#include "flow_browapi.h"

class XAttNav;
class CoWow;

typedef enum {
  xcolwind_eType_Collect,
  xcolwind_eType_CollectSignals,
  xcolwind_eType_CollectIOSignals
} xcolwind_eType;

class XColWind {
public:
  XColWind(void* xa_parent_ctx, pwr_sAttrRef* xa_objar_list, char* xa_title,
      int xa_advanced_user, xcolwind_eType xa_type, int* xa_sts);
  virtual ~XColWind();
  void* parent_ctx;
  pwr_sAttrRef* objar_list;
  char name[80];
  XAttNav* xattnav;
  void* root_item;
  int input_open;
  int input_multiline;
  void* object;
  void (*close_cb)(void*, void*);
  void (*redraw_cb)(void*);
  void (*popup_menu_cb)(
      void*, pwr_sAttrRef, unsigned long, unsigned long, char*, int x, int y);
  int (*call_method_cb)(void*, const char*, const char*, pwr_sAttrRef,
      unsigned long, unsigned long, char*);
  int (*is_authorized_cb)(void*, unsigned int);
  int (*command_cb)(void*, char*);
  int (*get_select_cb)(void*, pwr_tAttrRef*, int*);
  void* client_data;
  brow_tObject input_node;
  char input_name[80];
  pwr_tFileName filename;
  CoWow* wow;
  char title[80];
  xcolwind_eType type;

  virtual void message(char severity, const char* message)
  {
  }
  virtual void set_prompt(const char* prompt)
  {
  }
  virtual void change_value(int set_focus)
  {
  }
  virtual void change_value_close()
  {
  }
  virtual void pop()
  {
  }
  virtual void set_title(char* title)
  {
  }
  virtual void set_window_size(int w, int h)
  {
  }
  virtual void get_window_size(int* w, int* h)
  {
  }
  virtual void print()
  {
  }

  int open_changevalue(char* name);
  void swap(int mode);
  void set_filename(char* name);
  void collect_insert(pwr_tAttrRef* aref);
  void zoom(double zoom_factor);
  void set_scantime(int t);
  int collect_add(pwr_tAttrRef* areflist);
  int collect_signals(pwr_tAttrRef* arp);
  void activate_open();
  void activate_save();
  void activate_saveas();
  void activate_collect_insert();
  void activate_collect_delete();
  void activate_moveup();
  void activate_movedown();
  void activate_display_object();
  void activate_show_cross();
  void activate_open_classgraph();
  void activate_open_plc();
  void activate_zoomin();
  void activate_zoomout();
  void activate_help();
  void activate_print();

  static void xcolwind_popup_menu_cb(void* ctx, pwr_sAttrRef attrref,
      unsigned long item_type, unsigned long utility, char* arg, int x, int y);
  static int xcolwind_is_authorized_cb(void* ctx, unsigned int access);
  static void message_cb(void* xcolwind, char severity, const char* message);
  static void change_value_cb(void* xcolwind);
  static void file_selected_cb(void* ctx, void* data, char* text);
  static int init_cb(void* ctx);
  static void signal_insert_cb(void* ctx, void* parent_node,
      navc_eItemType item_type, char* text1, char* text2, int write);
  static int name_to_objid_cb(void* ctx, char* name, pwr_tObjid* objid);
};

#endif
