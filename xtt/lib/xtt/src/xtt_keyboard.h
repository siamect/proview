/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_keyboard_h
#define xtt_keyboard_h

/* xtt_keyboard.h -- Virtual keyboard */

#include "glow_keyboardapi.h"
#include "glow_keyboardctx.h"

class XttKeyboard {
public:
  XttKeyboard(void* xn_parent_ctx, const char* xn_name,
      keyboard_eKeymap xn_keymap, keyboard_eType type, int xn_color_theme,
      pwr_tStatus* status);
  virtual ~XttKeyboard();

  void* parent_ctx;
  char name[80];
  keyboard_tCtx keyboardctx;
  keyboard_eKeymap keymap;
  keyboard_eType type;
  int color_theme;
  void (*key_pressed_cb)(void*, int ascii);
  void (*close_cb)(void*);

  virtual void set_inputfocus()
  {
  }
  virtual void pop()
  {
  }
  virtual void set_transient(void* basewidget)
  {
  }

  void update_color_theme(int ct);
  void set_shift(int shift);

  static int init_keyboard_cb(GlowCtx* gctx, void* client_data);
  static int event_cb(GlowCtx* ctx, glow_tEvent event);
};

#endif
