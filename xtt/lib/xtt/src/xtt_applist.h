/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_applist_h
#define xtt_applist_h

typedef enum {
  applist_eType_Trace,
  applist_eType_Graph,
  applist_eType_Attr,
  applist_eType_AttrOne,
  applist_eType_Trend,
  applist_eType_Crossref,
  applist_eType_Hist,
  applist_eType_Fast,
  applist_eType_MultiView,
  applist_eType_Stream,
  applist_eType_SevHist,
  applist_eType_Dashboard
} applist_eType;

class ApplListElem {
public:
  ApplListElem(applist_eType al_type, void* al_ctx, pwr_sAttrRef* al_arp,
      const char* al_name, const char* al_instance);
  ~ApplListElem()
  {
    log_delete();
  }
  applist_eType type;
  void* ctx;
  pwr_sAttrRef aref;
  char name[80];
  pwr_tAName instance;
  ApplListElem* next;

  void log_new();
  void log_delete();
};

class ApplList {
public:
  ApplList() : root(NULL){}

  ~ApplList()
  {
    ApplListElem *elem, *next;
    for (elem = root; elem; elem = next) {
      next = elem->next;
      delete elem;
    }
  }

  ApplListElem* root;
  void insert(applist_eType type, void* ctx, pwr_sAttrRef* arp,
      const char* name, const char* instance);
  void insert(applist_eType type, void* ctx, pwr_tObjid objid, const char* name,
      const char* instance);
  void remove(void* ctx);
  int find(
      applist_eType type, const char* name, const char* instance, void** ctx);
  int find(applist_eType type, pwr_sAttrRef* arp, void** ctx);
  int find(applist_eType type, pwr_tObjid objid, void** ctx);
  int find(applist_eType type, void* ctx, char* name, char* instance);
  int find_graph(const char* name, const char* instance, void** ctx);
  int find_graph_first(const char* name, void** ctx);
  int find_graph_next(const char* name, char* instance, void** ctx);
  int find_dashboard_first(void** ctx);
  int find_dashboard_next(void *from_ctx, void** ctx);
  void swap(int mode);
};

#endif
