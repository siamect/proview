/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_multiview_h
#define xtt_multiview_h

#include "glow.h"

#include "xtt_applist.h"
#include "xtt_utility.h"

#define MV_SIZE 25
#define MV_RECALL_SIZE 10

class Graph;
class XNav;
class XttTrend;
class XttStream;

class MVRecall {
public:
  MVRecall() : current_idx(-1), first_idx(0), last_idx(0)
  {
  }
  pwr_tFileName buff[MV_RECALL_SIZE];
  pwr_tAName object[MV_RECALL_SIZE];
  int current_idx;
  int first_idx;
  int last_idx;

  void insert(char* str, char* object);
  int get_previous();
  int get_next();
};

class XttMultiView : XttUtility {
public:
  void* parent_ctx;
  pwr_tAttrRef aref;
  pwr_tAName name;
  unsigned int options;
  int color_theme;
  int (*command_cb)(void*, char*, char*, void*);
  void (*close_cb)(void*, void*);
  void (*help_cb)(void*, const char* key);
  void (*display_in_xnav_cb)(void*, pwr_sAttrRef*);
  int (*is_authorized_cb)(void*, unsigned int);
  void (*popup_menu_cb)(
      void*, pwr_sAttrRef, unsigned long, unsigned long, char*, int x, int y);
  int (*call_method_cb)(void*, const char*, const char*, pwr_sAttrRef,
      unsigned long, unsigned long, char*);
  int (*get_current_objects_cb)(void*, pwr_sAttrRef**, int**);
  int (*sound_cb)(void*, pwr_tAttrRef*);
  void (*eventlog_cb)(void*, void*, int, void*, unsigned int);
  int (*get_select_cb)(void*, pwr_tOid*, char*, char*);
  void (*keyboard_cb)(void*, void*, int, int);
  int width;
  int height;
  int rows;
  int cols;
  ApplList appl;
  MVRecall recall_buffer[MV_SIZE];

  XttMultiView(void* parent_ctx, const char* name, pwr_tAttrRef* aref,
      int width, int height, int x, int y, unsigned int options,
      int color_theme, int (*xg_command_cb)(void*, char*, char*, void*),
      int (*xg_get_current_objects_cb)(void*, pwr_sAttrRef**, int**),
      int (*xg_is_authorized_cb)(void*, unsigned int),
      void (*xg_keyboard_cb)(void*, void*, int, int));
  virtual ~XttMultiView();

  virtual void pop()
  {
  }
  virtual void set_size(int width, int height)
  {
  }
  virtual void* get_widget()
  {
    return 0;
  }
  virtual int set_subwindow_source(const char* name, char* source, char* object,
      double* borders, int insert = 1, int cont = 0)
  {
    return 0;
  }
  virtual int key_pressed(int key)
  {
    return 0;
  }
  virtual void close_input_all()
  {
  }
  virtual void signal_send(char* signalname)
  {
  }

  xtt_eUtility get_type()
  {
    return xtt_eUtility_MultiView;
  }
  void message(char severity, const char* msg);
  int set_object_focus(const char* name, int empty);
  int set_folder_index(const char* name, int idx);
  void swap(int mode);
  void event_exec(int type, void* event, unsigned int size);
  int find_graph(const char* name, const char* instance, void** ctx);
  int name_to_idx(const char* name);
  int set_subwindow_next(const char* name);
  int set_subwindow_prev(const char* name);
  XNav* get_xnav();

  static void multiview_ge_close_cb(void* parent_ctx, void* client_data);
  static int multiview_ge_command_cb(
      void* multiview_ctx, char* command, char* script, void* caller);
  static int multiview_ge_sound_cb(void* multiview_ctx, pwr_tAttrRef* aref);
  static void multiview_ge_display_in_xnav_cb(
      void* multiview_ctx, pwr_sAttrRef* arp);
  static void multiview_ge_popup_menu_cb(void* multiview_ctx,
      pwr_sAttrRef attrref, unsigned long item_type, unsigned long utility,
      char* arg, int x, int y);
  static int multiview_ge_call_method_cb(void* multiview_ctx,
      const char* method, const char* filter, pwr_sAttrRef attrref,
      unsigned long item_type, unsigned long utility, char* arg);
  static int multiview_ge_is_authorized_cb(
      void* multiview_ctx, unsigned int access);
  static int multiview_ge_get_current_objects_cb(
      void* multiview_ctx, pwr_sAttrRef** alist, int** is_alist);
  static void multiview_ge_eventlog_cb(void* multiview_ctx, void* gectx,
      int category, void* value, unsigned int size);
  static void multiview_keyboard_cb(
      void* multiview_ctx, void* ge_ctx, int action, int type);
  static void multiview_ge_help_cb(void* multiview_ctx, const char* key);
  static void multiview_trend_close_cb(void* ctx, XttTrend* trend);
  static void multiview_trend_command_cb(void* ctx, const char* cmd);
  static void multiview_trend_help_cb(void* ctx, const char* key);
  static int multiview_sevhist_get_select_cb(
      void* ctx, pwr_tOid* oid, char* aname, char* oname);
  static void multiview_strm_close_cb(void* ctx, XttStream* strm);
  static void message_cb(void* ctx, char severity, const char* msg);
  static void eventlog_enable(int enable);
};

#endif
