/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_ev_h
#define xtt_ev_h

/* xtt_ev.h -- Alarm and event windows in xtt */

#ifndef xtt_evala
#include "xtt_evala.h"
#endif
#ifndef xtt_eveve
#include "xtt_eveve.h"
#endif
#ifndef cow_wow
#include "cow_wow.h"
#endif

class CoWow;
class XttMethodToolbar;

typedef struct {
  char Object[120];
  char Alias[8];
} ev_sAlias;

typedef enum {
  ev_mAlaOptions_Embedded = 1 << 0,
  ev_mAlaOptions_FullScreen = 1 << 1,
  ev_mAlaOptions_Maximize = 1 << 2,
  ev_mAlaOptions_FullMaximize = 1 << 3,
  ev_mAlaOptions_Iconify = 1 << 4
} ev_mAlaOptions;

class Ev {
public:
  Ev(void* ev_parent_ctx, char* eve_name, char* ala_name, char* blk_name,
      pwr_tObjid ev_user, int display_ala, int display_eve, int display_blk,
      int display_return, int display_ack, int ev_beep, pwr_tMask ev_pop_mask,
      int ev_eventname_seg, pwr_tStatus* status);
  virtual ~Ev();

  void* parent_ctx;
  char name[80];
  pwr_tObjid user;
  int eve_display_ack;
  int eve_display_return;
  void (*start_trace_cb)(void*, pwr_tObjid, char*);
  void (*display_in_xnav_cb)(void*, pwr_tAttrRef*);
  void (*update_info_cb)(void*);
  void (*help_cb)(void*, const char*);
  void (*popup_menu_cb)(
      void*, pwr_tAttrRef, unsigned long, unsigned long, char*, int x, int y);
  int (*sound_cb)(void*, pwr_tAttrRef*);
  void (*pop_cb)(void*);
  int (*is_authorized_cb)(void*, unsigned int);
  EvList* eve;
  EvList* ala;
  EvList* blk;
  int connected;
  int ala_displayed;
  int eve_displayed;
  int blk_displayed;
  int beep;
  int eve_size;
  int ala_size;
  int blk_size;
  ev_sAlias alias_list[40];
  CoWow* wow;
  static Ev* ev;
  pwr_tMask pop_mask;
  int eventname_seg;
  XttMethodToolbar* eve_methodtoolbar;
  XttMethodToolbar* ala_methodtoolbar;
  XttMethodToolbar* eve_sup_methodtoolbar;
  XttMethodToolbar* ala_sup_methodtoolbar;
  EvAla* sala[20];
  int sala_cnt;
  EvEve* seve[20];
  int seve_cnt;
  int modified;

  virtual void map_eve(unsigned int options)
  {
  }
  virtual void map_ala(unsigned int options)
  {
  }
  virtual void map_blk(unsigned int options)
  {
  }
  virtual void unmap_eve()
  {
  }
  virtual void unmap_ala()
  {
  }
  virtual void unmap_blk()
  {
  }
  virtual void set_transient_eve(void* basewidget)
  {
  }
  virtual void set_transient_ala(void* basewidget)
  {
  }
  virtual void set_transient_blk(void* basewidget)
  {
  }
  virtual void set_title_ala(char* title)
  {
  }
  virtual EvAla* open_alarmlist_satellite(const char* title, pwr_tStatus* sts,
      int width, int height, int x, int y, pwr_tObjid view,
      unsigned int options = 0, void* widget = 0)
  {
    return 0;
  }
  virtual EvEve* open_eventlist_satellite(const char* title, pwr_tStatus* sts,
      int width, int height, int x, int y, pwr_tObjid view,
      unsigned int options = 0, void* widget = 0)
  {
    return 0;
  }

  int outunit_connect(pwr_tObjid user);
  void update(double scantime);
  int is_mapped_eve()
  {
    return eve_displayed;
  }
  int is_mapped_ala()
  {
    return ala_displayed;
  }
  int is_mapped_blk()
  {
    return blk_displayed;
  }
  int get_alarm_info(evlist_sAlarmInfo* info, int backward, int alarmsize);
  void ack_last_prio(unsigned long type, unsigned long prio, int backward, int timecheck);
  void ack_all();
  int get_last_not_acked_prio(
      mh_sEventId** id, unsigned long type, unsigned long prio);
  void create_aliaslist(void* up);
  char* name_to_alias(char* name);
  pwr_tStatus set_view(pwr_tOid view);
  void view_shift();
  int eve_export_events(const char *filename);

  void eve_activate_print();
  void ala_activate_print();
  void blk_activate_print();
  void eve_activate_export();
  void eve_activate_analyse();
  void ala_activate_ack_last();
  void eve_activate_ack_last();
  void eve_activate_ack_all();
  void eve_activate_help();
  void eve_activate_helpevent();
  void ala_activate_help();
  void ala_activate_helpevent();
  void blk_activate_help();

  static void eve_display_in_xnav_cb(void* ctx, pwr_tAttrRef* arp);
  static void ala_display_in_xnav_cb(void* ctx, pwr_tAttrRef* arp);
  static void blk_display_in_xnav_cb(void* ctx, pwr_tAttrRef* arp);
  static char* ev_name_to_alias_cb(void* ctx, char* name);
  static void eve_start_trace_cb(void* ctx, pwr_tObjid objid, char* name);
  static void ala_start_trace_cb(void* ctx, pwr_tObjid objid, char* name);
  static void blk_start_trace_cb(void* ctx, pwr_tObjid objid, char* name);
  static void ev_popup_menu_cb(void* ctx, pwr_tAttrRef attrref,
      unsigned long item_type, unsigned long utility, char* arg, int x, int y);
  static int ev_sound_cb(void* ctx, pwr_tAttrRef* attrref);
  static void eve_selection_changed_cb(void* ctx);
  static void ala_selection_changed_cb(void* ctx);
  static void ala_help_cb(void* ctx, const char* key);
  static int ala_is_authorized_cb(void* ctx, unsigned int access);
  static int sala_acknowledge_cb(void* ctx, mh_sEventId* id);
  static void sala_copy_list_cb(void* ctx, EvList* evl);
  static void sala_close_cb(void* ctx, EvAla* sala);
  static int seve_acknowledge_cb(void* ctx, mh_sEventId* id);
  static void seve_copy_list_cb(void* ctx, EvList* evl);
  static void seve_close_cb(void* ctx, EvEve* seve);
  static void help_event_cb(void* ctx, void* item);
  static void eve_export_file_selected_cb(void *ctx, char *filename, wow_eFileSelType file_type);

  static pwr_tStatus mh_ack_bc(mh_sAck* MsgP);
  static pwr_tStatus mh_return_bc(mh_sReturn* MsgP);
  static pwr_tStatus mh_alarm_bc(mh_sMessage* MsgP);
  static pwr_tStatus mh_block_bc(mh_sBlock* MsgP);
  static pwr_tStatus mh_cancel_bc(mh_sReturn* MsgP);
  static pwr_tStatus mh_info_bc(mh_sMessage* MsgP);
  static pwr_tStatus mh_clear_alarmlist_bc(pwr_tNodeIndex nix);
  static pwr_tStatus mh_clear_blocklist_bc(pwr_tNodeIndex nix);
  static pwr_tStatus mh_alarmstatus_bc(mh_sAlarmStatus* MsgP);
};

#endif
