/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_xatt.cpp -- Display object attributes */

#include <stdlib.h>

#include "co_cdh.h"
#include "co_dcli.h"
#include "co_lng.h"
#include "co_string.h"
#include "xtt_xatt.h"
#include "xtt_xattnav.h"
#include "xtt_item.h"
#include "rt_xatt_msg.h"

void XAtt::message_cb(void* xatt, char severity, const char* message)
{
  ((XAtt*)xatt)->message(severity, message);
}

void XAtt::change_value_cb(void* xatt)
{
  ((XAtt*)xatt)->change_value(1);
}

//
//  Callbackfunctions from menu entries
//
void XAtt::activate_display_object()
{
  if (call_method_cb) {
    (call_method_cb)(parent_ctx, "$Object-RtNavigator",
        "$Object-RtNavigatorFilter", objar, xmenu_eItemType_Object,
        xmenu_mUtility_AttrEditor, NULL);
  }
}

void XAtt::activate_show_cross()
{
  if (call_method_cb) {
    (call_method_cb)(parent_ctx, "$Object-OpenCrossref",
        "$Object-OpenCrossrefFilter", objar, xmenu_eItemType_Object,
        xmenu_mUtility_AttrEditor, NULL);
  }
}

void XAtt::activate_open_classgraph()
{
  if (call_method_cb) {
    (call_method_cb)(parent_ctx, "$Object-OpenObjectGraph",
        "$Object-OpenObjectGraphFilter", objar, xmenu_eItemType_Object,
        xmenu_mUtility_AttrEditor, NULL);
  }
}

void XAtt::activate_open_plc()
{
  if (call_method_cb) {
    (call_method_cb)(parent_ctx, "$Object-OpenTrace", "$Object-OpenTraceFilter",
        objar, xmenu_eItemType_Object, xmenu_mUtility_AttrEditor, NULL);
  }
}

void XAtt::activate_print()
{
  print();
}

void XAtt::activate_help()
{
  // Not yet implemented
}

int XAtt::open_changevalue(char* name)
{
  int sts;

  sts = ((XAttNav*)xattnav)->select_by_name(name);
  if (EVEN(sts))
    return sts;

  change_value(0);
  return XATT__SUCCESS;
}

void XAtt::swap(int mode)
{
  xattnav->swap(mode);
}

XAtt::~XAtt()
{
}

XAtt::XAtt(void* xa_parent_ctx, pwr_sAttrRef* xa_objar, int xa_advanced_user,
    int* xa_sts)
    : parent_ctx(xa_parent_ctx), objar(*xa_objar), input_open(0),
      input_multiline(0), close_cb(0), redraw_cb(0), client_data(0)
{
  *xa_sts = XATT__SUCCESS;
}

void XAtt::xatt_popup_menu_cb(void* ctx, pwr_sAttrRef attrref,
    unsigned long item_type, unsigned long utility, char* arg, int x, int y)
{
  if (((XAtt*)ctx)->popup_menu_cb)
    (((XAtt*)ctx)->popup_menu_cb)(
        ((XAtt*)ctx)->parent_ctx, attrref, item_type, utility, arg, x, y);
}

int XAtt::xatt_is_authorized_cb(void* ctx, unsigned int access)
{
  XAtt* xatt = (XAtt*)ctx;

  if (xatt->is_authorized_cb)
    return (xatt->is_authorized_cb)(xatt->parent_ctx, access);
  return 0;
}

int XAtt::init_cb(void* ctx)
{
  XAtt* xatt = (XAtt*)ctx;

  return xatt->object_attr();
}

int XAtt::object_attr()
{
  int sts;
  pwr_tClassId classid;
  unsigned long elements;
  Item* item;
  int attr_exist;
  int i;
  gdh_sAttrDef* bd;
  int rows;
  pwr_tAName aname;
  pwr_tAName attr_name;
  pwr_tAName name;
  char* s;

  brow_SetNodraw(xattnav->brow->ctx);

  // Get objid for rtbody or sysbody

  sts = gdh_AttrrefToName(&objar, name, sizeof(name), cdh_mNName);
  if (EVEN(sts))
    return sts;

  s = strchr(name, '.');
  if (s != 0)
    strcpy(aname, s + 1);
  else
    strcpy(aname, "");

  sts = gdh_GetAttrRefTid(&objar, &classid);
  if (EVEN(sts))
    return sts;

  sts = gdh_GetObjectBodyDef(classid, &bd, &rows, objar.Objid);
  if (EVEN(sts))
    return sts;

  for (i = 0; i < rows; i++) {
    if (bd[i].flags & gdh_mAttrDef_Shadowed)
      continue;
    if (bd[i].attr->Param.Info.Flags & PWR_MASK_RTVIRTUAL
        || bd[i].attr->Param.Info.Flags & PWR_MASK_RTHIDE
        || (bd[i].attr->Param.Info.Flags & PWR_MASK_PRIVATE
               && bd[i].attr->Param.Info.Flags & PWR_MASK_POINTER))
      continue;
    if (bd[i].attr->Param.Info.Type == pwr_eType_CastId
        || bd[i].attr->Param.Info.Type == pwr_eType_DisableAttr)
      continue;

    if (bd[i].attr->Param.Info.Flags & PWR_MASK_DISABLEATTR) {
      pwr_sAttrRef aaref;
      pwr_tDisableAttr disabled;

      sts = gdh_ArefANameToAref(&objar, bd[i].attrName, &aaref);
      if (EVEN(sts))
        return sts;

      sts = gdh_ArefDisabled(&aaref, &disabled);
      if (EVEN(sts))
        return sts;

      if (disabled)
        continue;
    }

    if (objar.Flags.b.CastAttr)
      cdh_SuppressSuper(attr_name, bd[i].attrName);
    else
      strcpy(attr_name, bd[i].attrName);

    if (streq(aname, ""))
      strcpy(name, attr_name);
    else {
      strcpy(name, aname);
      strcat(name, ".");
      strcat(name, attr_name);
    }

    elements = 1;
    if (bd[i].attr->Param.Info.Flags & PWR_MASK_ARRAY) {
      attr_exist = 1;
      item = (Item*)new ItemAttrArray(xattnav->brow, objar.Objid, 0,
          flow_eDest_IntoLast, name, bd[i].attr->Param.Info.Elements,
          bd[i].attr->Param.Info.Type, bd[i].attr->Param.TypeRef,
          bd[i].attr->Param.Info.Size, bd[i].attr->Param.Info.Flags, 0);
    } else if (bd[i].attr->Param.Info.Flags & PWR_MASK_CLASS) {
      attr_exist = 1;
      item = (Item*)new ItemAttrObject(xattnav->brow, objar.Objid, 0,
          flow_eDest_IntoLast, name, bd[i].attr->Param.TypeRef,
          bd[i].attr->Param.Info.Size, bd[i].attr->Param.Info.Flags, 0, 0);
    } else {
      attr_exist = 1;
      item = (Item*)new ItemAttr(xattnav->brow, objar.Objid, 0,
          flow_eDest_IntoLast, name, bd[i].attr->Param.Info.Type,
          bd[i].attr->Param.TypeRef, bd[i].attr->Param.Info.Size,
          bd[i].attr->Param.Info.Flags, 0, item_eDisplayType_Attr);
    }
  }
  free((char*)bd);

  brow_ResetNodraw(xattnav->brow->ctx);
  brow_Redraw(xattnav->brow->ctx, 0);
  return XATT__SUCCESS;
}
