/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_xattnav_h
#define xtt_xattnav_h

/* xtt_xattnav.h -- */

#include "co_nav_crr.h"

#include "flow_browapi.h"

#include "xtt_xnav_brow.h"

#define xattnav_cVersion "X3.3b"
#define XATTNAV_BROW_MAX 25

typedef enum {
  xattnav_eType_Object,
  xattnav_eType_CrossRef,
  xattnav_eType_Collect,
  xattnav_eType_CollectSignals
} xattnav_eType;

class CoWow;
class CoWowTimer;

class XAttNav {
public:
  XAttNav(void* xa_parent_ctx, xattnav_eType xa_type, const char* xa_name,
      pwr_sAttrRef* xa_objar, int xa_advanced_user, void* xa_userdata,
      pwr_tStatus* status);
  virtual ~XAttNav();

  void* parent_ctx;
  xattnav_eType type;
  char name[80];
  XNavBrow* brow;
  pwr_sAttrRef objar;
  int advanced_user;
  void* userdata;
  int bypass;
  CoWowTimer* trace_timerid;
  int trace_started;
  void (*message_cb)(void*, char, const char*);
  void (*close_cb)(void*);
  void (*change_value_cb)(void*);
  void (*popup_menu_cb)(
      void*, pwr_sAttrRef, unsigned long, unsigned long, char*, int x, int y);
  void (*start_trace_cb)(void*, pwr_tObjid, char*);
  int (*is_authorized_cb)(void*, unsigned int);
  int (*init_cb)(void*);
  int displayed;
  CoWow* wow;
  int scantime;

  virtual void popup_position(int x_event, int y_event, int* x, int* y)
  {
  }
  virtual void set_inputfocus()
  {
  }

  void start_trace(pwr_tObjid Objid, char* object_str);
  int set_attr_value(brow_tObject node, char* name, char* value_str);
  int check_attr(int* multiline, brow_tObject* node, char* name,
      char** init_value, int* size);
  void message(char sev, const char* text);
  void force_trace_scan();
  int object_exist(brow_tObject object);
  void redraw();
  void enable_events();
  int select_by_name(char* name);
  void start_trace();
  void swap(int mode);
  int get_select(pwr_tAttrRef* arp);
  void set_scantime(int t)
  {
    scantime = t;
  }
  int get_scantime()
  {
    return scantime;
  }
  void zoom(double zoom_factor);
  void get_zoom(double* zoom_factor);
  void unzoom();

  static void trace_scan(void* data);
  static int brow_cb(FlowCtx* ctx, flow_tEvent event);
  static int trace_connect_bc(brow_tObject object, char* name, char* attr,
      flow_eTraceType type, void** p);
  static int trace_disconnect_bc(brow_tObject object);
  static int trace_scan_bc(brow_tObject object, void* p);
  static int init_brow_cb(FlowCtx* fctx, void* client_data);
};

#endif
