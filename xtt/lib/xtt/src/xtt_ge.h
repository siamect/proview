/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef xtt_ge_h
#define xtt_ge_h

#include "glow.h"

#include "co_lng.h"

#include "xtt_utility.h"

class Graph;
class CoWow;

class XttGe : XttUtility {
public:
  void* parent_ctx;
  pwr_tAName name;
  Graph* graph;
  pwr_tFileName filename;
  int scrollbar;
  int navigator;
  int menu;
  void* current_value_object;
  void* current_confirm_object;
  int value_input_open;
  int confirm_open;
  int (*command_cb)(void*, char*, char*, void*);
  void (*close_cb)(void*, void*);
  void (*help_cb)(void*, const char* key);
  void (*display_in_xnav_cb)(void*, pwr_sAttrRef*);
  int (*is_authorized_cb)(void*, unsigned int);
  void (*popup_menu_cb)(
      void*, pwr_sAttrRef, unsigned long, unsigned long, char*, int x, int y);
  int (*call_method_cb)(void*, const char*, const char*, pwr_sAttrRef,
      unsigned long, unsigned long, char*);
  int (*get_current_objects_cb)(void*, pwr_sAttrRef**, int**);
  int (*sound_cb)(void*, pwr_tAttrRef*);
  void (*eventlog_cb)(void*, void*, int, void*, unsigned int);
  void (*keyboard_cb)(void*, void*, int, int);
  void (*namechanged_cb)(void*, void*, char*);
  int (*get_select_cb)(void*, char*, pwr_tTypeId*);
  int width;
  int height;
  unsigned int options;
  int color_theme;
  CoWow* wow;

  XttGe(void* parent_ctx, const char* name, const char* filename, int scrollbar,
      int menu, int navigator, int width, int height, int x, int y,
      double scan_time, const char* object_name, int use_default_access,
      unsigned int access, unsigned int options, int color_theme,
      int (*xg_command_cb)(void*, char*, char*, void*),
      int (*xg_get_current_objects_cb)(void*, pwr_sAttrRef**, int**),
      int (*xg_is_authorized_cb)(void*, unsigned int),
      void (*xg_keyboard_cb)(void*, void*, int, int));
  virtual ~XttGe();

  virtual void pop()
  {
  }
  virtual void iconify()
  {
  }
  virtual void set_title(char *t)
  {
  }
  virtual void set_size(int width, int height)
  {
  }
  virtual void confirm_reply(int ok)
  {
  }
  virtual void* get_widget()
  {
    return 0;
  }
  virtual void iconify(int val)
  {
  }
  virtual void set_below(int val)
  {
  }

  xtt_eUtility get_type()
  {
    return xtt_eUtility_Graph;
  }
  void message(char severity, const char* msg);
  void print();
  void export_image(char* filename);
  int set_object_focus(const char* name, int empty);
  int set_folder_index(const char* name, int idx);
  int set_subwindow_source(const char* name, char* source, char* object);
  void swap(int mode);
  void update_color_theme(int color_theme);
  void event_exec(int type, void* event, unsigned int size);
  void set_text_coding(lng_eCoding coding);
  int key_pressed(int key);
  void close_input_all();
  int get_object_name(unsigned int idx, int size, char* name);
  int dash_insert(char *name, pwr_tTypeId type);
  int in_edit_mode();
  void signal_send(char* signalname);
  void activate_edit(int edit);
  void activate_open();
  void activate_add();
  void activate_delete();
  void activate_copy();
  void activate_paste();
  void activate_connect();
  void activate_merge();
  void activate_clear();
  void activate_cellattributes();
  void activate_graphattributes();
  void activate_help();
  void activate_save();
  void activate_saveas();
  void activate_setcolortheme();
  void activate_exit_modified();

  static void graph_init_cb(void* client_data);
  static int graph_close_cb(void* client_data);
  static int ge_command_cb(void* ge_ctx, char* command, char* script);
  static int ge_sound_cb(void* ge_ctx, pwr_tAttrRef* aref);
  static void ge_display_in_xnav_cb(void* ge_ctx, pwr_sAttrRef* arp);
  static void ge_popup_menu_cb(void* ge_ctx, pwr_sAttrRef attrref,
      unsigned long item_type, unsigned long utility, char* arg, int x, int y);
  static int ge_call_method_cb(void* ge_ctx, char* method, char* filter,
      pwr_sAttrRef attrref, unsigned long item_type, unsigned long utility,
      char* arg);
  static int ge_is_authorized_cb(void* ge_ctx, unsigned int access);
  static int ge_get_current_objects_cb(
      void* ge_ctx, pwr_sAttrRef** alist, int** is_alist);
  static int ge_get_rtplant_select_cb(
      void* ge_ctx, char* attr_name, int size, pwr_tTypeId *type);
  static void ge_eventlog_cb(void* ge_ctx, void* value, unsigned int size);
  static void ge_keyboard_cb(void* ge_ctx, int action, int type);
  static void message_cb(void* ctx, char severity, const char* msg);
  static void ge_resize_cb(void* ge_ctx, int width, int height);
  static void eventlog_enable(int enable);
  static void file_selected_cb(void* ctx, void* data, char* text);
  static void ge_colortheme_selector_ok_cb(void* ctx, char* text, int ok_pressed);
};

#endif
