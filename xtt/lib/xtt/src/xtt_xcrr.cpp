/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_xcrr.cpp -- Display object crossreferences */

#include <stdlib.h>

#include "co_cdh.h"
#include "co_dcli.h"
#include "co_lng.h"

#include "rt_xatt_msg.h"
#include "rt_xnav_msg.h"

#include "xtt_xattnav.h"
#include "xtt_xcrr.h"
#include "xtt_xnav.h"
#include "xtt_xnav_crr.h"

XCrr::~XCrr()
{
}

XCrr::XCrr(void* xa_parent_ctx, pwr_sAttrRef* xa_objar, int xa_advanced_user,
    int* xa_sts)
    : parent_ctx(xa_parent_ctx), objar(*xa_objar), input_open(0),
      input_multiline(0), close_cb(0), redraw_cb(0), popup_menu_cb(0),
      start_trace_cb(0), client_data(0)
{
  *xa_sts = XATT__SUCCESS;
}

void XCrr::xcrr_popup_menu_cb(void* ctx, pwr_sAttrRef attrref,
    unsigned long item_type, unsigned long utility, char* arg, int x, int y)
{
  if (((XCrr*)ctx)->popup_menu_cb)
    (((XCrr*)ctx)->popup_menu_cb)(
        ((XCrr*)ctx)->parent_ctx, attrref, item_type, utility, arg, x, y);
}

void XCrr::xcrr_start_trace_cb(void* ctx, pwr_tObjid objid, char* name)
{
  if (((XCrr*)ctx)->start_trace_cb)
    ((XCrr*)ctx)->start_trace_cb(((XCrr*)ctx)->parent_ctx, objid, name);
}

void XCrr::xcrr_close_cb(void* ctx)
{
  if (((XCrr*)ctx)->close_cb)
    ((XCrr*)ctx)->close_cb(((XCrr*)ctx)->parent_ctx, ctx);
}

int XCrr::init_cb(void* ctx)
{
  XCrr* xcrr = (XCrr*)ctx;

  return xcrr->crossref();
}

int XCrr::crossref()
{
  int sts;
  pwr_tAName name;
  pwr_tClassId classid;
  char file[20] = "*";

  sts = gdh_AttrrefToName(&objar, name, sizeof(name), cdh_mNName);
  if (EVEN(sts))
    return sts;

  sts = gdh_GetAttrRefTid(&objar, &classid);
  if (EVEN(sts))
    return sts;

  switch (classid) {
  case pwr_cClass_Di:
  case pwr_cClass_Dv:
  case pwr_cClass_Do:
  case pwr_cClass_Po:
  case pwr_cClass_Av:
  case pwr_cClass_Ai:
  case pwr_cClass_Ao:
  case pwr_cClass_Iv:
  case pwr_cClass_Ii:
  case pwr_cClass_Io:
  case pwr_cClass_Co:
  case pwr_cClass_Sv:
  case pwr_cClass_ATv:
  case pwr_cClass_DTv:
    sts = xnav_crr_signal(xcrrnav->brow, file, name, NULL);
    break;
  default:
    /* Not a signal */
    sts = xnav_crr_object(xcrrnav->brow, file, name, NULL);
  }
  // if ( EVEN(sts))
  //  xnav->message(' ', XNav::get_message(sts));

  return XATT__SUCCESS;
}
