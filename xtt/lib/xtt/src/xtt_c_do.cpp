/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_c_do.cpp -- xtt methods of the Do class. */

#include "co_cdh.h"

#include "xtt_xnav.h"
#include "rt_xnav_msg.h"

static pwr_tStatus SetFilter(xmenu_sMenuCall* ip)
{
  if (!((XNav*)ip->EditorContext)->is_authorized(pwr_mAccess_System, 0))
    return XNAV__INVISIBLE;
  return XNAV__SUCCESS;
}

static pwr_tStatus InvertOn(xmenu_sMenuCall* ip)
{
  pwr_tAName name;
  pwr_tStatus sts;
  char cmd[430];

  sts = gdh_AttrrefToName(&ip->Pointed, name, sizeof(name), cdh_mNName);
  if (EVEN(sts))
    return sts;

  snprintf(cmd, sizeof(cmd), "set sig inv/on/name=%s", name);

  ((XNav*)ip->EditorContext)->command(cmd);
  ((XNav*)ip->EditorContext)->refresh();
  return 1;
}

static pwr_tStatus InvertOff(xmenu_sMenuCall* ip)
{
  pwr_tAName name;
  pwr_tStatus sts;
  char cmd[430];

  sts = gdh_AttrrefToName(&ip->Pointed, name, sizeof(name), cdh_mNName);
  if (EVEN(sts))
    return sts;

  snprintf(cmd, sizeof(cmd), "set sig inv/off/name=%s", name);

  ((XNav*)ip->EditorContext)->command(cmd);
  ((XNav*)ip->EditorContext)->refresh();
  return 1;
}

// Test
static pwr_tStatus TestOn(xmenu_sMenuCall* ip)
{
  pwr_tAName name;
  pwr_tStatus sts;
  char cmd[430];

  sts = gdh_AttrrefToName(&ip->Pointed, name, sizeof(name), cdh_mNName);
  if (EVEN(sts))
    return sts;

  snprintf(cmd, sizeof(cmd), "set sig test/on/name=%s", name);

  ((XNav*)ip->EditorContext)->command(cmd);
  ((XNav*)ip->EditorContext)->refresh();
  return 1;
}

static pwr_tStatus TestOff(xmenu_sMenuCall* ip)
{
  pwr_tAName name;
  pwr_tStatus sts;
  char cmd[430];

  sts = gdh_AttrrefToName(&ip->Pointed, name, sizeof(name), cdh_mNName);
  if (EVEN(sts))
    return sts;

  snprintf(cmd, sizeof(cmd), "set sig test/off/name=%s", name);

  ((XNav*)ip->EditorContext)->command(cmd);
  ((XNav*)ip->EditorContext)->refresh();
  return 1;
}

// Testvalue
static pwr_tStatus TestValueTrue(xmenu_sMenuCall* ip)
{
  pwr_tAName name;
  pwr_tStatus sts;
  char cmd[430];

  sts = gdh_AttrrefToName(&ip->Pointed, name, sizeof(name), cdh_mNName);
  if (EVEN(sts))
    return sts;

  snprintf(cmd, sizeof(cmd), "set sig testvalue/on/name=%s", name);

  ((XNav*)ip->EditorContext)->command(cmd);
  ((XNav*)ip->EditorContext)->refresh();
  return 1;
}

static pwr_tStatus TestValueFalse(xmenu_sMenuCall* ip)
{
  pwr_tAName name;
  pwr_tStatus sts;
  char cmd[430];

  sts = gdh_AttrrefToName(&ip->Pointed, name, sizeof(name), cdh_mNName);
  if (EVEN(sts))
    return sts;

  snprintf(cmd, sizeof(cmd), "set sig testvalue/off/name=%s", name);

  ((XNav*)ip->EditorContext)->command(cmd);
  ((XNav*)ip->EditorContext)->refresh();
  return 1;
}

/*----------------------------------------------------------------------------*\
  Every method to be exported to xtt should be registred here.
\*----------------------------------------------------------------------------*/

pwr_dExport pwr_BindXttMethods(Do)
    = { pwr_BindXttMethod(InvertOn), pwr_BindXttMethod(InvertOff),
        pwr_BindXttMethod(TestOn), pwr_BindXttMethod(TestOff),
        pwr_BindXttMethod(TestValueTrue), pwr_BindXttMethod(TestValueFalse),
        pwr_BindXttMethod(SetFilter), pwr_NullMethod };
