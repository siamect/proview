/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_xnav_crr.cpp
   This module contains routines for displaying crossreferences in xtt. */

/*_Include files_________________________________________________________*/

#include <string.h>
#include <stdlib.h>

#include "rt_gdh_msg.h"
#include "co_cdh.h"
#include "co_dcli.h"
#include "co_ccm_msg.h"
#include "xtt_trace.h"
#include "xtt_item.h"
#include "xtt_xnav_crr.h"
#include "co_nav_crr.h"
#include "co_dcli_msg.h"

static void xnav_crr_insert_cb(void* ctx, void* parent_node,
    navc_eItemType item_type, char* text1, char* text2, int write)
{
  XNavBrow* brow = (XNavBrow*)ctx;

  switch (item_type) {
  case navc_eItemType_Crossref:
    new ItemCrossref(
        brow, text1, text2, write, parent_node, flow_eDest_IntoLast);
    break;
  case navc_eItemType_Header:
    new ItemHeader(brow, "crr", text1, parent_node, flow_eDest_IntoLast);
    break;
  case navc_eItemType_Text:
    new ItemText(brow, "crr", text1, parent_node, flow_eDest_IntoLast);
    break;
  }
}

int xnav_crr_name_to_objid_cb(void* ctx, char* name, pwr_tObjid* objid)
{
  return gdh_NameToObjid(name, objid);
}

int xnav_crr_get_volume_cb(void* ctx, pwr_tVid* vid, pwr_tVid prev_vid)
{
  int sts;
  pwr_tObjid objid;
  pwr_tVid v;
  gdh_sVolumeInfo info;

  sts = gdh_GetNodeObject(0, &objid);
  if (EVEN(sts))
    return sts;

  if (prev_vid == 0) {
    *vid = objid.vid;
    return XNAV__SUCCESS;
  }

  int next = 0;
  for (sts = gdh_GetVolumeList(&v); ODD(sts); sts = gdh_GetNextVolume(v, &v)) {
    int volume_found = 0;

    sts = gdh_GetVolumeInfo(v, &info);
    if (EVEN(sts))
      return sts;

    switch (info.cid) {
    case pwr_eClass_SubVolume:
    case pwr_eClass_SharedVolume:
      volume_found = 1;
      break;
    default:;
    }
    if (!volume_found)
      continue;

    if (prev_vid == objid.vid) {
      *vid = v;
      return XNAV__SUCCESS;
    }

    if (prev_vid == v) {
      next = 1;
    } else if (next) {
      *vid = v;
      return XNAV__SUCCESS;
    }
  }
  return XNAV__NOSUCHVOLUME;
}

int xnav_crr_signal(
    XNavBrow* brow, char* filename, char* signalname, brow_tNode parent_node)
{
  int sts;
  NavCrr* navcrr = new NavCrr(brow, parent_node);
  navcrr->insert_cb = xnav_crr_insert_cb;
  navcrr->name_to_objid_cb = xnav_crr_name_to_objid_cb;
  navcrr->get_volume_cb = xnav_crr_get_volume_cb;

  sts = navcrr->crr_signal(filename, signalname);

  delete navcrr;
  return sts;
}

int xnav_crr_object(
    XNavBrow* brow, char* filename, char* objectname, brow_tNode parent_node)
{
  int sts;
  NavCrr* navcrr = new NavCrr(brow, parent_node);
  navcrr->insert_cb = xnav_crr_insert_cb;
  navcrr->name_to_objid_cb = xnav_crr_name_to_objid_cb;
  navcrr->get_volume_cb = xnav_crr_get_volume_cb;

  sts = navcrr->crr_object(filename, objectname);

  delete navcrr;
  return sts;
}

int xnav_crr_code(XNavBrow* brow, char* filename, char* str, int brief,
    int func, int case_sensitive)
{
  int sts;
  NavCrr* navcrr = new NavCrr(brow, NULL);
  navcrr->insert_cb = xnav_crr_insert_cb;
  navcrr->name_to_objid_cb = xnav_crr_name_to_objid_cb;
  navcrr->get_volume_cb = xnav_crr_get_volume_cb;

  sts = navcrr->crr_code(filename, str, brief, func, case_sensitive);

  delete navcrr;
  return sts;
}
