/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_evala.cpp -- Alarm window in xtt */

#include <stdlib.h>

#include "pwr_privilege.h"
#include "co_cdh.h"
#include "co_time.h"
#include "co_dcli.h"
#include "cow_wow.h"
#include "rt_gdh.h"
#include "rt_mh_util.h"

#include "xtt_evala.h"
#include "xtt_methodtoolbar.h"
#include "rt_xnav_msg.h"

EvAla::EvAla(void* ev_parent_ctx, char* ala_name, pwr_tObjid ev_user,
    int ev_eventname_seg, int ev_width, int ev_height, int ev_x, int ev_y,
    pwr_tObjid ev_view, unsigned int ev_options, pwr_tStatus* status)
    : parent_ctx(ev_parent_ctx), user(ev_user), eventname_seg(ev_eventname_seg),
      width(ev_width), height(ev_height), x(ev_x), y(ev_y), view(ev_view),
      options(ev_options), start_trace_cb(0), display_in_xnav_cb(0), help_cb(0),
      popup_menu_cb(0), sound_cb(0), pop_cb(0), is_authorized_cb(0),
      acknowledge_cb(0), name_to_alias_cb(0), copy_list_cb(0), close_cb(0),
      ala(NULL), ala_displayed(0), list_copied(0)
{
}

//
//  Delete ev
//
EvAla::~EvAla()
{
  if (close_cb)
    close_cb(parent_ctx, this);
}

void EvAla::init()
{
  if (!list_copied && ala->browbase && copy_list_cb) {
    list_copied = 1;
    ala->set_nodraw();
    (copy_list_cb)(parent_ctx, ala);
    ala->reset_nodraw();
    if (!cdh_ObjidIsNull(view))
      set_view(view);
  }
}

void EvAla::ala_init_cb(void* ctx)
{
  EvAla* ev = (EvAla*)ctx;

  if (!ev->list_copied && ev->copy_list_cb) {
    ev->list_copied = 1;
    ev->ala->set_nodraw();
    (ev->copy_list_cb)(ev->parent_ctx, ev->ala);
    ev->ala->reset_nodraw();
    if (!cdh_ObjidIsNull(ev->view))
      ev->set_view(ev->view);
  }
}

void EvAla::ala_start_trace_cb(void* ctx, pwr_tObjid objid, char* name)
{
  if (((EvAla*)ctx)->start_trace_cb)
    ((EvAla*)ctx)->start_trace_cb(((EvAla*)ctx)->parent_ctx, objid, name);
}

void EvAla::ala_popup_menu_cb(void* ctx, pwr_tAttrRef attrref,
    unsigned long item_type, unsigned long utility, char* arg, int x, int y)
{
  if (((EvAla*)ctx)->popup_menu_cb)
    (((EvAla*)ctx)->popup_menu_cb)(
        ((EvAla*)ctx)->parent_ctx, attrref, item_type, utility, arg, x, y);
}

int EvAla::ala_sound_cb(void* ctx, pwr_tAttrRef* attrref)
{
  if (((EvAla*)ctx)->sound_cb)
    return (((EvAla*)ctx)->sound_cb)(((EvAla*)ctx)->parent_ctx, attrref);
  return 0;
}

void EvAla::ala_selection_changed_cb(void* ctx)
{
  ((EvAla*)ctx)->ala_methodtoolbar->set_sensitive();
  ((EvAla*)ctx)->ala_sup_methodtoolbar->set_sensitive();
}

void EvAla::ala_display_in_xnav_cb(void* ctx, pwr_tAttrRef* arp)
{
  if (((EvAla*)ctx)->display_in_xnav_cb)
    ((EvAla*)ctx)->display_in_xnav_cb(((EvAla*)ctx)->parent_ctx, arp);
}

char* EvAla::ala_name_to_alias_cb(void* ctx, char* name)
{
  return ((EvAla*)ctx)->name_to_alias_cb(((EvAla*)ctx)->parent_ctx, name);
}

void EvAla::help_event_cb(void* ctx, void* item)
{
  ItemAlarm* aitem = (ItemAlarm*)item;

  switch (aitem->type) {
  case evlist_eItemType_Alarm:
    ((EvAla*)ctx)->wow->DisplayText("Event MoreText", aitem->eventmoretext);
    break;
  default:
    return;
  }
}

void EvAla::ala_activate_print()
{
  char title[80];

  strcpy(title, Lng::translate("Alarm List"));
  ala->print(title);
}

void EvAla::ala_activate_ack_last()
{
  mh_sEventId* id;
  int sts;

  if (is_authorized_cb
      && !is_authorized_cb(
             parent_ctx, pwr_mAccess_RtEventsAck | pwr_mAccess_System))
    return;

  if (ala->brow == ala->browbase) {
    // Flat view, acknowledge last
    sts = ala->get_last_not_acked(&id);
    if (EVEN(sts))
      return;
  } else {
    // Tree view, acknowledge selected
    ItemAlarm* item;
    pwr_tAName eventname;

    sts = ala->get_selected_event(eventname, &item);
    if (EVEN(sts))
      return;

    switch (item->type) {
    case evlist_eItemType_Alarm:
      id = &item->eventid;
      break;
    default:
      return;
    }
  }

  mh_sEventId lid = *id;
  ala->ack(id);
  acknowledge_cb(parent_ctx, &lid);
}

void EvAla::ala_activate_ack_all()
{
  if (is_authorized_cb
      && !is_authorized_cb(
             parent_ctx, pwr_mAccess_RtEventsAck | pwr_mAccess_System))
    return;

  ack_all();
}

void EvAla::ala_activate_help()
{
  if (help_cb)
    (help_cb)(parent_ctx, "opg_alarmlist");
}

void EvAla::ala_activate_helpevent()
{
  char eventname[80];
  int sts;
  ItemAlarm* item;

  if (help_cb) {
    sts = ala->get_selected_event(eventname, &item);
    if (ODD(sts)) {
      wow->DisplayText(eventname, item->eventmoretext);
    }
  }
}

void EvAla::update()
{
  if (ala->browbase)
    ala->flash();
}

int EvAla::event_delete(mh_sEventId* id)
{
  return ala->event_delete(id);
}

void EvAla::ack_last_prio(unsigned long type, unsigned long prio)
{
  mh_sEventId* id;
  int sts;

  if (is_authorized_cb
      && !is_authorized_cb(
             parent_ctx, pwr_mAccess_RtEventsAck | pwr_mAccess_System))
    return;

  sts = ala->get_last_not_acked_prio(&id, type, prio, 0, 0);
  if (ODD(sts)) {
    mh_sEventId lid = *id;

    ala->ack(id);
    acknowledge_cb(parent_ctx, &lid);
  }
}

void EvAla::ack_all()
{
  mh_sEventId* id;
  int sts;

  if (is_authorized_cb
      && !is_authorized_cb(
             parent_ctx, pwr_mAccess_RtEventsAck | pwr_mAccess_System))
    return;

  sts = ala->get_last_not_acked(&id);
  while (ODD(sts)) {
    mh_sEventId lid = *id;
    ala->ack(id);
    acknowledge_cb(parent_ctx, &lid);

    sts = ala->get_last_not_acked(&id);
  }
}

int EvAla::get_last_not_acked_prio(
    mh_sEventId** id, unsigned long type, unsigned long prio)
{
  return ala->get_last_not_acked_prio(id, type, prio, 0, 0);
}

pwr_tStatus EvAla::mh_ack(mh_sAck* MsgP)
{
  ala->event_ack(MsgP);
  return 1;
}

pwr_tStatus EvAla::mh_return(mh_sReturn* MsgP)
{
  ala->event_return(MsgP);
  return 1;
}

pwr_tStatus EvAla::mh_alarm(mh_sMessage* MsgP)
{
  ala->event_alarm(MsgP);
  return 1;
}

pwr_tStatus EvAla::mh_cancel(mh_sReturn* MsgP)
{
  ala->event_cancel(MsgP);
  return 1;
}

pwr_tStatus EvAla::mh_info(mh_sMessage* MsgP)
{
  ala->event_info(MsgP);
  return 1;
}

pwr_tStatus EvAla::mh_clear_alarmlist(pwr_tNodeIndex nix)
{
  ala->event_clear_alarmlist(nix);
  return 1;
}

pwr_tStatus EvAla::set_view(pwr_tOid view)
{
  pwr_tStatus sts;

  sts = ala->set_view(view);
  if (ODD(sts)) {
    pwr_tString80 name;

    if (cdh_ObjidIsNull(view)) {
      strcpy(name, "Alarm List");
    } else {
      pwr_tAttrRef name_ar, ar;

      ar = cdh_ObjidToAref(view);
      sts = gdh_ArefANameToAref(&ar, "Name", &name_ar);
      if (EVEN(sts))
        return sts;

      sts = gdh_GetObjectInfoAttrref(&name_ar, name, sizeof(name));
      if (EVEN(sts))
        return sts;
    }
    set_title_ala(name);
  }
  return sts;
}

void EvAla::view_shift()
{
  pwr_sClass_OpPlace* opp;
  pwr_tStatus sts;

  sts = gdh_ObjidToPointer(user, (pwr_tAddress*)&opp);
  if (EVEN(sts))
    return;

  if (cdh_ObjidIsNull(ala->current_view)) {
    set_view(opp->AlarmViews[0]);
  } else {
    for (unsigned int i = 0;
         i < sizeof(opp->AlarmViews) / sizeof(opp->AlarmViews[0]); i++) {
      if (cdh_ObjidIsEqual(ala->current_view, opp->AlarmViews[i])) {
        if (i == sizeof(opp->AlarmViews) / sizeof(opp->AlarmViews[0]) - 1)
          set_view(pwr_cNObjid);
        else
          set_view(opp->AlarmViews[i + 1]);
        break;
      }
    }
  }
}
